{"version":3,"names":["RESULT_CODE","CDP_DECLARE","DECLARE_ERROR_CODE","getComputedStyle","safe","globalThis","getTransformMatrixValues","el","style","m11","m22","m33","m41","m42","m43","DOMMatrixReadOnly","transform","translateX","translateY","translateZ","scaleX","scaleY","scaleZ","setTransformTransition","prop","msec","timingFunction","animation","setProperty","clearTransition","removeProperty","isFunction","i18n","t","post","noop","styleCore","styleButton","_config","NAMESPACE","WRAPPER_CLASS","WRAPPER_SELECTOR","SCROLL_MAP_CLASS","SCROLL_MAP_SELECTOR","INACTIVE_CLASS","INACTIVE_CLASS_SELECTOR","RECYCLE_CLASS","RECYCLE_CLASS_SELECTOR","LISTITEM_BASE_CLASS","LISTITEM_BASE_CLASS_SELECTOR","DATA_PAGE_INDEX","DATA_CONTAINER_INDEX","ListViewGlobalConfig","newConfig","key","Object","keys","undefined","assign","ItemProfile","_owner","_height","_initializer","_info","_index","_pageIndex","_offset","_$base","_instance","constructor","owner","height","initializer","this","index","updateIndex","pageIndex","updatePageIndex","offset","updateOffset","info","activate","prepareBaseElement","options","lineProfile","css","hide","deactivate","remove","addClass","refresh","render","isActive","updateHeight","newHeight","delta","updateScrollMapHeight","reflectAll","updateProfiles","resetDepth","baseDepth","$base","$recycle","findRecycleElements","first","itemTagName","console","length","removeAttr","removeClass","$","$scrollMap","append","attr","String","enableTransformOffset","top","parseInt","PageProfile","_items","_status","status","item","push","normalize","enableAll","every","getItem","at","getItemFirst","getItemLast","GroupProfile","_id","_parent","_children","_expanded","_mapItems","id","isExpanded","parent","children","getNextItemIndex","withActiveChildren","items","queryOperationTarget","addItem","layoutKey","groupProfile","context","Math","trunc","_addItem","update","addChildren","target","Array","isArray","child","setParent","hasChildren","some","hasLayoutKeyOf","expand","statusScope","collapse","delay","animationDuration","removeItem","ensureVisible","callback","toggle","register","insertTo","makeResult","ERROR_UI_LISTVIEW_INVALID_PARAM","toHelpString","preprocess","restore","concat","slice","newStatus","operation","findTargets","group","_properties","Symbol","ListItemView","View","_properties$3","super","$el","setElement","off","stopListening","getIndex","getHeight","hasChildNode","ElementScroller","_$target","_$scrollMap","_options","_scrollStopTrigger","_scrollDuration","element","timer","clearTimeout","setTimeout","trigger","CustomEvent","bubbles","cancelable","on","TYPE","getFactory","factory","defineProperties","type","configurable","writable","enumerable","value","pos","scrollTop","posMax","max","scrollTo","animate","time","Promise","resolve","enableAnimation","destroy","_defaultOpts","scrollerFactory","enableHiddenPage","scrollMapRefreshInterval","scrollRefreshDistance","pagePrepareCount","pagePreloadCount","removeItemWithTransition","useDummyInactiveScrollMap","_$invalid","verify","x","ERROR_UI_LISTVIEW_INVALID_INITIALIZATION","ListCore","_$root","_$map","_mapHeight","_scroller","_active","_settings","_scrollEventHandler","_scrollStopEventHandler","_baseHeight","_pages","_lastActivePageContext","from","to","_backup","onScroll","onScrollStop","initialize","$root","hasClass","find","createScroller","setBaseHeight","setScrollerCondition","resetScrollerCondition","release","setActiveState","active","treatScrollPosition","scrollerType","useDummyMap","display","prepareInactiveMap","$map","$target","scrollMapHeight","i","n","last","isInitialized","deltaHeight","addTail","it","splice","clearPage","arg2","arg3","_removeItemRandomly","_removeItemContinuously","_queryRemoveItemsContext","indexes","removed","transition","idx","current","scrollPos","scrollPosMax","_updateWithRemoveItemsContext","profileUpdate","setupScrollMapTransition","size","_","sort","lhs","rhs","transitionEnd","getItemInfo","parser","Number","NaN","Event","currentTarget","isNaN","targets","currentPageIndex","getPageIndex","highPriorityIndex","storeNextPageState","abs","searchCount","beginIndex","endIndex","overflowPrev","overflowNext","page","filter","action","pageCurrent","assignPage","rebuild","setScrollHandler","handler","method","setScrollStopHandler","partialOK","setTop","currentScope","targetScope","backup","hasBackup","clearBackup","backupData","scrollMapSize","lastPage","getLastPage","validRange","candidate","floor","basePage","nextItemIndex","asigneeItems","workPage","newPage","$parent","$inactiveMap","$listItemViews","clone","ListView","_properties$2","opt","initialHeight","ExpandCore","_mapGroups","_aryTopGroups","_layoutKey","newGroup","luid","getGroup","registerTopGroup","topGroup","lastGroup","getTopGroups","expandAll","promisies","all","collapseAll","isExpanding","isStatusIn","isCollapsing","isSwitching","statusAddRef","statusRelease","executor","map","tops","ExpandableListItemView","_properties$1","ExpandableListView"],"sources":["cdp:///@cdp/ui-components/ui-utils/result-code-defs.ts","cdp:///@cdp/ui-components/ui-utils/ssr.ts","cdp:///@cdp/ui-components/ui-utils/css/misc.ts","cdp:///@cdp/ui-components/ui-utils/index.ts","cdp:///@cdp/ui-components/ui-forms/index.ts","cdp:///@cdp/ui-components/ui-listview/result-code-defs.ts","cdp:///@cdp/ui-components/ui-listview/global-config.ts","cdp:///@cdp/ui-components/ui-listview/profile/item.ts","cdp:///@cdp/ui-components/ui-listview/profile/page.ts","cdp:///@cdp/ui-components/ui-listview/profile/group.ts","cdp:///@cdp/ui-components/ui-listview/list-item-view.ts","cdp:///@cdp/ui-components/ui-listview/core/element-scroller.ts","cdp:///@cdp/ui-components/ui-listview/core/list.ts","cdp:///@cdp/ui-components/ui-listview/list-view.ts","cdp:///@cdp/ui-components/ui-listview/expandable-list-item-view.ts","cdp:///@cdp/ui-components/ui-listview/core/expand.ts","cdp:///@cdp/ui-components/ui-listview/expandable-list-view.ts","cdp:///@cdp/ui-components/ui-listview/index.ts"],"sourcesContent":["/* eslint-disable\n    @typescript-eslint/no-namespace,\n    @typescript-eslint/no-unused-vars,\n */\n\nnamespace CDP_DECLARE {\n\n    export const enum CDP_KNOWN_UI_MODULE {\n        /** `@cdp/ui-utils` */\n        UTILS     = 1,\n        /** `@cdp/ui-listview` */\n        LISTVIEW  = 2,\n        /** offset for unknown ui-module */\n        OFFSET,\n    }\n\n    const enum LOCAL_CODE_BASE {\n        UI_UTILS = (CDP_KNOWN_MODULE.OFFSET + CDP_KNOWN_UI_MODULE.UTILS) * LOCAL_CODE_RANGE_GUIDE.FUNCTION,\n    }\n\n    /**\n     * @en Extends error code definitions.\n     * @ja 拡張エラーコード定義\n     */\n    export enum RESULT_CODE {\n        UI_UTILS_DECLARE = RESULT_CODE_BASE.DECLARE,\n        ERROR_UI_UTILS_FATAL = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.UI_UTILS + 1, 'UI utils something wrong.'),\n    }\n}\n","import { safe } from '@cdp/runtime';\n\n/** @internal */ export const getComputedStyle = safe(globalThis.getComputedStyle);\n","import { getComputedStyle } from '../ssr';\n\n/**\n * @en CSS vendor prefix string definition.\n * @ja CSS ベンダープリフィックス文字列定義\n */\nexport const cssPrefixes = ['-webkit-', '-moz-', '-ms-', '-o-', ''];\n\n/**\n * @en Stores the value specified in css `transform(3d)`.\n * @ja css `transform(3d)` に指定される値を格納\n */\nexport interface TransformMatrixValues {\n    translateX: number;\n    translateY: number;\n    translateZ: number;\n    scaleX: number;\n    scaleY: number;\n    scaleZ: number;\n}\n\n/**\n * @en Get the value of the transform matrix specified in `Element`.\n * @ja `Element` に指定された transform 行列の値を取得\n *\n * @param el\n *  - `en` target `Element` instance\n *  - `ja` 対象 `Element` インスタンス\n */\nexport const getTransformMatrixValues = (el: Element): TransformMatrixValues => {\n    const style = getComputedStyle(el);\n    const { m11, m22, m33, m41, m42, m43 } = new DOMMatrixReadOnly(style.transform);\n    return {\n        translateX: m41,\n        translateY: m42,\n        translateZ: m43,\n        scaleX: m11,\n        scaleY: m22,\n        scaleZ: m33,\n    };\n};\n\n/**\n * @en Setting property conversion animation using css transition for specified element.\n * @ja 指定要素に対して css transition を用いたプロパティ変換アニメーションの設定\n *\n * @param el\n *  - `en` target `HTMLElement` instance\n *  - `ja` 対象 `HTMLElement` インスタンス\n * @param prop\n *  - `en` target property name [ex: height]\n *  - `ja` 対象プロパティ名 [ex: height]\n * @param msec\n *  - `en` animation duration [msec]\n *  - `ja` アニメーション時間 [msec]\n * @param el\n *  - `en` timing function name [default: ease]\n *  - `ja` タイミング関数名 [default: ease]\n */\nexport const setTransformTransition = (el: HTMLElement, prop: string, msec: number, timingFunction = 'ease'): void => {\n    const animation = `${(msec / 1000)}s ${timingFunction}`;\n    el.style.setProperty('transition', `${prop} ${animation}, transform ${animation}`);\n};\n\n\n/**\n * @en Clear css transition settings for specified element.\n * @ja 指定要素の css transition 設定を解除\n *\n * @param el\n *  - `en` target `HTMLElement` instance\n *  - `ja` 対象 `HTMLElement` インスタンス\n */\nexport const clearTransition = (el: HTMLElement): void => {\n    el.style.removeProperty('transition');\n};\n","import './result-code-defs';\nexport * from './css';\n\n// TODO: test\nexport const UI_UTILS_STATUS = 'UNDER CONSTRUCTION';\nimport { i18n, isFunction } from '@cdp/runtime';\nisFunction(i18n.t) &&  console.log('okok');\n","export const UI_FORMS_STATUS = 'UNDER CONSTRUCTION';\n\nimport { noop, post } from '@cdp/runtime';\n\nimport styleCore from '@css/structure.css' with { type: 'css' };\nimport styleButton from '@css/structure-button.css' with { type: 'css' };\n\nvoid post(noop(styleCore, styleButton));\n","/* eslint-disable\n    @typescript-eslint/no-namespace,\n    @typescript-eslint/no-unused-vars,\n */\n\nnamespace CDP_DECLARE {\n\n    const enum LOCAL_CODE_BASE {\n        UI_LISTVIEW = (CDP_KNOWN_MODULE.OFFSET + CDP_KNOWN_UI_MODULE.LISTVIEW) * LOCAL_CODE_RANGE_GUIDE.FUNCTION,\n    }\n\n    /**\n     * @en Extends error code definitions.\n     * @ja 拡張エラーコード定義\n     */\n    export enum RESULT_CODE {\n        UI_LISTVIEW_DECLARE = RESULT_CODE_BASE.DECLARE,\n        ERROR_UI_LISTVIEW_INVALID_INITIALIZATION = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.UI_LISTVIEW + 1, 'listview has invalid initialization.'),\n        ERROR_UI_LISTVIEW_INVALID_PARAM          = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.UI_LISTVIEW + 2, 'listview given a invalid param.'),\n        ERROR_UI_LISTVIEW_INVALID_OPERATION      = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.UI_LISTVIEW + 3, 'listview invalid operation.'),\n    }\n}\n","/**\n * @en Global configuration definition for list views.\n * @ja リストビューのグローバルコンフィグレーション定義\n */\nexport interface ListViewGlobalConfig {\n    NAMESPACE: string;\n    WRAPPER_CLASS: string;\n    WRAPPER_SELECTOR: string;\n    SCROLL_MAP_CLASS: string;\n    SCROLL_MAP_SELECTOR: string;\n    INACTIVE_CLASS: string;\n    INACTIVE_CLASS_SELECTOR: string;\n    RECYCLE_CLASS: string;\n    RECYCLE_CLASS_SELECTOR: string;\n    LISTITEM_BASE_CLASS: string;\n    LISTITEM_BASE_CLASS_SELECTOR: string;\n    DATA_PAGE_INDEX: string;\n    DATA_CONTAINER_INDEX: string;\n}\n\n/** @internal */\nconst enum DefaultV {\n    NAMESPACE                    = 'cdp-ui',\n    WRAPPER_CLASS                = `${NAMESPACE}-listview-wrapper`,\n    WRAPPER_SELECTOR             = `.${WRAPPER_CLASS}`,\n    SCROLL_MAP_CLASS             = `${NAMESPACE}-listview-scroll-map`,\n    SCROLL_MAP_SELECTOR          = `.${SCROLL_MAP_CLASS}`,\n    INACTIVE_CLASS               = 'inactive',\n    INACTIVE_CLASS_SELECTOR      = `.${INACTIVE_CLASS}`,\n    RECYCLE_CLASS                = `${NAMESPACE}-listview-recycle`,\n    RECYCLE_CLASS_SELECTOR       = `.${RECYCLE_CLASS}`,\n    LISTITEM_BASE_CLASS          = `${NAMESPACE}-listview-item-base`,\n    LISTITEM_BASE_CLASS_SELECTOR = `.${LISTITEM_BASE_CLASS}`,\n    DATA_PAGE_INDEX              = `data-${NAMESPACE}-page-index`,\n    DATA_CONTAINER_INDEX         = `data-${NAMESPACE}-container-index`,\n}\n\nconst _config = {\n    NAMESPACE: DefaultV.NAMESPACE,\n    WRAPPER_CLASS: DefaultV.WRAPPER_CLASS,\n    WRAPPER_SELECTOR: DefaultV.WRAPPER_SELECTOR,\n    SCROLL_MAP_CLASS: DefaultV.SCROLL_MAP_CLASS,\n    SCROLL_MAP_SELECTOR: DefaultV.SCROLL_MAP_SELECTOR,\n    INACTIVE_CLASS: DefaultV.INACTIVE_CLASS,\n    INACTIVE_CLASS_SELECTOR: DefaultV.INACTIVE_CLASS_SELECTOR,\n    RECYCLE_CLASS: DefaultV.RECYCLE_CLASS,\n    RECYCLE_CLASS_SELECTOR: DefaultV.RECYCLE_CLASS_SELECTOR,\n    LISTITEM_BASE_CLASS: DefaultV.LISTITEM_BASE_CLASS,\n    LISTITEM_BASE_CLASS_SELECTOR: DefaultV.LISTITEM_BASE_CLASS_SELECTOR,\n    DATA_PAGE_INDEX: DefaultV.DATA_PAGE_INDEX,\n    DATA_CONTAINER_INDEX: DefaultV.DATA_CONTAINER_INDEX,\n};\n\n/**\n * @en Get/Update global configuration of list view.\n * @ja リストビューのグローバルコンフィグレーションの取得/更新\n */\nexport const ListViewGlobalConfig = (newConfig?: Partial<ListViewGlobalConfig>): ListViewGlobalConfig => {\n    if (newConfig) {\n        for (const key of Object.keys(newConfig)) {\n            if (undefined === newConfig[key as keyof ListViewGlobalConfig]) {\n                delete newConfig[key as keyof ListViewGlobalConfig];\n            }\n        }\n    }\n    return Object.assign({}, _config, newConfig);\n};\n","import {\n    UnknownObject,\n    DOM,\n    dom as $,\n} from '@cdp/runtime';\nimport { getTransformMatrixValues } from '@cdp/ui-utils';\nimport type { IListContext } from '../interfaces/base';\nimport type { IListItemView, ListItemUpdateHeightOptions } from '../interfaces/list-item-view';\nimport { ListViewGlobalConfig } from '../global-config';\n\n/**\n * @en A class that stores UI structure information for list items.\n * @ja リストアイテムの UI 構造情報を格納するクラス\n */\nexport class ItemProfile {\n    /** @internal */\n    private readonly _owner: IListContext;\n    /** @internal */\n    private _height: number;\n    /** @internal */\n    private readonly _initializer: new (options?: UnknownObject) => IListItemView;\n    /** @internal */\n    private readonly _info: UnknownObject;\n    /** @internal global index */\n    private _index = 0;\n    /** @internal belonging page index */\n    private _pageIndex = 0;\n    /** @internal global offset */\n    private _offset = 0;\n    /** @internal base dom instance */\n    private _$base?: DOM;\n    /** @internal IListItemView instance */\n    private _instance?: IListItemView;\n\n    /**\n     * constructor\n     *\n     * @param owner\n     *  - `en` {@link IListViewContext} instance\n     *  - `ja` {@link IListViewContext} インスタンス\n     * @param height\n     *  - `en` initial item's height\n     *  - `ja` item の初期の高さ\n     * @param initializer\n     *  - `en` constructor for {@link IListItemView}'s subclass\n     *  - `ja` {@link IListItemView} のサブクラスのコンストラクタ\n     * @param info\n     *  - `en` init parameters for {@link IListItemView}'s subclass\n     *  - `ja` {@link IListItemView} のサブクラスの初期化パラメータ\n     */\n    constructor(owner: IListContext, height: number, initializer: new (options?: UnknownObject) => IListItemView, _info: UnknownObject) {\n        this._owner       = owner;\n        this._height      = height;\n        this._initializer = initializer;\n        this._info        = _info;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// accessors:\n\n    /** Get the item's height. */\n    get height(): number {\n        return this._height;\n    }\n\n    /** Get the item's global index. */\n    get index(): number {\n        return this._index;\n    }\n\n    /** Set the item's global index. */\n    set index(index: number) {\n        this._index = index;\n        this.updateIndex();\n    }\n\n    /** Get belonging the page index. */\n    get pageIndex(): number {\n        return this._pageIndex;\n    }\n\n    /** Set belonging the page index. */\n    set pageIndex(index: number) {\n        this._pageIndex = index;\n        this.updatePageIndex();\n    }\n\n    /** Get global offset. */\n    get offset(): number {\n        return this._offset;\n    }\n\n    /** Set global offset. */\n    set offset(offset: number) {\n        this._offset = offset;\n        this.updateOffset();\n    }\n\n    /** Get init parameters. */\n    get info(): UnknownObject {\n        return this._info;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /**\n     * @en Activate of the item.\n     * @ja item の活性化\n     */\n    public activate(): void {\n        if (null == this._instance) {\n            this._$base = this.prepareBaseElement();\n            const options = Object.assign({\n                el: this._$base,\n                owner: this._owner,\n                lineProfile: this,\n            }, this._info);\n            this._instance = new this._initializer(options);\n            if ('none' === this._$base.css('display')) {\n                this._$base.css('display', 'block');\n            }\n        }\n        this.updatePageIndex();\n        if (this._$base && 'visible' !== this._$base.css('visibility')) {\n            this._$base.css('visibility', 'visible');\n        }\n    }\n\n    /**\n     * @en Make the item invisible.\n     * @ja item の不可視化\n     */\n    public hide(): void {\n        if (null == this._instance) {\n            this.activate();\n        }\n        if (this._$base && 'hidden' !== this._$base.css('visibility')) {\n            this._$base.css('visibility', 'hidden');\n        }\n    }\n\n    /**\n     * @en Deactivate of the item.\n     * @ja item の非活性化\n     */\n    public deactivate(): void {\n        if (null != this._instance) {\n            this._instance.remove();\n            this._instance = undefined;\n            this._$base?.addClass(this._config.RECYCLE_CLASS);\n            this._$base?.css('display', 'none');\n            this._$base = undefined;\n        }\n    }\n\n    /**\n     * @en Refresh the item.\n     * @ja item の更新\n     */\n    public refresh(): void {\n        if (null != this._instance) {\n            this._instance.render();\n        }\n    }\n\n    /**\n     * @en Check the activation status of the item.\n     * @ja item の活性状態判定\n     */\n    public isActive(): boolean {\n        return null != this._instance;\n    }\n\n    /**\n     * @en Update height information of the item. Called from {@link ListItemView}.\n     * @ja item の高さ情報の更新. {@link ListItemView} からコールされる。\n     */\n    public updateHeight(newHeight: number, options?: ListItemUpdateHeightOptions): void {\n        const delta = newHeight - this._height;\n        this._height = newHeight;\n        this._owner.updateScrollMapHeight(delta);\n        if (options?.reflectAll) {\n            this._owner.updateProfiles(this._index);\n        }\n    }\n\n    /**\n     * @en Reset z-index. Called from {@link ScrollManager}`.removeItem()`.\n     * @ja z-index のリセット. {@link ScrollManager}`.removeItem()` からコールされる。\n     */\n    public resetDepth(): void {\n        if (null != this._instance) {\n            this._$base?.css('z-index', this._owner.options.baseDepth);\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// internal:\n\n    /** @internal */\n    private get _config(): ListViewGlobalConfig {\n        return ListViewGlobalConfig();\n    }\n\n    /** @internal */\n    private prepareBaseElement(): DOM {\n        let $base: DOM;\n        const $recycle = this._owner.findRecycleElements().first();\n        const itemTagName = this._owner.options.itemTagName;\n\n        if (null != this._$base) {\n            console.warn('this._$base is not null.');\n            return this._$base;\n        }\n\n        if (0 < $recycle.length) {\n            $base = $recycle;\n            $base.removeAttr('z-index');\n            $base.removeClass(this._config.RECYCLE_CLASS);\n        } else {\n            // TODO:  要件等. <li> 全般は <slot> と同強調するか?\n            $base = $(`<${itemTagName} class=\"${this._config.LISTITEM_BASE_CLASS}\"></\"${itemTagName}\">`);\n            $base.css('display', 'none');\n            this._owner.$scrollMap.append($base);\n        }\n\n        // 高さの更新\n        if ($base.height() !== this._height) {\n            $base.height(this._height);\n        }\n\n        // index の設定\n        this.updateIndex();\n        // offset の更新\n        this.updateOffset();\n\n        return $base;\n    }\n\n    /** @internal */\n    private updateIndex(): void {\n        if (this._$base && this._$base.attr(this._config.DATA_CONTAINER_INDEX) !== String(this._index)) {\n            this._$base.attr(this._config.DATA_CONTAINER_INDEX, this._index);\n        }\n    }\n\n    /** @internal */\n    private updatePageIndex(): void {\n        if (this._$base && this._$base.attr(this._config.DATA_PAGE_INDEX) !== String(this._pageIndex)) {\n            this._$base.attr(this._config.DATA_PAGE_INDEX, this._pageIndex);\n        }\n    }\n\n    /** @internal */\n    private updateOffset(): void {\n        if (!this._$base) {\n            return;\n        }\n\n        if (this._owner.options.enableTransformOffset) {\n            const { translateY } = getTransformMatrixValues(this._$base[0]);\n            if (translateY !== this._offset) {\n                this._$base.css('transform', `translate3d(0,${this._offset}px,0`);\n            }\n        } else {\n            const top = parseInt(this._$base.css('top'), 10);\n            if (top !== this._offset) {\n                this._$base.css('top', `${this._offset}px`);\n            }\n        }\n    }\n}\n","import { at } from '@cdp/runtime';\nimport type { ItemProfile } from './item';\n\n/**\n * @en A class that stores UI structure information for one page of the list.\n * @ja リスト1ページ分の UI 構造情報を格納するクラス\n */\nexport class PageProfile {\n    /** @internal page index */\n    private _index = 0;\n    /** @internal page offset from top */\n    private _offset = 0;\n    /** @internal page's height */\n    private _height = 0;\n    /** @internal item's profile managed with in page */\n    private _items: ItemProfile[] = [];\n    /** @internal page status */\n    private _status: 'active' | 'inactive' | 'hidden' = 'inactive';\n\n///////////////////////////////////////////////////////////////////////\n// accessors:\n\n    /** Get the page index */\n    get index(): number {\n        return this._index;\n    }\n\n    /** Set the page index */\n    set index(index: number) {\n        this._index = index;\n    }\n\n    /** Get the page offset */\n    get offset(): number {\n        return this._offset;\n    }\n\n    /** Set the page offset */\n    set offset(offset: number) {\n        this._offset = offset;\n    }\n\n    /** Get the page height */\n    get height(): number {\n        return this._height;\n    }\n\n    /** Get the page status */\n    get status(): 'active' | 'inactive' | 'hidden' {\n        return this._status;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /**\n     * @en Activate of the page.\n     * @ja page の活性化\n     */\n    public activate(): void {\n        if ('active' !== this._status) {\n            for (const item of this._items) {\n                item.activate();\n            }\n        }\n        this._status = 'active';\n    }\n\n    /**\n     * @en Make the page invisible.\n     * @ja page の不可視化\n     */\n    public hide(): void {\n        if ('hidden' !== this._status) {\n            for (const item of this._items) {\n                item.hide();\n            }\n        }\n        this._status = 'hidden';\n    }\n\n    /**\n     * @en Deactivate of the page.\n     * @ja page の非活性化\n     */\n    public deactivate(): void {\n        if ('inactive' !== this._status) {\n            for (const item of this._items) {\n                item.deactivate();\n            }\n        }\n        this._status = 'inactive';\n    }\n\n    /**\n     * @en Add {@link ItemProfile} to the page.\n     * @ja {@link ItemProfile} の追加\n     */\n    public push(item: ItemProfile): void {\n        this._items.push(item);\n        this._height += item.height;\n    }\n\n    /**\n     * @en If all {@link ItemProfile} under the page are not valid, disable the page's status.\n     * @ja 配下の {@link ItemProfile} すべてが有効でない場合, page ステータスを無効にする\n     */\n    public normalize(): void {\n        const enableAll = this._items.every(item => item.isActive());\n        if (!enableAll) {\n            this._status = 'inactive';\n        }\n    }\n\n    /**\n     * @en Get {@link ItemProfile} by index.\n     * @ja インデックスを指定して {@link ItemProfile} を取得\n     */\n    public getItem(index: number): ItemProfile {\n        return at(this._items, index);\n    }\n\n    /**\n     * @en Get first {@link ItemProfile}.\n     * @ja 最初の {@link ItemProfile} を取得\n     */\n    public getItemFirst(): ItemProfile | undefined {\n        return this._items[0];\n    }\n\n    /**\n     * @en Get last {@link ItemProfile}.\n     * @ja 最後の {@link ItemProfile} を取得\n     */\n    public getItemLast(): ItemProfile | undefined {\n        return this._items[this._items.length - 1];\n    }\n}\n","import {\n    type UnknownObject,\n    RESULT_CODE,\n    makeResult,\n    toHelpString,\n} from '@cdp/runtime';\nimport type { ListEnsureVisibleOptions } from '../interfaces/base';\nimport type { IListItemView } from '../interfaces/list-item-view';\nimport type { IExpandableListContext } from '../interfaces/expandable-context';\nimport { ItemProfile } from './item';\n\nconst enum LayoutKey {\n    DEFAULT = 'layout-default',\n}\n\n/**\n * @en UI structure information storage class for group management of list items. <br>\n *     This class does not directly manipulate the DOM.\n * @ja リストアイテムをグループ管理する UI 構造情報格納クラス <br>\n *     本クラスは直接は DOM を操作しない\n */\nexport class GroupProfile {\n    /** @internal profile id */\n    private readonly _id: string;\n    /** @internal {@link ExpandableListView} instance*/\n    private readonly _owner: IExpandableListContext;\n    /** @internal parent {@link GroupProfile} instance */\n    private _parent?: GroupProfile;\n    /** @internal child {@link GroupProfile} array */\n    private readonly _children: GroupProfile[] = [];\n    /** @internal expanded / collapsed status */\n    private _expanded = false;\n    /** @internal registration status for _owner */\n    private _status: 'registered' | 'unregistered' = 'unregistered';\n    /** @internal stored {@link ItemProfile} information */\n    private readonly _mapItems: Record<string, ItemProfile[]> = {};\n\n    /**\n     * constructor\n     *\n     * @param owner\n     *  - `en` {@link IExpandableListContext} instance\n     *  - `ja` {@link IExpandableListContext} インスタンス\n     * @param id\n     *  - `en` id of the instance. specified by the framework.\n     *  - `ja` インスタンスの ID. フレームワークが指定\n     */\n    constructor(owner: IExpandableListContext, id: string) {\n        this._id    = id;\n        this._owner = owner;\n        this._mapItems[LayoutKey.DEFAULT] = [];\n    }\n\n///////////////////////////////////////////////////////////////////////\n// accessors:\n\n    /**\n     * @en Get ID.\n     * @ja ID を取得\n     */\n    get id(): string {\n        return this._id;\n    }\n\n    /**\n     * \n     * @en Get status. 'registered' | 'unregistered'\n     * @ja ステータスを取得 'registered' | 'unregistered'\n     */\n    get status(): 'registered' | 'unregistered' {\n        return this._status;\n    }\n\n    /**\n     * @en Check expanded / collapsed status.\n     * @ja 展開状態を判定\n     *\n     * @returns\n     *  - `en` true: expanded, collapsed: close\n     *  - `ja` true: 展開, false: 収束\n     */\n    get isExpanded(): boolean {\n        return this._expanded;\n    }\n\n    /**\n     * @en Get parent {@link GroupProfile}.\n     * @ja 親 {@link GroupProfile} を取得\n     */\n    get parent(): GroupProfile | undefined {\n        return this._parent;\n    }\n\n    /**\n     * @en Get children {@link GroupProfile}.\n     * @ja 子 {@link GroupProfile} を取得\n     */\n    get children(): GroupProfile[] {\n        return this._children;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /**\n     * @en Get the next available index of the last item element.\n     * @ja 最後の item 要素の次に使用できる index を取得\n     *\n     * @param withActiveChildren \n     *  - `en` specify true to search including registered child elements\n     *  - `ja` 登録済みの子要素を含めて検索する場合は true を指定\n     */\n    public getNextItemIndex(withActiveChildren = false): number {\n        let items: ItemProfile[] = [];\n        if (withActiveChildren) {\n            items = this.queryOperationTarget('active');\n        }\n        if (null == items || items.length <= 0) {\n            items = this._items;\n        }\n        return (items[items.length - 1]?.index ?? 0) + 1;\n    }\n\n    /**\n     * @en Item registration.\n     * @ja 本 GroupProfile が管理する item を作成して登録\n     *\n     * @param height\n     *  - `en` initial item's height\n     *  - `ja` item の高さ\n     * @param initializer\n     *  - `en` constructor for {@link IListItemView}'s subclass\n     *  - `ja` {@link IListItemView} のサブクラスのコンストラクタ\n     * @param info\n     *  - `en` init parameters for {@link IListItemView}'s subclass\n     *  - `ja` {@link IListItemView} のサブクラスの初期化パラメータ\n     * @param layoutKey\n     *  - `en` identifier for each layout\n     *  - `ja` レイアウト毎の識別子\n     */\n    public addItem(\n        height: number,\n        initializer: new (options?: UnknownObject) => IListItemView,\n        info: UnknownObject,\n        layoutKey?: string,\n    ): GroupProfile {\n        layoutKey = layoutKey ?? LayoutKey.DEFAULT;\n        const options = Object.assign({ groupProfile: this }, info);\n\n        if (null == this._mapItems[layoutKey]) {\n            this._mapItems[layoutKey] = [];\n        }\n\n        const item = new ItemProfile(this._owner.context, Math.trunc(height), initializer, options);\n\n        // _owner の管理下にあるときは速やかに追加\n        if (('registered' === this._status) && (null == this._owner.layoutKey || layoutKey === this._owner.layoutKey)) {\n            this._owner._addItem(item, this.getNextItemIndex());\n            this._owner.update();\n        }\n        this._mapItems[layoutKey].push(item);\n\n        return this;\n    }\n\n    /**\n     * @en Add {@link GroupProfile} as child element.\n     * @ja 子要素として {@link GroupProfile} を追加\n     *\n     * @param target {@link GroupProfile} instance / instance array\n     */\n    public addChildren(target: GroupProfile | GroupProfile[]): this {\n        const children: GroupProfile[] = Array.isArray(target) ? target : [target];\n        for (const child of children) {\n            child.setParent(this);\n        }\n        this._children.push(...children);\n        return this;\n    }\n\n    /**\n     * @en Determine if it has a child {@link GroupProfile}. <br>\n     *     If `layoutKey` is specified, whether the layout information matches is also added to the judgment condition.\n     * @ja 子 {@link GroupProfile} を持っているか判定 <br>\n     *     `layoutKey` が指定されれば、layout 情報が一致しているかも判定条件に加える\n     *\n     * @param layoutKey\n     *  - `en` identifier for each layout\n     *  - `ja` レイアウト毎の識別子\n     * @returns\n     *  - `en` true: exists, false: unexists\n     *  - `ja` true: 有, false: 無\n     */\n    public hasChildren(layoutKey?: string): boolean {\n        if (this._children.length <= 0) {\n            return false;\n        } else if (null != layoutKey) {\n            return this._children.some(child => child.hasLayoutKeyOf(layoutKey));\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @en Determine if the specified `layoutKey` exists.\n     * @ja 指定された `layoutKey` が存在するか判定\n     *\n     * @param layoutKey\n     *  - `en` identifier for each layout\n     *  - `ja` レイアウト毎の識別子\n     * @returns\n     *  - `en` true: exists, false: unexists\n     *  - `ja` true: 有, false: 無\n     */\n    public hasLayoutKeyOf(layoutKey: string): boolean {\n        return (null != this._mapItems[layoutKey]);\n    }\n\n    /**\n     * @en Group expansion.\n     * @ja グループ展開\n     */\n    public async expand(): Promise<void> {\n        if (!this.isExpanded) {\n            const items = this.queryOperationTarget('registered');\n            if (0 < items.length) {\n                await this._owner.statusScope('expanding', () => {\n                    // 自身を更新\n                    for (const item of this._items) {\n                        item.refresh();\n                    }\n                    // 配下を更新\n                    this._owner._addItem(items, this.getNextItemIndex());\n                    this._owner.update();\n                });\n            }\n        }\n        // 子要素がなくても展開状態にする\n        this._expanded = true;\n    }\n\n    /**\n     * @en Group collapse.\n     * @ja グループ収束\n     *\n     * @param delay\n     *  - `en` delay time spent removing elements. [default: `animationDuration` value]\n     *  - `ja` 要素削除に費やす遅延時間. [default: `animationDuration` value]\n     */\n    public async collapse(delay?: number): Promise<void> {\n        if (this.isExpanded) {\n            const items = this.queryOperationTarget('unregistered');\n            if (0 < items.length) {\n                delay = delay ?? this._owner.context.options.animationDuration;\n                await this._owner.statusScope('collapsing', () => {\n                    // 自身を更新\n                    for (const item of this._items) {\n                        item.refresh();\n                    }\n                    // 配下を更新\n                    this._owner.removeItem(items[0].index, items.length, delay);\n                    this._owner.update();\n                });\n            }\n        }\n        // 子要素がなくても収束状態にする\n        this._expanded = false;\n    }\n\n    /**\n     * @en Show self in visible area of list.\n     * @ja 自身をリストの可視領域に表示\n     *\n     * @param options\n     *  - `en` {@link ListEnsureVisibleOptions} option's object\n     *  - `ja` {@link ListEnsureVisibleOptions} オプション\n     */\n    async ensureVisible(options?: ListEnsureVisibleOptions): Promise<void> {\n        if (0 < this._items.length) {\n            await this._owner.ensureVisible(this._items[0].index, options);\n        } else {\n            options?.callback?.();\n        }\n    }\n\n    /**\n     * @en Toggle expand / collapse.\n     * @ja 開閉のトグル\n     *\n     * @param delay\n     *  - `en` delay time spent removing elements. [default: `animationDuration` value]\n     *  - `ja` 要素削除に費やす遅延時間. [default: `animationDuration` value]\n     */\n    public async toggle(delay?: number): Promise<void> {\n        if (this._expanded) {\n            await this.collapse(delay);\n        } else {\n            await this.expand();\n        }\n    }\n\n    /**\n     * @en Register to list view. Only 1st layer group can be registered.\n     * @ja リストビューへ登録. 第1階層グループのみ登録可能.\n     *\n     * @param insertTo\n     *  - `en` specify insertion position with index\n     *  - `ja` 挿入位置を index で指定\n     */\n    public register(insertTo: number): this {\n        if (this._parent) {\n            throw makeResult(\n                RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM,\n                `${toHelpString(RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM)} 'GroupProfile#register' method is acceptable only 1st layer group.`\n            );\n        }\n        this._owner._addItem(this.preprocess('registered'), insertTo);\n        return this;\n    }\n\n    /**\n     * @en Restore to list view. Only 1st layer group can be specified.\n     * @ja リストビューへ復元. 第1階層グループのみ指示可能.\n     */\n    public restore(): this {\n        if (this._parent) {\n            throw makeResult(\n                RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM,\n                `${toHelpString(RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM)} 'GroupProfile#restore' method is acceptable only 1st layer group.`\n            );\n        }\n\n        if (this._items) {\n            const items = this._expanded ? this._items.concat(this.queryOperationTarget('active')) : this._items.slice();\n            this._owner._addItem(items);\n        }\n        return this;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// internal:\n\n    /** @internal 自身の管理するアクティブな LineProfie を取得 */\n    private get _items(): ItemProfile[] {\n        const key = this._owner.layoutKey;\n        if (null != key) {\n            return this._mapItems[key];\n        } else {\n            return this._mapItems[LayoutKey.DEFAULT];\n        }\n    }\n\n    /** @internal 親 Group 指定 */\n    private setParent(parent: GroupProfile): void {\n        this._parent = parent;\n    }\n\n    /** @internal  register / unregister の前処理 */\n    private preprocess(newStatus: 'registered' | 'unregistered'): ItemProfile[] {\n        const items: ItemProfile[] = [];\n        if (newStatus !== this._status) {\n            items.push(...this._items);\n        }\n        this._status = newStatus;\n        return items;\n    }\n\n    /** @internal 操作対象の ItemProfile 配列を取得 */\n    private queryOperationTarget(operation: 'registered' | 'unregistered' | 'active'): ItemProfile[] {\n        const findTargets = (group: GroupProfile): ItemProfile[] => {\n            const items: ItemProfile[] = [];\n            for (const child of group._children) {\n                switch (operation) {\n                    case 'registered':\n                    case 'unregistered':\n                        items.push(...child.preprocess(operation));\n                        break;\n                    case 'active':\n                        if (null != child._items) {\n                            items.push(...child._items);\n                        }\n                        break;\n                    default:\n                        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                        console.warn(`unknown operation: ${operation}`);\n                        break;\n                }\n                if (child.isExpanded) {\n                    items.push(...findTargets(child));\n                }\n            }\n            return items;\n        };\n        return findTargets(this);\n    }\n}\n","import {\n    type Writable,\n    type DOM,\n    type DOMSelector,\n    type ViewConstructionOptions,\n    View,\n} from '@cdp/runtime';\nimport type {\n    IListView,\n    ListItemUpdateHeightOptions,\n    IListItemView,\n} from './interfaces';\nimport type { ItemProfile } from './profile';\n\n/** @internal */ const _properties = Symbol('properties');\n\n/** @internal */\ninterface Property {\n    readonly owner: IListView;\n    readonly item: ItemProfile;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Options to pass to {@link ListItemView} construction.\n * @ja {@link ListItemView} 構築に渡すオプション\n */\nexport interface ListItemViewConstructionOptions<TElement extends Node = HTMLElement, TFuncName = string>\n    extends ViewConstructionOptions<TElement, TFuncName> {\n    owner: IListView;\n    $el?: DOM<TElement>;\n    item: ItemProfile;\n}\n\n/**\n * @en List item container class handled by {@link ListView}.\n * @ja {@link ListView} が扱うリストアイテムコンテナクラス\n */\nexport abstract class ListItemView<TElement extends Node = HTMLElement, TEvent extends object = object>\n    extends View<TElement, TEvent> implements IListItemView {\n\n    /** @internal */\n    private readonly [_properties]!: Property;\n\n    /** constructor */\n    constructor(options: ListItemViewConstructionOptions<TElement>) {\n        super(options);\n\n        const { owner, $el, item } = options;\n        (this[_properties] as Writable<Property>) = {\n            owner,\n            item,\n        } as Property;\n\n        if ($el) {\n            this.setElement($el as DOMSelector<TElement>);\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /** Owner 取得 */\n    get owner(): IListView {\n        return this[_properties].owner;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// View component methods:\n\n    /**\n     * @override\n     * @en Remove this view by taking the element out of the DOM with release all listeners.\n     * @ja View から DOM を切り離し, リスナーを解除\n     */\n    override remove(): this {\n        this.$el.children().remove();\n        this.$el.off();\n        // this.$el は再利用するため完全な破棄はしない\n        this.setElement('null');\n        this.stopListening();\n        return this;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IListItemView\n\n    /**\n     * @en Get own item index.\n     * @ja 自身の item インデックスを取得\n     */\n    getIndex(): number {\n        return this[_properties].item.index;\n    }\n\n    /**\n     * @en Get specified height.\n     * @ja 指定された高さを取得\n     */\n    getHeight(): number {\n        return this[_properties].item.height;\n    }\n\n    /**\n     * @en Check if child node exists.\n     * @ja child node が存在するか判定\n     */\n    hasChildNode(): boolean {\n        return !!this.$el?.children().length;\n    }\n\n    /**\n     * @en Update item's height.\n     * @ja item の高さを更新\n     *\n     * @param newHeight\n     *  - `en` new item's height\n     *  - `ja` item の新しい高さ\n     * @param options\n     *  - `en` update options object\n     *  - `ja` 更新オプション\n     */\n    updateHeight(newHeight: number, options?: ListItemUpdateHeightOptions): this {\n        if (this.$el && this.getHeight() !== newHeight) {\n            this[_properties].item.updateHeight(newHeight, options);\n            this.$el.height(newHeight);\n        }\n        return this;\n    }\n}\n","import {\n    type Nullable,\n    type UnknownFunction,\n    type DOM,\n    type DOMSelector,\n    type DOMEventListener,\n    type ConnectEventMap,\n    type TimerHandle,\n    setTimeout,\n    clearTimeout,\n    dom as $,\n} from '@cdp/runtime';\nimport type {\n    ListScrollerFactory,\n    ListContextOptions,\n    IListScroller,\n} from '../interfaces';\n\n/** @internal */\ntype ScrollerEventMap = HTMLElementEventMap & ConnectEventMap & { 'scrollstop': Event; };\n\n/** @internal */\nconst enum Const {\n    MIN_SCROLLSTOP_DURATION = 50,\n}\n\n/**\n * @internal\n * @en {@link IListScroller} implementation class for HTMLElement.\n * @ja HTMLElement を対象とした {@link IListScroller} 実装クラス\n */\nexport class ElementScroller implements IListScroller {\n    private readonly _$target: DOM;\n    private readonly _$scrollMap: DOM;\n    private readonly _options: ListContextOptions;\n    private readonly _scrollStopTrigger: DOMEventListener;\n    private _scrollDuration?: number;\n\n    /** constructor */\n    constructor(element: DOMSelector, options: ListContextOptions) {\n        this._$target = $(element);\n        this._$scrollMap = this._$target.children().first();\n        this._options = options;\n\n        /*\n         * fire custom event: `scrollstop`\n         * `scrollend` の Safari 対応待ち\n         * https://developer.mozilla.org/ja/docs/Web/API/Element/scrollend_event\n         */\n        let timer: TimerHandle;\n        this._scrollStopTrigger = (): void => {\n            if (null != timer) {\n                clearTimeout(timer);\n            }\n            timer = setTimeout(() => {\n                this._$target.trigger(new CustomEvent('scrollstop', { bubbles: true, cancelable: true }));\n            }, this._scrollDuration ?? Const.MIN_SCROLLSTOP_DURATION);\n        };\n        this._$target.on('scroll', this._scrollStopTrigger);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// static methods:\n\n    /** タイプ定義識別子 */\n    static get TYPE(): string {\n        return 'cdp:element-overflow-scroller';\n    }\n\n    /** factory 取得 */\n    static getFactory(): ListScrollerFactory {\n        const factory = (element: DOMSelector, options: ListContextOptions): IListScroller => {\n            return new ElementScroller(element, options);\n        };\n        // set type signature.\n        Object.defineProperties(factory, {\n            type: {\n                configurable: false,\n                writable: false,\n                enumerable: true,\n                value: ElementScroller.TYPE,\n            },\n        });\n        return factory as ListScrollerFactory;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IListScroller\n\n    /** Scroller の型情報を取得 */\n    get type(): string {\n        return ElementScroller.TYPE;\n    }\n\n    /** スクロール位置取得 */\n    get pos(): number {\n        return this._$target.scrollTop();\n    }\n\n    /** スクロール最大値位置を取得 */\n    get posMax(): number {\n        return Math.max(this._$scrollMap.height() - this._$target.height(), 0);\n    }\n\n    /** スクロールイベント登録 */\n    on(type: 'scroll' | 'scrollstop', callback: DOMEventListener): void {\n        this._$target.on<ScrollerEventMap>(type, callback as UnknownFunction);\n    }\n\n    /** スクロールイベント登録解除 */\n    off(type: 'scroll' | 'scrollstop', callback: DOMEventListener): void {\n        this._$target.off<ScrollerEventMap>(type, callback as UnknownFunction);\n    }\n\n    /** スクロール位置を指定 */\n    scrollTo(pos: number, animate?: boolean, time?: number): Promise<void> {\n        return new Promise(resolve => {\n            this._scrollDuration = (this._options.enableAnimation ?? animate) ? time ?? this._options.animationDuration : undefined;\n            this._$target.scrollTop(pos, this._scrollDuration, undefined, () => {\n                this._scrollDuration = undefined;\n                resolve();\n            });\n        });\n    }\n\n    /** Scroller の状態更新 */\n    update(): void {\n        // noop\n    }\n\n    /** Scroller の破棄 */\n    destroy(): void {\n        this._$target?.off();\n        (this._$target as Nullable<DOM>) = (this._$scrollMap as Nullable<DOM>) = null;\n    }\n}\n","import {\n    type UnknownObject,\n    type DOM,\n    type DOMEventListener,\n    post,\n    noop,\n    RESULT_CODE,\n    makeResult,\n    toHelpString,\n    dom as $,\n} from '@cdp/runtime';\nimport {\n    getTransformMatrixValues,\n    setTransformTransition,\n    clearTransition,\n} from '@cdp/ui-utils';\nimport type {\n    ListContextOptions,\n    IListContext,\n    ListEnsureVisibleOptions,\n    IListScroller,\n    IListOperation,\n    IListScrollable,\n    IListBackupRestore,\n    IListItemView,\n} from '../interfaces';\nimport { ListViewGlobalConfig } from '../global-config';\nimport { ItemProfile, PageProfile } from '../profile';\nimport { ElementScroller } from './element-scroller';\n\n/** ListContextOptions 既定値 */\nconst _defaultOpts: Required<ListContextOptions> = {\n    scrollerFactory: ElementScroller.getFactory(),\n    enableHiddenPage: false,\n    enableTransformOffset: false,\n    scrollMapRefreshInterval: 200,\n    scrollRefreshDistance: 200,\n    pagePrepareCount: 3,\n    pagePreloadCount: 1,\n    enableAnimation: true,\n    animationDuration: 0,\n    baseDepth: 'auto',\n    itemTagName: 'li',  // TODO: 見極め\n    removeItemWithTransition: true,\n    useDummyInactiveScrollMap: false,\n};\n\n/** invalid instance */\nconst _$invalid = $() as DOM;\n\n/** 初期化済みか検証 */\nfunction verify<T>(x: T | undefined): asserts x is T {\n    if (null == x) {\n        throw makeResult(RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_INITIALIZATION);\n    }\n}\n\n/** @internal アイテム削除情報 */\ninterface RemoveItemsContext {\n    removed: ItemProfile[];\n    delta: number;\n    transition: boolean;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @internal\n * @en Core logic implementation class for scroll processing that manages memory. Accesses the DOM.\n * @ja メモリ管理を行うスクロール処理のコアロジック実装クラス. DOM にアクセスする.\n */\nexport class ListCore implements IListContext, IListOperation, IListScrollable, IListBackupRestore {\n    private _$root: DOM;\n    private _$map: DOM;\n    private _mapHeight = 0;\n    private _scroller: IListScroller | undefined;\n\n    /** UI 表示中に true */\n    private _active = true;\n\n    /** 初期オプションを格納 */\n    private readonly _settings: Required<ListContextOptions>;\n    /** Scroll Event Handler */\n    private readonly _scrollEventHandler: (ev?: Event) => void;\n    /** Scroll Stop Event Handler */\n    private readonly _scrollStopEventHandler: (ev?: Event) => void;\n    /** 1ページ分の高さの基準値 */\n    private _baseHeight = 0;\n    /** 管理下にある ItemProfile 配列 */\n    private readonly _items: ItemProfile[] = [];\n    /** 管理下にある PageProfile 配列 */\n    private readonly _pages: PageProfile[] = [];\n\n    /** 最新の表示領域情報を格納 (Scroll 中の更新処理に使用) */\n    private readonly _lastActivePageContext = {\n        index: 0,\n        from: 0,\n        to: 0,\n        pos: 0,    // scroll position\n    };\n\n    /** データの backup 領域. key と _lines を格納 */\n    private readonly _backup: Record<string, { items: ItemProfile[]; }> = {};\n\n    /** constructor */\n    constructor(options?: ListContextOptions) {\n        this._$root = this._$map = _$invalid;\n        this._settings = Object.assign({}, _defaultOpts, options);\n\n        this._scrollEventHandler = () => {\n            this.onScroll(this._scroller!.pos);\n        };\n        this._scrollStopEventHandler = (): void => {\n            this.onScrollStop(this._scroller!.pos);\n        };\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /** 内部オブジェクトの初期化 */\n    public initialize($root: DOM, height: number): void {\n        // 既に構築されていた場合は破棄\n        if (this._$root.length) {\n            this.destroy();\n        }\n\n        this._$root = $root;\n        this._$map = $root.hasClass(this._config.SCROLL_MAP_CLASS) ? $root : $root.find(this._config.SCROLL_MAP_SELECTOR);\n        // _$map が無い場合は初期化しない\n        if (this._$map.length <= 0) {\n            this.destroy();\n            throw makeResult(\n                RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM,\n                `${toHelpString(RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM)} [${this._config.SCROLL_MAP_CLASS} not found]`\n            );\n        }\n\n        this._scroller = this.createScroller();\n        this.setBaseHeight(height);\n        this.setScrollerCondition();\n    }\n\n    /** 内部オブジェクトの破棄 */\n    public destroy(): void {\n        this.resetScrollerCondition();\n        this._scroller?.destroy();\n        this._scroller = undefined;\n        this.release();\n        this._$root = this._$map = _$invalid;\n    }\n\n    /** ページの基準値を取得 */\n    public setBaseHeight(height: number): void {\n        if (height <= 0) {\n            throw makeResult(\n                RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM,\n                `${toHelpString(RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM)} [base hight: ${height}]`\n            );\n        }\n        this._baseHeight = height;\n        this._scroller?.update();\n    }\n\n    /** active 状態設定 */\n    public async setActiveState(active: boolean): Promise<void> {\n        this._active = active;\n        await this.treatScrollPosition();\n    }\n\n    /** active 状態判定 */\n    get active(): boolean {\n        return this._active;\n    }\n\n    /** scroller の種類を取得 */\n    get scrollerType(): string {\n        return this._settings.scrollerFactory.type;\n    }\n\n    /** スクロール位置の保存/復元 */\n    public async treatScrollPosition(): Promise<void> {\n        verify(this._scroller);\n\n        const offset = (this._scroller.pos - this._lastActivePageContext.pos);\n        const { useDummyInactiveScrollMap: useDummyMap } = this._settings;\n\n        const updateOffset = ($target: DOM): void => {\n            const { translateY } = getTransformMatrixValues($target[0]);\n            if (offset !== translateY) {\n                $target.css('transform', `translate3d(0,${offset}px,0`);\n            }\n        };\n\n        if (this._active) {\n            await this._scroller.scrollTo(this._lastActivePageContext.pos, false, 0);\n            this._$map.css({ 'transform': '', 'display': 'block' });\n            if (useDummyMap) {\n                this.prepareInactiveMap().remove();\n            }\n        } else {\n            const $map = useDummyMap ? this.prepareInactiveMap() : this._$map;\n            updateOffset($map);\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IListContext\n\n    /** get scroll-map element */\n    get $scrollMap(): DOM {\n        return this._$map;\n    }\n\n    /** get scroll-map height [px] */\n    get scrollMapHeight(): number {\n        return this._$map.length ? this._mapHeight : 0;\n    }\n\n    /** get {@link ListContextOptions} */\n    get options(): Required<ListContextOptions> {\n        return this._settings;\n    }\n\n    /** update scroll-map height (delta [px]) */\n    updateScrollMapHeight(delta: number): void {\n        if (this._$map.length) {\n            this._mapHeight += Math.trunc(delta);\n            // for fail safe.\n            if (this._mapHeight < 0) {\n                this._mapHeight = 0;\n            }\n            this._$map.height(this._mapHeight);\n        }\n    }\n\n    /** update internal profile */\n    updateProfiles(from: number): void {\n        const { _items } = this;\n        for (let i = from, n = _items.length; i < n; i++) {\n            if (0 < i) {\n                const last = _items[i - 1];\n                _items[i].index = last.index + 1;\n                _items[i].offset = last.offset + last.height;\n            } else {\n                _items[i].index = 0;\n                _items[i].offset = 0;\n            }\n        }\n    }\n\n    /** get recyclable element */\n    findRecycleElements(): DOM {\n        return this._$map.find(this._config.RECYCLE_CLASS_SELECTOR);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IListView\n\n    /** 初期化済みか判定 */\n    isInitialized(): boolean {\n        return !!this._scroller;\n    }\n\n    /** item 登録 */\n    addItem(height: number, initializer: new (options?: UnknownObject) => IListItemView, info: UnknownObject, insertTo?: number): void {\n        this._addItem(new ItemProfile(this, Math.trunc(height), initializer, info), insertTo);\n    }\n\n    /** item 登録 (内部用) */\n    _addItem(item: ItemProfile | ItemProfile[], insertTo?: number): void {\n        const items: ItemProfile[] = Array.isArray(item) ? item : [item];\n        let deltaHeight = 0;\n        let addTail = false;\n\n        if (null == insertTo || this._items.length < insertTo) {\n            insertTo = this._items.length;\n        }\n\n        if (insertTo === this._items.length) {\n            addTail = true;\n        }\n\n        // scroll map の更新\n        for (const it of items) {\n            deltaHeight += it.height;\n        }\n        this.updateScrollMapHeight(deltaHeight);\n\n        // 挿入\n        this._items.splice(insertTo, 0, ...items);\n\n        // page 設定の解除\n        if (!addTail) {\n            if (0 === insertTo) {\n                this.clearPage();\n            } else if (null != this._items[insertTo - 1].pageIndex) {\n                this.clearPage(this._items[insertTo - 1].pageIndex);\n            }\n        }\n\n        // offset の再計算\n        this.updateProfiles(insertTo);\n    }\n\n    /** 指定した Item を削除 */\n    removeItem(index: number, size?: number, delay?: number): void;\n    removeItem(index: number[], delay?: number): void;\n    removeItem(index: number | number[], arg2?: number, arg3?: number): void {\n        if (Array.isArray(index)) {\n            this._removeItemRandomly(index, arg2);\n        } else {\n            this._removeItemContinuously(index, arg2, arg3);\n        }\n    }\n\n    /** helper: 削除候補と変化量の算出 */\n    private _queryRemoveItemsContext(indexes: number[], delay: number): RemoveItemsContext {\n        const removed: ItemProfile[] = [];\n        let delta = 0;\n        let transition = false;\n\n        for (const idx of indexes) {\n            const item = this._items[idx];\n            delta += item.height;\n            // 削除要素の z-index の初期化\n            item.resetDepth();\n            removed.push(item);\n        }\n        // 自動設定・削除遅延時間が設定されかつ、スクロールポジションに変更がある場合は transition 設定\n        if (this._settings.removeItemWithTransition && (0 < delay)) {\n            const current = this.scrollPos;\n            const posMax = this.scrollPosMax - delta;\n            transition = (posMax < current);\n        }\n\n        return { removed, delta, transition };\n    }\n\n    /** helper: 削除時の更新 */\n    private _updateWithRemoveItemsContext(context: RemoveItemsContext, delay: number, profileUpdate: () => void): void {\n        const { removed, delta, transition } = context;\n\n        // transition 設定\n        if (transition) {\n            this.setupScrollMapTransition(delay);\n        }\n\n        // customize point: プロファイルの更新\n        profileUpdate();\n\n        // スクロール領域の更新\n        this.updateScrollMapHeight(-delta);\n        // 遅延削除\n        setTimeout(() => {\n            for (const item of removed) {\n                item.deactivate();\n            }\n        }, delay);\n    }\n\n    /** 指定した ItemProfile を削除: 連続 index 版 */\n    private _removeItemContinuously(index: number, size: number | undefined, delay: number | undefined): void {\n        size = size ?? 1;\n        delay = delay ?? 0;\n\n        if (index < 0 || this._items.length < index + size) {\n            throw makeResult(\n                RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM,\n                `${toHelpString(RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM)} [removeItem(), invalid index: ${index}]`\n            );\n        }\n\n        // 削除候補と変化量の算出\n        const indexes = Array.from({ length: size }, (_, i) => index + i);\n        const context = this._queryRemoveItemsContext(indexes, delay);\n\n        // 更新\n        this._updateWithRemoveItemsContext(context, delay, () => {\n            // page 設定の解除\n            if (null != this._items[index].pageIndex) {\n                this.clearPage(this._items[index].pageIndex);\n            }\n            // 配列から削除\n            this._items.splice(index, size);\n            // offset の再計算\n            this.updateProfiles(index);\n        });\n    }\n\n    /** 指定した ItemProfile を削除: random access 版 */\n    private _removeItemRandomly(indexes: number[], delay?: number): void {\n        delay = delay ?? 0;\n        indexes.sort((lhs, rhs) => rhs - lhs); // 降順ソート\n\n        for (let i = 0, n = indexes.length; i < n; i++) {\n            if (i < 0 || this._items.length < i) {\n                throw makeResult(\n                    RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM,\n                    `${toHelpString(RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM)} [removeItem(), invalid index: ${i}]`\n                );\n            }\n        }\n\n        // 削除候補と変化量の算出\n        const context = this._queryRemoveItemsContext(indexes, delay);\n\n        // 更新\n        this._updateWithRemoveItemsContext(context, delay, () => {\n            for (const idx of indexes) {\n                // page 設定の解除\n                if (null != this._items[idx].pageIndex) {\n                    this.clearPage(this._items[idx].pageIndex);\n                }\n                // 配列から削除\n                this._items.splice(idx, 1);\n            }\n            // offset の再計算\n            const first = indexes[indexes.length - 1];\n            this.updateProfiles(first);\n        });\n    }\n\n    /** scroll map のトランジション設定 */\n    private setupScrollMapTransition(delay: number): void {\n        verify(this._scroller);\n        const el = this._$map[0];\n        this._$map.transitionEnd(() => {\n            clearTransition(el);\n        });\n        setTransformTransition(el, 'height', delay, 'ease');\n    }\n\n    /** 指定した item に設定した情報を取得 */\n    getItemInfo(target: number | Event): UnknownObject {\n        const { _items, _config } = this;\n\n        const parser = ($target: DOM): number => {\n            if ($target.hasClass(_config.LISTITEM_BASE_CLASS)) {\n                return Number($target.attr(_config.DATA_CONTAINER_INDEX));\n            } else if ($target.hasClass(_config.SCROLL_MAP_CLASS) || $target.length <= 0) {\n                console.warn('cannot ditect item from event object.');\n                return NaN;\n            } else {\n                return parser($target.parent());\n            }\n        };\n\n        const index = target instanceof Event ? parser($(target.currentTarget as HTMLElement)) : Number(target);\n\n        if (Number.isNaN(index)) {\n            throw makeResult(\n                RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM,\n                `${toHelpString(RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM)} [unsupported type: ${typeof target}]`\n            );\n        } else if (index < 0 || _items.length <= index) {\n            throw makeResult(\n                RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM,\n                `${toHelpString(RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM)} getItemInfo() [invalid index: ${typeof index}]`\n            );\n        }\n\n        return _items[index].info;\n    }\n\n    /** アクティブページを更新 */\n    refresh(): this {\n        const { _pages, _items, _settings, _lastActivePageContext } = this;\n\n        const targets: Record<number, 'activate' | 'hide' | 'deactivate'> = {};\n        const currentPageIndex = this.getPageIndex();\n        const highPriorityIndex: number[] = [];\n\n        const storeNextPageState = (index: number): void => {\n            if (index === currentPageIndex) {\n                targets[index] = 'activate';\n                highPriorityIndex.push(index);\n            } else if (Math.abs(currentPageIndex - index) <= _settings.pagePrepareCount) {\n                targets[index] = 'activate';\n            } else if (_settings.enableHiddenPage) {\n                targets[index] = 'hide';\n            } else {\n                targets[index] = 'deactivate';\n            }\n            // current page の 前後は high priority にする\n            if (currentPageIndex + 1 === index || currentPageIndex - 1 === index) {\n                highPriorityIndex.push(index);\n            }\n        };\n\n        // 対象無し\n        if (_items.length <= 0) {\n            return this;\n        }\n\n        {\n            const searchCount = _settings.pagePrepareCount + _settings.pagePreloadCount;\n            const beginIndex = currentPageIndex - searchCount;\n            const endIndex = currentPageIndex + searchCount;\n\n            let overflowPrev = 0, overflowNext = 0;\n            for (let pageIndex = beginIndex; pageIndex <= endIndex; pageIndex++) {\n                if (pageIndex < 0) {\n                    overflowPrev++;\n                    continue;\n                }\n                if (_pages.length <= pageIndex) {\n                    overflowNext++;\n                    continue;\n                }\n                storeNextPageState(pageIndex);\n            }\n\n            if (0 < overflowPrev) {\n                for (let i = 0, pageIndex = currentPageIndex + searchCount + 1; i < overflowPrev; i++, pageIndex++) {\n                    if (_pages.length <= pageIndex) {\n                        break;\n                    }\n                    storeNextPageState(pageIndex);\n                }\n            }\n\n            if (0 < overflowNext) {\n                for (let i = 0, pageIndex = currentPageIndex - searchCount - 1; i < overflowNext; i++, pageIndex--) {\n                    if (pageIndex < 0) {\n                        break;\n                    }\n                    storeNextPageState(pageIndex);\n                }\n            }\n        }\n\n        // 不要になった page の 非活性化\n        for (const page of _pages.filter(page => 'inactive' !== page.status)) {\n            if (null == targets[page.index]) {\n                page.deactivate();\n            }\n        }\n\n        // 優先 page の activate\n        for (const idx of highPriorityIndex.sort((lhs, rhs) => lhs - rhs)) { // 昇順ソート\n            void post(() => {\n                this.isInitialized() && _pages[idx]?.activate();\n            });\n        }\n\n        // そのほかの page の 状態変更\n        for (const key of Object.keys(targets)) {\n            const index = Number(key);\n            const action = targets[index];\n            void post(() => {\n                this.isInitialized() && _pages[index]?.[action]?.();\n            });\n        }\n\n        // 更新後に使用しなかった DOM を削除\n        this.findRecycleElements().remove();\n\n        const pageCurrent = _pages[currentPageIndex];\n        _lastActivePageContext.from  = pageCurrent.getItemFirst()?.index ?? 0;\n        _lastActivePageContext.to    = pageCurrent.getItemLast()?.index ?? 0;\n        _lastActivePageContext.index = currentPageIndex;\n\n        return this;\n    }\n\n    /** 未アサインページを構築 */\n    update(): this {\n        this.assignPage(this._pages.length);\n        this.refresh();\n        return this;\n    }\n\n    /** ページアサインを再構成 */\n    rebuild(): this {\n        this.clearPage();\n        this.assignPage();\n        this.refresh();\n        return this;\n    }\n\n    /** 管轄データを破棄 */\n    release(): this {\n        for (const item of this._items) {\n            item.deactivate();\n        }\n        this._pages.length = 0;\n        this._items.length = 0;\n        this._mapHeight = 0;\n        this._$map.height(0);\n        return this;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IListScrollable\n\n    /** スクロール位置を取得 */\n    get scrollPos(): number {\n        return this._scroller?.pos ?? 0;\n    }\n\n    /** スクロール位置の最大値を取得 */\n    get scrollPosMax(): number {\n        return this._scroller?.posMax ?? 0;\n    }\n\n    /** スクロールイベントハンドラ設定/解除 */\n    setScrollHandler(handler: DOMEventListener, method: 'on' | 'off'): void {\n        this._scroller?.[method]('scroll', handler);\n    }\n\n    /** スクロール終了イベントハンドラ設定/解除 */\n    setScrollStopHandler(handler: DOMEventListener, method: 'on' | 'off'): void {\n        this._scroller?.[method]('scrollstop', handler);\n    }\n\n    /** スクロール位置を指定 */\n    async scrollTo(pos: number, animate?: boolean, time?: number): Promise<void> {\n        verify(this._scroller);\n        if (pos < 0) {\n            console.warn(`invalid position, too small. [pos: ${pos}]`);\n            pos = 0;\n        } else if (this._scroller.posMax < pos) {\n            console.warn(`invalid position, too big. [pos: ${pos}]`);\n            pos = this._scroller.pos;\n        }\n        // pos のみ先駆けて更新\n        this._lastActivePageContext.pos = pos;\n        if (pos !== this._scroller.pos) {\n            await this._scroller.scrollTo(pos, animate, time);\n        }\n    }\n\n    /** インデックス指定された item の表示を保証 */\n    async ensureVisible(index: number, options?: ListEnsureVisibleOptions): Promise<void> {\n        const { _scroller, _items, _settings, _baseHeight } = this;\n\n        verify(_scroller);\n        if (index < 0 || _items.length <= index) {\n            throw makeResult(\n                RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM,\n                `${toHelpString(RESULT_CODE.ERROR_UI_LISTVIEW_INVALID_PARAM)} ensureVisible() [invalid index: ${typeof index}]`\n            );\n        }\n\n        const operation = Object.assign({\n            partialOK: true,\n            setTop: false,\n            animate: _settings.enableAnimation,\n            time: _settings.animationDuration,\n            callback: noop,\n        }, options) as Required<ListEnsureVisibleOptions>;\n\n        const currentScope = {\n            from: _scroller.pos,\n            to: _scroller.pos + _baseHeight,\n        };\n\n        const target = _items[index];\n\n        const targetScope = {\n            from: target.offset,\n            to: target.offset + target.height,\n        };\n\n        const isInScope = (): boolean => {\n            if (operation.partialOK) {\n                if (targetScope.from <= currentScope.from) {\n                    return currentScope.from <= targetScope.to;\n                } else {\n                    return targetScope.from <= currentScope.to;\n                }\n            } else {\n                return currentScope.from <= targetScope.from && targetScope.to <= currentScope.to;\n            }\n        };\n\n        const detectPosition = (): number => {\n            return targetScope.from < currentScope.from\n                ? targetScope.from\n                : target.offset - target.height // bottom 合わせは情報不足により不可\n            ;\n        };\n\n        let pos: number;\n        if (operation.setTop) {\n            pos = targetScope.from;\n        } else if (isInScope()) {\n            operation.callback();\n            return; // noop\n        } else {\n            pos = detectPosition();\n        }\n\n        // 補正\n        if (pos < 0) {\n            pos = 0;\n        } else if (_scroller.posMax < pos) {\n            pos = _scroller.posMax;\n        }\n\n        await this.scrollTo(pos, operation.animate, operation.time);\n        operation.callback();\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IListBackupRestore\n\n    /** 内部データのバックアップを実行 */\n    backup(key: string): boolean {\n        if (null == this._backup[key]) {\n            this._backup[key] = { items: this._items };\n        }\n        return true;\n    }\n\n    /** 内部データのバックアップを実行 */\n    restore(key: string, rebuild: boolean): boolean {\n        if (null == this._backup[key]) {\n            return false;\n        }\n        if (0 < this._items.length) {\n            this.release();\n        }\n\n        this._addItem(this._backup[key].items);\n\n        if (rebuild) {\n            this.rebuild();\n        }\n\n        return true;\n    }\n\n    /** バックアップデータの有無を確認 */\n    hasBackup(key: string): boolean {\n        return null != this._backup[key];\n    }\n\n    /** バックアップデータの破棄 */\n    clearBackup(key?: string): boolean {\n        if (null == key) {\n            for (const key of Object.keys(this._backup)) {\n                delete this._backup[key];\n            }\n            return true;\n        } else if (null != this._backup[key]) {\n            delete this._backup[key];\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /** バックアップデータにアクセス */\n    get backupData(): UnknownObject {\n        return this._backup;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// internal:\n\n    /** @internal */\n    private get _config(): ListViewGlobalConfig {\n        return ListViewGlobalConfig();\n    }\n\n    /** Scroller 用環境設定 */\n    private setScrollerCondition(): void {\n        this._scroller?.on('scroll', this._scrollEventHandler);\n        this._scroller?.on('scrollstop', this._scrollStopEventHandler);\n    }\n\n    /** Scroller 用環境破棄 */\n    private resetScrollerCondition(): void {\n        this._scroller?.off('scrollstop', this._scrollStopEventHandler);\n        this._scroller?.off('scroll', this._scrollEventHandler);\n    }\n\n    /** 既定の Scroller オブジェクトの作成 */\n    private createScroller(): IListScroller {\n        return this._settings.scrollerFactory(this._$root[0], this._settings);\n    }\n\n    /** 現在の Page Index を取得 */\n    private getPageIndex(): number {\n        const { _scroller, _baseHeight, _pages } = this;\n        verify(_scroller);\n\n        const { pos: scrollPos, posMax: scrollPosMax } = _scroller;\n\n        const scrollMapSize = (() => {\n            const lastPage = this.getLastPage();\n            return lastPage ? lastPage.offset + lastPage.height : _baseHeight;\n        })();\n\n        const pos = (() => {\n            if (0 === scrollPosMax || scrollPosMax <= _baseHeight) {\n                return 0;\n            } else {\n                return scrollPos * scrollMapSize / scrollPosMax;\n            }\n        })();\n\n        const validRange = (page: PageProfile): boolean => {\n            if (null == page) {\n                return false;\n            } else if (page.offset <= pos && pos <= page.offset + page.height) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        let candidate = Math.floor(pos / _baseHeight);\n        if (_pages.length <= candidate) {\n            candidate = _pages.length - 1;\n        }\n\n        let page = _pages[candidate];\n        if (validRange(page)) {\n            return page.index;\n        } else if (pos < page.offset) {\n            for (let i = candidate - 1; i >= 0; i--) {\n                page = _pages[i];\n                if (validRange(page)) {\n                    return page.index;\n                }\n            }\n        } else {\n            for (let i = candidate + 1, n = _pages.length; i < n; i++) {\n                page = _pages[i];\n                if (validRange(page)) {\n                    return page.index;\n                }\n            }\n        }\n\n        console.warn(`cannot detect page index. fallback: ${_pages.length - 1}`);\n        return _pages.length - 1;\n    }\n\n    /** 最後のページを取得 */\n    private getLastPage(): PageProfile | undefined {\n        if (0 < this._pages.length) {\n            return this._pages[this._pages.length - 1];\n        } else {\n            return undefined;\n        }\n    }\n\n    /** スクロールイベント*/\n    private onScroll(pos: number): void {\n        if (this._active && 0 < this._pages.length) {\n            const currentPageIndex = this.getPageIndex();\n            // TODO: intersectionRect を使用する場合, Scroll ハンドラー全般はどうあるべきか要検討\n            if (Math.abs(pos - this._lastActivePageContext.pos) < this._settings.scrollRefreshDistance) {\n                if (this._lastActivePageContext.index !== currentPageIndex) {\n                    this.refresh();\n                }\n            }\n            this._lastActivePageContext.pos = pos;\n        }\n    }\n\n    /** スクロール停止イベント */\n    private onScrollStop(pos: number): void {\n        if (this._active && 0 < this._pages.length) {\n            const currentPageIndex = this.getPageIndex();\n            if (this._lastActivePageContext.index !== currentPageIndex) {\n                this.refresh();\n            }\n            this._lastActivePageContext.pos = pos;\n        }\n    }\n\n    /** ページ区分のアサイン */\n    private assignPage(from?: number): void {\n        this.clearPage(from);\n\n        const { _items, _pages, _baseHeight, _scroller } = this;\n        const basePage = this.getLastPage();\n        const nextItemIndex = basePage?.getItemLast()?.index ?? 0;\n        const asigneeItems  = _items.slice(nextItemIndex);\n\n        let workPage = basePage;\n        if (null == workPage) {\n            workPage = new PageProfile();\n            _pages.push(workPage);\n        }\n\n        for (const item of asigneeItems) {\n            if (_baseHeight <= workPage.height) {\n                workPage.normalize();\n                const newPage = new PageProfile();\n                newPage.index = workPage.index + 1;\n                newPage.offset = workPage.offset + workPage.height;\n                workPage = newPage;\n                _pages.push(workPage);\n            }\n            item.pageIndex = workPage.index;\n            workPage.push(item);\n        }\n\n        workPage.normalize();\n\n        _scroller?.update();\n    }\n\n    /** ページ区分の解除 */\n    private clearPage(from?: number): void {\n        this._pages.splice(from ?? 0);\n    }\n\n    /** inactive 用 Map の生成 */\n    private prepareInactiveMap(): DOM {\n        const { _config, _$map, _mapHeight } = this;\n        const $parent = _$map.parent();\n        let $inactiveMap = $parent.find(_config.INACTIVE_CLASS_SELECTOR);\n\n        if ($inactiveMap.length <= 0) {\n            const currentPageIndex = this.getPageIndex();\n            const $listItemViews = _$map.clone().children().filter((_, element: HTMLElement) => {\n                const pageIndex = Number($(element).attr(_config.DATA_PAGE_INDEX));\n                if (currentPageIndex - 1 <= pageIndex || pageIndex <= currentPageIndex + 1) {\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n            $inactiveMap = $(`<section class=\"${_config.SCROLL_MAP_CLASS}\" \"${_config.INACTIVE_CLASS}\"></section>`)\n                .append($listItemViews)\n                .height(_mapHeight);\n            $parent.append($inactiveMap);\n            _$map.css('display', 'none');\n        }\n\n        return $inactiveMap;\n    }\n}\n","import {\n    type Writable,\n    type UnknownObject,\n    type DOM,\n    type DOMSelector,\n    type DOMEventListener,\n    dom as $,\n    type ViewConstructionOptions,\n    View,\n} from '@cdp/runtime';\nimport type {\n    ListContextOptions,\n    IListContext,\n    IListView,\n    ListEnsureVisibleOptions,\n    IListItemView,\n} from './interfaces';\nimport { ListCore } from './core/list';\nimport { ItemProfile } from './profile';\n\n/** @internal */ const _properties = Symbol('properties');\n\n/** @internal */\ninterface Property {\n    readonly context: ListCore;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Interface class that stores {@link ListView} initialization information.\n * @ja {@link ListView} の初期化情報を格納するインターフェイスクラス\n */\nexport interface ListViewConstructOptions<TElement extends Node = HTMLElement, TFuncName = string>\n    extends ListContextOptions, ViewConstructionOptions<TElement, TFuncName> {\n    $el?: DOM<TElement>;\n    initialHeight?: number;\n}\n\n/**\n * @en Virtual list view class that provides memory management functionality.\n * @ja メモリ管理機能を提供する仮想リストビュークラス\n */\nexport abstract class ListView<TElement extends Node = HTMLElement, TEvent extends object = object>\n    extends View<TElement, TEvent> implements IListView {\n\n    /** @internal */\n    private readonly [_properties]!: Property;\n\n    /** constructor */\n    constructor(options?: ListViewConstructOptions<TElement>) {\n        super(options);\n\n        const opt = options ?? {};\n        (this[_properties] as Writable<Property>) = {\n            context: new ListCore(opt),\n        } as Property;\n\n        if (opt.$el) {\n            this.setElement(opt.$el as DOMSelector<TElement>);\n        } else {\n            const height = opt.initialHeight ?? this.$el.height();\n            this[_properties].context.initialize(this.$el as DOM<Node> as DOM, height);\n        }\n    }\n\n    /** context accessor */\n    get context(): IListContext {\n        return this[_properties].context;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// View component methods:\n\n    /** `this.el` 更新時の新しい HTML をレンダリングロジックの実装関数. モデル更新と View テンプレートを連動させる. */\n    abstract render(...args: unknown[]): any; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n    /**\n     * @override\n     * @en Change the view's element (`this.el` property) and re-delegate the view's events on the new element.\n     * @ja View が管轄する要素 (`this.el` property) の変更. イベント再設定も実行\n     *\n     * @param el\n     *  - `en` Object or the selector string which becomes origin of element.\n     *  - `ja` 要素のもとになるオブジェクトまたはセレクタ文字列\n     */\n    override setElement(el: DOMSelector<TElement | string>): this {\n        const { context } = this[_properties];\n        const $el = $(el);\n        context.destroy();\n        context.initialize($el as DOM<Node> as DOM, $el.height());\n        return super.setElement(el);\n    }\n\n    /**\n     * @override\n     * @en Remove this view by taking the element out of the DOM with release all listeners.\n     * @ja View から DOM を切り離し, リスナーを解除\n     */\n    override remove(): this {\n        this[_properties].context.destroy();\n        return super.remove();\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IListOperation\n\n    /**\n     * @en Determine whether it has been initialized.\n     * @ja 初期化済みか判定\n     *\n     * @returns\n     *  - `en` true: initialized / false: uninitialized\n     *  - `ja` true: 初期化済み / false: 未初期化\n     */\n    isInitialized(): boolean {\n        return this[_properties].context.isInitialized();\n    }\n\n    /**\n     * @en Item registration.\n     * @ja item 登録\n     *\n     * @param height\n     *  - `en` initial item's height\n     *  - `ja` item の高さ\n     * @param initializer\n     *  - `en` constructor for {@link IListItemView}'s subclass\n     *  - `ja` {@link IListItemView} のサブクラスのコンストラクタ\n     * @param info\n     *  - `en` init parameters for {@link IListItemView}'s subclass\n     *  - `ja` {@link IListItemView} のサブクラスの初期化パラメータ\n     * @param insertTo\n     *  - `en` specify the insertion position of item by index\n     *  - `ja` item の挿入位置をインデックスで指定\n     */\n    addItem(height: number, initializer: new (options?: UnknownObject) => IListItemView, info: UnknownObject, insertTo?: number): void {\n        this._addItem(new ItemProfile(this.context, Math.trunc(height), initializer, info), insertTo);\n    }\n\n    /**\n     * @internal\n     * @en Item registration (internal use).\n     * @ja item 登録 (内部用)\n     *\n     * @param item\n     *  - `en` {@link ItemProfile} instance\n     *  - `ja` {@link ItemProfile} インスタンス\n     * @param insertTo\n     *  - `en` specify the insertion position of item by index\n     *  - `ja` item の挿入位置をインデックスで指定\n     */\n    _addItem(item: ItemProfile | ItemProfile[], insertTo?: number): void {\n        this[_properties].context._addItem(item, insertTo);\n    }\n\n    /**\n     * @en Delete the specified Item.\n     * @ja 指定した Item を削除\n     *\n     * @param index\n     *  - `en` specify the index to start releasing\n     *  - `ja` 解除開始のインデックスを指定\n     * @param size\n     *  - `en` total number of items to release\n     *  - `ja` 解除する item の総数 [default: 1]\n     * @param delay\n     *  - `en` delay time to actually delete the element [default: 0 (immediate deletion)\n     *  - `ja` 実際に要素を削除する delay time [default: 0 (即時削除)]\n     */\n    removeItem(index: number, size?: number, delay?: number): void;\n\n    /**\n     * @en Delete the specified Item.\n     * @ja 指定した Item を削除\n     *\n     * @param index\n     *  - `en` specify target index array. it is more efficient to specify reverse index.\n     *  - `ja` 対象インデックス配列を指定. reverse index を指定するほうが効率的\n     * @param delay\n     *  - `en` delay time to actually delete the element [default: 0 (immediate deletion)\n     *  - `ja` 実際に要素を削除する delay time [default: 0 (即時削除)]\n     */\n    removeItem(index: number[], delay?: number): void;\n\n    removeItem(index: number | number[], arg2?: number, arg3?: number): void {\n        this[_properties].context.removeItem(index as number, arg2, arg3); // avoid ts(2345)\n    }\n\n    /**\n     * @en Get the information set for the specified item.\n     * @ja 指定した item に設定した情報を取得\n     *\n     * @param target\n     *  - `en` identifier [index | event object]\n     *  - `ja` 識別子. [index | event object]\n     */\n    getItemInfo(target: number | Event): UnknownObject {\n        return this[_properties].context.getItemInfo(target);\n    }\n\n    /**\n     * @en Refresh active pages.\n     * @ja アクティブページを更新\n     */\n    refresh(): this {\n        this[_properties].context.refresh();\n        return this;\n    }\n\n    /**\n     * @en Build unassigned pages.\n     * @ja 未アサインページを構築\n     */\n    update(): this {\n        this[_properties].context.update();\n        return this;\n    }\n\n    /**\n     * @en Rebuild page assignments.\n     * @ja ページアサインを再構成\n     */\n    rebuild(): this {\n        this[_properties].context.rebuild();\n        return this;\n    }\n\n    /**\n     * @override\n     * @en Destroy internal data.\n     * @ja 管轄データを破棄\n     */\n    override release(): this {\n        this[_properties].context.release();\n        return super.release();\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IListScrollable\n\n     /**\n     * @en Get scroll position.\n     * @ja スクロール位置を取得\n     */\n    get scrollPos(): number {\n        return this[_properties].context.scrollPos;\n    }\n\n     /**\n      * @en Get maximum scroll position.\n      * @ja スクロール位置の最大値を取得\n      */\n    get scrollPosMax(): number {\n        return this[_properties].context.scrollPosMax;\n    }\n\n     /**\n     * @en Scroll event handler setting/cancellation.\n     * @ja スクロールイベントハンドラ設定/解除\n     *\n     * @param handler\n     *  - `en` event handler function\n     *  - `ja` イベントハンドラー関数\n     * @param method\n     *  - `en` on: setting / off: canceling\n     *  - `ja` on: 設定 / off: 解除\n     */\n    setScrollHandler(handler: DOMEventListener, method: 'on' | 'off'): void {\n        this[_properties].context.setScrollHandler(handler, method);\n    }\n\n    /**\n     * @en Setting/cancelling scroll stop event handler.\n     * @ja スクロール終了イベントハンドラ設定/解除\n     *\n     * @param handler\n     *  - `en` event handler function\n     *  - `ja` イベントハンドラー関数\n     * @param method\n     *  - `en` on: setting / off: canceling\n     *  - `ja` on: 設定 / off: 解除\n     */\n    setScrollStopHandler(handler: DOMEventListener, method: 'on' | 'off'): void {\n        this[_properties].context.setScrollStopHandler(handler, method);\n    }\n\n    /**\n     * @en Set scroll position.\n     * @ja スクロール位置を指定\n     *\n     * @param pos\n     *  - `en` new scroll position value [0 - posMax]\n     *  - `ja` 新しいスクロール位置を指定 [0 - posMax]\n     * @param animate\n     *  - `en` enable/disable animation\n     *  - `ja` アニメーションの有無\n     * @param time\n     *  - `en` time spent on animation [msec]\n     *  - `ja` アニメーションに費やす時間 [msec]\n     */\n    scrollTo(pos: number, animate?: boolean, time?: number): Promise<void> {\n        return this[_properties].context.scrollTo(pos, animate, time);\n    }\n\n    /**\n     * @en Ensure visibility of item by index.\n     * @ja インデックス指定された item の表示を保証\n     *\n     * @param index\n     *  - `en` specify index of item\n     *  - `ja` item のインデックスを指定\n     * @param options\n     *  - `en` specify {@link ListEnsureVisibleOptions} object\n     *  - `ja` {@link ListEnsureVisibleOptions} オブジェクトを指定\n     */\n    ensureVisible(index: number, options?: ListEnsureVisibleOptions): Promise<void> {\n        return this[_properties].context.ensureVisible(index, options);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IListBackupRestore\n\n    /**\n     * @en Execute a backup of internal data.\n     * @ja 内部データのバックアップを実行\n     *\n     * @param key\n     *  - `en` specify backup key (any identifier)\n     *  - `ja` バックアップキー(任意の識別子)を指定\n     * @returns\n     *  - `en` true: success / false: failure\n     *  - `ja` true: 成功 / false: 失敗\n     */\n    backup(key: string): boolean {\n        return this[_properties].context.backup(key);\n    }\n\n    /**\n     * @en Execute a backup of internal data.\n     * @ja 内部データのバックアップを実行\n     *\n     * @param key\n     *  - `en` specify backup key (the one used for `backup()`)\n     *  - `ja` バックアップキーを指定 (`backup()` に使用したもの)\n     * @param rebuild\n     *  - `en` specify true to rebuild the list structure\n     *  - `ja` リスト構造を再構築する場合は true を指定\n     * @returns\n     *  - `en` true: success / false: failure\n     *  - `ja` true: 成功 / false: 失敗\n     */\n    restore(key: string, rebuild: boolean): boolean {\n        return this[_properties].context.restore(key, rebuild);\n    }\n\n    /**\n     * @en Check whether backup data exists.\n     * @ja バックアップデータの有無を確認\n     *\n     * @param key\n     *  - `en` specify backup key (the one used for `backup()`)\n     *  - `ja` バックアップキーを指定 (`backup()` に使用したもの)\n     * @returns\n     *  - `en` true: exists / false: not exists\n     *  - `ja` true: 有 / false: 無\n     */\n    hasBackup(key: string): boolean {\n        return this[_properties].context.hasBackup(key);\n    }\n\n    /**\n     * @en Discard backup data.\n     * @ja バックアップデータの破棄\n     *\n     * @param key\n     *  - `en` specify backup key (the one used for `backup()`)\n     *  - `ja` バックアップキーを指定 (`backup()` に使用したもの)\n     * @returns\n     *  - `en` true: discard existing data / false: specified data does not exist\n     *  - `ja` true: 存在したデータを破棄 / false: 指定されたデータは存在しない\n     */\n    clearBackup(key?: string): boolean {\n        return this[_properties].context.clearBackup(key);\n    }\n\n    /**\n     * @en Access backup data.\n     * @ja バックアップデータにアクセス\n     */\n    get backupData(): UnknownObject {\n        return this[_properties].context.backupData;\n    }\n}\n","import type { Writable } from '@cdp/runtime';\nimport type { IExpandableListView } from './interfaces';\nimport type { GroupProfile } from './profile';\nimport { type ListItemViewConstructionOptions, ListItemView } from './list-item-view';\n\n/** @internal */ const _properties = Symbol('properties');\n\n/** @internal */\ninterface Property {\n    readonly group: GroupProfile;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Options to pass to {@link ExpandableListItemView} construction.\n * @ja {@link ExpandableListItemView} 構築に渡すオプション\n */\nexport interface ExpandableListItemViewConstructionOptions<TElement extends Node = HTMLElement, TFuncName = string>\n    extends ListItemViewConstructionOptions<TElement, TFuncName> {\n    owner: IExpandableListView;\n    /** {@link GroupProfile} instance */\n    group: GroupProfile;\n}\n\n/**\n * @en List item container class handled by {@link ExpandableListView}.\n * @ja {@link ExpandableListView} が扱うリストアイテムコンテナクラス\n */\nexport abstract class ExpandableListItemView<TElement extends Node = HTMLElement, TEvent extends object = object>\n    extends ListItemView<TElement, TEvent> {\n\n    /** @internal */\n    private readonly [_properties]!: Property;\n\n    /** constructor */\n    constructor(options: ExpandableListItemViewConstructionOptions<TElement>) {\n        super(options);\n        const { group } = options;\n        (this[_properties] as Writable<Property>) = { group } as Property;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// protected methods:\n\n    /**\n     * @en Check expanded / collapsed status.\n     * @ja 展開状態を判定\n     *\n     * @returns\n     *  - `en` true: expanded, collapsed: close\n     *  - `ja` true: 展開, false: 収束\n     */\n    protected get isExpanded(): boolean {\n        return this[_properties].group.isExpanded;\n    }\n\n    /**\n     * @en Determine whether the list is during expanding.\n     * @ja 展開中か判定\n     */\n    protected get isExpanding(): boolean {\n        return (this.owner as IExpandableListView).isExpanding;\n    }\n\n    /**\n     * @en Determine whether the list is during collapsing.\n     * @ja 収束中か判定\n     */\n    protected get isCollapsing(): boolean {\n        return (this.owner as IExpandableListView).isCollapsing;\n    }\n\n    /**\n     * @en Determine whether the list is during expanding or collapsing.\n     * @ja 開閉中か判定\n     */\n    protected get isSwitching(): boolean {\n        return (this.owner as IExpandableListView).isSwitching;\n    }\n\n    /**\n     * @en Determine if it has a child {@link GroupProfile}. <br>\n     *     If `layoutKey` is specified, whether the layout information matches is also added to the judgment condition.\n     * @ja 子 {@link GroupProfile} を持っているか判定 <br>\n     *     `layoutKey` が指定されれば、layout 情報が一致しているかも判定条件に加える\n     *\n     * @param layoutKey\n     *  - `en` identifier for each layout\n     *  - `ja` レイアウト毎の識別子\n     * @returns\n     *  - `en` true: exists, false: unexists\n     *  - `ja` true: 有, false: 無\n     */\n    protected hasChildren(layoutKey?: string): boolean {\n        return this[_properties].group.hasChildren(layoutKey);\n    }\n}\n","import { type UnknownObject, luid } from '@cdp/runtime';\nimport type {\n    IExpandOperation,\n    IListLayoutKeyHolder,\n    IListStatusManager,\n    IListBackupRestore,\n    IExpandableListContext,\n} from '../interfaces';\nimport { GroupProfile } from '../profile';\n\n/**\n * @internal\n * @en Core logic implementation class that manages expanding / collapsing state.\n * @ja 開閉状態管理を行うコアロジック実装クラス\n */\nexport class ExpandCore implements\n    IExpandOperation,\n    IListLayoutKeyHolder,\n    IListStatusManager,\n    IListBackupRestore {\n\n    private readonly _owner: IExpandableListContext;\n\n    // TODO: owner との各データの所有権の見直し (backupData?)\n    /** { id: GroupProfile } */\n    private _mapGroups: Record<string, GroupProfile> = {};\n    /** 第1階層 GroupProfile を格納 */\n    private _aryTopGroups: GroupProfile[] = [];\n    /** layoutKey を格納 */\n    private _layoutKey?: string;\n\n    /**\n     * constructor\n     * @param owner 親 View のインスタンス\n     */\n    constructor(owner: IExpandableListContext) {\n        this._owner = owner;\n    }\n\n    /** データを破棄 */\n    public release(): void {\n        this._mapGroups = {};\n        this._aryTopGroups = [];\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IExpandOperation\n\n    /** 新規 GroupProfile を作成 */\n    newGroup(id?: string): GroupProfile {\n        id = id ?? luid('list-group', 4);\n        if (null != this._mapGroups[id]) {\n            return this._mapGroups[id];\n        }\n        const group = new GroupProfile(this._owner, id);\n        this._mapGroups[id] = group;\n        return group;\n    }\n\n    /** 登録済み Group を取得 */\n    getGroup(id: string): GroupProfile | undefined {\n        return this._mapGroups[id];\n    }\n\n    /** 第1階層の Group 登録 */\n    registerTopGroup(topGroup: GroupProfile): void {\n        // すでに登録済みの場合は restore して layout キーごとに復元する。\n        if ('registered' === topGroup.status) {\n            // TODO: orientation changed 時の layout キー変更対応だが、キーに変更が無いときは不具合となる。\n            // この API に実装が必要かも含めて見直しが必要\n            topGroup.restore();\n            return;\n        }\n\n        const lastGroup = this._aryTopGroups[this._aryTopGroups.length - 1];\n        const insertTo = lastGroup?.getNextItemIndex(true) ?? 0;\n\n        this._aryTopGroups.push(topGroup);\n        topGroup.register(insertTo);\n    }\n\n    /** 第1階層の Group を取得 */\n    getTopGroups(): GroupProfile[] {\n        return this._aryTopGroups.slice(0);\n    }\n\n    /** すべてのグループを展開 (1階層) */\n    async expandAll(): Promise<void> {\n        const promisies: Promise<void>[] = [];\n        for (const group of this._aryTopGroups) {\n            promisies.push(group.expand());\n        }\n        await Promise.all(promisies);\n    }\n\n    /** すべてのグループを収束 (1階層) */\n    async collapseAll(delay?: number): Promise<void> {\n        const promisies: Promise<void>[] = [];\n        for (const group of this._aryTopGroups) {\n            promisies.push(group.collapse(delay));\n        }\n        await Promise.all(promisies);\n    }\n\n    /** 展開中か判定 */\n    get isExpanding(): boolean {\n        return this._owner.isStatusIn('expanding');\n    }\n\n    /** 収束中か判定 */\n    get isCollapsing(): boolean {\n        return this._owner.isStatusIn('collapsing');\n    }\n\n    /** 開閉中か判定 */\n    get isSwitching(): boolean {\n        return this.isExpanding || this.isCollapsing;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IListLayoutKeyHolder\n\n    /** layout key を取得 */\n    get layoutKey(): string | undefined {\n        return this._layoutKey;\n    }\n\n    /** layout key を設定 */\n    set layoutKey(key: string) {\n        this._layoutKey = key;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IListStatusManager\n\n    /** 状態変数の参照カウントのインクリメント */\n    statusAddRef(status: string): number {\n        return this._owner.statusAddRef(status);\n    }\n\n    /** 状態変数の参照カウントのデクリメント */\n    statusRelease(status: string): number {\n        return this._owner.statusRelease(status);\n    }\n\n    /** 処理スコープ毎に状態変数を設定 */\n    statusScope<T>(status: string, executor: () => T | Promise<T>): Promise<T> {\n        return this._owner.statusScope(status, executor);\n    }\n\n    /** 指定した状態中であるか確認 */\n    isStatusIn(status: string): boolean {\n        return this._owner.isStatusIn(status);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IListBackupRestore\n\n    /** 内部データをバックアップ */\n    backup(key: string): boolean {\n        const _backup = this.backupData;\n        if (null == _backup[key]) {\n            _backup[key] = {\n                map: this._mapGroups,\n                tops: this._aryTopGroups,\n            };\n        }\n        return true;\n    }\n\n    /** 内部データをリストア */\n    restore(key: string, rebuild = true): boolean {\n        const backup = this.backupData[key] as UnknownObject;\n        if (null == backup) {\n            return false;\n        }\n\n        if (0 < this._aryTopGroups.length) {\n            this.release();\n        }\n\n        this._mapGroups = backup.map as Record<string, GroupProfile>;\n        this._aryTopGroups = backup.tops as GroupProfile[];\n\n        // layout 情報の確認\n        if (!this._aryTopGroups[0]?.hasLayoutKeyOf(this.layoutKey!)) {\n            return false;\n        }\n\n        // 展開しているものを登録\n        for (const group of this._aryTopGroups) {\n            group.restore();\n        }\n\n        // 再構築の予約\n        rebuild && this._owner.rebuild();\n        return true;\n    }\n\n    /** バックアップデータの有無 */\n    hasBackup(key: string): boolean {\n        return this._owner.hasBackup(key);\n    }\n\n    /** バックアップデータの破棄 */\n    clearBackup(key?: string): boolean {\n        return this._owner.clearBackup(key);\n    }\n\n    /** バックアップデータにアクセス */\n    get backupData(): UnknownObject {\n        return this._owner.backupData;\n    }\n}\n","import {\n    type Writable,\n    statusAddRef,\n    statusRelease,\n    statusScope,\n    isStatusIn,\n} from '@cdp/runtime';\nimport type { IExpandableListView } from './interfaces';\nimport { ExpandCore } from './core';\nimport type { GroupProfile } from './profile';\nimport { type ListViewConstructOptions, ListView } from './list-view';\n\n/** @internal */ const _properties = Symbol('properties');\n\n/** @internal */\ninterface Property {\n    readonly context: ExpandCore;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Virtual list view class with expanding / collapsing functionality.\n * @ja 開閉機能を備えた仮想リストビュークラス\n */\nexport abstract class ExpandableListView<TElement extends Node = HTMLElement, TEvent extends object = object>\n    extends ListView<TElement, TEvent> implements IExpandableListView {\n\n    /** @internal */\n    private readonly [_properties]!: Property;\n\n    /** constructor */\n    constructor(options?: ListViewConstructOptions<TElement>) {\n        super(options);\n        (this[_properties] as Writable<Property>) = {\n            context: new ExpandCore(this),\n        } as Property;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IExpandableListView\n\n    /**\n     * @en Create a new {@link GroupProfile}. Return the object if it is already registered.\n     * @ja 新規 {@link GroupProfile} を作成. 登録済みの場合はそのオブジェクトを返却\n     *\n     * @param id\n     *  - `en` specify the newly created group id. if not specified, automatic allocation will be performed.\n     *  - `ja` 新規に作成する Group ID を指定. 指定しない場合は自動割り振り\n     */\n    newGroup(id?: string): GroupProfile {\n        return this[_properties].context.newGroup(id);\n    }\n\n    /**\n     * @en Get registered {@link GroupProfile}.\n     * @ja 登録済み {@link GroupProfile} を取得\n     *\n     * @param id\n     *  - `en` specify the Group ID to retrieve\n     *  - `ja` 取得する Group ID を指定\n     */\n    getGroup(id: string): GroupProfile | undefined {\n        return this[_properties].context.getGroup(id);\n    }\n\n    /**\n     * @en 1st layer {@link GroupProfile} registration.\n     * @ja 第1階層の {@link GroupProfile} 登録\n     *\n     * @param topGroup\n     *  - `en` constructed {@link GroupProfile} instance\n     *  - `ja` 構築済み {@link GroupProfile} インスタンス\n     */\n    registerTopGroup(topGroup: GroupProfile): void {\n        this[_properties].context.registerTopGroup(topGroup);\n    }\n\n    /**\n     * @en Get 1st layer {@link GroupProfile}. <br>\n     *     A copy array is returned, so the client cannot cache it.\n     * @ja 第1階層の {@link GroupProfile} を取得 <br>\n     *     コピー配列が返されるため、クライアントはキャッシュ不可\n     */\n    getTopGroups(): GroupProfile[] {\n        return this[_properties].context.getTopGroups();\n    }\n\n    /**\n     * @en Expand all groups (1st layer)\n     * @ja すべてのグループを展開 (1階層)\n     */\n    expandAll(): Promise<void> {\n        return this[_properties].context.expandAll();\n    }\n\n    /**\n     * @en Collapse all groups (1st layer)\n     * @ja すべてのグループを収束 (1階層)\n     */\n    collapseAll(delay?: number): Promise<void> {\n        return this[_properties].context.collapseAll(delay);\n    }\n\n    /**\n     * @en Determine whether the list is during expanding.\n     * @ja 展開中か判定\n     */\n    get isExpanding(): boolean {\n        return this[_properties].context.isExpanding;\n    }\n\n    /**\n     * @en Determine whether the list is during collapsing.\n     * @ja 収束中か判定\n     */\n    get isCollapsing(): boolean {\n        return this[_properties].context.isCollapsing;\n    }\n\n    /**\n     * @en Determine whether the list is during expanding or collapsing.\n     * @ja 開閉中か判定\n     */\n    get isSwitching(): boolean {\n        return this[_properties].context.isSwitching;\n    }\n\n    /**\n     * @en Increment reference count for status identifier.\n     * @ja 状態変数の参照カウントのインクリメント\n     *\n     * @param status\n     *  - `en` state identifier\n     *  - `ja` 状態識別子\n     * @returns\n     *  - `en` reference count value\n     *  - `ja` 参照カウントの値\n     */\n    statusAddRef(status: string): number {\n        return statusAddRef(status);\n    }\n\n    /**\n     * @en Decrement reference count for status identifier.\n     * @ja 状態変数の参照カウントのデクリメント\n     *\n     * @param status\n     *  - `en` state identifier\n     *  - `ja` 状態識別子\n     * @returns\n     *  - `en` reference count value\n     *  - `ja` 参照カウントの値\n     */\n    statusRelease(status: string): number {\n        return statusRelease(status);\n    }\n\n    /**\n     * @en State variable management scope\n     * @ja 状態変数管理スコープ\n     *\n     * @param status\n     *  - `en` state identifier\n     *  - `ja` 状態識別子\n     * @param executor\n     *  - `en` seed function.\n     *  - `ja` 対象の関数\n     * @returns\n     *  - `en` retval of seed function.\n     *  - `ja` 対象の関数の戻り値\n     */\n    statusScope<T>(status: string, executor: () => T | Promise<T>): Promise<T> {\n        return statusScope(status, executor);\n    }\n\n    /**\n     * @en Check if it's in the specified state.\n     * @ja 指定した状態中であるか確認\n     *\n     * @param status\n     *  - `en` state identifier\n     *  - `ja` 状態識別子\n     * @return {Boolean} true: 状態内 / false: 状態外\n     * @returns\n     *  - `en` `true`: within the status / `false`: out of the status\n     *  - `ja` `true`: 状態内 / `false`: 状態外\n     */\n    isStatusIn(status: string): boolean {\n        return isStatusIn(status);\n    }\n\n    /** @internal layout key を取得 */\n    get layoutKey(): string | undefined {\n        return this[_properties].context.layoutKey;\n    }\n\n    /** @internal layout key を設定 */\n    set layoutKey(key: string) {\n        this[_properties].context.layoutKey = key;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// override: ListView\n\n    /**\n     * @override\n     * @en Destroy internal data.\n     * @ja 管轄データを破棄\n     */\n    override release(): this {\n        super.release();\n        this[_properties].context.release();\n        return this;\n    }\n\n    /**\n     * @override\n     * @en Execute a backup of internal data.\n     * @ja 内部データのバックアップを実行\n     *\n     * @param key\n     *  - `en` specify backup key (any identifier)\n     *  - `ja` バックアップキー(任意の識別子)を指定\n     * @returns\n     *  - `en` true: success / false: failure\n     *  - `ja` true: 成功 / false: 失敗\n     */\n    override backup(key: string): boolean {\n        return this[_properties].context.backup(key);\n    }\n\n    /**\n     * @override\n     * @en Execute a backup of internal data.\n     * @ja 内部データのバックアップを実行\n     *\n     * @param key\n     *  - `en` specify backup key (the one used for `backup()`)\n     *  - `ja` バックアップキーを指定 (`backup()` に使用したもの)\n     * @param rebuild\n     *  - `en` specify true to rebuild the list structure\n     *  - `ja` リスト構造を再構築する場合は true を指定\n     * @returns\n     *  - `en` true: success / false: failure\n     *  - `ja` true: 成功 / false: 失敗\n     */\n    override restore(key: string, rebuild = true): boolean {\n        return this[_properties].context.restore(key, rebuild);\n    }\n}\n","import './result-code-defs';\nexport * from './interfaces';\nexport * from './global-config';\nexport * from './profile';\nexport * from './list-item-view';\nexport * from './list-view';\nexport * from './expandable-list-item-view';\nexport * from './expandable-list-view';\n\n// TODO: test\nexport const UI_LISTVIEW_STATUS = 'UNDER CONSTRUCTION';\n"],"mappings":";;;;oSAKA,WAmBI,IAGCA,EAAAC,YAAAD,YAFGA,IAAA,2DACAA,EAAuBA,EAAA,qBAAAC,YAAAC,mBAAyC,QAA8B,8BAA4B,uBAEjI,CAvBD,GCHwB,MAAMC,EAAmBC,OAAKC,WAAWF,kBC2BpDG,EAA4BC,IACrC,MAAMC,EAAQL,EAAiBI,IACzBE,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,GAAQ,IAAIC,kBAAkBP,EAAMQ,WACrE,MAAO,CACHC,WAAYL,EACZM,WAAYL,EACZM,WAAYL,EACZM,OAAQX,EACRY,OAAQX,EACRY,OAAQX,EACX,EAoBQY,EAAyB,CAAChB,EAAiBiB,EAAcC,EAAcC,EAAiB,UACjG,MAAMC,EAAY,GAAIF,EAAO,QAAUC,IACvCnB,EAAGC,MAAMoB,YAAY,aAAc,GAAGJ,KAAQG,gBAAwBA,IAAY,EAYzEE,EAAmBtB,IAC5BA,EAAGC,MAAMsB,eAAe,aAAa,ECpEzCC,aAAWC,OAAKC,GAAhBF,E,iQCCKG,OAAKC,OAAKC,EAAWC,ICF1B,WAUI,IAKCrC,EAAAC,YAAAD,YAJGA,IAAA,4DACAA,EAA2CA,EAAA,yCAAAC,YAAAC,mBAAyC,QAAiC,yCAAuC,2CAC5JF,EAA2CA,EAAA,gCAAAC,YAAAC,mBAAyC,QAAiC,oCAAkC,uCACvJF,EAA2CA,EAAA,oCAAAC,YAAAC,mBAAyC,QAAiC,gCAA8B,sCAE1J,CAhBD,GCgCA,MAAMoC,EAAU,CACZC,UAA6B,SAC7BC,cAAqC,0BACrCC,iBAA2C,2BAC3CC,iBAA2C,6BAC3CC,oBAAiD,8BACjDC,eAAuC,WACvCC,wBAAyD,YACzDC,cAAqC,0BACrCC,uBAAuD,2BACvDC,oBAAiD,4BACjDC,6BAAmE,6BACnEC,gBAAyC,yBACzCC,qBAAmD,+BAO1CC,EAAwBC,IACjC,GAAIA,EACA,IAAK,MAAMC,KAAOC,OAAOC,KAAKH,QACtBI,IAAcJ,EAAUC,WACjBD,EAAUC,GAI7B,OAAOC,OAAOG,OAAO,GAAIpB,EAASe,EAAU,ECnDnC,MAAAM,EAEQC,OAETC,QAESC,aAEAC,MAETC,OAAS,EAETC,WAAa,EAEbC,QAAU,EAEVC,OAEAC,UAkBR,WAAAC,CAAYC,EAAqBC,EAAgBC,EAA6DT,GAC1GU,KAAKb,OAAeU,EACpBG,KAAKZ,QAAeU,EACpBE,KAAKX,aAAeU,EACpBC,KAAKV,MAAeA,CACvB,CAMD,UAAIQ,GACA,OAAOE,KAAKZ,OACf,CAGD,SAAIa,GACA,OAAOD,KAAKT,MACf,CAGD,SAAIU,CAAMA,GACND,KAAKT,OAASU,EACdD,KAAKE,aACR,CAGD,aAAIC,GACA,OAAOH,KAAKR,UACf,CAGD,aAAIW,CAAUF,GACVD,KAAKR,WAAaS,EAClBD,KAAKI,iBACR,CAGD,UAAIC,GACA,OAAOL,KAAKP,OACf,CAGD,UAAIY,CAAOA,GACPL,KAAKP,QAAUY,EACfL,KAAKM,cACR,CAGD,QAAIC,GACA,OAAOP,KAAKV,KACf,CASM,QAAAkB,GACH,GAAI,MAAQR,KAAKL,UAAW,CACxBK,KAAKN,OAASM,KAAKS,qBACnB,MAAMC,EAAU5B,OAAOG,OAAO,CAC1BnD,GAAIkE,KAAKN,OACTG,MAAOG,KAAKb,OACZwB,YAAaX,MACdA,KAAKV,OACRU,KAAKL,UAAY,IAAIK,KAAKX,aAAaqB,GACnC,SAAWV,KAAKN,OAAOkB,IAAI,YAC3BZ,KAAKN,OAAOkB,IAAI,UAAW,QAElC,CACDZ,KAAKI,kBACDJ,KAAKN,QAAU,YAAcM,KAAKN,OAAOkB,IAAI,eAC7CZ,KAAKN,OAAOkB,IAAI,aAAc,UAErC,CAMM,IAAAC,GACC,MAAQb,KAAKL,WACbK,KAAKQ,WAELR,KAAKN,QAAU,WAAaM,KAAKN,OAAOkB,IAAI,eAC5CZ,KAAKN,OAAOkB,IAAI,aAAc,SAErC,CAMM,UAAAE,GACC,MAAQd,KAAKL,YACbK,KAAKL,UAAUoB,SACff,KAAKL,eAAYX,EACjBgB,KAAKN,QAAQsB,SAAShB,KAAKnC,QAAQQ,eACnC2B,KAAKN,QAAQkB,IAAI,UAAW,QAC5BZ,KAAKN,YAASV,EAErB,CAMM,OAAAiC,GACC,MAAQjB,KAAKL,WACbK,KAAKL,UAAUuB,QAEtB,CAMM,QAAAC,GACH,OAAO,MAAQnB,KAAKL,SACvB,CAMM,YAAAyB,CAAaC,EAAmBX,GACnC,MAAMY,EAAQD,EAAYrB,KAAKZ,QAC/BY,KAAKZ,QAAUiC,EACfrB,KAAKb,OAAOoC,sBAAsBD,GAC9BZ,GAASc,YACTxB,KAAKb,OAAOsC,eAAezB,KAAKT,OAEvC,CAMM,UAAAmC,GACC,MAAQ1B,KAAKL,WACbK,KAAKN,QAAQkB,IAAI,UAAWZ,KAAKb,OAAOuB,QAAQiB,UAEvD,CAMD,WAAY9D,GACR,OAAOc,GACV,CAGO,kBAAA8B,GACJ,IAAImB,EACJ,MAAMC,EAAW7B,KAAKb,OAAO2C,sBAAsBC,QAC7CC,EAAchC,KAAKb,OAAOuB,QAAQsB,YAExC,OAAI,MAAQhC,KAAKN,aACbuC,EACOjC,KAAKN,SAGZ,EAAImC,EAASK,QACbN,EAAQC,EACRD,EAAMO,WAAW,WACjBP,EAAMQ,YAAYpC,KAAKnC,QAAQQ,iBAG/BuD,EAAQS,MAAE,IAAIL,YAAsBhC,KAAKnC,QAAQU,2BAA2ByD,OAC5EJ,EAAMhB,IAAI,UAAW,QACrBZ,KAAKb,OAAOmD,WAAWC,OAAOX,IAI9BA,EAAM9B,WAAaE,KAAKZ,SACxBwC,EAAM9B,OAAOE,KAAKZ,SAItBY,KAAKE,cAELF,KAAKM,eAEEsB,EACV,CAGO,WAAA1B,GACAF,KAAKN,QAAUM,KAAKN,OAAO8C,KAAKxC,KAAKnC,QAAQa,wBAA0B+D,OAAOzC,KAAKT,SACnFS,KAAKN,OAAO8C,KAAKxC,KAAKnC,QAAQa,qBAAsBsB,KAAKT,OAEhE,CAGO,eAAAa,GACAJ,KAAKN,QAAUM,KAAKN,OAAO8C,KAAKxC,KAAKnC,QAAQY,mBAAqBgE,OAAOzC,KAAKR,aAC9EQ,KAAKN,OAAO8C,KAAKxC,KAAKnC,QAAQY,gBAAiBuB,KAAKR,WAE3D,CAGO,YAAAc,GACJ,GAAKN,KAAKN,OAIV,GAAIM,KAAKb,OAAOuB,QAAQgC,sBAAuB,CAC3C,MAAMjG,WAAEA,GAAeZ,EAAyBmE,KAAKN,OAAO,IACxDjD,IAAeuD,KAAKP,SACpBO,KAAKN,OAAOkB,IAAI,YAAa,iBAAiBZ,KAAKP,cAE1D,KAAM,CACH,MAAMkD,EAAMC,SAAS5C,KAAKN,OAAOkB,IAAI,OAAQ,IACzC+B,IAAQ3C,KAAKP,SACbO,KAAKN,OAAOkB,IAAI,MAAO,GAAGZ,KAAKP,YAEtC,CACJ,ECxQQ,MAAAoD,EAEDtD,OAAS,EAETE,QAAU,EAEVL,QAAU,EAEV0D,OAAwB,GAExBC,QAA4C,WAMpD,SAAI9C,GACA,OAAOD,KAAKT,MACf,CAGD,SAAIU,CAAMA,GACND,KAAKT,OAASU,CACjB,CAGD,UAAII,GACA,OAAOL,KAAKP,OACf,CAGD,UAAIY,CAAOA,GACPL,KAAKP,QAAUY,CAClB,CAGD,UAAIP,GACA,OAAOE,KAAKZ,OACf,CAGD,UAAI4D,GACA,OAAOhD,KAAK+C,OACf,CASM,QAAAvC,GACH,GAAI,WAAaR,KAAK+C,QAClB,IAAK,MAAME,KAAQjD,KAAK8C,OACpBG,EAAKzC,WAGbR,KAAK+C,QAAU,QAClB,CAMM,IAAAlC,GACH,GAAI,WAAab,KAAK+C,QAClB,IAAK,MAAME,KAAQjD,KAAK8C,OACpBG,EAAKpC,OAGbb,KAAK+C,QAAU,QAClB,CAMM,UAAAjC,GACH,GAAI,aAAed,KAAK+C,QACpB,IAAK,MAAME,KAAQjD,KAAK8C,OACpBG,EAAKnC,aAGbd,KAAK+C,QAAU,UAClB,CAMM,IAAAG,CAAKD,GACRjD,KAAK8C,OAAOI,KAAKD,GACjBjD,KAAKZ,SAAW6D,EAAKnD,MACxB,CAMM,SAAAqD,GACH,MAAMC,EAAYpD,KAAK8C,OAAOO,OAAMJ,GAAQA,EAAK9B,aAC5CiC,IACDpD,KAAK+C,QAAU,WAEtB,CAMM,OAAAO,CAAQrD,GACX,OAAOsD,KAAGvD,KAAK8C,OAAQ7C,EAC1B,CAMM,YAAAuD,GACH,OAAOxD,KAAK8C,OAAO,EACtB,CAMM,WAAAW,GACH,OAAOzD,KAAK8C,OAAO9C,KAAK8C,OAAOZ,OAAS,EAC3C,ECnHQ,MAAAwB,EAEQC,IAEAxE,OAETyE,QAESC,UAA4B,GAErCC,WAAY,EAEZf,QAAyC,eAEhCgB,UAA2C,GAY5D,WAAAnE,CAAYC,EAA+BmE,GACvChE,KAAK2D,IAASK,EACdhE,KAAKb,OAASU,EACdG,KAAK+D,UAA4B,kBAAG,EACvC,CASD,MAAIC,GACA,OAAOhE,KAAK2D,GACf,CAOD,UAAIX,GACA,OAAOhD,KAAK+C,OACf,CAUD,cAAIkB,GACA,OAAOjE,KAAK8D,SACf,CAMD,UAAII,GACA,OAAOlE,KAAK4D,OACf,CAMD,YAAIO,GACA,OAAOnE,KAAK6D,SACf,CAaM,gBAAAO,CAAiBC,GAAqB,GACzC,IAAIC,EAAuB,GAO3B,OANID,IACAC,EAAQtE,KAAKuE,qBAAqB,YAElC,MAAQD,GAASA,EAAMpC,QAAU,KACjCoC,EAAQtE,KAAK8C,SAETwB,EAAMA,EAAMpC,OAAS,IAAIjC,OAAS,GAAK,CAClD,CAmBM,OAAAuE,CACH1E,EACAC,EACAQ,EACAkE,GAEAA,EAAYA,GAAS,iBACrB,MAAM/D,EAAU5B,OAAOG,OAAO,CAAEyF,aAAc1E,MAAQO,GAElD,MAAQP,KAAK+D,UAAUU,KACvBzE,KAAK+D,UAAUU,GAAa,IAGhC,MAAMxB,EAAO,IAAI/D,EAAYc,KAAKb,OAAOwF,QAASC,KAAKC,MAAM/E,GAASC,EAAaW,GASnF,MANK,eAAiBV,KAAK+C,SAAa,MAAQ/C,KAAKb,OAAOsF,WAAaA,IAAczE,KAAKb,OAAOsF,YAC/FzE,KAAKb,OAAO2F,SAAS7B,EAAMjD,KAAKoE,oBAChCpE,KAAKb,OAAO4F,UAEhB/E,KAAK+D,UAAUU,GAAWvB,KAAKD,GAExBjD,IACV,CAQM,WAAAgF,CAAYC,GACf,MAAMd,EAA2Be,MAAMC,QAAQF,GAAUA,EAAS,CAACA,GACnE,IAAK,MAAMG,KAASjB,EAChBiB,EAAMC,UAAUrF,MAGpB,OADAA,KAAK6D,UAAUX,QAAQiB,GAChBnE,IACV,CAeM,WAAAsF,CAAYb,GACf,QAAIzE,KAAK6D,UAAU3B,QAAU,KAElB,MAAQuC,GACRzE,KAAK6D,UAAU0B,MAAKH,GAASA,EAAMI,eAAef,KAIhE,CAaM,cAAAe,CAAef,GAClB,OAAQ,MAAQzE,KAAK+D,UAAUU,EAClC,CAMM,YAAMgB,GACT,IAAKzF,KAAKiE,WAAY,CAClB,MAAMK,EAAQtE,KAAKuE,qBAAqB,cACpC,EAAID,EAAMpC,cACJlC,KAAKb,OAAOuG,YAAY,aAAa,KAEvC,IAAK,MAAMzC,KAAQjD,KAAK8C,OACpBG,EAAKhC,UAGTjB,KAAKb,OAAO2F,SAASR,EAAOtE,KAAKoE,oBACjCpE,KAAKb,OAAO4F,QAAQ,GAG/B,CAED/E,KAAK8D,WAAY,CACpB,CAUM,cAAM6B,CAASC,GAClB,GAAI5F,KAAKiE,WAAY,CACjB,MAAMK,EAAQtE,KAAKuE,qBAAqB,gBACpC,EAAID,EAAMpC,SACV0D,EAAQA,GAAS5F,KAAKb,OAAOwF,QAAQjE,QAAQmF,wBACvC7F,KAAKb,OAAOuG,YAAY,cAAc,KAExC,IAAK,MAAMzC,KAAQjD,KAAK8C,OACpBG,EAAKhC,UAGTjB,KAAKb,OAAO2G,WAAWxB,EAAM,GAAGrE,MAAOqE,EAAMpC,OAAQ0D,GACrD5F,KAAKb,OAAO4F,QAAQ,IAG/B,CAED/E,KAAK8D,WAAY,CACpB,CAUD,mBAAMiC,CAAcrF,GACZ,EAAIV,KAAK8C,OAAOZ,aACVlC,KAAKb,OAAO4G,cAAc/F,KAAK8C,OAAO,GAAG7C,MAAOS,GAEtDA,GAASsF,YAEhB,CAUM,YAAMC,CAAOL,GACZ5F,KAAK8D,gBACC9D,KAAK2F,SAASC,SAEd5F,KAAKyF,QAElB,CAUM,QAAAS,CAASC,GACZ,GAAInG,KAAK4D,QACL,MAAMwC,aACF7K,cAAY8K,gCACZ,GAAGC,eAAa/K,cAAY8K,uGAIpC,OADArG,KAAKb,OAAO2F,SAAS9E,KAAKuG,WAAW,cAAeJ,GAC7CnG,IACV,CAMM,OAAAwG,GACH,GAAIxG,KAAK4D,QACL,MAAMwC,aACF7K,cAAY8K,gCACZ,GAAGC,eAAa/K,cAAY8K,sGAIpC,GAAIrG,KAAK8C,OAAQ,CACb,MAAMwB,EAAQtE,KAAK8D,UAAY9D,KAAK8C,OAAO2D,OAAOzG,KAAKuE,qBAAqB,WAAavE,KAAK8C,OAAO4D,QACrG1G,KAAKb,OAAO2F,SAASR,EACxB,CACD,OAAOtE,IACV,CAMD,UAAY8C,GACR,MAAMjE,EAAMmB,KAAKb,OAAOsF,UACxB,OAAI,MAAQ5F,EACDmB,KAAK+D,UAAUlF,GAEfmB,KAAK+D,UAAS,iBAE5B,CAGO,SAAAsB,CAAUnB,GACdlE,KAAK4D,QAAUM,CAClB,CAGO,UAAAqC,CAAWI,GACf,MAAMrC,EAAuB,GAK7B,OAJIqC,IAAc3G,KAAK+C,SACnBuB,EAAMpB,QAAQlD,KAAK8C,QAEvB9C,KAAK+C,QAAU4D,EACRrC,CACV,CAGO,oBAAAC,CAAqBqC,GACzB,MAAMC,EAAeC,IACjB,MAAMxC,EAAuB,GAC7B,IAAK,MAAMc,KAAS0B,EAAMjD,UAAW,CACjC,OAAQ+C,GACJ,IAAK,aACL,IAAK,eACDtC,EAAMpB,QAAQkC,EAAMmB,WAAWK,IAC/B,MACJ,IAAK,SACG,MAAQxB,EAAMtC,QACdwB,EAAMpB,QAAQkC,EAAMtC,QAQ5BsC,EAAMnB,YACNK,EAAMpB,QAAQ2D,EAAYzB,GAEjC,CACD,OAAOd,CAAK,EAEhB,OAAOuC,EAAY7G,KACtB,EC5XY,MAAM+G,EAAcC,OAAO,cAyBtC,MAAgBC,UACVC,OAGSC,CAACJ,GAGlB,WAAAnH,CAAYc,GACR0G,MAAM1G,GAEN,MAAMb,MAAEA,EAAKwH,IAAEA,EAAGpE,KAAEA,GAASvC,EAC5BV,KAAK+G,GAAsC,CACxClH,QACAoD,QAGAoE,GACArH,KAAKsH,WAAWD,EAEvB,CAMD,SAAIxH,GACA,OAAOG,KAAK+G,GAAalH,KAC5B,CAUQ,MAAAkB,GAML,OALAf,KAAKqH,IAAIlD,WAAWpD,SACpBf,KAAKqH,IAAIE,MAETvH,KAAKsH,WAAW,QAChBtH,KAAKwH,gBACExH,IACV,CASD,QAAAyH,GACI,OAAOzH,KAAK+G,GAAa9D,KAAKhD,KACjC,CAMD,SAAAyH,GACI,OAAO1H,KAAK+G,GAAa9D,KAAKnD,MACjC,CAMD,YAAA6H,GACI,QAAS3H,KAAKqH,KAAKlD,WAAWjC,MACjC,CAaD,YAAAd,CAAaC,EAAmBX,GAK5B,OAJIV,KAAKqH,KAAOrH,KAAK0H,cAAgBrG,IACjCrB,KAAK+G,GAAa9D,KAAK7B,aAAaC,EAAWX,GAC/CV,KAAKqH,IAAIvH,OAAOuB,IAEbrB,IACV,EClGQ,MAAA4H,EACQC,SACAC,YACAC,SACAC,mBACTC,gBAGR,WAAArI,CAAYsI,EAAsBxH,GAU9B,IAAIyH,EATJnI,KAAK6H,SAAWxF,MAAE6F,GAClBlI,KAAK8H,YAAc9H,KAAK6H,SAAS1D,WAAWpC,QAC5C/B,KAAK+H,SAAWrH,EAQhBV,KAAKgI,mBAAqB,KAClB,MAAQG,GACRC,eAAaD,GAEjBA,EAAQE,cAAW,KACfrI,KAAK6H,SAASS,QAAQ,IAAIC,YAAY,aAAc,CAAEC,SAAS,EAAMC,YAAY,IAAQ,GAC1FzI,KAAKiI,iBAAe,GAAkC,EAE7DjI,KAAK6H,SAASa,GAAG,SAAU1I,KAAKgI,mBACnC,CAMD,eAAWW,GACP,MAAO,+BACV,CAGD,iBAAOC,GACH,MAAMC,EAAU,CAACX,EAAsBxH,IAC5B,IAAIkH,EAAgBM,EAASxH,GAWxC,OARA5B,OAAOgK,iBAAiBD,EAAS,CAC7BE,KAAM,CACFC,cAAc,EACdC,UAAU,EACVC,YAAY,EACZC,MAAOvB,EAAgBe,QAGxBE,CACV,CAMD,QAAIE,GACA,OAAOnB,EAAgBe,IAC1B,CAGD,OAAIS,GACA,OAAOpJ,KAAK6H,SAASwB,WACxB,CAGD,UAAIC,GACA,OAAO1E,KAAK2E,IAAIvJ,KAAK8H,YAAYhI,SAAWE,KAAK6H,SAAS/H,SAAU,EACvE,CAGD,EAAA4I,CAAGK,EAA+B/C,GAC9BhG,KAAK6H,SAASa,GAAqBK,EAAM/C,EAC5C,CAGD,GAAAuB,CAAIwB,EAA+B/C,GAC/BhG,KAAK6H,SAASN,IAAsBwB,EAAM/C,EAC7C,CAGD,QAAAwD,CAASJ,EAAaK,EAAmBC,GACrC,OAAO,IAAIC,SAAQC,IACf5J,KAAKiI,gBAAmBjI,KAAK+H,SAAS8B,iBAAmBJ,EAAWC,GAAQ1J,KAAK+H,SAASlC,uBAAoB7G,EAC9GgB,KAAK6H,SAASwB,UAAUD,EAAKpJ,KAAKiI,qBAAiBjJ,GAAW,KAC1DgB,KAAKiI,qBAAkBjJ,EACvB4K,GAAS,GACX,GAET,CAGD,MAAA7E,GAEC,CAGD,OAAA+E,GACI9J,KAAK6H,UAAUN,MACdvH,KAAK6H,SAA8B7H,KAAK8H,YAAgC,IAC5E,ECvGL,MAAMiC,EAA6C,CAC/CC,gBAAiBpC,EAAgBgB,aACjCqB,kBAAkB,EAClBvH,uBAAuB,EACvBwH,yBAA0B,IAC1BC,sBAAuB,IACvBC,iBAAkB,EAClBC,iBAAkB,EAClBR,iBAAiB,EACjBhE,kBAAmB,EACnBlE,UAAW,OACXK,YAAa,KACbsI,0BAA0B,EAC1BC,2BAA2B,GAIzBC,EAAYnI,QAGlB,SAASoI,EAAUC,GACf,GAAI,MAAQA,EACR,MAAMtE,aAAW7K,cAAYoP,yCAErC,CAgBa,MAAAC,EACDC,OACAC,MACAC,WAAa,EACbC,UAGAC,SAAU,EAGDC,UAEAC,oBAEAC,wBAETC,YAAc,EAELvI,OAAwB,GAExBwI,OAAwB,GAGxBC,uBAAyB,CACtCtL,MAAO,EACPuL,KAAM,EACNC,GAAI,EACJrC,IAAK,GAIQsC,QAAqD,GAGtE,WAAA9L,CAAYc,GACRV,KAAK6K,OAAS7K,KAAK8K,MAAQN,EAC3BxK,KAAKkL,UAAYpM,OAAOG,OAAO,GAAI8K,EAAcrJ,GAEjDV,KAAKmL,oBAAsB,KACvBnL,KAAK2L,SAAS3L,KAAKgL,UAAW5B,IAAI,EAEtCpJ,KAAKoL,wBAA0B,KAC3BpL,KAAK4L,aAAa5L,KAAKgL,UAAW5B,IAAI,CAE7C,CAMM,UAAAyC,CAAWC,EAAYhM,GAS1B,GAPIE,KAAK6K,OAAO3I,QACZlC,KAAK8J,UAGT9J,KAAK6K,OAASiB,EACd9L,KAAK8K,MAAQgB,EAAMC,SAAS/L,KAAKnC,QAAQI,kBAAoB6N,EAAQA,EAAME,KAAKhM,KAAKnC,QAAQK,qBAEzF8B,KAAK8K,MAAM5I,QAAU,EAErB,MADAlC,KAAK8J,UACC1D,aACF7K,cAAY8K,gCACZ,GAAGC,eAAa/K,cAAY8K,qCAAqCrG,KAAKnC,QAAQI,+BAItF+B,KAAKgL,UAAYhL,KAAKiM,iBACtBjM,KAAKkM,cAAcpM,GACnBE,KAAKmM,sBACR,CAGM,OAAArC,GACH9J,KAAKoM,yBACLpM,KAAKgL,WAAWlB,UAChB9J,KAAKgL,eAAYhM,EACjBgB,KAAKqM,UACLrM,KAAK6K,OAAS7K,KAAK8K,MAAQN,CAC9B,CAGM,aAAA0B,CAAcpM,GACjB,GAAIA,GAAU,EACV,MAAMsG,aACF7K,cAAY8K,gCACZ,GAAGC,eAAa/K,cAAY8K,iDAAiDvG,MAGrFE,KAAKqL,YAAcvL,EACnBE,KAAKgL,WAAWjG,QACnB,CAGM,oBAAMuH,CAAeC,GACxBvM,KAAKiL,QAAUsB,QACTvM,KAAKwM,qBACd,CAGD,UAAID,GACA,OAAOvM,KAAKiL,OACf,CAGD,gBAAIwB,GACA,OAAOzM,KAAKkL,UAAUlB,gBAAgBjB,IACzC,CAGM,yBAAMyD,GACT/B,EAAOzK,KAAKgL,WAEZ,MAAM3K,EAAUL,KAAKgL,UAAU5B,IAAMpJ,KAAKuL,uBAAuBnC,KACzDmB,0BAA2BmC,GAAgB1M,KAAKkL,UASxD,GAAIlL,KAAKiL,cACCjL,KAAKgL,UAAUxB,SAASxJ,KAAKuL,uBAAuBnC,KAAK,EAAO,GACtEpJ,KAAK8K,MAAMlK,IAAI,CAAErE,UAAa,GAAIoQ,QAAW,UACzCD,GACA1M,KAAK4M,qBAAqB7L,aAE3B,CACH,MAAM8L,EAAOH,EAAc1M,KAAK4M,qBAAuB5M,KAAK8K,MAd3C,CAACgC,IAClB,MAAMrQ,WAAEA,GAAeZ,EAAyBiR,EAAQ,IACpDzM,IAAW5D,GACXqQ,EAAQlM,IAAI,YAAa,iBAAiBP,QAC7C,EAWDC,CAAauM,EAChB,CACJ,CAMD,cAAIvK,GACA,OAAOtC,KAAK8K,KACf,CAGD,mBAAIiC,GACA,OAAO/M,KAAK8K,MAAM5I,OAASlC,KAAK+K,WAAa,CAChD,CAGD,WAAIrK,GACA,OAAOV,KAAKkL,SACf,CAGD,qBAAA3J,CAAsBD,GACdtB,KAAK8K,MAAM5I,SACXlC,KAAK+K,YAAcnG,KAAKC,MAAMvD,GAE1BtB,KAAK+K,WAAa,IAClB/K,KAAK+K,WAAa,GAEtB/K,KAAK8K,MAAMhL,OAAOE,KAAK+K,YAE9B,CAGD,cAAAtJ,CAAe+J,GACX,MAAM1I,OAAEA,GAAW9C,KACnB,IAAK,IAAIgN,EAAIxB,EAAMyB,EAAInK,EAAOZ,OAAQ8K,EAAIC,EAAGD,IACzC,GAAI,EAAIA,EAAG,CACP,MAAME,EAAOpK,EAAOkK,EAAI,GACxBlK,EAAOkK,GAAG/M,MAAQiN,EAAKjN,MAAQ,EAC/B6C,EAAOkK,GAAG3M,OAAS6M,EAAK7M,OAAS6M,EAAKpN,MACzC,MACGgD,EAAOkK,GAAG/M,MAAQ,EAClB6C,EAAOkK,GAAG3M,OAAS,CAG9B,CAGD,mBAAAyB,GACI,OAAO9B,KAAK8K,MAAMkB,KAAKhM,KAAKnC,QAAQS,uBACvC,CAMD,aAAA6O,GACI,QAASnN,KAAKgL,SACjB,CAGD,OAAAxG,CAAQ1E,EAAgBC,EAA6DQ,EAAqB4F,GACtGnG,KAAK8E,SAAS,IAAI5F,EAAYc,KAAM4E,KAAKC,MAAM/E,GAASC,EAAaQ,GAAO4F,EAC/E,CAGD,QAAArB,CAAS7B,EAAmCkD,GACxC,MAAM7B,EAAuBY,MAAMC,QAAQlC,GAAQA,EAAO,CAACA,GAC3D,IAAImK,EAAc,EACdC,GAAU,GAEV,MAAQlH,GAAYnG,KAAK8C,OAAOZ,OAASiE,KACzCA,EAAWnG,KAAK8C,OAAOZ,QAGvBiE,IAAanG,KAAK8C,OAAOZ,SACzBmL,GAAU,GAId,IAAK,MAAMC,KAAMhJ,EACb8I,GAAeE,EAAGxN,OAEtBE,KAAKuB,sBAAsB6L,GAG3BpN,KAAK8C,OAAOyK,OAAOpH,EAAU,KAAM7B,GAG9B+I,IACG,IAAMlH,EACNnG,KAAKwN,YACE,MAAQxN,KAAK8C,OAAOqD,EAAW,GAAGhG,WACzCH,KAAKwN,UAAUxN,KAAK8C,OAAOqD,EAAW,GAAGhG,YAKjDH,KAAKyB,eAAe0E,EACvB,CAKD,UAAAL,CAAW7F,EAA0BwN,EAAeC,GAC5CxI,MAAMC,QAAQlF,GACdD,KAAK2N,oBAAoB1N,EAAOwN,GAEhCzN,KAAK4N,wBAAwB3N,EAAOwN,EAAMC,EAEjD,CAGO,wBAAAG,CAAyBC,EAAmBlI,GAChD,MAAMmI,EAAyB,GAC/B,IAAIzM,EAAQ,EACR0M,GAAa,EAEjB,IAAK,MAAMC,KAAOH,EAAS,CACvB,MAAM7K,EAAOjD,KAAK8C,OAAOmL,GACzB3M,GAAS2B,EAAKnD,OAEdmD,EAAKvB,aACLqM,EAAQ7K,KAAKD,EAChB,CAED,GAAIjD,KAAKkL,UAAUZ,0BAA6B,EAAI1E,EAAQ,CACxD,MAAMsI,EAAUlO,KAAKmO,UACf7E,EAAStJ,KAAKoO,aAAe9M,EACnC0M,EAAc1E,EAAS4E,CAC1B,CAED,MAAO,CAAEH,UAASzM,QAAO0M,aAC5B,CAGO,6BAAAK,CAA8B1J,EAA6BiB,EAAe0I,GAC9E,MAAMP,QAAEA,EAAOzM,MAAEA,EAAK0M,WAAEA,GAAerJ,EAGnCqJ,GACAhO,KAAKuO,yBAAyB3I,GAIlC0I,IAGAtO,KAAKuB,uBAAuBD,GAE5B+G,YAAW,KACP,IAAK,MAAMpF,KAAQ8K,EACf9K,EAAKnC,YACR,GACF8E,EACN,CAGO,uBAAAgI,CAAwB3N,EAAeuO,EAA0B5I,GAIrE,GAHA4I,EAAOA,GAAQ,EACf5I,EAAQA,GAAS,EAEb3F,EAAQ,GAAKD,KAAK8C,OAAOZ,OAASjC,EAAQuO,EAC1C,MAAMpI,aACF7K,cAAY8K,gCACZ,GAAGC,eAAa/K,cAAY8K,kEAAkEpG,MAKtG,MAAM6N,EAAU5I,MAAMsG,KAAK,CAAEtJ,OAAQsM,IAAQ,CAACC,EAAGzB,IAAM/M,EAAQ+M,IACzDrI,EAAU3E,KAAK6N,yBAAyBC,EAASlI,GAGvD5F,KAAKqO,8BAA8B1J,EAASiB,GAAO,KAE3C,MAAQ5F,KAAK8C,OAAO7C,GAAOE,WAC3BH,KAAKwN,UAAUxN,KAAK8C,OAAO7C,GAAOE,WAGtCH,KAAK8C,OAAOyK,OAAOtN,EAAOuO,GAE1BxO,KAAKyB,eAAexB,EAAM,GAEjC,CAGO,mBAAA0N,CAAoBG,EAAmBlI,GAC3CA,EAAQA,GAAS,EACjBkI,EAAQY,MAAK,CAACC,EAAKC,IAAQA,EAAMD,IAEjC,IAAK,IAAI3B,EAAI,EAAGC,EAAIa,EAAQ5L,OAAQ8K,EAAIC,EAAGD,IACvC,GAAIA,EAAI,GAAKhN,KAAK8C,OAAOZ,OAAS8K,EAC9B,MAAM5G,aACF7K,cAAY8K,gCACZ,GAAGC,eAAa/K,cAAY8K,kEAAkE2G,MAM1G,MAAMrI,EAAU3E,KAAK6N,yBAAyBC,EAASlI,GAGvD5F,KAAKqO,8BAA8B1J,EAASiB,GAAO,KAC/C,IAAK,MAAMqI,KAAOH,EAEV,MAAQ9N,KAAK8C,OAAOmL,GAAK9N,WACzBH,KAAKwN,UAAUxN,KAAK8C,OAAOmL,GAAK9N,WAGpCH,KAAK8C,OAAOyK,OAAOU,EAAK,GAG5B,MAAMlM,EAAQ+L,EAAQA,EAAQ5L,OAAS,GACvClC,KAAKyB,eAAeM,EAAM,GAEjC,CAGO,wBAAAwM,CAAyB3I,GAC7B6E,EAAOzK,KAAKgL,WACZ,MAAMlP,EAAKkE,KAAK8K,MAAM,GACtB9K,KAAK8K,MAAM+D,eAAc,KACrBzR,EAAgBtB,EAAG,IAEvBgB,EAAuBhB,EAAI,SAAU8J,EAAO,OAC/C,CAGD,WAAAkJ,CAAY7J,GACR,MAAMnC,OAAEA,EAAMjF,QAAEA,GAAYmC,KAEtB+O,EAAUjC,GACRA,EAAQf,SAASlO,EAAQU,qBAClByQ,OAAOlC,EAAQtK,KAAK3E,EAAQa,uBAC5BoO,EAAQf,SAASlO,EAAQI,mBAAqB6O,EAAQ5K,QAAU,QACvED,EACOgN,KAEAF,EAAOjC,EAAQ5I,UAIxBjE,EAAQgF,aAAkBiK,MAAQH,EAAO1M,MAAE4C,EAAOkK,gBAAiCH,OAAO/J,GAEhG,GAAI+J,OAAOI,MAAMnP,GACb,MAAMmG,aACF7K,cAAY8K,gCACZ,GAAGC,eAAa/K,cAAY8K,8DAA8DpB,MAE3F,GAAIhF,EAAQ,GAAK6C,EAAOZ,QAAUjC,EACrC,MAAMmG,aACF7K,cAAY8K,gCACZ,GAAGC,eAAa/K,cAAY8K,yEAAyEpG,MAI7G,OAAO6C,EAAO7C,GAAOM,IACxB,CAGD,OAAAU,GACI,MAAMqK,OAAEA,EAAMxI,OAAEA,EAAMoI,UAAEA,EAASK,uBAAEA,GAA2BvL,KAExDqP,EAA8D,GAC9DC,EAAmBtP,KAAKuP,eACxBC,EAA8B,GAE9BC,EAAsBxP,IACpBA,IAAUqP,GACVD,EAAQpP,GAAS,WACjBuP,EAAkBtM,KAAKjD,IAChB2E,KAAK8K,IAAIJ,EAAmBrP,IAAUiL,EAAUd,iBACvDiF,EAAQpP,GAAS,WACViL,EAAUjB,iBACjBoF,EAAQpP,GAAS,OAEjBoP,EAAQpP,GAAS,aAGjBqP,EAAmB,IAAMrP,GAASqP,EAAmB,IAAMrP,GAC3DuP,EAAkBtM,KAAKjD,EAC1B,EAIL,GAAI6C,EAAOZ,QAAU,EACjB,OAAOlC,KAGX,CACI,MAAM2P,EAAczE,EAAUd,iBAAmBc,EAAUb,iBACrDuF,EAAaN,EAAmBK,EAChCE,EAAWP,EAAmBK,EAEpC,IAAIG,EAAe,EAAGC,EAAe,EACrC,IAAK,IAAI5P,EAAYyP,EAAYzP,GAAa0P,EAAU1P,IAChDA,EAAY,EACZ2P,IAGAxE,EAAOpJ,QAAU/B,EACjB4P,IAGJN,EAAmBtP,GAGvB,GAAI,EAAI2P,EACJ,IAAK,IAAI9C,EAAI,EAAG7M,EAAYmP,EAAmBK,EAAc,EAAG3C,EAAI8C,KAC5DxE,EAAOpJ,QAAU/B,GADyD6M,IAAK7M,IAInFsP,EAAmBtP,GAI3B,GAAI,EAAI4P,EACJ,IAAK,IAAI/C,EAAI,EAAG7M,EAAYmP,EAAmBK,EAAc,EAAG3C,EAAI+C,KAC5D5P,EAAY,GAD8D6M,IAAK7M,IAInFsP,EAAmBtP,EAG9B,CAGD,IAAK,MAAM6P,KAAQ1E,EAAO2E,QAAOD,GAAQ,aAAeA,EAAKhN,SACrD,MAAQqM,EAAQW,EAAK/P,QACrB+P,EAAKlP,aAKb,IAAK,MAAMmN,KAAOuB,EAAkBd,MAAK,CAACC,EAAKC,IAAQD,EAAMC,SACpDnR,QAAK,KACNuC,KAAKmN,iBAAmB7B,EAAO2C,IAAMzN,UAAU,IAKvD,IAAK,MAAM3B,KAAOC,OAAOC,KAAKsQ,GAAU,CACpC,MAAMpP,EAAQ+O,OAAOnQ,GACfqR,EAASb,EAAQpP,QAClBxC,QAAK,KACNuC,KAAKmN,iBAAmB7B,EAAOrL,KAASiQ,MAAW,GAE1D,CAGDlQ,KAAK8B,sBAAsBf,SAE3B,MAAMoP,EAAc7E,EAAOgE,GAK3B,OAJA/D,EAAuBC,KAAQ2E,EAAY3M,gBAAgBvD,OAAS,EACpEsL,EAAuBE,GAAQ0E,EAAY1M,eAAexD,OAAS,EACnEsL,EAAuBtL,MAAQqP,EAExBtP,IACV,CAGD,MAAA+E,GAGI,OAFA/E,KAAKoQ,WAAWpQ,KAAKsL,OAAOpJ,QAC5BlC,KAAKiB,UACEjB,IACV,CAGD,OAAAqQ,GAII,OAHArQ,KAAKwN,YACLxN,KAAKoQ,aACLpQ,KAAKiB,UACEjB,IACV,CAGD,OAAAqM,GACI,IAAK,MAAMpJ,KAAQjD,KAAK8C,OACpBG,EAAKnC,aAMT,OAJAd,KAAKsL,OAAOpJ,OAAS,EACrBlC,KAAK8C,OAAOZ,OAAS,EACrBlC,KAAK+K,WAAa,EAClB/K,KAAK8K,MAAMhL,OAAO,GACXE,IACV,CAMD,aAAImO,GACA,OAAOnO,KAAKgL,WAAW5B,KAAO,CACjC,CAGD,gBAAIgF,GACA,OAAOpO,KAAKgL,WAAW1B,QAAU,CACpC,CAGD,gBAAAgH,CAAiBC,EAA2BC,GACxCxQ,KAAKgL,YAAYwF,GAAQ,SAAUD,EACtC,CAGD,oBAAAE,CAAqBF,EAA2BC,GAC5CxQ,KAAKgL,YAAYwF,GAAQ,aAAcD,EAC1C,CAGD,cAAM/G,CAASJ,EAAaK,EAAmBC,GAC3Ce,EAAOzK,KAAKgL,WACR5B,EAAM,QACNnH,EACAmH,EAAM,GACCpJ,KAAKgL,UAAU1B,OAASF,SAC/BnH,EACAmH,EAAMpJ,KAAKgL,UAAU5B,KAGzBpJ,KAAKuL,uBAAuBnC,IAAMA,EAC9BA,IAAQpJ,KAAKgL,UAAU5B,WACjBpJ,KAAKgL,UAAUxB,SAASJ,EAAKK,EAASC,EAEnD,CAGD,mBAAM3D,CAAc9F,EAAeS,GAC/B,MAAMsK,UAAEA,EAASlI,OAAEA,EAAMoI,UAAEA,EAASG,YAAEA,GAAgBrL,KAGtD,GADAyK,EAAOO,GACH/K,EAAQ,GAAK6C,EAAOZ,QAAUjC,EAC9B,MAAMmG,aACF7K,cAAY8K,gCACZ,GAAGC,eAAa/K,cAAY8K,2EAA2EpG,MAI/G,MAAM2G,EAAY9H,OAAOG,OAAO,CAC5ByR,WAAW,EACXC,QAAQ,EACRlH,QAASyB,EAAUrB,gBACnBH,KAAMwB,EAAUrF,kBAChBG,SAAUtI,QACXgD,GAEGkQ,EACI5F,EAAU5B,IADdwH,EAEE5F,EAAU5B,IAAMiC,EAGlBpG,EAASnC,EAAO7C,GAEhB4Q,EAAc,CAChBrF,KAAMvG,EAAO5E,OACboL,GAAIxG,EAAO5E,OAAS4E,EAAOnF,QAsB/B,IAAIsJ,EACJ,GAAIxC,EAAU+J,OACVvH,EAAMyH,EAAYrF,SACf,IArBC5E,EAAU8J,UACNG,EAAYrF,MAAQoF,EACbA,GAAqBC,EAAYpF,GAEjCoF,EAAYrF,MAAQoF,EAGxBA,GAAqBC,EAAYrF,MAAQqF,EAAYpF,IAAMmF,EAgBtE,OADAhK,EAAUZ,gBACV,EAEAoD,EAbOyH,EAAYrF,KAAOoF,EACpBC,EAAYrF,KACZvG,EAAO5E,OAAS4E,EAAOnF,MAYhC,CAGGsJ,EAAM,EACNA,EAAM,EACC4B,EAAU1B,OAASF,IAC1BA,EAAM4B,EAAU1B,cAGdtJ,KAAKwJ,SAASJ,EAAKxC,EAAU6C,QAAS7C,EAAU8C,MACtD9C,EAAUZ,UACb,CAMD,MAAA8K,CAAOjS,GAIH,OAHI,MAAQmB,KAAK0L,QAAQ7M,KACrBmB,KAAK0L,QAAQ7M,GAAO,CAAEyF,MAAOtE,KAAK8C,UAE/B,CACV,CAGD,OAAA0D,CAAQ3H,EAAawR,GACjB,OAAI,MAAQrQ,KAAK0L,QAAQ7M,KAGrB,EAAImB,KAAK8C,OAAOZ,QAChBlC,KAAKqM,UAGTrM,KAAK8E,SAAS9E,KAAK0L,QAAQ7M,GAAKyF,OAE5B+L,GACArQ,KAAKqQ,WAGF,EACV,CAGD,SAAAU,CAAUlS,GACN,OAAO,MAAQmB,KAAK0L,QAAQ7M,EAC/B,CAGD,WAAAmS,CAAYnS,GACR,GAAI,MAAQA,EAAK,CACb,IAAK,MAAMA,KAAOC,OAAOC,KAAKiB,KAAK0L,gBACxB1L,KAAK0L,QAAQ7M,GAExB,OAAO,CACV,CAAM,OAAI,MAAQmB,KAAK0L,QAAQ7M,YACrBmB,KAAK0L,QAAQ7M,IACb,EAId,CAGD,cAAIoS,GACA,OAAOjR,KAAK0L,OACf,CAMD,WAAY7N,GACR,OAAOc,GACV,CAGO,oBAAAwN,GACJnM,KAAKgL,WAAWtC,GAAG,SAAU1I,KAAKmL,qBAClCnL,KAAKgL,WAAWtC,GAAG,aAAc1I,KAAKoL,wBACzC,CAGO,sBAAAgB,GACJpM,KAAKgL,WAAWzD,IAAI,aAAcvH,KAAKoL,yBACvCpL,KAAKgL,WAAWzD,IAAI,SAAUvH,KAAKmL,oBACtC,CAGO,cAAAc,GACJ,OAAOjM,KAAKkL,UAAUlB,gBAAgBhK,KAAK6K,OAAO,GAAI7K,KAAKkL,UAC9D,CAGO,YAAAqE,GACJ,MAAMvE,UAAEA,EAASK,YAAEA,EAAWC,OAAEA,GAAWtL,KAC3CyK,EAAOO,GAEP,MAAQ5B,IAAK+E,EAAW7E,OAAQ8E,GAAiBpD,EAE3CkG,EAAgB,MAClB,MAAMC,EAAWnR,KAAKoR,cACtB,OAAOD,EAAWA,EAAS9Q,OAAS8Q,EAASrR,OAASuL,CACzD,EAHqB,GAKhBjC,EACE,IAAMgF,GAAgBA,GAAgB/C,EAC/B,EAEA8C,EAAY+C,EAAgB9C,EAIrCiD,EAAcrB,GACZ,MAAQA,IAEDA,EAAK3P,QAAU+I,GAAOA,GAAO4G,EAAK3P,OAAS2P,EAAKlQ,QAO/D,IAAIwR,EAAY1M,KAAK2M,MAAMnI,EAAMiC,GAC7BC,EAAOpJ,QAAUoP,IACjBA,EAAYhG,EAAOpJ,OAAS,GAGhC,IAAI8N,EAAO1E,EAAOgG,GAClB,GAAID,EAAWrB,GACX,OAAOA,EAAK/P,MACT,GAAImJ,EAAM4G,EAAK3P,QAClB,IAAK,IAAI2M,EAAIsE,EAAY,EAAGtE,GAAK,EAAGA,IAEhC,GADAgD,EAAO1E,EAAO0B,GACVqE,EAAWrB,GACX,OAAOA,EAAK/P,WAIpB,IAAK,IAAI+M,EAAIsE,EAAY,EAAGrE,EAAI3B,EAAOpJ,OAAQ8K,EAAIC,EAAGD,IAElD,GADAgD,EAAO1E,EAAO0B,GACVqE,EAAWrB,GACX,OAAOA,EAAK/P,MAMxB,YADAgC,EACOqJ,EAAOpJ,OAAS,CAC1B,CAGO,WAAAkP,GACJ,OAAI,EAAIpR,KAAKsL,OAAOpJ,OACTlC,KAAKsL,OAAOtL,KAAKsL,OAAOpJ,OAAS,QAExC,CAEP,CAGO,QAAAyJ,CAASvC,GACb,GAAIpJ,KAAKiL,SAAW,EAAIjL,KAAKsL,OAAOpJ,OAAQ,CACxC,MAAMoN,EAAmBtP,KAAKuP,eAE1B3K,KAAK8K,IAAItG,EAAMpJ,KAAKuL,uBAAuBnC,KAAOpJ,KAAKkL,UAAUf,uBAC7DnK,KAAKuL,uBAAuBtL,QAAUqP,GACtCtP,KAAKiB,UAGbjB,KAAKuL,uBAAuBnC,IAAMA,CACrC,CACJ,CAGO,YAAAwC,CAAaxC,GACjB,GAAIpJ,KAAKiL,SAAW,EAAIjL,KAAKsL,OAAOpJ,OAAQ,CACxC,MAAMoN,EAAmBtP,KAAKuP,eAC1BvP,KAAKuL,uBAAuBtL,QAAUqP,GACtCtP,KAAKiB,UAETjB,KAAKuL,uBAAuBnC,IAAMA,CACrC,CACJ,CAGO,UAAAgH,CAAW5E,GACfxL,KAAKwN,UAAUhC,GAEf,MAAM1I,OAAEA,EAAMwI,OAAEA,EAAMD,YAAEA,EAAWL,UAAEA,GAAchL,KAC7CwR,EAAWxR,KAAKoR,cAChBK,EAAgBD,GAAU/N,eAAexD,OAAS,EAClDyR,EAAgB5O,EAAO4D,MAAM+K,GAEnC,IAAIE,EAAWH,EACX,MAAQG,IACRA,EAAW,IAAI9O,EACfyI,EAAOpI,KAAKyO,IAGhB,IAAK,MAAM1O,KAAQyO,EAAc,CAC7B,GAAIrG,GAAesG,EAAS7R,OAAQ,CAChC6R,EAASxO,YACT,MAAMyO,EAAU,IAAI/O,EACpB+O,EAAQ3R,MAAQ0R,EAAS1R,MAAQ,EACjC2R,EAAQvR,OAASsR,EAAStR,OAASsR,EAAS7R,OAC5C6R,EAAWC,EACXtG,EAAOpI,KAAKyO,EACf,CACD1O,EAAK9C,UAAYwR,EAAS1R,MAC1B0R,EAASzO,KAAKD,EACjB,CAED0O,EAASxO,YAET6H,GAAWjG,QACd,CAGO,SAAAyI,CAAUhC,GACdxL,KAAKsL,OAAOiC,OAAO/B,GAAQ,EAC9B,CAGO,kBAAAoB,GACJ,MAAM/O,QAAEA,EAAOiN,MAAEA,EAAKC,WAAEA,GAAe/K,KACjC6R,EAAU/G,EAAM5G,SACtB,IAAI4N,EAAeD,EAAQ7F,KAAKnO,EAAQO,yBAExC,GAAI0T,EAAa5P,QAAU,EAAG,CAC1B,MAAMoN,EAAmBtP,KAAKuP,eACxBwC,EAAiBjH,EAAMkH,QAAQ7N,WAAW8L,QAAO,CAACxB,EAAGvG,KACvD,MAAM/H,EAAY6O,OAAO3M,MAAE6F,GAAS1F,KAAK3E,EAAQY,kBACjD,OAAI6Q,EAAmB,GAAKnP,GAAaA,GAAamP,EAAmB,CAIxE,IAELwC,EAAezP,MAAE,mBAAmBxE,EAAQI,sBAAsBJ,EAAQM,8BACrEoE,OAAOwP,GACPjS,OAAOiL,GACZ8G,EAAQtP,OAAOuP,GACfhH,EAAMlK,IAAI,UAAW,OACxB,CAED,OAAOkR,CACV,ECt5BY,MAAM/K,EAAcC,OAAO,cAuBtC,MAAgBiL,UACV/K,OAGSgL,CAACnL,GAGlB,WAAAnH,CAAYc,GACR0G,MAAM1G,GAEN,MAAMyR,EAAMzR,GAAW,GAKvB,GAJCV,KAAK+G,GAAsC,CACxCpC,QAAS,IAAIiG,EAASuH,IAGtBA,EAAI9K,IACJrH,KAAKsH,WAAW6K,EAAI9K,SACjB,CACH,MAAMvH,EAASqS,EAAIC,eAAiBpS,KAAKqH,IAAIvH,SAC7CE,KAAK+G,GAAapC,QAAQkH,WAAW7L,KAAKqH,IAAyBvH,EACtE,CACJ,CAGD,WAAI6E,GACA,OAAO3E,KAAK+G,GAAapC,OAC5B,CAiBQ,UAAA2C,CAAWxL,GAChB,MAAM6I,QAAEA,GAAY3E,KAAK+G,GACnBM,EAAMhF,MAAEvG,GAGd,OAFA6I,EAAQmF,UACRnF,EAAQkH,WAAWxE,EAAyBA,EAAIvH,UACzCsH,MAAME,WAAWxL,EAC3B,CAOQ,MAAAiF,GAEL,OADAf,KAAK+G,GAAapC,QAAQmF,UACnB1C,MAAMrG,QAChB,CAaD,aAAAoM,GACI,OAAOnN,KAAK+G,GAAapC,QAAQwI,eACpC,CAmBD,OAAA3I,CAAQ1E,EAAgBC,EAA6DQ,EAAqB4F,GACtGnG,KAAK8E,SAAS,IAAI5F,EAAYc,KAAK2E,QAASC,KAAKC,MAAM/E,GAASC,EAAaQ,GAAO4F,EACvF,CAcD,QAAArB,CAAS7B,EAAmCkD,GACxCnG,KAAK+G,GAAapC,QAAQG,SAAS7B,EAAMkD,EAC5C,CA+BD,UAAAL,CAAW7F,EAA0BwN,EAAeC,GAChD1N,KAAK+G,GAAapC,QAAQmB,WAAW7F,EAAiBwN,EAAMC,EAC/D,CAUD,WAAAoB,CAAY7J,GACR,OAAOjF,KAAK+G,GAAapC,QAAQmK,YAAY7J,EAChD,CAMD,OAAAhE,GAEI,OADAjB,KAAK+G,GAAapC,QAAQ1D,UACnBjB,IACV,CAMD,MAAA+E,GAEI,OADA/E,KAAK+G,GAAapC,QAAQI,SACnB/E,IACV,CAMD,OAAAqQ,GAEI,OADArQ,KAAK+G,GAAapC,QAAQ0L,UACnBrQ,IACV,CAOQ,OAAAqM,GAEL,OADArM,KAAK+G,GAAapC,QAAQ0H,UACnBjF,MAAMiF,SAChB,CASD,aAAI8B,GACA,OAAOnO,KAAK+G,GAAapC,QAAQwJ,SACpC,CAMD,gBAAIC,GACA,OAAOpO,KAAK+G,GAAapC,QAAQyJ,YACpC,CAaD,gBAAAkC,CAAiBC,EAA2BC,GACxCxQ,KAAK+G,GAAapC,QAAQ2L,iBAAiBC,EAASC,EACvD,CAaD,oBAAAC,CAAqBF,EAA2BC,GAC5CxQ,KAAK+G,GAAapC,QAAQ8L,qBAAqBF,EAASC,EAC3D,CAgBD,QAAAhH,CAASJ,EAAaK,EAAmBC,GACrC,OAAO1J,KAAK+G,GAAapC,QAAQ6E,SAASJ,EAAKK,EAASC,EAC3D,CAaD,aAAA3D,CAAc9F,EAAeS,GACzB,OAAOV,KAAK+G,GAAapC,QAAQoB,cAAc9F,EAAOS,EACzD,CAgBD,MAAAoQ,CAAOjS,GACH,OAAOmB,KAAK+G,GAAapC,QAAQmM,OAAOjS,EAC3C,CAgBD,OAAA2H,CAAQ3H,EAAawR,GACjB,OAAOrQ,KAAK+G,GAAapC,QAAQ6B,QAAQ3H,EAAKwR,EACjD,CAaD,SAAAU,CAAUlS,GACN,OAAOmB,KAAK+G,GAAapC,QAAQoM,UAAUlS,EAC9C,CAaD,WAAAmS,CAAYnS,GACR,OAAOmB,KAAK+G,GAAapC,QAAQqM,YAAYnS,EAChD,CAMD,cAAIoS,GACA,OAAOjR,KAAK+G,GAAapC,QAAQsM,UACpC,ECnYY,MAAMlK,EAAcC,OAAO,cCU/B,MAAAqL,EAMQlT,OAITmT,WAA2C,GAE3CC,cAAgC,GAEhCC,WAMR,WAAA5S,CAAYC,GACRG,KAAKb,OAASU,CACjB,CAGM,OAAAwM,GACHrM,KAAKsS,WAAa,GAClBtS,KAAKuS,cAAgB,EACxB,CAMD,QAAAE,CAASzO,GAEL,GADAA,EAAKA,GAAM0O,OAAK,aAAc,GAC1B,MAAQ1S,KAAKsS,WAAWtO,GACxB,OAAOhE,KAAKsS,WAAWtO,GAE3B,MAAM8C,EAAQ,IAAIpD,EAAa1D,KAAKb,OAAQ6E,GAE5C,OADAhE,KAAKsS,WAAWtO,GAAM8C,EACfA,CACV,CAGD,QAAA6L,CAAS3O,GACL,OAAOhE,KAAKsS,WAAWtO,EAC1B,CAGD,gBAAA4O,CAAiBC,GAEb,GAAI,eAAiBA,EAAS7P,OAI1B,OADA6P,EAASrM,eACT,EAGJ,MAAMsM,EAAY9S,KAAKuS,cAAcvS,KAAKuS,cAAcrQ,OAAS,GAC3DiE,EAAW2M,GAAW1O,kBAAiB,IAAS,EAEtDpE,KAAKuS,cAAcrP,KAAK2P,GACxBA,EAAS3M,SAASC,EACrB,CAGD,YAAA4M,GACI,OAAO/S,KAAKuS,cAAc7L,MAAM,EACnC,CAGD,eAAMsM,GACF,MAAMC,EAA6B,GACnC,IAAK,MAAMnM,KAAS9G,KAAKuS,cACrBU,EAAU/P,KAAK4D,EAAMrB,gBAEnBkE,QAAQuJ,IAAID,EACrB,CAGD,iBAAME,CAAYvN,GACd,MAAMqN,EAA6B,GACnC,IAAK,MAAMnM,KAAS9G,KAAKuS,cACrBU,EAAU/P,KAAK4D,EAAMnB,SAASC,UAE5B+D,QAAQuJ,IAAID,EACrB,CAGD,eAAIG,GACA,OAAOpT,KAAKb,OAAOkU,WAAW,YACjC,CAGD,gBAAIC,GACA,OAAOtT,KAAKb,OAAOkU,WAAW,aACjC,CAGD,eAAIE,GACA,OAAOvT,KAAKoT,aAAepT,KAAKsT,YACnC,CAMD,aAAI7O,GACA,OAAOzE,KAAKwS,UACf,CAGD,aAAI/N,CAAU5F,GACVmB,KAAKwS,WAAa3T,CACrB,CAMD,YAAA2U,CAAaxQ,GACT,OAAOhD,KAAKb,OAAOqU,aAAaxQ,EACnC,CAGD,aAAAyQ,CAAczQ,GACV,OAAOhD,KAAKb,OAAOsU,cAAczQ,EACpC,CAGD,WAAA0C,CAAe1C,EAAgB0Q,GAC3B,OAAO1T,KAAKb,OAAOuG,YAAY1C,EAAQ0Q,EAC1C,CAGD,UAAAL,CAAWrQ,GACP,OAAOhD,KAAKb,OAAOkU,WAAWrQ,EACjC,CAMD,MAAA8N,CAAOjS,GACH,MAAM6M,EAAU1L,KAAKiR,WAOrB,OANI,MAAQvF,EAAQ7M,KAChB6M,EAAQ7M,GAAO,CACX8U,IAAK3T,KAAKsS,WACVsB,KAAM5T,KAAKuS,iBAGZ,CACV,CAGD,OAAA/L,CAAQ3H,EAAawR,GAAU,GAC3B,MAAMS,EAAS9Q,KAAKiR,WAAWpS,GAC/B,GAAI,MAAQiS,EACR,OAAO,EAWX,GARI,EAAI9Q,KAAKuS,cAAcrQ,QACvBlC,KAAKqM,UAGTrM,KAAKsS,WAAaxB,EAAO6C,IACzB3T,KAAKuS,cAAgBzB,EAAO8C,MAGvB5T,KAAKuS,cAAc,IAAI/M,eAAexF,KAAKyE,WAC5C,OAAO,EAIX,IAAK,MAAMqC,KAAS9G,KAAKuS,cACrBzL,EAAMN,UAKV,OADA6J,GAAWrQ,KAAKb,OAAOkR,WAChB,CACV,CAGD,SAAAU,CAAUlS,GACN,OAAOmB,KAAKb,OAAO4R,UAAUlS,EAChC,CAGD,WAAAmS,CAAYnS,GACR,OAAOmB,KAAKb,OAAO6R,YAAYnS,EAClC,CAGD,cAAIoS,GACA,OAAOjR,KAAKb,OAAO8R,UACtB,ECxMY,MAAMlK,EAAcC,OAAO,c,yBFiBtC,MAAgB6M,UACV5M,EAGS6M,CAAC/M,GAGlB,WAAAnH,CAAYc,GACR0G,MAAM1G,GACN,MAAMoG,MAAEA,GAAUpG,EACjBV,KAAK+G,GAAsC,CAAED,QACjD,CAaD,cAAc7C,GACV,OAAOjE,KAAK+G,GAAaD,MAAM7C,UAClC,CAMD,eAAcmP,GACV,OAAQpT,KAAKH,MAA8BuT,WAC9C,CAMD,gBAAcE,GACV,OAAQtT,KAAKH,MAA8ByT,YAC9C,CAMD,eAAcC,GACV,OAAQvT,KAAKH,MAA8B0T,WAC9C,CAeS,WAAAjO,CAAYb,GAClB,OAAOzE,KAAK+G,GAAaD,MAAMxB,YAAYb,EAC9C,G,qBEvEC,MAAgBsP,UACV9B,EAGSlL,CAACA,GAGlB,WAAAnH,CAAYc,GACR0G,MAAM1G,GACLV,KAAK+G,GAAsC,CACxCpC,QAAS,IAAI0N,EAAWrS,MAE/B,CAaD,QAAAyS,CAASzO,GACL,OAAOhE,KAAK+G,GAAapC,QAAQ8N,SAASzO,EAC7C,CAUD,QAAA2O,CAAS3O,GACL,OAAOhE,KAAK+G,GAAapC,QAAQgO,SAAS3O,EAC7C,CAUD,gBAAA4O,CAAiBC,GACb7S,KAAK+G,GAAapC,QAAQiO,iBAAiBC,EAC9C,CAQD,YAAAE,GACI,OAAO/S,KAAK+G,GAAapC,QAAQoO,cACpC,CAMD,SAAAC,GACI,OAAOhT,KAAK+G,GAAapC,QAAQqO,WACpC,CAMD,WAAAG,CAAYvN,GACR,OAAO5F,KAAK+G,GAAapC,QAAQwO,YAAYvN,EAChD,CAMD,eAAIwN,GACA,OAAOpT,KAAK+G,GAAapC,QAAQyO,WACpC,CAMD,gBAAIE,GACA,OAAOtT,KAAK+G,GAAapC,QAAQ2O,YACpC,CAMD,eAAIC,GACA,OAAOvT,KAAK+G,GAAapC,QAAQ4O,WACpC,CAaD,YAAAC,CAAaxQ,GACT,OAAOwQ,eAAaxQ,EACvB,CAaD,aAAAyQ,CAAczQ,GACV,OAAOyQ,gBAAczQ,EACxB,CAgBD,WAAA0C,CAAe1C,EAAgB0Q,GAC3B,OAAOhO,cAAY1C,EAAQ0Q,EAC9B,CAcD,UAAAL,CAAWrQ,GACP,OAAOqQ,aAAWrQ,EACrB,CAGD,aAAIyB,GACA,OAAOzE,KAAK+G,GAAapC,QAAQF,SACpC,CAGD,aAAIA,CAAU5F,GACVmB,KAAK+G,GAAapC,QAAQF,UAAY5F,CACzC,CAUQ,OAAAwN,GAGL,OAFAjF,MAAMiF,UACNrM,KAAK+G,GAAapC,QAAQ0H,UACnBrM,IACV,CAcQ,MAAA8Q,CAAOjS,GACZ,OAAOmB,KAAK+G,GAAapC,QAAQmM,OAAOjS,EAC3C,CAiBQ,OAAA2H,CAAQ3H,EAAawR,GAAU,GACpC,OAAOrQ,KAAK+G,GAAapC,QAAQ6B,QAAQ3H,EAAKwR,EACjD,G,0HZzP0B,qB,qBaUG,qB,kBdNH,qB,kCDEJ,CAAC,WAAY,QAAS,OAAQ,MAAO,I","ignoreList":[]}