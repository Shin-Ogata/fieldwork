{"version":3,"sources":["cdp:///@cdp/lib-web/dom/ssr.ts","cdp:///@cdp/lib-web/dom/utils.ts","cdp:///@cdp/lib-web/dom/static.ts","cdp:///@cdp/lib-web/dom/base.ts","cdp:///@cdp/lib-web/dom/attributes.ts","cdp:///@cdp/lib-web/dom/traversing.ts","cdp:///@cdp/lib-web/dom/manipulation.ts","cdp:///@cdp/lib-web/dom/styles.ts","cdp:///@cdp/lib-web/dom/events.ts","cdp:///@cdp/lib-web/dom/scroll.ts","cdp:///@cdp/lib-web/dom/effects.ts","cdp:///@cdp/lib-web/dom/class.ts","cdp:///@cdp/lib-web/dom/index.ts","cdp:///@cdp/lib-web/environment/ssr.ts","cdp:///@cdp/lib-web/environment/web.ts","cdp:///@cdp/lib-web/environment/platform.ts","cdp:///@cdp/lib-web/extension-i18n/i18next/src/logger.js","cdp:///@cdp/lib-web/extension-i18n/i18next/src/EventEmitter.js","cdp:///@cdp/lib-web/extension-i18n/i18next/src/utils.js","cdp:///@cdp/lib-web/extension-i18n/i18next/src/ResourceStore.js","cdp:///@cdp/lib-web/extension-i18n/i18next/src/postProcessor.js","cdp:///@cdp/lib-web/extension-i18n/i18next/src/Translator.js","cdp:///@cdp/lib-web/extension-i18n/i18next/src/LanguageUtils.js","cdp:///@cdp/lib-web/extension-i18n/i18next/src/PluralResolver.js","cdp:///@cdp/lib-web/extension-i18n/i18next/src/Interpolator.js","cdp:///@cdp/lib-web/extension-i18n/i18next/src/BackendConnector.js","cdp:///@cdp/lib-web/extension-i18n/i18next/src/defaults.js","cdp:///@cdp/lib-web/extension-i18n/i18next/src/i18next.js","cdp:///@cdp/lib-web/extension-i18n/index.ts","cdp:///@cdp/lib-web/i18n/result-code-defs.ts","cdp:///@cdp/lib-web/i18n/ssr.ts","cdp:///@cdp/lib-web/i18n/plugin/ajax-backend.ts","cdp:///@cdp/lib-web/i18n/plugin/dom-localizer.ts","cdp:///@cdp/lib-web/i18n/core.ts","cdp:///@cdp/lib-web/web-storage/web-storage.ts","cdp:///@cdp/lib-web/data-sync/result-code-defs.ts","cdp:///@cdp/lib-web/data-sync/null.ts","cdp:///@cdp/lib-web/data-sync/internal.ts","cdp:///@cdp/lib-web/data-sync/rest.ts","cdp:///@cdp/lib-web/data-sync/storage.ts","cdp:///@cdp/lib-web/data-sync/settings.ts","cdp:///@cdp/lib-web/model/result-code-defs.ts","cdp:///@cdp/lib-web/model/base.ts","cdp:///@cdp/lib-web/collection/result-code-defs.ts","cdp:///@cdp/lib-web/collection/utils/comparator.ts","cdp:///@cdp/lib-web/collection/utils/array-editor.ts","cdp:///@cdp/lib-web/collection/query/dynamic-filters.ts","cdp:///@cdp/lib-web/collection/query/dynamic-condition.ts","cdp:///@cdp/lib-web/collection/query/query.ts","cdp:///@cdp/lib-web/collection/base.ts","cdp:///@cdp/lib-web/collection/collection-editor.ts","cdp:///@cdp/lib-web/view/ssr.ts","cdp:///@cdp/lib-web/view/base.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/lib/directive.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/lib/dom.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/lib/part.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/lib/template.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/lib/template-instance.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/lib/template-result.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/lib/parts.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/lib/default-template-processor.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/lib/template-factory.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/lib/render.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/lit-html.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/directives/async-append.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/directives/async-replace.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/directives/cache.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/directives/class-map.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/directives/guard.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/directives/if-defined.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/directives/repeat.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/directives/style-map.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/directives/unsafe-html.ts","cdp:///@cdp/lib-web/extension-template/lit-html/src/directives/until.ts","cdp:///@cdp/lib-web/extension-template/index.ts","cdp:///@cdp/lib-web/extension-template-transformer/lit-transformer/src/lit-transformer.js","cdp:///@cdp/lib-web/extension-template-transformer/lit-transformer/src/helper/dataHelper.js","cdp:///@cdp/lib-web/extension-template-transformer/lit-transformer/src/transformers/variableTransformer.js","cdp:///@cdp/lib-web/extension-template-transformer/lit-transformer/src/transformers/unsafeVariable.js","cdp:///@cdp/lib-web/extension-template-transformer/lit-transformer/src/helper/isMustacheFalsy.js","cdp:///@cdp/lib-web/extension-template-transformer/lit-transformer/src/helper/sectionHelper.js","cdp:///@cdp/lib-web/extension-template-transformer/lit-transformer/src/transformers/section.js","cdp:///@cdp/lib-web/extension-template-transformer/lit-transformer/src/transformers/invertedSection.js","cdp:///@cdp/lib-web/extension-template-transformer/lit-transformer/src/transformers/comment.js","cdp:///@cdp/lib-web/extension-template-transformer/lit-transformer/src/transformers/customDelimiter.js","cdp:///@cdp/lib-web/extension-template-transformer/index.ts","cdp:///@cdp/lib-web/extension-template-transformer/lit-transformer/src/lit-transformer-configuredOutOfTheBox.js","cdp:///@cdp/lib-web/template/bridge.ts","cdp:///@cdp/lib-web/template/ssr.ts","cdp:///@cdp/lib-web/template/loader.ts","cdp:///@cdp/lib-web/collection/utils/array-cursor.ts"],"names":["win","safe","globalThis","window","doc","document","evt","CustomEvent","requestAnimationFrame","elementify","seed","context","elements","html","trim","startsWith","endsWith","template","createElement","innerHTML","push","content","children","selector","isFunction","getElementById","exec","el","substring","body","querySelectorAll","nodeType","length","e","console","ensurePositiveNumber","value","isNumber","undefined","_scriptsAttrs","_factory","dom","utils","evaluate","code","options","script","text","attr","val","getAttribute","setAttribute","getGlobalNamespace","head","appendChild","parentNode","removeChild","retval","_createIterableIterator","Symbol","DOMBase","constructor","self","this","index","elem","entries","iterator","base","pointer","next","done","key","keys","values","_createIterableIterator$1","valueGenerator","current","isNode","isNodeElement","Node","ELEMENT_NODE","isNodeHTMLOrSVGElement","dataset","isNodeQueriable","querySelector","isTypeElement","isTypeHTMLOrSVGElement","isTypeDocument","isTypeWindow","isEmptySelector","isStringSelector","isNodeSelector","isDocumentSelector","isWindowSelector","isIterableSelector","nodeName","name","toLowerCase","getOffsetParent","node","offsetParent","$svg","$","cssProps","css","display","position","parent","parentElement","isMultiSelectElement","multiple","isInputElement","DOMAttributes","addClass","className","classes","isArray","classList","add","removeClass","remove","hasClass","contains","toggleClass","force","operation","toggle","prop","isString","first","Object","removeAttr","String","removeAttribute","attrs","option","selectedOptions","selected","includes","data","toTypedData","camelize","fromTypedData","removeData","props","map","k","winnow","validCallback","invalidCallback","noop","call","matches","validParentNode","DOCUMENT_NODE","DOCUMENT_FRAGMENT_NODE","validRetrieveNode","is","retrieveSiblings","sibling","filter","siblings","Set","setMixClassAttribute","DOMTraversing","get","Math","trunc","toArray","i","child","previousSibling","indexOf","last","$add","elems","not","delete","find","$selector","has","targets","$target","callback","each","slice","begin","end","eq","closest","closests","c","parents","parentsUntil","reverse","nextSiblings","nextElementSibling","nextAll","nextUntil","prev","prevSiblings","previousElementSibling","prevAll","prevUntil","contents","contentDocument","childNodes","rootElement","documentElement","offsets","offset","isHTMLString","src","subject","toNodeSet","nodes","$dom","toNode","createTextNode","removeElement","keepListener","off","DOMManipulation","htmlString","textContent","append","appendTo","prepend","prependTo","before","insertBefore","after","nextSibling","insertAfter","wrapAll","$wrap","ownerDocument","clone","firstElementChild","wrapInner","$el","wrap","unwrap","replaceWith","empty","firstChild","detach","newContent","fragment","createDocumentFragment","replaceAll","getDefaultView","defaultView","getComputedStyleFrom","view","getComputedStyle","toNumber","parseFloat","_resolver","width","height","getPadding","style","type","getPropertyValue","getBorder","getMargin","manageSizeFor","classify","size","manageInnerSizeFor","isTextProp","newVal","setProperty","parseOuterSizeArgs","args","includeMargin","manageOuterSizeFor","getOffsetSize","margin","getOffsetPosition","getClientRects","top","left","rect","getBoundingClientRect","pageYOffset","pageXOffset","offsetWidth","DOMStyles","dasherize","propName","removeProperty","ensureChainCaseProperies","innerWidth","innerHeight","outerWidth","outerHeight","parentOffset","marginTop","mt","marginLeft","ml","$offsetParent","borderTopWidth","borderLeftWidth","coordinates","cssTop","cssLeft","curOffset","curPosition","needCalculatePosition","_eventContextMap","eventData","WeakMap","eventListeners","liveEventListeners","queryEventData","event","target","unshift","registerEventData","set","normalizeEventNamespaces","namespaces","split","main","shift","sort","join","splitEventNamespaces","combos","combination","signature","namespace","ns","resolveEventNamespaces","query","cookies","signatures","cookie","getEventListenersHandlers","ensure","registered","handlers","toCookie","opts","once","JSON","stringify","extractAllHandlers","parse","handler","proxy","extractNamespaceHandlers","names","n","namespaceFilter","_handlers","listener","parseEventArgs","capture","_noTrigger","eventShortcut","trigger","on","cloneEvent","dst","contexts","addEventListener","DOMEvents","events","handleLiveEvent","apply","handleEvent","combo","removeEventListener","origin","splice","onceHandler","eventArgs","arg","detail","bubbles","cancelable","dispatchEvent","transitionEnd","permanent","fireCallBack","animationEnd","hover","handlerIn","handlerOut","mouseenter","mouseleave","click","bind","dblclick","blur","focus","focusin","focusout","keyup","keydown","keypress","submit","contextmenu","change","mousedown","mousemove","mouseup","mouseout","mouseover","touchstart","touchend","touchmove","touchcancel","resize","scroll","withEvents","deep","cloneElement","cloneNode","srcElements","dstElements","queryTargetElement","isNodeDocument","execScroll","duration","easing","initialTop","scrollTop","initialLeft","scrollLeft","enableTop","enableLeft","notify","calcMetrics","enable","initialValue","max","new","initial","maxValue","newValue","min","metricsTop","metricsLeft","calcProgress","swing","progress","cos","PI","delta","startTime","Date","now","animate","elapse","progressCoeff","DOMScroll","scrollTo","parseArgs","assign","_animContextMap","DOMEffects","params","result","animations","Map","finished","Promise","resolve","anim","all","then","cancel","animation","finish","DOMClass","mixins","super","create","isDOMClass","x","setup","fn","factory","prototype","_location","location","_navigator","navigator","_screen","screen","_devicePixelRatio","devicePixelRatio","getWebDirectory","url","match","webRoot","href","toUrl","path","maybeTablet","queryPlatform","info","ios","android","androidChrome","desktop","mobile","phone","tablet","iphone","iphoneX","ipod","ipad","edge","ie","firefox","macos","windows","cordova","getGlobal","electron","userAgent","ua","platform","os","standalone","screenWidth","screenHeight","pixelRatio","maxTouchPoints","regex","osVersion","replace","supportOrientation","consoleLogger","log","output","warn","error","Logger","concreteLogger","init","prefix","logger","debug","setDebug","bool","forward","deprecate","lvl","debugOnly","moduleName","baseLogger","EventEmitter","observers","forEach","l","emit","cloned","concat","observer","defer","res","rej","promise","reject","makeString","object","getLastOfPath","Empty","cleanKey","canNotTraverseDeeper","stack","hasOwnProperty","obj","setPath","getPath","getPathWithDefaults","defaultData","deepExtend","source","overwrite","regexEscape","str","_entityMap","escape","s","deepFind","keySeparator","paths","j","p","mix","joinedPath","ResourceStore","defaultNS","ignoreJSONStructure","addNamespaces","removeNamespaces","getResource","lng","utils.getPath","addResource","silent","utils.setPath","addResources","resources","m","toString","addResourceBundle","pack","utils.deepExtend","removeResourceBundle","hasResourceBundle","getResourceBundle","compatibilityAPI","getDataByLanguage","toJSON","postProcessor","processors","addPostProcessor","module","handle","translator","processor","process","checkedLoadedFor","Translator","services","copy","a","t","utils.copy","changeLanguage","language","exists","interpolation","resolved","extractFromKey","nsSeparator","interpolator","nestingRegexp","parts","translate","lastKey","overloadTranslationOptionHandler","arguments","Array","appendNamespaceToCIMode","resUsedKey","usedKey","resExactUsedKey","exactUsedKey","resType","joinArrays","handleAsObjectInI18nFormat","i18nFormat","handleAsObject","returnObjects","returnedObjectHandler","resTypeIsArray","newKeyToUse","deepKey","extendTranslation","usedDefault","needsPluralHandling","count","hasDefaultValue","defaultValueSuffix","pluralResolver","getSuffix","defaultValue","isValidLookup","updateMissing","fk","lngs","fallbackLngs","languageUtils","getFallbackCodes","fallbackLng","saveMissingTo","toResolveHierarchy","send","fallbackValue","missingKeyHandler","backendConnector","saveMissing","saveMissingPlurals","getSuffixes","suffix","appendNamespaceToMissingKey","parseMissingKeyHandler","usedLng","usedNS","skipInterpolation","skipOnVariables","nestBef","nb","defaultVariables","interpolate","na","nestAft","nest","reset","postProcess","postProcessorNames","applyPostProcessor","postProcessPassResolved","i18nResolved","found","extracted","fallbackNS","needsContextHandling","codes","hasLoadedNamespace","finalKey","finalKeys","addLookupKeys","pluralSuffix","contextSeparator","possibleKey","pop","returnNull","returnEmptyString","resourceStore","capitalize","string","charAt","toUpperCase","LanguageUtil","whitelist","supportedLngs","getScriptPartFromCode","formatLanguageCode","getLanguagePartFromCode","specialCases","lowerCaseLng","part","cleanCode","isWhitelisted","isSupportedCode","load","nonExplicitSupportedLngs","getBestMatchFromCodes","cleanedLng","lngOnly","supportedLng","fallbacks","default","fallbackCode","fallbackCodes","addCode","fc","sets","nr","_rulesPluralsTypes","Number","PluralResolver","rules","createRules","numbers","plurals","addRule","getRule","needsPlural","rule","getPluralFormsOfKey","number","idx","noAbs","abs","simplifyPluralSuffix","returnSuffix","compatibilityJSON","Interpolator","format","escapeValue","iOpts","utils.escape","useRawValueToEscape","utils.regexEscape","prefixEscaped","suffixEscaped","formatSeparator","unescapePrefix","unescapeSuffix","nestingPrefix","nestingPrefixEscaped","nestingSuffix","nestingSuffixEscaped","nestingOptionsSeparator","maxReplaces","alwaysFormat","resetRegExp","regexpStr","regexp","RegExp","regexpUnescapeStr","regexpUnescape","nestingRegexpStr","replaces","regexSafe","handleFormat","utils.getPathWithDefaults","interpolationkey","f","missingInterpolationHandler","todos","safeValue","todo","temp","utils.makeString","lastIndex","clonedOptions","handleHasOptions","inheritedOptions","sep","optionsString","formatters","doReduce","test","r","reduce","v","Connector","backend","store","state","queue","queueLoad","languages","toLoad","pending","toLoadLanguages","toLoadNamespaces","hasAllNamespaces","reload","loaded","errors","err","q","pushPath","utils.pushPath","arr","what","read","fcName","tried","wait","setTimeout","prepareLoading","loadOne","isUpdate","transformOptions","nonExplicitWhitelist","I18n","modules","external","isInitialized","isClone","initImmediate","createClassOnDemand","ClassOrObject","preload","pluralSeparator","partialBundledLanguages","ret","tDescription","lu","LanguageUtils","BackendConnector","languageDetector","detection","deferred","initializedStoreOnce","loadResources","usedCallback","reloadResources","use","Error","isLanguageChangingTo","setLng","cacheUserLanguage","async","detect","getFixedT","fixedT","rest","setDefaultNamespace","lastLng","loadNotPending","loadState","precheck","preResult","loadNamespaces","loadLanguages","preloaded","newLngs","dir","createInstance","cloneInstance","mergedOptions","i18next","i18n","RESULT_CODE","CDP_DECLARE","DECLARE_ERROR_CODE","AjaxBackend","_options","_fallbackMap","initOptions","_services","loadPath","fallbackResources","resolveUrl","loadUrl","json","request","toResult","msg","message","ERROR_AJAX_RESPONSE","cause","status","extend","domOptions","selectorAttr","targetAttr","optionsAttr","useOptionsAttr","parseDefaultValueFromContent","customTagName","extendDefault","o","insert","method","translated","translatedWithWrap","$firstChild","substr","dataAttr","localize","targetSelector","$children","getLanguage","WebStorage","storage","_broker","EventBroker","verify","Storage","_storage","kind","localStorage","getItem","dropUndefined","deserialize","setItem","oldVal","deepEqual","serialize","removeItem","cc","clear","webStorage","dataSyncNULL","NullDataSync","sync","responce","resolveURL","_methodMap","update","patch","dataSyncREST","RestDataSync","dataType","makeResult","ERROR_MVC_INVALID_SYNC_PARAMS","ajax","parseContext","separator","model","isModel","idAttr","valid","id","genId","StorageDataSync","_separator","getStorage","setStorage","newStorage","setIdSeparator","newSeparator","oldSeparator","deepMerge","destroy","ERROR_MVC_INVALID_SYNC_STORAGE_DATA_NOT_FOUND","queryEntries","items","ids","ERROR_MVC_INVALID_SYNC_STORAGE_ENTRY","saveEntries","entires","entry","old","createStorageDataSync","dataSyncSTORAGE","_default","defaultSync","newSync","oldSync","_defineAttributes","_updateAttributes","_validate","_changeHandler","_properties","RESULT_VALID_ATTRS","freeze","SUCCESS","Model","EventReceiver","attributes","ObservableObject","from","baseAttrs","prevAttrs","cid","luid","changeFired","defineProperty","_prevAttrs","_attrs","changedKeys","diff","changedAttrs","instance","proto","enumerable","configurable","idAttribute","_baseAttrs","_changedAttrs","_cid","getBroker","hasListener","channel","channels","managed","unsubscribe","isValid","SUCCEEDED","validate","noThrow","validateAttributes","FAILED","attribute","escapeHTML","setAttributes","suspend","resume","clearAttrs","deepCopy","hasChanged","isEmptyObject","changed","previous","isNew","response","fetch","syncMethod","resp","save","parseSaveArgs","isObject","serverAttrs","destruct","stopListening","fallback","_collator","Intl","Collator","sensitivity","numeric","getStringComparator","order","lhs","rhs","lhsProp","rhsProp","compare","getDateComparator","lhsDate","rhsDate","lhsValue","valueOf","rhsValue","getGenericComparator","getBooleanComparator","getNumberComparator","toComparator","sortKey","convertSortKeys","sortKeys","comparators","makePromise","editor","remap","records","getEditContext","token","ObservableArray","NOT_SUPPORTED","validOrders","orders","clearArray","appendArray","insertArray","reorderArray","work","reorders","unique","removeArray","equal","item","notEqual","greater","less","greaterEqual","lessEqual","like","toLocaleLowerCase","notLike","dateLessEqual","unit","date","computeDate","dateLessNotEqual","range","DynamicCondition","seeds","operators","sumKeys","limit","random","_operators","_combination","_sumKeys","_limit","_random","_sortKeys","fltr","cond","operator","searchItems","comparator","_limitCriteria","coeff","conditionalFix","condition","shuffle","criteria","limitCount","excess","total","queryFromCache","cached","baseIndex","auto","noSearch","results","ERROR_MVC_INVALID_ACCESS","tryCache","queryInfo","noCache","canCache","cache","queryItems","provider","ensureOptions","queryFromProvider","receivedAll","hasCond","nextOpts","_prepareModel","_removeModels","_addReference","_removeReference","_onModelEvent","ensureSortOptions","comps","modelIdAttribute","ctor","getModelId","modelConstructor","isCollectionModel","spliceArray","at","_setOptions","merge","_addOptions","Collection","EventSource","modelOptions","queryOptions","constructOptions","byId","initQueryInfo","collection","prevId","getChangedIds","_defaultQueryOptions","_queryInfo","release","afterFilter","clearCache","models","_queryFilter","_afterFilter","filtered","_provider","_defaultParse","_lastQueryOptions","_comparators","ERROR_MVC_INVALID_COMPARATORS","parseFilterArgs","original","finalize","requery","isNil","singular","candidate","toAdd","toMerge","toRemove","modelSet","sortable","existing","orderChanged","some","changes","added","removed","merged","mdl","EventPublisher","listenTo","partial","pos2key","pos","prepare","ERROR_MVC_EDIT_PERMISSION_DENIED","indices","makeListChanged","rangeFrom","rangeTo","list","to","insertedTo","_ensureElement","View","tagName","undelegateEvents","_tagName","drop","class","setElement","delegateEvents","hash","delegate","undelegate","directives","directive","d","isDirective","isCEPolyfill","customElements","polyfillWrapFlushCallback","reparentNodes","container","start","removeNodes","noChange","nothing","marker","nodeMarker","markerRegex","boundAttributeSuffix","Template","element","nodesToRemove","walker","createTreeWalker","lastPartIndex","partIndex","strings","nextNode","hasAttributes","stringForPart","lastAttributeNameRegex","attributeLookupName","attributeValue","statics","currentNode","createMarker","isTemplatePartActive","createComment","TemplateInstance","__parts","setValue","commit","_clone","importNode","nodeIndex","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","policy","trustedTypes","createPolicy","createHTML","commentMarker","TemplateResult","getHTML","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","getTemplateElement","SVGTemplateResult","svgElement","isPrimitive","isIterable","AttributeCommitter","dirty","_createPart","AttributePart","_getValue","committer","NodePart","__pendingValue","appendInto","startNode","endNode","ref","appendIntoPart","__insert","insertAfterPart","__commitText","__commitTemplateResult","__commitNode","__commitIterable","valueAsString","templateFactory","itemParts","itemPart","BooleanAttributePart","PropertyCommitter","single","PropertyPart","eventOptionsSupported","_e","EventPart","eventName","eventContext","__boundHandleEvent","newListener","oldListener","shouldRemoveListener","passive","shouldAddListener","__options","getOptions","defaultTemplateProcessor","DefaultTemplateProcessor","templateCache","templateCaches","stringsArray","keyString","asyncAppend","mapper","value_1_1","value_1","__asyncValues","itemStartNode","asyncReplace","previousValue","cachedTemplate","ClassList","cls","classString","previousClassesCache","classMap","classInfo","previousClasses","previousValues","guard","every","ifDefined","createAndInsertPart","containerPart","beforePart","beforeNode","newPart","updatePart","insertPartBefore","removePart","generateMap","partListCache","keyListCache","repeat","keyFnOrTemplate","keyFn","oldParts","oldKeys","newParts","newValues","newKeys","newKeyToIndexMap","oldKeyToIndexMap","oldHead","oldTail","newHead","newTail","oldIndex","oldPart","previousStylePropertyCache","styleMap","styleInfo","previousStyleProperties","cssText","unsafeHTML","_state","_infinity","until","lastRenderedIndex","previousLength","resolvedValue","createCustom","config","strTemplate","transform","tmpl2Parse","staticParts","insertionPoints","remainingTmplStr","startIndexOfIP","delimiter","iPTransformResult","transformIP","insertionPoint","lastStaticPart","ctx","iP","transformer","transformers","transformFunction","transformVariable","ctx2Value","ctx2MustacheString","mustacheStringyfy","variable","indexOfEndDelimiter","dataKey","unsafeVariable","isMustacheFalsy","NaN","falsy","parseSection","tmplStr","indexOfStartTagEnd","endTag","indexOfEndTagStart","innerTmpl","section","parsedSection","transformedInnerTmpl","sectionData","innerCtx","invertedSection","comment","customDelimiter","originalEndDeliLength","indexOfEndTag","newStartDeli","newEndDeli","createTransformFactory","arg1","arg2","createTransform","unsafeVariableTransformer","sectionTransformer","invertedSectionTransformer","customDelimiterTransformer","createDefault","mustache","TemplateBridge","compile","_transformer","engine","jst","setTransformer","newTransformer","oldTransformer","_mapElement","_mapSource","ArrayCursor","array","initialIndex","_array","_index","_bof","_eof","isBOF","isEOF","moveFirst","moveLast","moveNext","movePrevious","seek","findIndex","appendCollection","ERROR_I18N_CORE_LAYER","clearCollection","clearTemplateCache","defaultCollatorProvider","newProvider","oldProvider","getTemplate","queryTemplateElement","queryTemplateSource","URIError","TemplateEngine","TypeError","resourcePath","DomLocalizer","insertCollection","removeCollection","reorderCollection","ta","raw"],"mappings":"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","sourcesContent":["import { safe } from '@cdp/core-utils';\n\n/*\n * SSR (Server Side Rendering) 環境においても\n * `window` オブジェクトと `document` オブジェクト等の存在を保証する\n */\n\n/** @internal */ const win = safe(globalThis.window);\n/** @internal */ const doc = safe(globalThis.document);\n/** @internal */ const evt = safe(globalThis.CustomEvent);\n/** @internal */ const requestAnimationFrame = win.requestAnimationFrame;\n\n/** @internal */\nexport {\n    win as window,\n    doc as document,\n    evt as CustomEvent,\n    requestAnimationFrame,\n};\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    Nil,\n    isNumber,\n    isFunction,\n    className,\n    getGlobalNamespace,\n} from '@cdp/core-utils';\nimport { document } from './ssr';\n\nexport type ElementBase = Node | Window;\nexport type ElementResult<T> = T extends ElementBase ? T : HTMLElement;\nexport type SelectorBase = Node | Window | string | Nil;\nexport type ElementifySeed<T extends SelectorBase = HTMLElement> = T | (T extends ElementBase ? T[] : never) | NodeListOf<T extends Node ? T : never>;\nexport type QueryContext = ParentNode & Partial<NonElementParentNode>;\n\n/**\n * @en Create Element array from seed arg.\n * @ja 指定された Seed から Element 配列を作成\n *\n * @param seed\n *  - `en` Object(s) or the selector string which becomes origin of Element array.\n *  - `ja` Element 配列のもとになるオブジェクト(群)またはセレクタ文字列\n * @param context\n *  - `en` Set using `Document` context. When being un-designating, a fixed value of the environment is used.\n *  - `ja` 使用する `Document` コンテキストを指定. 未指定の場合は環境の既定値が使用される.\n * @returns Element[] based Node or Window object.\n */\nexport function elementify<T extends SelectorBase>(seed?: ElementifySeed<T>, context?: QueryContext | null): ElementResult<T>[] {\n    if (!seed) {\n        return [];\n    }\n\n    context = context || document;\n    const elements: Element[] = [];\n\n    try {\n        if ('string' === typeof seed) {\n            const html = seed.trim();\n            if (html.startsWith('<') && html.endsWith('>')) {\n                // markup\n                const template = document.createElement('template');\n                template.innerHTML = html;\n                elements.push(...template.content.children);\n            } else {\n                const selector = html;\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                if (isFunction(context.getElementById) && ('#' === selector[0]) && !/[ .<>:~]/.exec(selector)) {\n                    // pure ID selector\n                    const el = context.getElementById(selector.substring(1));\n                    el && elements.push(el);\n                } else if ('body' === selector) {\n                    // body\n                    elements.push(document.body);\n                } else {\n                    // other selectors\n                    elements.push(...context.querySelectorAll(selector));\n                }\n            }\n        } else if ((seed as Node).nodeType || window === seed as Window) {\n            // Node/element, Window\n            elements.push(seed as Node as Element);\n        } else if (0 < (seed as T[]).length && (seed[0].nodeType || window === seed[0])) {\n            // array of elements or collection of DOM\n            elements.push(...(seed as Node[] as Element[]));\n        }\n    } catch (e) {\n        console.warn(`elementify(${className(seed)}, ${className(context)}), failed. [error:${e}]`);\n    }\n\n    return elements as ElementResult<T>[];\n}\n\n/**\n * @en Ensure positive number, if not returned `undefined`.\n * @en 正値の保証. 異なる場合 `undefined` を返却\n */\nexport function ensurePositiveNumber(value: number | undefined): number | undefined {\n    return (isNumber(value) && 0 <= value) ? value : undefined;\n}\n\n/**\n * @en For easing `swing` timing-function.\n * @ja easing `swing` 用タイミング関数\n *\n * @reference\n *  - https://stackoverflow.com/questions/9245030/looking-for-a-swing-like-easing-expressible-both-with-jquery-and-css3\n *  - https://stackoverflow.com/questions/5207301/jquery-easing-functions-without-using-a-plugin\n *\n * @param progress [0 - 1]\n */\nexport function swing(progress: number): number {\n    return 0.5 - (Math.cos(progress * Math.PI) / 2);\n}\n\n/**\n * @en [[evaluate]]() options.\n * @ja [[evaluate]]() に渡すオプション\n */\nexport interface EvalOptions {\n    type?: string;\n    src?: string;\n    nonce?: string;\n    noModule?: string;\n}\n\n/** @internal */\nconst _scriptsAttrs: (keyof EvalOptions)[] = [\n    'type',\n    'src',\n    'nonce',\n    'noModule',\n];\n\n/**\n * @en The `eval` function by which script `nonce` attribute considered under the CSP condition.\n * @ja CSP 環境においてスクリプト `nonce` 属性を考慮した `eval` 実行関数\n */\nexport function evaluate(code: string, options?: Element | EvalOptions, context?: Document | null): any {\n    const doc: Document = context || document;\n    const script = doc.createElement('script');\n    script.text = `CDP_DOM_EVAL_RETURN_VALUE_BRIDGE = (() => { return ${code}; })();`;\n\n    if (options) {\n        for (const attr of _scriptsAttrs) {\n            const val = options[attr] || ((options as Element).getAttribute && (options as Element).getAttribute(attr));\n            if (val) {\n                script.setAttribute(attr, val);\n            }\n        }\n    }\n\n    // execute\n    try {\n        getGlobalNamespace('CDP_DOM_EVAL_RETURN_VALUE_BRIDGE');\n        doc.head.appendChild(script).parentNode!.removeChild(script); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        const retval = globalThis['CDP_DOM_EVAL_RETURN_VALUE_BRIDGE'];\n        return retval;\n    } finally {\n        delete globalThis['CDP_DOM_EVAL_RETURN_VALUE_BRIDGE'];\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-namespace,\n */\n\nimport {\n    ElementBase,\n    SelectorBase,\n    QueryContext,\n    EvalOptions,\n    elementify,\n    evaluate,\n} from './utils';\nimport {\n    DOM,\n    DOMPlugin,\n    DOMClass,\n    DOMSelector,\n    DOMResult,\n    DOMIterateCallback,\n} from './class';\n\ndeclare namespace dom {\n    let fn: DOMClass;\n}\n\nexport type DOMFactory = <T extends SelectorBase>(selector?: DOMSelector<T>, context?: QueryContext | null) => DOMResult<T>;\n\n/** @internal */ let _factory!: DOMFactory;\n\n/**\n * @en Create [[DOM]] instance from `selector` arg.\n * @ja 指定された `selector` [[DOM]] インスタンスを作成\n *\n * @param selector\n *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n *  - `ja` [[DOM]] のもとになるオブジェクト(群)またはセレクタ文字列\n * @param context\n *  - `en` Set using `Document` context. When being un-designating, a fixed value of the environment is used.\n *  - `ja` 使用する `Document` コンテキストを指定. 未指定の場合は環境の既定値が使用される.\n * @returns [[DOM]] instance.\n */\nfunction dom<T extends SelectorBase>(selector?: DOMSelector<T>, context?: QueryContext | null): DOMResult<T> {\n    return _factory(selector, context);\n}\n\ndom.utils = {\n    elementify,\n    evaluate,\n};\n\n/** @internal 循環参照回避のための遅延コンストラクションメソッド */\nexport function setup(fn: DOMClass, factory: DOMFactory): void {\n    _factory = factory;\n    dom.fn = fn;\n}\n\nexport {\n    ElementBase,\n    SelectorBase,\n    QueryContext,\n    EvalOptions,\n    DOM,\n    DOMPlugin,\n    DOMSelector,\n    DOMResult,\n    DOMIterateCallback,\n    dom,\n};\n","import { Nil } from '@cdp/core-utils';\nimport { window, document } from './ssr';\nimport {\n    ElementBase,\n    SelectorBase,\n    DOM,\n    DOMSelector,\n    dom as $,\n} from './static';\n\n/** @internal */ const _createIterableIterator = Symbol('create-iterable-iterator');\n\n/**\n * @en Base abstraction class of [[DOMClass]]. This class provides iterator methods.\n * @ja [[DOMClass]] の基底抽象クラス. iterator を提供.\n */\nexport class DOMBase<T extends ElementBase> implements ArrayLike<T>, Iterable<T> {\n    /**\n     * @en number of `Element`\n     * @ja 内包する `Element` 数\n     */\n    readonly length: number;\n\n    /**\n     * @en `Element` accessor\n     * @ja `Element` への添え字アクセス\n     */\n    readonly [n: number]: T;\n\n    /**\n     * constructor\n     * \n     * @param elements\n     *  - `en` operation targets `Element` array.\n     *  - `ja` 操作対象の `Element` 配列\n     */\n    constructor(elements: T[]) {\n        const self: DOMAccess<T> = this;\n        for (const [index, elem] of elements.entries()) {\n            self[index] = elem;\n        }\n        this.length = elements.length;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: Iterable<T>\n\n    /**\n     * @en Iterator of [[ElementBase]] values in the array.\n     * @ja 格納している [[ElementBase]] にアクセス可能なイテレータオブジェクトを返却\n     */\n    [Symbol.iterator](): Iterator<T> {\n        const iterator = {\n            base: this,\n            pointer: 0,\n            next(): IteratorResult<T> {\n                if (this.pointer < this.base.length) {\n                    return {\n                        done: false,\n                        value: this.base[this.pointer++],\n                    };\n                } else {\n                    return {\n                        done: true,\n                        value: undefined!, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                    };\n                }\n            },\n        };\n        return iterator as Iterator<T>;\n    }\n\n    /**\n     * @en Returns an iterable of key(index), value([[ElementBase]]) pairs for every entry in the array.\n     * @ja key(index), value([[ElementBase]]) 配列にアクセス可能なイテレータオブジェクトを返却\n     */\n    entries(): IterableIterator<[number, T]> {\n        return this[_createIterableIterator]((key: number, value: T) => [key, value]);\n    }\n\n    /**\n     * @en Returns an iterable of keys(index) in the array.\n     * @ja key(index) 配列にアクセス可能なイテレータオブジェクトを返却\n     */\n    keys(): IterableIterator<number> {\n        return this[_createIterableIterator]((key: number) => key);\n    }\n\n    /**\n     * @en Returns an iterable of values([[ElementBase]]) in the array.\n     * @ja values([[ElementBase]]) 配列にアクセス可能なイテレータオブジェクトを返却\n     */\n    values(): IterableIterator<T> {\n        return this[_createIterableIterator]((key: number, value: T) => value);\n    }\n\n    /** @internal common iterator create function */\n    private [_createIterableIterator]<R>(valueGenerator: (key: number, value: T) => R): IterableIterator<R> {\n        const context = {\n            base: this,\n            pointer: 0,\n        };\n\n        const iterator: IterableIterator<R> = {\n            next(): IteratorResult<R> {\n                const current = context.pointer;\n                if (current < context.base.length) {\n                    context.pointer++;\n                    return {\n                        done: false,\n                        value: valueGenerator(current, context.base[current]),\n                    };\n                } else {\n                    return {\n                        done: true,\n                        value: undefined!, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                    };\n                }\n            },\n            [Symbol.iterator](): IterableIterator<R> {\n                return this;\n            },\n        };\n\n        return iterator;\n    }\n}\n\n/**\n * @en Base interface for DOM Mixin class.\n * @ja DOM Mixin クラスの既定インターフェイス\n */\nexport interface DOMIterable<T extends ElementBase = HTMLElement> extends Partial<DOMBase<T>> {\n    length: number;\n    [n: number]: T;\n    [Symbol.iterator]: () => Iterator<T>;\n}\n\n/**\n * @internal DOM access\n *\n * @example <br>\n *\n * ```ts\n *   const dom: DOMAccess<TElement> = this as DOMIterable<TElement>;\n * ```\n */\nexport interface DOMAccess<T extends ElementBase = HTMLElement> extends Partial<DOM<T>> { } // eslint-disable-line @typescript-eslint/no-empty-interface\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Check target is `Node`.\n * @ja 対象が `Node` であるか判定\n *\n * @param el\n *  - `en` [[ElementBase]] instance\n *  - `ja` [[ElementBase]] インスタンス\n */\nexport function isNode(el: unknown): el is Node {\n    return !!(el && (el as Node).nodeType);\n}\n\n/**\n * @en Check target is `Element`.\n * @ja 対象が `Element` であるか判定\n *\n * @param el\n *  - `en` [[ElementBase]] instance\n *  - `ja` [[ElementBase]] インスタンス\n */\nexport function isNodeElement(el: ElementBase | Nil): el is Element {\n    return isNode(el) && (Node.ELEMENT_NODE === el.nodeType);\n}\n\n/**\n * @en Check target is `HTMLElement` or `SVGElement`.\n * @ja 対象が `HTMLElement` または `SVGElement` であるか判定\n *\n * @param el\n *  - `en` [[ElementBase]] instance\n *  - `ja` [[ElementBase]] インスタンス\n */\nexport function isNodeHTMLOrSVGElement(el: ElementBase | Nil): el is HTMLElement | SVGElement {\n    return isNodeElement(el) && (null != (el as HTMLElement).dataset);\n}\n\n/**\n * @en Check target is `Element` or `Document`.\n * @ja 対象が `Element` または `Document` であるか判定\n *\n * @param el\n *  - `en` [[ElementBase]] instance\n *  - `ja` [[ElementBase]] インスタンス\n */\nexport function isNodeQueriable(el: ElementBase | Nil): el is Element | Document {\n    return !!(el && (el as Node as Element).querySelector); // eslint-disable-line @typescript-eslint/unbound-method\n}\n\n/**\n * @en Check target is `Document`.\n * @ja 対象が `Document` であるか判定\n *\n * @param el\n *  - `en` [[ElementBase]] instance\n *  - `ja` [[ElementBase]] インスタンス\n */\nexport function isNodeDocument(el: ElementBase | Nil): el is Document {\n    return isNode(el) && (Node.DOCUMENT_NODE === el.nodeType);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Check [[DOM]] target is `Element`.\n * @ja [[DOM]] が `Element` を対象にしているか判定\n *\n * @param dom\n *  - `en` [[DOMIterable]] instance\n *  - `ja` [[DOMIterable]] インスタンス\n */\nexport function isTypeElement(dom: DOMIterable<ElementBase>): dom is DOMIterable<Element> {\n    return isNodeElement(dom[0]);\n}\n\n/**\n * @en Check [[DOM]] target is `HTMLElement` or `SVGElement`.\n * @ja [[DOM]] が `HTMLElement` または `SVGElement` を対象にしているか判定\n *\n * @param dom\n *  - `en` [[DOMIterable]] instance\n *  - `ja` [[DOMIterable]] インスタンス\n */\nexport function isTypeHTMLOrSVGElement(dom: DOMIterable<ElementBase>): dom is DOMIterable<HTMLElement | SVGElement> {\n    return isNodeHTMLOrSVGElement(dom[0]);\n}\n\n/**\n * @en Check [[DOM]] target is `Document`.\n * @ja [[DOM]] が `Document` を対象にしているか判定\n *\n * @param dom\n *  - `en` [[DOMIterable]] instance\n *  - `ja` [[DOMIterable]] インスタンス\n */\nexport function isTypeDocument(dom: DOMIterable<ElementBase>): dom is DOMIterable<Document> {\n    return document === dom[0];\n}\n\n/**\n * @en Check [[DOM]] target is `Window`.\n * @ja [[DOM]] が `Window` を対象にしているか判定\n *\n * @param dom\n *  - `en` [[DOMIterable]] instance\n *  - `ja` [[DOMIterable]] インスタンス\n */\nexport function isTypeWindow(dom: DOMIterable<ElementBase>): dom is DOMIterable<Window> {\n    return window === dom[0];\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Check the selector type is Nil.\n * @ja Nil セレクタであるか判定\n *\n * @param selector\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isEmptySelector<T extends SelectorBase>(selector: DOMSelector<T>): selector is Extract<DOMSelector<T>, Nil> {\n    return !selector;\n}\n\n/**\n * @en Check the selector type is String.\n * @ja String セレクタであるか判定\n *\n * @param selector\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isStringSelector<T extends SelectorBase>(selector: DOMSelector<T>): selector is Extract<DOMSelector<T>, string> {\n    return 'string' === typeof selector;\n}\n\n/**\n * @en Check the selector type is Node.\n * @ja Node セレクタであるか判定\n *\n * @param selector\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isNodeSelector<T extends SelectorBase>(selector: DOMSelector<T>): selector is Extract<DOMSelector<T>, Node> {\n    return null != (selector as Node).nodeType;\n}\n\n/**\n * @en Check the selector type is Element.\n * @ja Element セレクタであるか判定\n *\n * @param selector\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isElementSelector<T extends SelectorBase>(selector: DOMSelector<T>): selector is Extract<DOMSelector<T>, Element> {\n    return selector instanceof Element;\n}\n\n/**\n * @en Check the selector type is Document.\n * @ja Document セレクタであるか判定\n *\n * @param selector\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isDocumentSelector<T extends SelectorBase>(selector: DOMSelector<T>): selector is Extract<DOMSelector<T>, Document> {\n    return document === selector as Node as Document;\n}\n\n/**\n * @en Check the selector type is Window.\n * @ja Window セレクタであるか判定\n *\n * @param selector\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isWindowSelector<T extends SelectorBase>(selector: DOMSelector<T>): selector is Extract<DOMSelector<T>, Window> {\n    return window === selector as Window;\n}\n\n/**\n * @en Check the selector is able to iterate.\n * @ja 走査可能なセレクタであるか判定\n *\n * @param selector\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isIterableSelector<T extends SelectorBase>(selector: DOMSelector<T>): selector is Extract<DOMSelector<T>, NodeListOf<Node>> {\n    return null != (selector as T[]).length;\n}\n\n/**\n * @en Check the selector type is [[DOM]].\n * @ja [[DOM]] セレクタであるか判定\n *\n * @param selector\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isDOMSelector<T extends SelectorBase>(selector: DOMSelector<T>): selector is Extract<DOMSelector<T>, DOM> {\n    return selector instanceof DOMBase;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Check node name is argument.\n * @ja Node 名が引数で与えた名前と一致するか判定\n */\nexport function nodeName(elem: Node | null, name: string): boolean {\n    return !!(elem && elem.nodeName.toLowerCase() === name.toLowerCase());\n}\n\n/**\n * @en Get node offset parent. This function will work SVGElement, too.\n * @ja offset parent の取得. SVGElement にも適用可能\n */\nexport function getOffsetParent(node: Node): Element | null {\n    if ((node as HTMLElement).offsetParent) {\n        return (node as HTMLElement).offsetParent;\n    } else if (nodeName(node, 'svg')) {\n        const $svg = $(node);\n        const cssProps = $svg.css(['display', 'position']);\n        if ('none' === cssProps.display || 'fixed' === cssProps.position) {\n            return null;\n        } else {\n            let parent = $svg[0].parentElement;\n            while (parent) {\n                const { display, position } = $(parent).css(['display', 'position']);\n                if ('none' === display) {\n                    return null;\n                } else if (!position || 'static' === position) {\n                    parent = parent.parentElement;\n                } else {\n                    break;\n                }\n            }\n            return parent;\n        }\n    } else {\n        return null;\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    PlainObject,\n    NonFunctionPropertyNames,\n    TypedData,\n    isString,\n    isArray,\n    toTypedData,\n    fromTypedData,\n    camelize,\n    setMixClassAttribute,\n} from '@cdp/core-utils';\nimport { ElementBase } from './static';\nimport {\n    DOMIterable,\n    isNodeElement,\n    isNodeHTMLOrSVGElement,\n    isTypeElement,\n    isTypeHTMLOrSVGElement,\n} from './base';\n\nexport type DOMValueType<T, K = 'value'> = T extends HTMLSelectElement ? (string | string[]) : K extends keyof T ? T[K] : string;\nexport type DOMData = PlainObject<TypedData>;\n\n/** @internal helper for `val()`*/\nfunction isMultiSelectElement(el: ElementBase): el is HTMLSelectElement {\n    return isNodeElement(el) && 'select' === el.nodeName.toLowerCase() && (el as HTMLSelectElement).multiple;\n}\n\n/** @internal helper for `val()`*/\nfunction isInputElement(el: ElementBase): el is HTMLInputElement {\n    return isNodeElement(el) && (null != (el as HTMLInputElement).value);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Mixin base class which concentrated the attributes methods.\n * @ja 属性操作メソッドを集約した Mixin Base クラス\n */\nexport class DOMAttributes<TElement extends ElementBase> implements DOMIterable<TElement> {\n\n///////////////////////////////////////////////////////////////////////\n// imprements: DOMIterable<T>\n\n    readonly [n: number]: TElement;\n    readonly length!: number;\n    [Symbol.iterator]: () => Iterator<TElement>;\n    entries!: () => IterableIterator<[number, TElement]>;\n\n///////////////////////////////////////////////////////////////////////\n// public: Classes\n\n    /**\n     * @en Add css class to elements.\n     * @ja css class 要素に追加\n     *\n     * @param className\n     *  - `en` class name or class name list (array).\n     *  - `ja` クラス名またはクラス名の配列を指定\n     */\n    public addClass(className: string | string[]): this {\n        if (!isTypeElement(this)) {\n            return this;\n        }\n        const classes = isArray(className) ? className : [className];\n        for (const el of this) {\n            if (isNodeElement(el)) {\n                el.classList.add(...classes);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @en Remove css class to elements.\n     * @ja css class 要素を削除\n     *\n     * @param className\n     *  - `en` class name or class name list (array).\n     *  - `ja` クラス名またはクラス名の配列を指定\n     */\n    public removeClass(className: string | string[]): this {\n        if (!isTypeElement(this)) {\n            return this;\n        }\n        const classes = isArray(className) ? className : [className];\n        for (const el of this) {\n            if (isNodeElement(el)) {\n                el.classList.remove(...classes);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @en Determine whether any of the matched elements are assigned the given class.\n     * @ja 指定されたクラス名を少なくとも要素が持っているか判定\n     *\n     * @param className\n     *  - `en` class name\n     *  - `ja` クラス名\n     */\n    public hasClass(className: string): boolean {\n        if (!isTypeElement(this)) {\n            return false;\n        }\n        for (const el of this) {\n            if (isNodeElement(el) && el.classList.contains(className)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @en Add or remove one or more classes from each element in the set of matched elements, <br>\n     *     depending on either the class's presence or the value of the state argument.\n     * @ja 現在の状態に応じて, 指定されたクラス名を要素に追加/削除を実行\n     *\n     * @param className\n     *  - `en` class name or class name list (array).\n     *  - `ja` クラス名またはクラス名の配列を指定\n     * @param force\n     *  - `en` if this argument exists, true: the classes should be added / false: removed.\n     *  - `ja` 引数が存在する場合, true: クラスを追加 / false: クラスを削除\n     */\n    public toggleClass(className: string | string[], force?: boolean): this {\n        if (!isTypeElement(this)) {\n            return this;\n        }\n\n        const classes = isArray(className) ? className : [className];\n        const operation = (() => {\n            if (null == force) {\n                return (elem: Element): void => {\n                    for (const name of classes) {\n                        elem.classList.toggle(name);\n                    }\n                };\n            } else if (force) {\n                return (elem: Element) => elem.classList.add(...classes);\n            } else {\n                return (elem: Element) => elem.classList.remove(...classes);\n            }\n        })();\n\n        for (const el of this) {\n            if (isNodeElement(el)) {\n                operation(el);\n            }\n        }\n\n        return this;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public: Properties\n\n    /**\n     * @en Get property value. <br>\n     *     The method gets the property value for only the first element in the matched set.\n     * @ja プロパティ値の取得 <br>\n     *     最初の要素が取得対象\n     *\n     * @param name\n     *  - `en` target property name\n     *  - `ja` プロパティ名を指定\n     */\n    public prop<T extends NonFunctionPropertyNames<TElement>>(name: T): TElement[T];\n\n    /**\n     * @en Set single property value for the set of matched elements.\n     * @ja 配下の要素に対して単一プロパティの設定\n     *\n     * @param name\n     *  - `en` target property name\n     *  - `ja` プロパティ名を指定\n     * @param value\n     *  - `en` target property value\n     *  - `ja` 設定するプロパティ値\n     */\n    public prop<T extends NonFunctionPropertyNames<TElement>>(name: T, value: TElement[T]): this;\n\n    /**\n     * @en Set multi property values for the set of matched elements.\n     * @ja 配下の要素に対して複数プロパティの設定\n     *\n     * @param properties\n     *  - `en` An object of property-value pairs to set.\n     *  - `ja` property-value ペアを持つオブジェクトを指定\n     */\n    public prop(properties: PlainObject): this;\n\n    public prop<T extends NonFunctionPropertyNames<TElement>>(key: T | PlainObject, value?: TElement[T]): TElement[T] | this {\n        if (null == value && isString(key)) {\n            // get first element property\n            const first = this[0];\n            return first && first[key as string];\n        } else {\n            // set property\n            for (const el of this) {\n                if (null != value) {\n                    // single\n                    el[key as string] = value;\n                } else {\n                    // multiple\n                    for (const name of Object.keys(key)) {\n                        if (name in el) {\n                            el[name] = key[name];\n                        }\n                    }\n                }\n            }\n            return this;\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public: Attributes\n\n    /**\n     * @en Get attribute value. <br>\n     *     The method gets the attribute value for only the first element in the matched set.\n     * @ja 属性値の取得 <br>\n     *     最初の要素が取得対象\n     *\n     * @param name\n     *  - `en` target attribute name\n     *  - `ja` 属性名を指定\n     */\n    public attr(name: string): string | undefined;\n\n    /**\n     * @en Set single attribute value for the set of matched elements.\n     * @ja 配下の要素に対して単一属性の設定\n     *\n     * @param name\n     *  - `en` target attribute name\n     *  - `ja` 属性名を指定\n     * @param value\n     *  - `en` target attribute value. if `null` set, remove attribute.\n     *  - `ja` 設定する属性値. `null` が指定された場合削除\n     */\n    public attr(name: string, value: string | number | boolean | null): this;\n\n    /**\n     * @en Set multi attribute values for the set of matched elements.\n     * @ja 配下の要素に対して複数属性の設定\n     *\n     * @param attributes\n     *  - `en` An object of attribute-value pairs to set.\n     *  - `ja` attribute-value ペアを持つオブジェクトを指定\n     */\n    public attr(properties: PlainObject): this;\n\n    public attr(key: string | PlainObject, value?: string | number | boolean | null): string | undefined | this {\n        if (!isTypeElement(this)) {\n            // non element\n            return undefined === value ? undefined : this;\n        } else if (undefined === value && isString(key)) {\n            // get first element attribute\n            const attr = this[0].getAttribute(key);\n            return (null != attr) ? attr : undefined;\n        } else if (null === value) {\n            // remove attribute\n            return this.removeAttr(key as string);\n        } else {\n            // set attribute\n            for (const el of this) {\n                if (isNodeElement(el)) {\n                    if (null != value) {\n                        // single\n                        el.setAttribute(key as string, String(value));\n                    } else {\n                        // multiple\n                        for (const name of Object.keys(key)) {\n                            const val = key[name];\n                            if (null === val) {\n                                el.removeAttribute(name);\n                            } else {\n                                el.setAttribute(name, String(val));\n                            }\n                        }\n                    }\n                }\n            }\n            return this;\n        }\n    }\n\n    /**\n     * @en Remove specified attribute.\n     * @ja 指定した属性を削除\n     *\n     * @param name\n     *  - `en` attribute name or attribute name list (array).\n     *  - `ja` 属性名または属性名の配列を指定\n     */\n    public removeAttr(name: string | string[]): this {\n        if (!isTypeElement(this)) {\n            return this;\n        }\n        const attrs = isArray(name) ? name : [name];\n        for (const el of this) {\n            if (isNodeElement(el)) {\n                for (const attr of attrs) {\n                    el.removeAttribute(attr);\n                }\n            }\n        }\n        return this;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public: Values\n\n    /**\n     * @en Get the current value of the first element in the set of matched elements.\n     * @ja value 値の取得. 最初の要素が取得対象\n     *\n     * @returns\n     *  - `en` `string` or `number` or `string[]` (`<select multiple=\"multiple\">`).\n     *  - `ja` `string` または `number` または `string[]` (`<select multiple=\"multiple\">`)\n     */\n    public val<T extends ElementBase = TElement>(): DOMValueType<T>;\n\n    /**\n     * @en Set the value of every matched element.\n     * @ja 配下の要素に対して value 値を設定\n     *\n     * @param value\n     *  - `en` `string` or `number` or `string[]` (`<select multiple=\"multiple\">`).\n     *  - `ja` `string` または `number` または `string[]` (`<select multiple=\"multiple\">`)\n     */\n    public val<T extends ElementBase = TElement>(value: DOMValueType<T>): this;\n\n    public val<T extends ElementBase = TElement>(value?: DOMValueType<T>): any {\n        if (!isTypeElement(this)) {\n            // non element\n            return null == value ? undefined : this;\n        }\n\n        if (null == value) {\n            // get first element value\n            const el = this[0];\n            if (isMultiSelectElement(el)) {\n                const values = [];\n                for (const option of el.selectedOptions) {\n                    values.push(option.value);\n                }\n                return values;\n            } else if ('value' in el) {\n                return (el as any).value;\n            } else {\n                // no support value\n                return undefined;\n            }\n        } else {\n            // set value\n            for (const el of this) {\n                if (isArray(value) && isMultiSelectElement(el)) {\n                    for (const option of el.options) {\n                        option.selected = (value as string[]).includes(option.value);\n                    }\n                } else if (isInputElement(el)) {\n                    el.value = value;\n                }\n            }\n            return this;\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public: Data\n\n    /**\n     * @en Return the values all `DOMStringMap` store set by an HTML5 data-* attribute for the first element in the collection.\n     * @ja 最初の要素の HTML5 data-* 属性で `DOMStringMap` に格納された全データ値を返却\n     */\n    public data(): DOMData | undefined;\n\n    /**\n     * @en Return the value at the named data store for the first element in the collection, as set by data(key, value) or by an HTML5 data-* attribute.\n     * @ja 最初の要素の key で指定した HTML5 data-* 属性値を返却\n     *\n     * @param key\n     *  - `en` string equivalent to data-`key` is given.\n     *  - `ja` data-`key` に相当する文字列を指定\n     */\n    public data(key: string): TypedData | undefined;\n\n    /**\n     * @en Store arbitrary data associated with the matched elements.\n     * @ja 配下の要素に対して任意のデータを格納\n     *\n     * @param key\n     *  - `en` string equivalent to data-`key` is given.\n     *  - `ja` data-`key` に相当する文字列を指定\n     * @param value\n     *  - `en` data value (not only `string`)\n     *  - `ja` 設定する値を指定 (文字列以外も受付可)\n     */\n    public data(key: string, value: TypedData): this;\n\n    public data(key?: string, value?: TypedData): DOMData | TypedData | undefined | this {\n        if (!isTypeHTMLOrSVGElement(this)) {\n            // non supported dataset element\n            return null == value ? undefined : this;\n        }\n\n        if (undefined === value) {\n            // get first element dataset\n            const dataset = this[0].dataset;\n            if (null == key) {\n                // get all data\n                const data: DOMData = {};\n                for (const prop of Object.keys(dataset)) {\n                    data[prop] = toTypedData(dataset[prop]) as TypedData;\n                }\n                return data;\n            } else {\n                // typed value\n                return toTypedData(dataset[camelize(key)]);\n            }\n        } else {\n            // set value\n            const prop = camelize(key || '');\n            if (prop) {\n                for (const el of this) {\n                    if (isNodeHTMLOrSVGElement(el)) {\n                        el.dataset[prop] = fromTypedData(value);\n                    }\n                }\n            }\n            return this;\n        }\n    }\n\n    /**\n     * @en Remove specified data.\n     * @ja 指定したデータをデータ領域から削除\n     *\n     * @param key\n     *  - `en` string equivalent to data-`key` is given.\n     *  - `ja` data-`key` に相当する文字列を指定\n     */\n    public removeData(key: string | string[]): this {\n        if (!isTypeHTMLOrSVGElement(this)) {\n            return this;\n        }\n        const props = isArray(key) ? key.map(k => camelize(k)) : [camelize(key)];\n        for (const el of this) {\n            if (isNodeHTMLOrSVGElement(el)) {\n                const { dataset } = el;\n                for (const prop of props) {\n                    delete dataset[prop];\n                }\n            }\n        }\n        return this;\n    }\n}\n\nsetMixClassAttribute(DOMAttributes, 'protoExtendsOnly');\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    isFunction,\n    isString,\n    noop,\n    setMixClassAttribute,\n} from '@cdp/core-utils';\nimport { window, document } from './ssr';\nimport {\n    ElementBase,\n    SelectorBase,\n    QueryContext,\n    DOM,\n    DOMSelector,\n    DOMResult,\n    DOMIterateCallback,\n    dom as $,\n} from './static';\nimport {\n    DOMBase,\n    DOMIterable,\n    isNode,\n    isNodeElement,\n    isNodeQueriable,\n    isTypeElement,\n    isTypeWindow,\n    isEmptySelector,\n    isStringSelector,\n    isDocumentSelector,\n    isWindowSelector,\n    isNodeSelector,\n    isIterableSelector,\n    nodeName,\n    getOffsetParent,\n} from './base';\n\nexport type DOMModificationCallback<T extends ElementBase, U extends ElementBase> = (index: number, element: T) => U;\n\n/** @internal helper for `is()` and `filter()` */\nfunction winnow<T extends SelectorBase, U extends ElementBase>(\n    selector: DOMSelector<T> | DOMIterateCallback<U>,\n    dom: DOMTraversing<U>,\n    validCallback: (el: U) => unknown,\n    invalidCallback?: () => unknown,\n): any {\n    invalidCallback = invalidCallback || noop;\n\n    let retval: unknown;\n    for (const [index, el] of dom.entries()) {\n        if (isFunction(selector)) {\n            if (selector.call(el, index, el)) {\n                retval = validCallback(el);\n                if (undefined !== retval) {\n                    return retval;\n                }\n            }\n        } else if (isStringSelector(selector)) {\n            if ((el as Node as Element).matches && (el as Node as Element).matches(selector)) {\n                retval = validCallback(el);\n                if (undefined !== retval) {\n                    return retval;\n                }\n            }\n        } else if (isWindowSelector(selector)) {\n            if (window === el as Window) {\n                retval = validCallback(el);\n                if (undefined !== retval) {\n                    return retval;\n                }\n            } else {\n                retval = invalidCallback();\n                if (undefined !== retval) {\n                    return retval;\n                }\n            }\n        } else if (isDocumentSelector(selector)) {\n            if (document === el as Node as Document) {\n                retval = validCallback(el);\n                if (undefined !== retval) {\n                    return retval;\n                }\n            } else {\n                retval = invalidCallback();\n                if (undefined !== retval) {\n                    return retval;\n                }\n            }\n        } else if (isNodeSelector(selector)) {\n            if (selector === el as Node) {\n                retval = validCallback(el);\n                if (undefined !== retval) {\n                    return retval;\n                }\n            }\n        } else if (isIterableSelector(selector)) {\n            for (const elem of selector) {\n                if (elem === el as Node) {\n                    retval = validCallback(el);\n                    if (undefined !== retval) {\n                        return retval;\n                    }\n                }\n            }\n        } else {\n            retval = invalidCallback();\n            if (undefined !== retval) {\n                return retval;\n            }\n        }\n    }\n\n    retval = invalidCallback();\n    if (undefined !== retval) {\n        return retval;\n    }\n}\n\n/** @internal helper for `parent()`, `parents()` and `siblings()` */\nfunction validParentNode(parentNode: Node | null): parentNode is Node {\n    return null != parentNode && Node.DOCUMENT_NODE !== parentNode.nodeType && Node.DOCUMENT_FRAGMENT_NODE !== parentNode.nodeType;\n}\n\n/** @internal helper for `children()`, `parent()`, `next()` and `prev()` */\nfunction validRetrieveNode<T extends SelectorBase>(node: Node | null, selector: DOMSelector<T> | undefined): node is Node {\n    if (node) {\n        if (selector) {\n            if ($(node).is(selector)) {\n                return true;\n            }\n        } else {\n            return true;\n        }\n    }\n    return false;\n}\n\n/** @internal helper for `nextUntil()` and `prevUntil() */\nfunction retrieveSiblings<\n    E extends ElementBase,\n    T extends Node = HTMLElement,\n    U extends SelectorBase = SelectorBase,\n    V extends SelectorBase = SelectorBase\n>(\n    sibling: 'previousElementSibling' | 'nextElementSibling',\n    dom: DOMTraversing<E>,\n    selector?: DOMSelector<U>, filter?: DOMSelector<V>\n): DOM<T> {\n    if (!isTypeElement(dom)) {\n        return $() as DOM<T>;\n    }\n\n    const siblings = new Set<Node>();\n\n    for (const el of dom as DOMIterable<Element>) {\n        let elem = el[sibling];\n        while (elem) {\n            if (null != selector) {\n                if ($(elem).is(selector)) {\n                    break;\n                }\n            }\n            if (filter) {\n                if ($(elem).is(filter)) {\n                    siblings.add(elem);\n                }\n            } else {\n                siblings.add(elem);\n            }\n            elem = elem[sibling];\n        }\n    }\n\n    return $([...siblings]) as DOM<T>;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Mixin base class which concentrated the traversing methods.\n * @ja トラバースメソッドを集約した Mixin Base クラス\n */\nexport class DOMTraversing<TElement extends ElementBase> implements DOMIterable<TElement> {\n\n///////////////////////////////////////////////////////////////////////\n// imprements: DOMIterable<T>\n\n    readonly [n: number]: TElement;\n    readonly length!: number;\n    [Symbol.iterator]: () => Iterator<TElement>;\n    entries!: () => IterableIterator<[number, TElement]>;\n\n///////////////////////////////////////////////////////////////////////\n// public: Element Methods\n\n    /**\n     * @en Retrieve one of the elements matched by the [[DOM]] instance.\n     * @ja インデックスを指定して配下の要素にアクセス\n     *\n     * @param index\n     *  - `en` A zero-based integer indicating which element to retrieve. <br>\n     *         If negative index is counted from the end of the matched set.\n     *  - `ja` 0 base のインデックスを指定 <br>\n     *         負値が指定された場合, 末尾からのインデックスとして解釈される\n     */\n    public get(index: number): TElement | undefined;\n\n    /**\n     * @en Retrieve the elements matched by the [[DOM]] instance.\n     * @ja 配下の要素すべてを配列で取得\n     */\n    public get(): TElement[];\n\n    public get(index?: number): TElement[] | TElement | undefined {\n        if (null != index) {\n            index = Math.trunc(index);\n            return index < 0 ? this[index + this.length] : this[index];\n        } else {\n            return this.toArray();\n        }\n    }\n\n    /**\n     * @en Retrieve all the elements contained in the [[DOM]] set, as an array.\n     * @ja 配下の要素すべてを配列で取得\n     */\n    public toArray(): TElement[] {\n        return [...this];\n    }\n\n    /**\n     * @en Return the position of the first element within the [[DOM]] collection relative to its sibling elements.\n     * @ja [[DOM]] 内の最初の要素が兄弟要素の何番目に所属するかを返却\n     */\n    public index(): number | undefined;\n\n    /**\n     * @en Search for a given a selector, element, or [[DOM]] instance from among the matched elements.\n     * @ja セレクタ, 要素, または [[DOM]] インスタンスを指定し, 配下の何番目に所属しているかを返却\n     */\n    public index<T extends ElementBase>(selector: string | T | DOM<T>): number | undefined;\n\n    public index<T extends ElementBase>(selector?: string | T | DOM<T>): number | undefined {\n        if (!isTypeElement(this)) {\n            return undefined;\n        } else if (null == selector) {\n            let i = 0;\n            let child: Node | null = this[0];\n            while (null !== (child = child.previousSibling)) {\n                if (Node.ELEMENT_NODE === child.nodeType) {\n                    i += 1;\n                }\n            }\n            return i;\n        } else {\n            let elem: T | Element;\n            if (isString(selector)) {\n                elem = $(selector)[0];\n            } else {\n                elem = selector instanceof DOMBase ? selector[0] : selector;\n            }\n            const i = [...this].indexOf(elem as TElement & Element);\n            return 0 <= i ? i : undefined;\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public: Traversing\n\n    /**\n     * @en Reduce the set of matched elements to the first in the set as [[DOM]] instance.\n     * @ja 管轄している最初の要素を [[DOM]] インスタンスにして取得\n     */\n    public first(): DOM<TElement> {\n        return $(this[0]) as DOM<TElement>;\n    }\n\n    /**\n     * @en Reduce the set of matched elements to the final one in the set as [[DOM]] instance.\n     * @ja 管轄している末尾の要素を [[DOM]] インスタンスにして取得\n     */\n    public last(): DOM<TElement> {\n        return $(this[this.length - 1]) as DOM<TElement>;\n    }\n\n    /**\n     * @en Create a new [[DOM]] instance with elements added to the set from selector.\n     * @ja 指定された `selector` で取得した `Element` を追加した新規 [[DOM]] インスタンスを返却\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     * @param context\n     *  - `en` Set using `Document` context. When being un-designating, a fixed value of the environment is used.\n     *  - `ja` 使用する `Document` コンテキストを指定. 未指定の場合は環境の既定値が使用される.\n     */\n    public add<T extends SelectorBase>(selector: DOMSelector<T>, context?: QueryContext): DOM<TElement> {\n        const $add = $(selector, context);\n        const elems = new Set([...this, ...$add]);\n        return $([...elems] as any);\n    }\n\n    /**\n     * @en Check the current matched set of elements against a selector, element, or [[DOM]] instance.\n     * @ja セレクタ, 要素, または [[DOM]] インスタンスを指定し, 現在の要素のセットと一致するか確認\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]], test function.\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列, テスト関数\n     * @returns\n     *  - `en` `true` if at least one of these elements matches the given arguments.\n     *  - `ja` 引数に指定した条件が要素の一つでも一致すれば `true` を返却\n     */\n    public is<T extends SelectorBase>(selector: DOMSelector<T> | DOMIterateCallback<TElement>): boolean {\n        if (this.length <= 0 || isEmptySelector(selector as DOMSelector<T>)) {\n            return false;\n        }\n        return winnow(selector, this, () => true, () => false) as boolean;\n    }\n\n    /**\n     * @en Reduce the set of matched elements to those that match the selector or pass the function's test.\n     * @ja セレクタ, 要素, または [[DOM]] インスタンスを指定し, 現在の要素のセットと一致したものを返却\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]], test function.\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列, テスト関数\n     * @returns\n     *  - `en` New [[DOM]] instance including filtered elements.\n     *  - `ja` フィルタリングされた要素を内包する 新規 [[DOM]] インスタンス\n     */\n    public filter<T extends SelectorBase>(selector: DOMSelector<T> | DOMIterateCallback<TElement>): DOM<TElement> {\n        if (this.length <= 0 || isEmptySelector(selector as DOMSelector<T>)) {\n            return $() as DOM<TElement>;\n        }\n        const elements: TElement[] = [];\n        winnow(selector, this, (el: TElement) => { elements.push(el); });\n        return $(elements as Node[]) as DOM<TElement>;\n    }\n\n    /**\n     * @en Remove elements from the set of match the selector or pass the function's test.\n     * @ja セレクタ, 要素, または [[DOM]] インスタンスを指定し, 現在の要素のセットと一致したものを削除して返却\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]], test function.\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列, テスト関数\n     * @returns\n     *  - `en` New [[DOM]] instance excluding filtered elements.\n     *  - `ja` フィルタリングされた要素を以外を内包する 新規 [[DOM]] インスタンス\n     */\n    public not<T extends SelectorBase>(selector: DOMSelector<T> | DOMIterateCallback<TElement>): DOM<TElement> {\n        if (this.length <= 0 || isEmptySelector(selector as DOMSelector<T>)) {\n            return $() as DOM<TElement>;\n        }\n        const elements = new Set<TElement>([...this]);\n        winnow(selector, this, (el: TElement) => { elements.delete(el); });\n        return $([...elements] as Node[]) as DOM<TElement>;\n    }\n\n    /**\n     * @en Get the descendants of each element in the current set of matched elements, filtered by a selector.\n     * @ja 配下の要素に対して指定したセレクタに一致する要素を検索\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public find<T extends SelectorBase = SelectorBase>(selector: DOMSelector<T>): DOMResult<T> {\n        if (!isString(selector)) {\n            const $selector = $(selector) as DOM<Node>;\n            return $selector.filter((index, elem) => {\n                for (const el of this) {\n                    if (isNode(el) && el !== elem && el.contains(elem)) {\n                        return true;\n                    }\n                }\n                return false;\n            }) as DOMResult<T>;\n        } else if (isTypeWindow(this)) {\n            return $();\n        } else {\n            const elements: Element[] = [];\n            for (const el of this) {\n                if (isNodeQueriable(el)) {\n                    const elems = el.querySelectorAll(selector);\n                    elements.push(...elems);\n                }\n            }\n            return $(elements as Node[]) as DOMResult<T>;\n        }\n    }\n\n    /**\n     * @en Reduce the set of matched elements to those that have a descendant that matches the selector.\n     * @ja 配下の要素に対して指定したセレクタに一致した子要素持つ要素を返却\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public has<T extends SelectorBase = SelectorBase>(selector: DOMSelector<T>): DOMResult<T> {\n        if (isTypeWindow(this)) {\n            return $();\n        }\n\n        const targets: Node[] = [];\n        for (const el of this) {\n            if (isNodeQueriable(el)) {\n                const $target = $(selector, el as Element) as DOM<Element>;\n                targets.push(...$target);\n            }\n        }\n\n        return this.filter((index, elem) => {\n            if (isNode(elem)) {\n                for (const el of new Set(targets)) {\n                    if (elem !== el && elem.contains(el)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }) as DOM<Node> as DOMResult<T>;\n    }\n\n    /**\n     * @en Pass each element in the current matched set through a function, producing a new [[DOM]] instance containing the return values.\n     * @ja コールバックで変更された要素を用いて新たに [[DOM]] インスタンスを構築\n     *\n     * @param callback\n     *  - `en` modification function object that will be invoked for each element in the current set.\n     *  - `ja` 各要素に対して呼び出される変更関数\n     */\n    public map<T extends ElementBase>(callback: DOMModificationCallback<TElement, T>): DOM<T> {\n        const elements: T[] = [];\n        for (const [index, el] of this.entries()) {\n            elements.push(callback.call(el, index, el));\n        }\n        return $(elements as Node[]) as DOM<T>;\n    }\n\n    /**\n     * @en Iterate over a [[DOM]] instance, executing a function for each matched element.\n     * @ja 配下の要素に対してコールバック関数を実行\n     *\n     * @param callback\n     *  - `en` callback function object that will be invoked for each element in the current set.\n     *  - `ja` 各要素に対して呼び出されるコールバック関数\n     */\n    public each(callback: DOMIterateCallback<TElement>): this {\n        for (const [index, el] of this.entries()) {\n            if (false === callback.call(el, index, el)) {\n                return this;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @en Reduce the set of matched elements to a subset specified by a range of indices.\n     * @ja インデックス指定された範囲の要素を含む [[DOM]] インスタンスを返却\n     *\n     * @param begin\n     *  - `en` An integer indicating the 0-based position at which the elements begin to be selected.\n     *  - `ja` 取り出しの開始位置を示す 0 から始まるインデックス\n     * @param end\n     *  - `en` An integer indicating the 0-based position at which the elements stop being selected.\n     *  - `ja` 取り出しを終える直前の位置を示す 0 から始まるインデックス\n     */\n    public slice(begin?: number, end?: number): DOM<TElement> {\n        return $([...this].slice(begin, end) as Node[]) as DOM<TElement>;\n    }\n\n    /**\n     * @en Reduce the set of matched elements to the one at the specified index.\n     * @ja インデックス指定した要素を含む [[DOM]] インスタンスを返却\n     *\n     * @param index\n     *  - `en` A zero-based integer indicating which element to retrieve. <br>\n     *         If negative index is counted from the end of the matched set.\n     *  - `ja` 0 base のインデックスを指定 <br>\n     *         負値が指定された場合, 末尾からのインデックスとして解釈される\n     */\n    public eq(index: number): DOM<TElement> {\n        if (null == index) {\n            // for fail safe\n            return $() as DOM<TElement>;\n        } else {\n            return $(this.get(index)) as DOM<TElement>;\n        }\n    }\n\n    /**\n     * @en For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n     * @ja 開始要素から最も近い親要素を選択. セレクター指定した場合, マッチする最も近い親要素を返却\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]], test function.\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列, テスト関数\n     */\n    public closest<T extends SelectorBase = SelectorBase>(selector: DOMSelector<T>): DOMResult<T> {\n        if (null == selector || !isTypeElement(this)) {\n            return $();\n        } else if (isString(selector)) {\n            const closests = new Set<Node>();\n            for (const el of this) {\n                if (isNodeElement(el)) {\n                    const c = el.closest(selector);\n                    if (c) {\n                        closests.add(c);\n                    }\n                }\n            }\n            return $([...closests]) as DOMResult<T>;\n        } else if (this.is(selector)) {\n            return $(this as unknown as Element) as DOMResult<T>;\n        } else {\n            return this.parents(selector).eq(0) as DOM<Node> as DOMResult<T>;\n        }\n    }\n\n    /**\n     * @en Get the children of each element in the set of matched elements, optionally filtered by a selector.\n     * @ja 各要素の子要素を取得. セレクタが指定された場合はフィルタリングされた結果を返却\n     *\n     * @param selector\n     *  - `en` filtered by a selector.\n     *  - `ja` フィルタ用セレクタ\n     */\n    public children<T extends Node = HTMLElement, U extends SelectorBase = SelectorBase>(selector?: DOMSelector<U>): DOM<T> {\n        if (isTypeWindow(this)) {\n            return $() as DOM<T>;\n        }\n\n        const children = new Set<Node>();\n        for (const el of this) {\n            if (isNodeQueriable(el)) {\n                for (const child of el.children) {\n                    if (validRetrieveNode(child, selector)) {\n                        children.add(child);\n                    }\n                }\n            }\n        }\n        return $([...children]) as DOM<T>;\n    }\n\n    /**\n     * @en Get the first parent of each element in the current set of matched elements.\n     * @ja 管轄している各要素の最初の親要素を返却\n     *\n     * @param selector\n     *  - `en` filtered by a selector.\n     *  - `ja` フィルタ用セレクタ\n     * @returns [[DOM]] instance\n     */\n    public parent<T extends Node = HTMLElement, U extends SelectorBase = SelectorBase>(selector?: DOMSelector<U>): DOM<T> {\n        const parents = new Set<Node>();\n        for (const el of this) {\n            if (isNode(el)) {\n                const parentNode = el.parentNode;\n                if (validParentNode(parentNode) && validRetrieveNode(parentNode, selector)) {\n                    parents.add(parentNode);\n                }\n            }\n        }\n        return $([...parents]) as DOM<T>;\n    }\n\n    /**\n     * @en Get the ancestors of each element in the current set of matched elements.\n     * @ja 管轄している各要素の祖先の親要素を返却\n     *\n     * @param selector\n     *  - `en` filtered by a selector.\n     *  - `ja` フィルタ用セレクタ\n     * @returns [[DOM]] instance\n     */\n    public parents<T extends Node = HTMLElement, U extends SelectorBase = SelectorBase>(selector?: DOMSelector<U>): DOM<T> {\n        return this.parentsUntil(undefined, selector);\n    }\n\n    /**\n     * @en Get the ancestors of each element in the current set of matched elements, <br>\n     *     up to but not including the element matched by the selector, DOM node, or [[DOM]] instance\n     * @ja 管轄している各要素の祖先で, 指定したセレクターや条件に一致する要素が出てくるまで選択して取得\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     * @param filter\n     *  - `en` filtered by a string selector.\n     *  - `ja` フィルタ用文字列セレクタ\n     * @returns [[DOM]] instance\n     */\n    public parentsUntil<\n        T extends Node = HTMLElement,\n        U extends SelectorBase = SelectorBase,\n        V extends SelectorBase = SelectorBase\n    >(selector?: DOMSelector<U>, filter?: DOMSelector<V>): DOM<T> {\n        let parents: Node[] = [];\n\n        for (const el of this) {\n            let parentNode = (el as Node).parentNode;\n            while (validParentNode(parentNode)) {\n                if (null != selector) {\n                    if ($(parentNode).is(selector)) {\n                        break;\n                    }\n                }\n                if (filter) {\n                    if ($(parentNode).is(filter)) {\n                        parents.push(parentNode);\n                    }\n                } else {\n                    parents.push(parentNode);\n                }\n                parentNode = parentNode.parentNode;\n            }\n        }\n\n        // 複数要素が対象になるときは反転\n        if (1 < this.length) {\n            parents = [...new Set(parents.reverse())].reverse();\n        }\n\n        return $(parents) as DOM<T>;\n    }\n\n    /**\n     * @en Get the immediately following sibling of each element in the set of matched elements. <br>\n     *     If a selector is provided, it retrieves the next sibling only if it matches that selector.\n     * @ja 要素集合の各要素の直後にあたる兄弟要素を抽出 <br>\n     *     条件式を指定し、結果セットから更に絞込みを行うことも可能\n     *\n     * @param selector\n     *  - `en` filtered by a selector.\n     *  - `ja` フィルタ用セレクタ\n     */\n    public next<T extends Node = HTMLElement, U extends SelectorBase = SelectorBase>(selector?: DOMSelector<U>): DOM<T> {\n        if (!isTypeElement(this)) {\n            return $() as DOM<T>;\n        }\n\n        const nextSiblings = new Set<Node>();\n        for (const el of this) {\n            if (isNodeElement(el)) {\n                const elem = el.nextElementSibling;\n                if (validRetrieveNode(elem, selector)) {\n                    nextSiblings.add(elem);\n                }\n            }\n        }\n        return $([...nextSiblings]) as DOM<T>;\n    }\n\n    /**\n     * @en Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.\n     * @ja マッチした要素集合内の各要素の次以降の全ての兄弟要素を取得. セレクタを指定することでフィルタリングすることが可能.\n     *\n     * @param selector\n     *  - `en` filtered by a selector.\n     *  - `ja` フィルタ用セレクタ\n     */\n    public nextAll<T extends Node = HTMLElement, U extends SelectorBase = SelectorBase>(selector?: DOMSelector<U>): DOM<T> {\n        return this.nextUntil(undefined, selector);\n    }\n\n    /**\n     * @en Get all following siblings of each element up to but not including the element matched by the selector.\n     * @ja マッチした要素の次以降の兄弟要素で, 指定したセレクターや条件に一致する要素が出てくるまで選択して取得\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     * @param filter\n     *  - `en` filtered by a string selector.\n     *  - `ja` フィルタ用文字列セレクタ\n     */\n    public nextUntil<\n        T extends Node = HTMLElement,\n        U extends SelectorBase = SelectorBase,\n        V extends SelectorBase = SelectorBase\n    >(selector?: DOMSelector<U>, filter?: DOMSelector<V>): DOM<T> {\n        return retrieveSiblings('nextElementSibling', this, selector, filter);\n    }\n\n    /**\n     * @en Get the immediately preceding sibling of each element in the set of matched elements. <br>\n     *     If a selector is provided, it retrieves the previous sibling only if it matches that selector.\n     * @ja マッチした要素集合の各要素の直前の兄弟要素を抽出 <br>\n     *     条件式を指定し、結果セットから更に絞込みを行うことも可能\n     *\n     * @param selector\n     *  - `en` filtered by a selector.\n     *  - `ja` フィルタ用セレクタ\n     */\n    public prev<T extends Node = HTMLElement, U extends SelectorBase = SelectorBase>(selector?: DOMSelector<U>): DOM<T> {\n        if (!isTypeElement(this)) {\n            return $() as DOM<T>;\n        }\n\n        const prevSiblings = new Set<Node>();\n        for (const el of this) {\n            if (isNodeElement(el)) {\n                const elem = el.previousElementSibling;\n                if (validRetrieveNode(elem, selector)) {\n                    prevSiblings.add(elem);\n                }\n            }\n        }\n        return $([...prevSiblings]) as DOM<T>;\n    }\n\n    /**\n     * @en Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.\n     * @ja マッチした要素集合内の各要素の前以降の全ての兄弟要素を取得. セレクタを指定することでフィルタリングすることが可能.\n     *\n     * @param selector\n     *  - `en` filtered by a selector.\n     *  - `ja` フィルタ用セレクタ\n     */\n    public prevAll<T extends Node = HTMLElement, U extends SelectorBase = SelectorBase>(selector?: DOMSelector<U>): DOM<T> {\n        return this.prevUntil(undefined, selector);\n    }\n\n    /**\n     * @en Get all preceding siblings of each element up to but not including the element matched by the selector.\n     * @ja マッチした要素の前以降の兄弟要素で, 指定したセレクタや条件に一致する要素が出てくるまで選択して取得\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     * @param filter\n     *  - `en` filtered by a string selector.\n     *  - `ja` フィルタ用文字列セレクタ\n     */\n    public prevUntil<\n        T extends Node = HTMLElement,\n        U extends SelectorBase = SelectorBase,\n        V extends SelectorBase = SelectorBase\n    >(selector?: DOMSelector<U>, filter?: DOMSelector<V>): DOM<T> {\n        return retrieveSiblings('previousElementSibling', this, selector, filter);\n    }\n\n    /**\n     * @en Get the siblings of each element in the set of matched elements, optionally filtered by a selector\n     * @ja マッチした各要素の兄弟要素を取得\n     *\n     * @param selector\n     *  - `en` filtered by a selector.\n     *  - `ja` フィルタ用セレクタ\n     */\n    public siblings<T extends Node = HTMLElement, U extends SelectorBase = SelectorBase>(selector?: DOMSelector<U>): DOM<T> {\n        if (!isTypeElement(this)) {\n            return $() as DOM<T>;\n        }\n\n        const siblings = new Set<Node>();\n        for (const el of this) {\n            if (isNodeElement(el)) {\n                const parentNode = el.parentNode;\n                if (validParentNode(parentNode)) {\n                    for (const sibling of $(parentNode).children(selector)) {\n                        if (sibling !== el as Element) {\n                            siblings.add(sibling);\n                        }\n                    }\n                }\n            }\n        }\n        return $([...siblings]) as DOM<T>;\n    }\n\n    /**\n     * @en Get the children of each element in the set of matched elements, including text and comment nodes.\n     * @ja テキストやHTMLコメントを含む子要素を取得\n     */\n    public contents<T extends Node = HTMLElement>(): DOM<T> {\n        if (isTypeWindow(this)) {\n            return $() as DOM<T>;\n        }\n\n        const contents = new Set<Node>();\n        for (const el of this) {\n            if (isNode(el)) {\n                if (nodeName(el, 'iframe')) {\n                    contents.add((el as HTMLIFrameElement).contentDocument as Node);\n                } else if (nodeName(el, 'template')) {\n                    contents.add((el as HTMLTemplateElement).content);\n                } else {\n                    for (const node of el.childNodes) {\n                        contents.add(node);\n                    }\n                }\n            }\n        }\n        return $([...contents]) as DOM<T>;\n    }\n\n    /**\n     * @en Get the closest ancestor element that is positioned.\n     * @ja 要素の先祖要素で, スタイルでポジション指定(positiionがrelative, absolute, fixedのいずれか)されているものを取得\n     */\n    public offsetParent<T extends Node = HTMLElement>(): DOM<T> {\n        const rootElement = document.documentElement;\n        if (this.length <= 0) {\n            return $() as DOM<T>;\n        } else if (!isTypeElement(this)) {\n            return $(rootElement) as DOM<Node> as DOM<T>;\n        } else {\n            const offsets = new Set<Node>();\n            for (const el of this) {\n                const offset = getOffsetParent(el as Node) || rootElement;\n                offsets.add(offset);\n            }\n            return $([...offsets]) as DOM<T>;\n        }\n    }\n}\n\nsetMixClassAttribute(DOMTraversing, 'protoExtendsOnly');\n","import { isString, setMixClassAttribute } from '@cdp/core-utils';\nimport {\n    ElementBase,\n    SelectorBase,\n    DOMSelector,\n    DOMResult,\n    DOM,\n    dom as $,\n} from './static';\nimport {\n    DOMIterable,\n    isNode,\n    isNodeElement,\n    isTypeElement,\n    isTypeDocument,\n    isTypeWindow,\n} from './base';\nimport { document } from './ssr';\n\n/** @internal check HTML string */\nfunction isHTMLString(src: string): boolean {\n    const subject = src.trim();\n    return ('<' === subject.slice(0, 1)) && ('>' === subject.slice(-1));\n}\n\n/** @internal helper for `append()`, `prepend()`, `before()` and `after()`  */\nfunction toNodeSet<T extends Element>(...contents: (Node | string | DOM<T> | NodeListOf<T>)[]): Set<Node | string> {\n    const nodes = new Set<Node | string>();\n    for (const content of contents) {\n        if ((isString(content) && !isHTMLString(content)) || isNode(content)) {\n            nodes.add(content);\n        } else {\n            const $dom = $(content as DOM<Element>);\n            for (const node of $dom) {\n                if (isString(node) || (isNode(node) && Node.DOCUMENT_NODE !== node.nodeType)) {\n                    nodes.add(node);\n                }\n            }\n        }\n    }\n    return nodes;\n}\n\n/** @internal helper for `before()` and `after()`  */\nfunction toNode(node: Node | string): Node {\n    if (isString(node)) {\n        return document.createTextNode(node);\n    } else {\n        return node;\n    }\n}\n\n/** @internal helper for `detach()` and `remove()` */\nfunction removeElement<T extends SelectorBase, U extends ElementBase>(\n    selector: DOMSelector<T> | undefined,\n    dom: DOMIterable<U>,\n    keepListener: boolean\n): void {\n    const $dom: DOM<U> = null != selector\n        ? (dom as DOM<U>).filter(selector)\n        : dom as DOM<U>;\n\n    if (!keepListener) {\n        $dom.off();\n    }\n\n    for (const el of $dom) {\n        if (isNodeElement(el)) {\n            el.remove();\n        }\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Mixin base class which concentrated the manipulation methods.\n * @ja マニピュレーションメソッドを集約した Mixin Base クラス\n */\nexport class DOMManipulation<TElement extends ElementBase> implements DOMIterable<TElement> {\n\n///////////////////////////////////////////////////////////////////////\n// imprements: DOMIterable<T>\n\n    readonly [n: number]: TElement;\n    readonly length!: number;\n    [Symbol.iterator]: () => Iterator<TElement>;\n    entries!: () => IterableIterator<[number, TElement]>;\n\n///////////////////////////////////////////////////////////////////////\n// public: Insertion, Inside\n\n    /**\n     * @en Get the HTML contents of the first element in the set of matched elements.\n     * @ja 先頭要素の HTML を取得\n     */\n    public html(): string;\n\n    /**\n     * @en Set the HTML contents of each element in the set of matched elements.\n     * @ja 配下の要素に指定した HTML を設定\n     *\n     * @param htmlString\n     *  - `en` A string of HTML to set as the content of each matched element.\n     *  - `ja` 要素内に挿入する HTML 文字列を指定\n     */\n    public html(htmlString: string): this;\n\n    public html(htmlString?: string): string | this {\n        if (undefined === htmlString) {\n            // getter\n            const el = this[0];\n            return isNodeElement(el) ? el.innerHTML : '';\n        } else if (isString(htmlString)) {\n            // setter\n            for (const el of this) {\n                if (isNodeElement(el)) {\n                    el.innerHTML = htmlString;\n                }\n            }\n            return this;\n        } else {\n            // invalid arg\n            console.warn(`invalid arg. htmlString type:${typeof htmlString}`);\n            return this;\n        }\n    }\n\n    /**\n     * @en Get the text contents of the first element in the set of matched elements. <br>\n     *     jQuery returns the combined text of each element, but this method makes only first element's text.\n     * @ja 先頭要素のテキストを取得 <br>\n     *     jQuery は各要素の連結テキストを返却するが本メソッドは先頭要素のみを対象とする\n     */\n    public text(): string;\n\n    /**\n     * @en Set the content of each element in the set of matched elements to the specified text.\n     * @ja 配下の要素に指定したテキストを設定\n     *\n     * @param text\n     *  - `en` The text to set as the content of each matched element.\n     *  - `ja` 要素内に挿入するテキストを指定\n     */\n    public text(value: string | number | boolean): this;\n\n    public text(value?: string | number | boolean): string | this {\n        if (undefined === value) {\n            // getter\n            const el = this[0];\n            if (isNode(el)) {\n                const text = el.textContent;\n                return (null != text) ? text.trim() : '';\n            } else {\n                return '';\n            }\n        } else {\n            // setter\n            const text = isString(value) ? value : String(value);\n            for (const el of this) {\n                if (isNode(el)) {\n                    el.textContent = text;\n                }\n            }\n            return this;\n        }\n    }\n\n    /**\n     * @en Insert content, specified by the parameter, to the end of each element in the set of matched elements.\n     * @ja 配下の要素に引数で指定したコンテンツを追加\n     *\n     * @param contents\n     *  - `en` element(s), text node(s), HTML string, or [[DOM]] instance.\n     *  - `ja` 追加する要素(群), テキストノード(群), HTML string, または [[DOM]] インスタンス\n     */\n    public append<T extends Element>(...contents: (Node | string | DOM<T> | NodeListOf<T>)[]): this {\n        const nodes = toNodeSet(...contents);\n        for (const el of this) {\n            if (isNodeElement(el)) {\n                el.append(...nodes);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @en Insert every element in the set of matched elements to the end of the target.\n     * @ja 配下要素を他の要素に追加\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public appendTo<T extends SelectorBase>(selector: DOMSelector<T>): DOMResult<T> {\n        return ($(selector) as DOM).append(this as DOMIterable<Node> as DOM<Element>) as DOMResult<T>;\n    }\n\n    /**\n     * @en Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.\n     * @ja 配下の要素の先頭に引数で指定したコンテンツを挿入\n     *\n     * @param contents\n     *  - `en` element(s), text node(s), HTML string, or [[DOM]] instance.\n     *  - `ja` 追加する要素(群), テキストノード(群), HTML string, または [[DOM]] インスタンス\n     */\n    public prepend<T extends Element>(...contents: (Node | string | DOM<T> | NodeListOf<T>)[]): this {\n        const nodes = toNodeSet(...contents);\n        for (const el of this) {\n            if (isNodeElement(el)) {\n                el.prepend(...nodes);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @en Insert every element in the set of matched elements to the beginning of the target.\n     * @ja 配下要素を他の要素の先頭に挿入\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public prependTo<T extends SelectorBase>(selector: DOMSelector<T>): DOMResult<T> {\n        return ($(selector) as DOM).prepend(this as DOMIterable<Node> as DOM<Element>) as DOMResult<T>;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public: Insertion, Outside\n\n    /**\n     * @en Insert content, specified by the parameter, before each element in the set of matched elements.\n     * @ja 配下の要素の前に指定した HTML や要素を挿入\n     *\n     * @param contents\n     *  - `en` element(s), text node(s), HTML string, or [[DOM]] instance.\n     *  - `ja` 追加する要素(群), テキストノード(群), HTML string, または [[DOM]] インスタンス\n     */\n    public before<T extends Element>(...contents: (Node | string | DOM<T> | NodeListOf<T>)[]): this {\n        const nodes = toNodeSet(...contents);\n        for (const el of this) {\n            if (isNode(el) && el.parentNode) {\n                for (const node of nodes) {\n                    el.parentNode.insertBefore(toNode(node), el);\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @en Insert every element in the set of matched elements before the target.\n     * @ja 配下の要素を指定した別要素の前に挿入\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public insertBefore<T extends SelectorBase>(selector: DOMSelector<T>): DOMResult<T> {\n        return ($(selector) as DOM).before(this as DOMIterable<Node> as DOM<Element>) as DOMResult<T>;\n    }\n\n    /**\n     * @en Insert content, specified by the parameter, after each element in the set of matched elements.\n     * @ja 配下の要素の後ろに指定した HTML や要素を挿入\n     *\n     * @param contents\n     *  - `en` element(s), text node(s), HTML string, or [[DOM]] instance.\n     *  - `ja` 追加する要素(群), テキストノード(群), HTML string, または [[DOM]] インスタンス\n     */\n    public after<T extends Element>(...contents: (Node | string | DOM<T> | NodeListOf<T>)[]): this {\n        const nodes = toNodeSet(...[...contents].reverse());\n        for (const el of this) {\n            if (isNode(el) && el.parentNode) {\n                for (const node of nodes) {\n                    el.parentNode.insertBefore(toNode(node), el.nextSibling);\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @en Insert every element in the set of matched elements after the target.\n     * @ja 配下の要素を指定した別要素の後ろに挿入\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public insertAfter<T extends SelectorBase>(selector: DOMSelector<T>): DOMResult<T> {\n        return ($(selector) as DOM).after(this as DOMIterable<Node> as DOM<Element>) as DOMResult<T>;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public: Insertion, Around\n\n    /**\n     * @en Wrap an HTML structure around all elements in the set of matched elements.\n     * @ja 配下の要素を指定した別要素でそれぞれ囲む\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public wrapAll<T extends SelectorBase>(selector: DOMSelector<T>): this {\n        if (isTypeDocument(this) || isTypeWindow(this)) {\n            return this;\n        }\n\n        const el = this[0] as Node;\n\n        // The elements to wrap the target around\n        const $wrap = $(selector, el.ownerDocument).eq(0).clone(true) as DOM<Element>;\n\n        if (el.parentNode) {\n            $wrap.insertBefore(el);\n        }\n\n        $wrap.map((index: number, elem: Element) => {\n            while (elem.firstElementChild) {\n                elem = elem.firstElementChild;\n            }\n            return elem;\n        }).append(this as DOMIterable<Node> as DOM<Element>);\n\n        return this;\n    }\n\n    /**\n     * @en Wrap an HTML structure around the content of each element in the set of matched elements.\n     * @ja 配下の要素の内側を, 指定した別エレメントでそれぞれ囲む\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public wrapInner<T extends SelectorBase>(selector: DOMSelector<T>): this {\n        if (!isTypeElement(this)) {\n            return this;\n        }\n\n        for (const el of this) {\n            const $el = $(el) as DOM<Element>;\n            const contents = $el.contents();\n            if (0 < contents.length) {\n                contents.wrapAll(selector);\n            } else {\n                $el.append(selector as Node);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @en Wrap an HTML structure around each element in the set of matched elements.\n     * @ja 配下の要素を, 指定した別要素でそれぞれ囲む\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public wrap<T extends SelectorBase>(selector: DOMSelector<T>): this {\n        if (!isTypeElement(this)) {\n            return this;\n        }\n\n        for (const el of this) {\n            const $el = $(el) as DOM<Element>;\n            $el.wrapAll(selector);\n        }\n\n        return this;\n    }\n\n    /**\n     * @en Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.\n     * @ja 要素の親エレメントを削除\n     *\n     * @param selector\n     *  - `en` filtered by a selector.\n     *  - `ja` フィルタ用セレクタ\n     */\n    public unwrap<T extends SelectorBase>(selector?: DOMSelector<T>): this {\n        const self = this as DOMIterable<Node> as DOM<Element>;\n        self.parent(selector).not('body').each((index, elem) => {\n            $(elem).replaceWith(elem.childNodes);\n        });\n        return this;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public: Removal\n\n    /**\n     * @en Remove all child nodes of the set of matched elements from the DOM.\n     * @ja 配下の要素内の子要素(テキストも対象)をすべて削除\n     */\n    public empty(): this {\n        for (const el of this) {\n            if (isNodeElement(el)) {\n                while (el.firstChild) {\n                    el.removeChild(el.firstChild);\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @en Remove the set of matched elements from the DOM. This method keeps event listener information.\n     * @ja 要素を DOM から削除. 削除後もイベントリスナは有効\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public detach<T extends SelectorBase>(selector?: DOMSelector<T>): this {\n        removeElement(selector, this, true);\n        return this;\n    }\n\n    /**\n     * @en Remove the set of matched elements from the DOM.\n     * @ja 要素を DOM から削除\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public remove<T extends SelectorBase>(selector?: DOMSelector<T>): this {\n        removeElement(selector, this, false);\n        return this;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public: Replacement\n\n    /**\n     * @en Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.\n     * @ja 配下の要素を指定された別の要素や HTML と差し替え\n     *\n     * @param newContent\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public replaceWith<T extends SelectorBase>(newContent?: DOMSelector<T>): this {\n        const elem = (() => {\n            const $dom = $(newContent);\n            if (1 === $dom.length && isNodeElement($dom[0])) {\n                return $dom[0];\n            } else {\n                const fragment = document.createDocumentFragment();\n                for (const el of $dom) {\n                    if (isNodeElement(el)) {\n                        fragment.appendChild(el);\n                    }\n                }\n                return fragment;\n            }\n        })();\n\n        for (const el of this) {\n            if (isNodeElement(el)) {\n                el.replaceWith(elem);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @en Replace each target element with the set of matched elements.\n     * @ja 配下の要素を指定した別の要素と差し替え\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public replaceAll<T extends SelectorBase>(selector: DOMSelector<T>): DOMResult<T> {\n        return ($(selector) as DOM).replaceWith(this as DOMIterable<Node> as DOM<Element>) as DOMResult<T>;\n    }\n}\n\nsetMixClassAttribute(DOMManipulation, 'protoExtendsOnly');\n","import {\n    PlainObject,\n    isString,\n    isNumber,\n    isArray,\n    classify,\n    dasherize,\n    setMixClassAttribute,\n} from '@cdp/core-utils';\nimport {\n    ElementBase,\n    dom as $,\n} from './static';\nimport {\n    DOMIterable,\n    isNodeHTMLOrSVGElement,\n    isTypeHTMLOrSVGElement,\n    isTypeDocument,\n    isTypeWindow,\n    getOffsetParent,\n} from './base';\nimport { window } from './ssr';\n\n/** @internal helper for `css()` */\nfunction ensureChainCaseProperies(props: PlainObject<string | null>): PlainObject<string | null> {\n    const retval = {};\n    for (const key in props) {\n        retval[dasherize(key)] = props[key];\n    }\n    return retval;\n}\n\n/** @internal helper for `css()` get props */\nfunction getDefaultView(el: Element): Window {\n    return (el.ownerDocument && el.ownerDocument.defaultView) || window;\n}\n\n/** @internal helper for `css()` get props */\nfunction getComputedStyleFrom(el: Element): CSSStyleDeclaration {\n    const view = getDefaultView(el);\n    return view.getComputedStyle(el);\n}\n\n/** @internal helper for css value to number */\nfunction toNumber(val: string): number {\n    return parseFloat(val) || 0;\n}\n\n/** @internal */\nconst _resolver = {\n    width: ['left', 'right'],\n    height: ['top', 'bottom'],\n};\n\n/** @internal helper for size calcution */\nfunction getPadding(style: CSSStyleDeclaration, type: 'width' | 'height'): number {\n    return toNumber(style.getPropertyValue(`padding-${_resolver[type][0]}`))\n         + toNumber(style.getPropertyValue(`padding-${_resolver[type][1]}`));\n}\n\n/** @internal helper for size calcution */\nfunction getBorder(style: CSSStyleDeclaration, type: 'width' | 'height'): number {\n    return toNumber(style.getPropertyValue(`border-${_resolver[type][0]}-width`))\n         + toNumber(style.getPropertyValue(`border-${_resolver[type][1]}-width`));\n}\n\n/** @internal helper for size calcution */\nfunction getMargin(style: CSSStyleDeclaration, type: 'width' | 'height'): number {\n    return toNumber(style.getPropertyValue(`margin-${_resolver[type][0]}`))\n         + toNumber(style.getPropertyValue(`margin-${_resolver[type][1]}`));\n}\n\n/** @internal helper for `width()` and `heigth()` */\nfunction manageSizeFor<T extends ElementBase>(dom: DOMStyles<T>, type: 'width' | 'height', value?: number | string): number | DOMStyles<T> {\n    if (null == value) {\n        // getter\n        if (isTypeWindow(dom)) {\n            // スクロールバーを除いた幅 (clientWidth / clientHeight)\n            return dom[0].document.documentElement[`client${classify(type)}`];\n        } else if (isTypeDocument(dom)) {\n            // (scrollWidth / scrollHeight)\n            return dom[0].documentElement[`scroll${classify(type)}`];\n        } else {\n            const el = dom[0];\n            if (isNodeHTMLOrSVGElement(el)) {\n                const style = getComputedStyleFrom(el);\n                const size = toNumber(style.getPropertyValue(type));\n                if ('border-box' === style.getPropertyValue('box-sizing')) {\n                    return size - (getBorder(style, type) + getPadding(style, type));\n                } else {\n                    return size;\n                }\n            } else {\n                return 0;\n            }\n        }\n    } else {\n        // setter\n        return dom.css(type, isString(value) ? value : `${value}px`);\n    }\n}\n\n/** @internal helper for `innerWidth()` and `innerHeigth()` */\nfunction manageInnerSizeFor<T extends ElementBase>(dom: DOMStyles<T>, type: 'width' | 'height', value?: number | string): number | DOMStyles<T> {\n    if (null == value) {\n        // getter\n        if (isTypeWindow(dom) || isTypeDocument(dom)) {\n            return manageSizeFor(dom as DOMStyles<T>, type);\n        } else {\n            const el = dom[0];\n            if (isNodeHTMLOrSVGElement(el)) {\n                // (clientWidth / clientHeight)\n                return el[`client${classify(type)}`];\n            } else {\n                return 0;\n            }\n        }\n    } else if (isTypeWindow(dom) || isTypeDocument(dom)) {\n        // setter (no reaction)\n        return dom;\n    } else {\n        // setter\n        const isTextProp = isString(value);\n        for (const el of dom) {\n            if (isNodeHTMLOrSVGElement(el)) {\n                const { style, newVal } = (() => {\n                    if (isTextProp) {\n                        el.style.setProperty(type, value as string);\n                    }\n                    const style = getComputedStyleFrom(el);\n                    const newVal = isTextProp ? toNumber(style.getPropertyValue(type)) : value as number;\n                    return { style, newVal };\n                })();\n                if ('border-box' === style.getPropertyValue('box-sizing')) {\n                    el.style.setProperty(type, `${newVal + getBorder(style, type)}px`);\n                } else {\n                    el.style.setProperty(type, `${newVal - getPadding(style, type)}px`);\n                }\n            }\n        }\n        return dom;\n    }\n}\n\n/** @internal */ type ParseOuterSizeArgsResult = { includeMargin: boolean; value: number | string; };\n\n/** @internal helper for `outerWidth()` and `outerHeigth()` */\nfunction parseOuterSizeArgs(...args: unknown[]): ParseOuterSizeArgsResult {\n    let [value, includeMargin] = args;\n    if (!isNumber(value) && !isString(value)) {\n        includeMargin = !!value;\n        value = undefined;\n    }\n    return { includeMargin, value } as ParseOuterSizeArgsResult;\n}\n\n/** @internal helper for `outerWidth()` and `outerHeigth()` */\nfunction manageOuterSizeFor<T extends ElementBase>(dom: DOMStyles<T>, type: 'width' | 'height', includeMargin: boolean, value?: number | string): number | DOMStyles<T> {\n    if (null == value) {\n        // getter\n        if (isTypeWindow(dom)) {\n            // スクロールバーを含めた幅 (innerWidth / innerHeight)\n            return dom[0][`inner${classify(type)}`];\n        } else if (isTypeDocument(dom)) {\n            return manageSizeFor(dom as DOMStyles<T>, type);\n        } else {\n            const el = dom[0];\n            if (isNodeHTMLOrSVGElement(el)) {\n                // (offsetWidth / offsetHeight)\n                const offset = getOffsetSize(el, type);\n                if (includeMargin) {\n                    const style = getComputedStyleFrom(el);\n                    return offset + getMargin(style, type);\n                } else {\n                    return offset;\n                }\n            } else {\n                return 0;\n            }\n        }\n    } else if (isTypeWindow(dom) || isTypeDocument(dom)) {\n        // setter (no reaction)\n        return dom;\n    } else {\n        // setter\n        const isTextProp = isString(value);\n        for (const el of dom) {\n            if (isNodeHTMLOrSVGElement(el)) {\n                const { style, newVal } = (() => {\n                    if (isTextProp) {\n                        el.style.setProperty(type, value as string);\n                    }\n                    const style = getComputedStyleFrom(el);\n                    const margin = includeMargin ? getMargin(style, type) : 0;\n                    const newVal = (isTextProp ? toNumber(style.getPropertyValue(type)) : value as number) - margin;\n                    return { style, newVal };\n                })();\n                if ('content-box' === style.getPropertyValue('box-sizing')) {\n                    el.style.setProperty(type, `${newVal - getBorder(style, type) - getPadding(style, type)}px`);\n                } else {\n                    el.style.setProperty(type, `${newVal}px`);\n                }\n            }\n        }\n        return dom;\n    }\n}\n\n/** @internal helper for `position()` and `offset()` */\nfunction getOffsetPosition(el: Element): { top: number; left: number; } {\n    // for display none\n    if (el.getClientRects().length <= 0) {\n        return { top: 0, left: 0 };\n    }\n\n    const rect = el.getBoundingClientRect();\n    const view = getDefaultView(el);\n    return {\n        top: rect.top + view.pageYOffset,\n        left: rect.left + view.pageXOffset\n    };\n}\n\n/**\n * @en Get offset[Width | Height]. This function will work SVGElement, too.\n * @ja offse[Width | Height] の取得. SVGElement にも適用可能\n */\nexport function getOffsetSize(el: HTMLOrSVGElement, type: 'width' | 'height'): number {\n    if (null != (el as HTMLElement).offsetWidth) {\n        // (offsetWidth / offsetHeight)\n        return el[`offset${classify(type)}`];\n    } else {\n        /*\n         * [NOTE] SVGElement は offsetWidth がサポートされない\n         *        getBoundingClientRect() は transform に影響を受けるため,\n         *        定義通り border, paddin を含めた値を算出する\n         */\n        const style = getComputedStyleFrom(el as SVGElement);\n        const size = toNumber(style.getPropertyValue(type));\n        if ('content-box' === style.getPropertyValue('box-sizing')) {\n            return size + getBorder(style, type) + getPadding(style, type);\n        } else {\n            return size;\n        }\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Mixin base class which concentrated the style management methods.\n * @ja スタイル関連メソッドを集約した Mixin Base クラス\n */\nexport class DOMStyles<TElement extends ElementBase> implements DOMIterable<TElement> {\n\n///////////////////////////////////////////////////////////////////////\n// imprements: DOMIterable<T>\n\n    readonly [n: number]: TElement;\n    readonly length!: number;\n    [Symbol.iterator]: () => Iterator<TElement>;\n    entries!: () => IterableIterator<[number, TElement]>;\n\n///////////////////////////////////////////////////////////////////////\n// public: Styles\n\n    /**\n     * @en Get the computed style properties for the first element in the set of matched elements.\n     * @ja 先頭要素の CSS に設定されているプロパティ値を取得\n     *\n     * @param name\n     *  - `en` CSS property name as chain-cace.\n     *  - `ja` CSS プロパティ名をチェインケースで指定\n     * @returns\n     *  - `en` CSS property value string.\n     *  - `ja` CSS プロパティ値を文字列で返却\n     */\n    public css(name: string): string;\n\n    /**\n     * @en Get the multiple computed style properties for the first element in the set of matched elements.\n     * @ja 先頭要素の CSS に設定されているプロパティ値を複数取得\n     *\n     * @param names\n     *  - `en` CSS property name array as chain-cace.\n     *  - `ja` CSS プロパティ名配列をチェインケースで指定\n     * @returns\n     *  - `en` CSS property-value object.\n     *  - `ja` CSS プロパティを格納したオブジェクト\n     */\n    public css(names: string[]): PlainObject<string>;\n\n    /**\n     * @en Set CSS propertiy for the set of matched elements.\n     * @ja 要素の CSS プロパティに値を設定\n     *\n     * @param name\n     *  - `en` CSS property name as chain-cace.\n     *  - `ja` CSS プロパティ名をチェインケースで指定\n     * @param value\n     *  - `en` string value to set for the property. if null passed, remove property.\n     *  - `ja` 設定する値を文字列で指定. null 指定で削除.\n     */\n    public css(name: string, value: string | null): this;\n\n    /**\n     * @en Set one or more CSS properties for the set of matched elements.\n     * @ja 要素の CSS 複数のプロパティに値を設定\n     *\n     * @param properties\n     *  - `en` An object of property-value pairs to set.\n     *  - `ja` CSS プロパティを格納したオブジェクト\n     */\n    public css(properties: PlainObject<string | null>): this;\n\n    public css(name: string | string[] | PlainObject<string | null>, value?: string | null): string | PlainObject<string> | this {\n        // valid elements\n        if (!isTypeHTMLOrSVGElement(this)) {\n            if (isString(name)) {\n                return null == value ? '' : this;\n            } else if (isArray(name)) {\n                return {} as PlainObject<string>;\n            } else {\n                return this;\n            }\n        }\n\n        if (isString(name)) {\n            if (undefined === value) {\n                // get property single\n                const el = this[0] as Element;\n                return getComputedStyleFrom(el).getPropertyValue(dasherize(name));\n            } else {\n                // set property single\n                const propName = dasherize(name);\n                const remove = (null === value);\n                for (const el of this) {\n                    if (isNodeHTMLOrSVGElement(el)) {\n                        if (remove) {\n                            el.style.removeProperty(propName);\n                        } else {\n                            el.style.setProperty(propName, value);\n                        }\n                    }\n                }\n                return this;\n            }\n        } else if (isArray(name)) {\n            // get multiple properties\n            const el = this[0] as Element;\n            const view = getDefaultView(el);\n            const props = {} as PlainObject<string>;\n            for (const key of name) {\n                const propName = dasherize(key);\n                props[key] = view.getComputedStyle(el).getPropertyValue(propName);\n            }\n            return props;\n        } else {\n            // set multiple properties\n            const props = ensureChainCaseProperies(name);\n            for (const el of this) {\n                if (isNodeHTMLOrSVGElement(el)) {\n                    const { style } = el;\n                    for (const propName in props) {\n                        if (null === props[propName]) {\n                            style.removeProperty(propName);\n                        } else {\n                            style.setProperty(propName, props[propName]);\n                        }\n                    }\n                }\n            }\n            return this;\n        }\n    }\n\n    /**\n     * @en Get the current computed width for the first element in the set of matched elements or set the width of every matched element.\n     * @ja 最初の要素の計算済み横幅をピクセル単位で取得\n     */\n    public width(): number;\n\n    /**\n     * @en Set the CSS width of each element in the set of matched elements.\n     * @ja 配下の要素の横幅を指定\n     *\n     * @param value\n     *  - `en` An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).\n     *  - `ja` 引数の値が数値のときは `px` として扱い, 文字列は CSS のルールに従う\n     */\n    public width(value: number | string): this;\n\n    public width(value?: number | string): number | this {\n        return manageSizeFor(this, 'width', value) as (number | this);\n    }\n\n    /**\n     * @en Get the current computed height for the first element in the set of matched elements or set the width of every matched element.\n     * @ja 最初の要素の計算済み立幅をピクセル単位で取得\n     */\n    public height(): number;\n\n    /**\n     * @en Set the CSS height of each element in the set of matched elements.\n     * @ja 配下の要素の縦幅を指定\n     *\n     * @param value\n     *  - `en` An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).\n     *  - `ja` 引数の値が数値のときは `px` として扱い, 文字列は CSS のルールに従う\n     */\n    public height(value: number | string): this;\n\n    public height(value?: number | string): number | this {\n        return manageSizeFor(this, 'height', value) as (number | this);\n    }\n\n    /**\n     * @en Get the current computed inner width for the first element in the set of matched elements, including padding but not border.\n     * @ja 最初の要素の内部横幅(borderは除き、paddingは含む)を取得\n     */\n    public innerWidth(): number;\n\n    /**\n     * @en Set the CSS inner width of each element in the set of matched elements.\n     * @ja 配下の要素の内部横幅(borderは除き、paddingは含む)を設定\n     *\n     * @param value\n     *  - `en` An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).\n     *  - `ja` 引数の値が数値のときは `px` として扱い, 文字列は CSS のルールに従う\n     */\n    public innerWidth(value: number | string): this;\n\n    public innerWidth(value?: number | string): number | this {\n        return manageInnerSizeFor(this, 'width', value) as (number | this);\n    }\n\n    /**\n     * @en Get the current computed inner height for the first element in the set of matched elements, including padding but not border.\n     * @ja 最初の要素の内部縦幅(borderは除き、paddingは含む)を取得\n     */\n    public innerHeight(): number;\n\n    /**\n     * @en Set the CSS inner height of each element in the set of matched elements.\n     * @ja 配下の要素の内部縦幅(borderは除き、paddingは含む)を設定\n     *\n     * @param value\n     *  - `en` An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).\n     *  - `ja` 引数の値が数値のときは `px` として扱い, 文字列は CSS のルールに従う\n     */\n    public innerHeight(value: number | string): this;\n\n    public innerHeight(value?: number | string): number | this {\n        return manageInnerSizeFor(this, 'height', value) as (number | this);\n    }\n\n    /**\n     * @en Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements.\n     * @ja 最初の要素の外部横幅(border、paddingを含む)を取得. オプション指定によりマージン領域を含めたものも取得可\n     *\n     * @param includeMargin\n     *  - `en` A Boolean indicating whether to include the element's margin in the calculation.\n     *  - `ja` マージン領域を含める場合は true を指定\n     */\n    public outerWidth(includeMargin?: boolean): number;\n\n    /**\n     * @en Set the CSS outer width of each element in the set of matched elements.\n     * @ja 配下の要素の外部横幅(border、paddingを含む)を設定\n     *\n     * @param value\n     *  - `en` An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).\n     *  - `ja` 引数の値が数値のときは `px` として扱い, 文字列は CSS のルールに従う\n     * @param includeMargin\n     *  - `en` A Boolean indicating whether to include the element's margin in the calculation.\n     *  - `ja` マージン領域を含める場合は true を指定\n     */\n    public outerWidth(value: number | string, includeMargin?: boolean): this;\n\n    public outerWidth(...args: unknown[]): number | this {\n        const { includeMargin, value } = parseOuterSizeArgs(...args);\n        return manageOuterSizeFor(this, 'width', includeMargin, value) as (number | this);\n    }\n\n    /**\n     * @en Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements.\n     * @ja 最初の要素の外部縦幅(border、paddingを含む)を取得. オプション指定によりマージン領域を含めたものも取得可\n     *\n     * @param includeMargin\n     *  - `en` A Boolean indicating whether to include the element's margin in the calculation.\n     *  - `ja` マージン領域を含める場合は true を指定\n     */\n    public outerHeight(includeMargin?: boolean): number;\n\n    /**\n     * @en Set the CSS outer height of each element in the set of matched elements.\n     * @ja 配下の要素の外部縦幅(border、paddingを含む)を設定\n     *\n     * @param value\n     *  - `en` An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).\n     *  - `ja` 引数の値が数値のときは `px` として扱い, 文字列は CSS のルールに従う\n     * @param includeMargin\n     *  - `en` A Boolean indicating whether to include the element's margin in the calculation.\n     *  - `ja` マージン領域を含める場合は true を指定\n     */\n    public outerHeight(value: number | string, includeMargin?: boolean): this;\n\n    public outerHeight(...args: unknown[]): number | this {\n        const { includeMargin, value } = parseOuterSizeArgs(...args);\n        return manageOuterSizeFor(this, 'height', includeMargin, value) as (number | this);\n    }\n\n    /**\n     * @en Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.\n     * @ja 最初の要素の親要素からの相対的な表示位置を返却\n     */\n    public position(): { top: number; left: number; } {\n        // valid elements\n        if (!isTypeHTMLOrSVGElement(this)) {\n            return { top: 0, left: 0 };\n        }\n\n        let offset: { top: number; left: number; };\n        let parentOffset = { top: 0, left: 0 };\n        const el = this[0];\n        const { position, marginTop: mt, marginLeft: ml } = $(el).css(['position', 'marginTop', 'marginLeft']);\n        const marginTop = toNumber(mt);\n        const marginLeft = toNumber(ml);\n\n        // position:fixed elements are offset from the viewport, which itself always has zero offset\n        if ('fixed' === position) {\n            // Assume position:fixed implies availability of getBoundingClientRect\n            offset = el.getBoundingClientRect();\n        } else {\n            offset = getOffsetPosition(el);\n\n            // Account for the *real* offset parent, which can be the document or its root element\n            // when a statically positioned element is identified\n            const doc = el.ownerDocument;\n            let offsetParent = getOffsetParent(el) || doc.documentElement;\n            let $offsetParent = $(offsetParent);\n            while (offsetParent &&\n                (offsetParent === doc.body || offsetParent === doc.documentElement) &&\n                'static' === $offsetParent.css('position')\n            ) {\n                offsetParent = offsetParent.parentNode as Element;\n                $offsetParent = $(offsetParent);\n            }\n            if (offsetParent && offsetParent !== el && Node.ELEMENT_NODE === offsetParent.nodeType) {\n                // Incorporate borders into its offset, since they are outside its content origin\n                parentOffset = getOffsetPosition(offsetParent);\n                const { borderTopWidth, borderLeftWidth } = $offsetParent.css(['borderTopWidth', 'borderLeftWidth']);\n                parentOffset.top += toNumber(borderTopWidth);\n                parentOffset.left += toNumber(borderLeftWidth);\n            }\n        }\n\n        // Subtract parent offsets and element margins\n        return {\n            top: offset.top - parentOffset.top - marginTop,\n            left: offset.left - parentOffset.left - marginLeft,\n        };\n    }\n\n    /**\n     * @en Get the current coordinates of the first element in the set of matched elements, relative to the document.\n     * @ja document を基準として, マッチしている要素集合の1つ目の要素の現在の座標を取得\n     */\n    public offset(): { top: number; left: number; };\n\n    /**\n     * @en Set the current coordinates of every element in the set of matched elements, relative to the document.\n     * @ja 配下の要素に document を基準にした現在座標を設定\n     *\n     * @param coordinates\n     *  - `en` An object containing the properties `top` and `left`.\n     *  - `ja` `top`, `left` プロパティを含むオブジェクトを指定\n     */\n    public offset(coordinates: { top?: number; left?: number; }): this;\n\n    public offset(coordinates?: { top?: number; left?: number; }): { top: number; left: number; } | this {\n        // valid elements\n        if (!isTypeHTMLOrSVGElement(this)) {\n            return null == coordinates ? { top: 0, left: 0 } : this;\n        } else if (null == coordinates) {\n            // get\n            return getOffsetPosition(this[0]);\n        } else {\n            // set\n            for (const el of this) {\n                const $el = $(el);\n                const props: { top?: string; left?: string; } = {};\n                const { position, top: cssTop, left: cssLeft } = $el.css(['position', 'top', 'left']);\n\n                // Set position first, in-case top/left are set even on static elem\n                if ('static' === position) {\n                    (el as HTMLElement).style.position = 'relative';\n                }\n\n                const curOffset = $el.offset();\n                const curPosition = (() => {\n                    const needCalculatePosition\n                        = ('absolute' === position || 'fixed' === position) && (cssTop + cssLeft).includes('auto');\n                    if (needCalculatePosition) {\n                        return $el.position();\n                    } else {\n                        return { top: toNumber(cssTop), left: toNumber(cssLeft) };\n                    }\n                })();\n\n                if (null != coordinates.top) {\n                    props.top = `${(coordinates.top - curOffset.top) + curPosition.top}px`;\n                }\n                if (null != coordinates.left) {\n                    props.left = `${(coordinates.left - curOffset.left) + curPosition.left}px`;\n                }\n\n                $el.css(props as PlainObject<string>);\n            }\n            return this;\n        }\n    }\n}\n\nsetMixClassAttribute(DOMStyles, 'protoExtendsOnly');\n","/* eslint-disable\n    no-invalid-this,\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    isFunction,\n    isString,\n    isArray,\n    combination,\n    setMixClassAttribute,\n} from '@cdp/core-utils';\nimport { CustomEvent } from './ssr';\nimport {\n    ElementBase,\n    DOM,\n    dom as $,\n} from './static';\nimport { DOMIterable, isTypeElement } from './base';\n\n/** @internal */\ninterface InternalEventListener extends EventListener {\n    origin?: EventListener;\n}\n\n/** @internal */\ninterface EventListenerHandler {\n    listener: InternalEventListener;\n    proxy: EventListener;\n}\n\n/** @internal */\ninterface BindInfo {\n    registered: Set<EventListener>;\n    handlers: EventListenerHandler[];\n}\n\n/** @internal */\ninterface BindEventContext {\n    [cookie: string]: BindInfo;\n}\n\n/** @internal */\nconst enum Const {\n    COOKIE_SEPARATOR  = '|',\n    ADDRESS_EVENT     = 0,\n    ADDRESS_NAMESPACE = 1,\n    ADDRESS_OPTIONS   = 2,\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal */\nconst _eventContextMap = {\n    eventData: new WeakMap<ElementBase, unknown[]>(),\n    eventListeners: new WeakMap<ElementBase, BindEventContext>(),\n    liveEventListeners: new WeakMap<ElementBase, BindEventContext>(),\n};\n\n/** @internal query event-data from element */\nfunction queryEventData(event: Event): unknown[] {\n    const data = _eventContextMap.eventData.get(event.target as Element) || [];\n    data.unshift(event);\n    return data;\n}\n\n/** @internal register event-data with element */\nfunction registerEventData(elem: ElementBase, eventData: unknown[]): void {\n    _eventContextMap.eventData.set(elem, eventData);\n}\n\n/** @internal delete event-data by element */\nfunction deleteEventData(elem: ElementBase): void {\n    _eventContextMap.eventData.delete(elem);\n}\n\n/** @internal normalize event namespace */\nfunction normalizeEventNamespaces(event: string): string {\n    const namespaces = event.split('.');\n    const main = namespaces.shift() as string;\n    if (!namespaces.length) {\n        return main;\n    } else {\n        namespaces.sort();\n        return `${main}.${namespaces.join('.')}`;\n    }\n}\n\n/** @internal split event namespaces */\nfunction splitEventNamespaces(event: string): { type: string; namespace: string; }[] {\n    const retval: { type: string; namespace: string; }[] = [];\n\n    const namespaces = event.split('.');\n    const main = namespaces.shift() as string;\n\n    if (!namespaces.length) {\n        retval.push({ type: main, namespace: '' });\n    } else {\n        namespaces.sort();\n\n        const combos: string[][] = [];\n        for (let i = namespaces.length; i >= 1; i--) {\n            combos.push(...combination(namespaces, i));\n        }\n\n        const signature = `.${namespaces.join('.')}.`;\n        retval.push({ type: main, namespace: signature });\n        for (const ns of combos) {\n            retval.push({ type: `${main}.${ns.join('.')}`, namespace: signature });\n        }\n    }\n\n    return retval;\n}\n\n/** @internal reverse resolution event namespaces */\nfunction resolveEventNamespaces(elem: ElementBase, event: string): { type: string; namespace: string; }[] {\n    const retval: { type: string; namespace: string; }[] = [];\n\n    const namespaces = event.split('.');\n    const main = namespaces.shift() as string;\n    const type = normalizeEventNamespaces(event);\n\n    if (!namespaces.length) {\n        retval.push({ type: main, namespace: '' });\n    } else {\n        const query = (context: BindEventContext | undefined): void => {\n            if (context) {\n                const cookies = Object.keys(context);\n\n                const signatures = cookies.filter(cookie => {\n                    return type === cookie.split(Const.COOKIE_SEPARATOR)[Const.ADDRESS_EVENT];\n                }).map(cookie => {\n                    return cookie.split(Const.COOKIE_SEPARATOR)[Const.ADDRESS_NAMESPACE];\n                });\n\n                const siblings = cookies.filter(cookie => {\n                    for (const signature of signatures) {\n                        if (signature === cookie.split(Const.COOKIE_SEPARATOR)[Const.ADDRESS_NAMESPACE]) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }).map(cookie => {\n                    const seed = cookie.split(Const.COOKIE_SEPARATOR);\n                    return { type: seed[Const.ADDRESS_EVENT], namespace: seed[Const.ADDRESS_NAMESPACE] };\n                });\n\n                retval.push(...siblings);\n            }\n        };\n\n        const { eventListeners, liveEventListeners } = _eventContextMap;\n        query(eventListeners.get(elem));\n        query(liveEventListeners.get(elem));\n    }\n\n    return retval;\n}\n\n/** @internal convert event cookie from event name, selector, options */\nfunction toCookie(event: string, namespace: string, selector: string, options: AddEventListenerOptions): string {\n    const opts = { ...options };\n    delete opts.once;\n    return `${event}${Const.COOKIE_SEPARATOR}${namespace}${Const.COOKIE_SEPARATOR}${JSON.stringify(opts)}${Const.COOKIE_SEPARATOR}${selector}`;\n}\n\n/** @internal get listener handlers context by element and event */\nfunction getEventListenersHandlers(elem: ElementBase, event: string, namespace: string, selector: string, options: AddEventListenerOptions, ensure: boolean): BindInfo {\n    const eventListeners = selector ? _eventContextMap.liveEventListeners : _eventContextMap.eventListeners;\n    if (!eventListeners.has(elem)) {\n        if (ensure) {\n            eventListeners.set(elem, {});\n        } else {\n            return {\n                registered: undefined!, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                handlers: [],\n            };\n        }\n    }\n\n    const context = eventListeners.get(elem) as BindEventContext;\n    const cookie = toCookie(event, namespace, selector, options);\n    if (!context[cookie]) {\n        context[cookie] = {\n            registered: new Set<EventListener>(),\n            handlers: [],\n        };\n    }\n\n    return context[cookie];\n}\n\n/** @internal query all event and handler by element, for all `off()` and `clone(true)` */\nfunction extractAllHandlers(elem: ElementBase, remove = true): { event: string; handler: EventListener; options: object; }[] {\n    const handlers: { event: string; handler: EventListener; options: object; }[] = [];\n\n    const query = (context: BindEventContext | undefined): boolean => {\n        if (context) {\n            for (const cookie of Object.keys(context)) {\n                const seed = cookie.split(Const.COOKIE_SEPARATOR);\n                const event = seed[Const.ADDRESS_EVENT];\n                const options = JSON.parse(seed[Const.ADDRESS_OPTIONS]);\n                for (const handler of context[cookie].handlers) {\n                    handlers.push({ event, handler: handler.proxy, options });\n                }\n            }\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const { eventListeners, liveEventListeners } = _eventContextMap;\n    query(eventListeners.get(elem)) && remove && eventListeners.delete(elem);\n    query(liveEventListeners.get(elem)) && remove && liveEventListeners.delete(elem);\n\n    return handlers;\n}\n\n/** @internal query namespace event and handler by element, for `off(`.${namespace}`)` */\nfunction extractNamespaceHandlers(elem: ElementBase, namespaces: string): { event: string; handler: EventListener; options: object; }[] {\n    const handlers: { event: string; handler: EventListener; options: object; }[] = [];\n\n    const names = namespaces.split('.').filter(n => !!n);\n    const namespaceFilter = (cookie: string): boolean => {\n        for (const namespace of names) {\n            if (cookie.includes(`.${namespace}.`)) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    const query = (context: BindEventContext | undefined): void => {\n        if (context) {\n            const cookies = Object.keys(context).filter(namespaceFilter);\n            for (const cookie of cookies) {\n                const seed = cookie.split(Const.COOKIE_SEPARATOR);\n                const event = seed[Const.ADDRESS_EVENT];\n                const options = JSON.parse(seed[Const.ADDRESS_OPTIONS]);\n                const { registered, handlers: _handlers } = context[cookie];\n                for (const handler of _handlers) {\n                    handlers.push({ event, handler: handler.proxy, options });\n                    registered.delete(handler.listener);\n                }\n            }\n        }\n    };\n\n    const { eventListeners, liveEventListeners } = _eventContextMap;\n    query(eventListeners.get(elem));\n    query(liveEventListeners.get(elem));\n\n    return handlers;\n}\n\n/** @internal */\ntype ParseEventArgsResult = {\n    type: string[];\n    selector: string;\n    listener: InternalEventListener;\n    options: AddEventListenerOptions;\n};\n\n/** @internal parse event args */\nfunction parseEventArgs(...args: unknown[]): ParseEventArgsResult {\n    let [type, selector, listener, options] = args;\n    if (isFunction(selector)) {\n        [type, listener, options] = args;\n        selector = undefined;\n    }\n\n    type = !type ? [] : (isArray(type) ? type : [type]);\n    selector = selector || '';\n    if (!options) {\n        options = {};\n    } else if (true === options) {\n        options = { capture: true };\n    }\n\n    return { type, selector, listener, options } as ParseEventArgsResult;\n}\n\n/** @internal */ const _noTrigger = ['resize', 'scroll'];\n\n/** @internal event-shortcut impl */\nfunction eventShortcut<T extends ElementBase>(this: DOMEvents<T>, name: string, handler?: EventListener, options?: boolean | AddEventListenerOptions): DOMEvents<T> {\n    if (null == handler) {\n        for (const el of this) {\n            if (!_noTrigger.includes(name)) {\n                if (isFunction(el[name])) {\n                    el[name]();\n                } else {\n                    $(el as any).trigger(name as any);\n                }\n            }\n        }\n        return this;\n    } else {\n        return this.on(name as any, handler as any, options);\n    }\n}\n\n/** @internal helper for `clone()` */\nfunction cloneEvent(src: Element, dst: Element): void {\n    const contexts = extractAllHandlers(src, false);\n    for (const context of contexts) {\n        dst.addEventListener(context.event, context.handler, context.options);\n    }\n}\n\n/** @internal helper for `clone()` */\nfunction cloneElement(elem: Element, withEvents: boolean, deep: boolean): Element {\n    const clone = elem.cloneNode(true) as Element;\n\n    if (withEvents) {\n        if (deep) {\n            const srcElements = elem.querySelectorAll('*');\n            const dstElements = clone.querySelectorAll('*');\n            for (const [index] of srcElements.entries()) {\n                cloneEvent(srcElements[index], dstElements[index]);\n            }\n        } else {\n            cloneEvent(elem, clone);\n        }\n    }\n\n    return clone;\n}\n\n//__________________________________________________________________________________________________//\n\n/* eslint-disable @typescript-eslint/indent */\nexport type DOMEventMap<T>\n    = T extends Window ? WindowEventMap\n    : T extends Document ? DocumentEventMap\n    : T extends HTMLBodyElement ? HTMLBodyElementEventMap\n    : T extends HTMLFrameSetElement ? HTMLFrameSetElementEventMap\n    : T extends HTMLMarqueeElement ? HTMLMarqueeElementEventMap\n    : T extends HTMLMediaElement ? HTMLMediaElementEventMap\n    : T extends HTMLElement ? HTMLElementEventMap\n    : T extends Element ? ElementEventMap\n    : GlobalEventHandlersEventMap;\n/* eslint-enable @typescript-eslint/indent */\n\nexport type DOMEventListener<T = HTMLElement, M extends DOMEventMap<T> = DOMEventMap<T>> = (event: M[keyof M], ...args: unknown[]) => unknown\n\nexport type EventWithNamespace<T extends DOMEventMap<unknown>> = keyof T | `${string & keyof T}.${string}`;\nexport type MakeEventType<T, M> = T extends keyof M ? keyof M : (T extends `${string & keyof M}.${infer C}` ? `${string & keyof M}.${C}` : never);\nexport type EventType<T extends DOMEventMap<unknown>> = MakeEventType<EventWithNamespace<T>, T>;\nexport type EventTypeOrNamespace<T extends DOMEventMap<unknown>> = EventType<T> | `.${string}`;\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Mixin base class which concentrated the event managements.\n * @ja イベント管理を集約した Mixin Base クラス\n */\nexport class DOMEvents<TElement extends ElementBase> implements DOMIterable<TElement> {\n\n///////////////////////////////////////////////////////////////////////\n// imprements: DOMIterable<T>\n\n    readonly [n: number]: TElement;\n    readonly length!: number;\n    [Symbol.iterator]: () => Iterator<TElement>;\n    entries!: () => IterableIterator<[number, TElement]>;\n\n///////////////////////////////////////////////////////////////////////\n// public: Events basic\n\n    /**\n     * @en Add event handler function to one or more events to the elements. (live event available)\n     * @ja 要素に対して, 1つまたは複数のイベントハンドラを設定 (動的要素にも有効)\n     *\n     * @param type\n     *  - `en` event name or event name array.\n     *  - `ja` イベント名またはイベント名配列\n     * @param selector\n     *  - `en` A selector string to filter the descendants of the selected elements that trigger the event.\n     *  - `ja` イベント発行元をフィルタリングするセレクタ文字列\n     * @param listener\n     *  - `en` callback function\n     *  - `ja` コールバック関数\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public on<TEventMap extends DOMEventMap<TElement>>(\n        type: EventType<TEventMap> | (EventType<TEventMap>)[],\n        selector: string,\n        listener: DOMEventListener<TElement, TEventMap>,\n        options?: boolean | AddEventListenerOptions\n    ): this;\n\n    /**\n     * @en Add event handler function to one or more events to the elements. (live event available)\n     * @ja 要素に対して, 1つまたは複数のイベントハンドラを設定 (動的要素にも有効)\n     *\n     * @param type\n     *  - `en` event name or event name array.\n     *  - `ja` イベント名またはイベント名配列\n     * @param listener\n     *  - `en` callback function\n     *  - `ja` コールバック関数\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public on<TEventMap extends DOMEventMap<TElement>>(\n        type: EventType<TEventMap> | (EventType<TEventMap>)[],\n        listener: DOMEventListener<TElement, TEventMap>,\n        options?: boolean | AddEventListenerOptions\n    ): this;\n\n    public on(...args: unknown[]): this {\n        const { type: events, selector, listener, options } = parseEventArgs(...args);\n\n        function handleLiveEvent(e: Event): void {\n            const eventData = queryEventData(e);\n            const $target = $(e.target as Element | null) as DOM<Element>;\n            if ($target.is(selector)) {\n                listener.apply($target[0], eventData);\n            } else {\n                for (const parent of $target.parents()) {\n                    if ($(parent).is(selector)) {\n                        listener.apply(parent, eventData);\n                    }\n                }\n            }\n        }\n\n        function handleEvent(this: DOMEvents<TElement>, e: Event): void {\n            listener.apply(this, queryEventData(e));\n        }\n\n        const proxy = selector ? handleLiveEvent : handleEvent;\n\n        for (const el of this) {\n            for (const event of events) {\n                const combos = splitEventNamespaces(event);\n                for (const combo of combos) {\n                    const { type, namespace } = combo;\n                    const { registered, handlers } = getEventListenersHandlers(el, type, namespace, selector, options, true);\n                    if (registered && !registered.has(listener)) {\n                        registered.add(listener);\n                        handlers.push({\n                            listener,\n                            proxy,\n                        });\n                        el.addEventListener(type, proxy, options);\n                    }\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @en Remove event handler. The handler designated at [[on]] or [[once]] and that same condition are released. <br>\n     *     If the method receives no arguments, all handlers are released.\n     * @ja 設定されているイベントハンドラの解除. [[on]] または [[once]] と同条件で指定したものが解除される <br>\n     *     引数が無い場合はすべてのハンドラが解除される.\n     *\n     * @param type\n     *  - `en` event name or event name array.\n     *  - `ja` イベント名またはイベント名配列\n     * @param selector\n     *  - `en` A selector string to filter the descendants of the selected elements that trigger the event.\n     *  - `ja` イベント発行元をフィルタリングするセレクタ文字列\n     * @param listener\n     *  - `en` callback function\n     *  - `ja` コールバック関数\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public off<TEventMap extends DOMEventMap<TElement>>(\n        type: EventTypeOrNamespace<TEventMap> | (EventTypeOrNamespace<TEventMap>)[],\n        selector: string,\n        listener?: DOMEventListener<TElement, TEventMap>,\n        options?: boolean | AddEventListenerOptions\n    ): this;\n\n    /**\n     * @en Remove event handler. The handler designated at [[on]] or [[once]] and that same condition are released. <br>\n     *     If the method receives no arguments, all handlers are released.\n     * @ja 設定されているイベントハンドラの解除. [[on]] または [[once]] と同条件で指定したものが解除される <br>\n     *     引数が無い場合はすべてのハンドラが解除される.\n     *\n     * @param type\n     *  - `en` event name or event name array.\n     *  - `ja` イベント名またはイベント名配列\n     * @param listener\n     *  - `en` callback function\n     *  - `ja` コールバック関数\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public off<TEventMap extends DOMEventMap<TElement>>(\n        type: EventTypeOrNamespace<TEventMap> | (EventTypeOrNamespace<TEventMap>)[],\n        listener?: DOMEventListener<TElement, TEventMap>,\n        options?: boolean | AddEventListenerOptions\n    ): this;\n\n    /**\n     * @en Remove all event handler.\n     * @ja 設定されているすべてのイベントハンドラの解除\n     */\n    public off(): this;\n\n    public off(...args: unknown[]): this {\n        const { type: events, selector, listener, options } = parseEventArgs(...args);\n\n        if (events.length <= 0) {\n            for (const el of this) {\n                const contexts = extractAllHandlers(el);\n                for (const context of contexts) {\n                    el.removeEventListener(context.event, context.handler, context.options);\n                }\n            }\n        } else {\n            for (const el of this) {\n                for (const event of events) {\n                    if (event.startsWith('.')) {\n                        const contexts = extractNamespaceHandlers(el, event);\n                        for (const context of contexts) {\n                            el.removeEventListener(context.event, context.handler, context.options);\n                        }\n                    } else {\n                        const combos = resolveEventNamespaces(el, event);\n                        for (const combo of combos) {\n                            const { type, namespace } = combo;\n                            const { registered, handlers } = getEventListenersHandlers(el, type, namespace, selector, options, false);\n                            if (0 < handlers.length) {\n                                for (let i = handlers.length - 1; i >= 0; i--) { // backward operation\n                                    const handler = handlers[i];\n                                    if (\n                                        (listener && handler.listener === listener) ||\n                                        (listener && handler.listener && handler.listener.origin && handler.listener.origin === listener) ||\n                                        (!listener)\n                                    ) {\n                                        el.removeEventListener(type, handler.proxy, options);\n                                        handlers.splice(i, 1);\n                                        registered.delete(handler.listener);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @en Add event handler function to one or more events to the elements that will be executed only once. (live event available)\n     * @ja 要素に対して, 一度だけ呼び出されるイベントハンドラを設定 (動的要素に対しても有効)\n     *\n     * @param type\n     *  - `en` event name or event name array.\n     *  - `ja` イベント名またはイベント名配列\n     * @param selector\n     *  - `en` A selector string to filter the descendants of the selected elements that trigger the event.\n     *  - `ja` イベント発行元をフィルタリングするセレクタ文字列\n     * @param listener\n     *  - `en` callback function\n     *  - `ja` コールバック関数\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public once<TEventMap extends DOMEventMap<TElement>>(\n        type: EventType<TEventMap> | (EventType<TEventMap>)[],\n        selector: string,\n        listener: DOMEventListener<TElement, TEventMap>,\n        options?: boolean | AddEventListenerOptions\n    ): this;\n\n    /**\n     * @en Add event handler function to one or more events to the elements that will be executed only once. (live event available)\n     * @ja 要素に対して, 一度だけ呼び出されるイベントハンドラを設定 (動的要素に対しても有効)\n     *\n     * @param type\n     *  - `en` event name or event name array.\n     *  - `ja` イベント名またはイベント名配列\n     * @param listener\n     *  - `en` callback function\n     *  - `ja` コールバック関数\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public once<TEventMap extends DOMEventMap<TElement>>(\n        type: EventType<TEventMap> | (EventType<TEventMap>)[],\n        listener: DOMEventListener<TElement, TEventMap>,\n        options?: boolean | AddEventListenerOptions\n    ): this;\n\n    public once(...args: unknown[]): this {\n        const { type, selector, listener, options } = parseEventArgs(...args);\n        const opts = { ...options, ...{ once: true } };\n\n        const self = this;\n        function onceHandler(this: DOMEvents<TElement>, ...eventArgs: unknown[]): void {\n            listener.apply(this, eventArgs);\n            self.off(type as any, selector, onceHandler, opts);\n            delete onceHandler.origin;\n        }\n        onceHandler.origin = listener as InternalEventListener | undefined;\n        return this.on(type as any, selector, onceHandler, opts);\n    }\n\n    /**\n     * @en Execute all handlers added to the matched elements for the specified event.\n     * @ja 設定されているイベントハンドラに対してイベントを発行\n     *\n     * @example <br>\n     *\n     * ```ts\n     * // w/ event-namespace behaviour\n     * $('.link').on('click.hoge.piyo', (e) => { ... });\n     * $('.link').on('click.hoge',  (e) => { ... });\n     *\n     * $('.link').trigger('.hoge');           // compile error. (not fire)\n     * $('.link').trigger('click.hoge');      // fire both.\n     * $('.link').trigger('click.hoge.piyo'); // fire only first one\n     * ```\n     * @param seed\n     *  - `en` event name or event name array. / `Event` instance or `Event` instance array.\n     *  - `ja` イベント名またはイベント名配列 / `Event` インスタンスまたは `Event` インスタンス配列\n     * @param eventData\n     *  - `en` optional sending data.\n     *  - `ja` 送信する任意のデータ\n     */\n    public trigger<TEventMap extends DOMEventMap<TElement>>(\n        seed: EventType<TEventMap> | (EventType<TEventMap>)[] | Event | Event[] | (EventType<TEventMap> | Event)[],\n        ...eventData: unknown[]\n    ): this {\n        const convert = (arg: EventType<TEventMap> | Event): Event => {\n            if (isString(arg)) {\n                return new CustomEvent(normalizeEventNamespaces(arg), {\n                    detail: eventData,\n                    bubbles: true,\n                    cancelable: true,\n                });\n            } else {\n                return arg as Event;\n            }\n        };\n\n        const events = isArray(seed) ? seed : [seed];\n\n        for (const event of events) {\n            const e = convert(event);\n            for (const el of this) {\n                registerEventData(el, eventData);\n                el.dispatchEvent(e);\n                deleteEventData(el);\n            }\n        }\n        return this;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public: Events utility\n\n    /**\n     * @en Shortcut for [[once]]('transitionend').\n     * @ja [[once]]('transitionend') のユーティリティ\n     *\n     * @param callback\n     *  - `en` `transitionend` handler.\n     *  - `ja` `transitionend` ハンドラ\n     * @param permanent\n     *  - `en` if set `true`, callback keep living until elements removed.\n     *  - `ja` `true` を設定した場合, 要素が削除されるまでコールバックが有効\n     */\n    public transitionEnd(callback: (event: TransitionEvent, ...args: unknown[]) => void, permanent = false): this {\n        const self = this as DOMEvents<Node> as DOMEvents<HTMLElement>;\n        function fireCallBack(this: Element, e: TransitionEvent): void {\n            if (e.target !== this) {\n                return;\n            }\n            callback.call(this, e);\n            if (!permanent) {\n                self.off('transitionend', fireCallBack);\n            }\n        }\n        isFunction(callback) && self.on('transitionend', fireCallBack);\n        return this;\n    }\n\n    /**\n     * @en Shortcut for [[once]]('animationend').\n     * @ja [[once]]('animationend') のユーティリティ\n     *\n     * @param callback\n     *  - `en` `animationend` handler.\n     *  - `ja` `animationend` ハンドラ\n     * @param permanent\n     *  - `en` if set `true`, callback keep living until elements removed.\n     *  - `ja` `true` を設定した場合, 要素が削除されるまでコールバックが有効\n     */\n    public animationEnd(callback: (event: AnimationEvent, ...args: unknown[]) => void, permanent = false): this {\n        const self = this as DOMEvents<Node> as DOMEvents<HTMLElement>;\n        function fireCallBack(this: Element, e: AnimationEvent): void {\n            if (e.target !== this) {\n                return;\n            }\n            callback.call(this, e);\n            if (!permanent) {\n                self.off('animationend', fireCallBack);\n            }\n        }\n        isFunction(callback) && self.on('animationend', fireCallBack);\n        return this;\n    }\n\n    /**\n     * @en Bind one or two handlers to the matched elements, to be executed when the `mouseenter` and `mouseleave` the elements.\n     * @ja 1つまたは2つのハンドラを指定し, 一致した要素の `mouseenter`, `mouseleave` を検知\n     *\n     * @param handlerIn(Out)\n     *  - `en` A function to execute when the `mouseenter` the element. <br>\n     *        If handler set only one, a function to execute when the `mouseleave` the element, too.\n     *  - `ja` `mouseenter` イベントハンドラを指定. <br>\n     *          引数が1つである場合, `mouseleave` ハンドラも兼ねる\n     * @param handlerOut\n     *  - `en` A function to execute when the `mouseleave` the element.\n     *  - `ja` `mouseleave` ハンドラを指定\n     */\n    public hover(handlerIn: DOMEventListener, handlerOut?: DOMEventListener): this {\n        handlerOut = handlerOut || handlerIn;\n        return this.mouseenter(handlerIn).mouseleave(handlerOut);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public: Events shortcut\n\n    /**\n     * @en Trigger or handle `click` event.\n     * @ja `click` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public click(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('click', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `dblclick` event.\n     * @ja `dblclick` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public dblclick(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('dblclick', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `blur` event.\n     * @ja `blur` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public blur(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('blur', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `focus` event.\n     * @ja `focus` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public focus(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('focus', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `focusin` event.\n     * @ja `focusin` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public focusin(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('focusin', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `focusout` event.\n     * @ja `focusout` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public focusout(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('focusout', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `keyup` event.\n     * @ja `keyup` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public keyup(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('keyup', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `keydown` event.\n     * @ja `keydown` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public keydown(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('keydown', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `keypress` event.\n     * @ja `keypress` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public keypress(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('keypress', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `submit` event.\n     * @ja `submit` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public submit(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('submit', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `contextmenu` event.\n     * @ja `contextmenu` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public contextmenu(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('contextmenu', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `change` event.\n     * @ja `change` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public change(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('change', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `mousedown` event.\n     * @ja `mousedown` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public mousedown(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('mousedown', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `mousemove` event.\n     * @ja `mousemove` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public mousemove(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('mousemove', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `mouseup` event.\n     * @ja `mouseup` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public mouseup(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('mouseup', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `mouseenter` event.\n     * @ja `mouseenter` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public mouseenter(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('mouseenter', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `mouseleave` event.\n     * @ja `mouseleave` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public mouseleave(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('mouseleave', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `mouseout` event.\n     * @ja `mouseout` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public mouseout(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('mouseout', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `mouseover` event.\n     * @ja `mouseover` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public mouseover(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('mouseover', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `touchstart` event.\n     * @ja `touchstart` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public touchstart(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('touchstart', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `touchend` event.\n     * @ja `touchend` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public touchend(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('touchend', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `touchmove` event.\n     * @ja `touchmove` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public touchmove(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('touchmove', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `touchcancel` event.\n     * @ja `touchcancel` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public touchcancel(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('touchcancel', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `resize` event.\n     * @ja `resize` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public resize(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('resize', handler, options);\n    }\n\n    /**\n     * @en Trigger or handle `scroll` event.\n     * @ja `scroll` イベントの発行または捕捉\n     *\n     * @param handler\n     *  - `en` event handler is designated. when omitting, the event is triggered.\n     *  - `ja` イベントハンドラを指定. 省略した場合はイベントを発行\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public scroll(handler?: DOMEventListener, options?: boolean | AddEventListenerOptions): this {\n        return eventShortcut.bind(this)('scroll', handler, options);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public: Copying\n\n    /**\n     * @en Create a deep copy of the set of matched elements.\n     * @ja 配下の要素のディープコピーを作成\n     *\n     * @param withEvents\n     *  - `en` A Boolean indicating whether event handlers should be copied along with the elements.\n     *  - `ja` イベントハンドラもコピーするかどうかを決定\n     * @param deep\n     *  - `en` A Boolean indicating whether event handlers for all children of the cloned element should be copied.\n     *  - `ja` boolean値で、配下の要素のすべての子要素に対しても、付随しているイベントハンドラをコピーするかどうかを決定\n     */\n    public clone(withEvents = false, deep = false): DOM<TElement> {\n        const self = this as DOMIterable<TElement> as DOM<TElement>;\n        if (!isTypeElement(self)) {\n            return self;\n        }\n        return self.map((index: number, el: TElement) => {\n            return cloneElement(el as Node as Element, withEvents, deep) as Node as TElement;\n        });\n    }\n}\n\nsetMixClassAttribute(DOMEvents, 'protoExtendsOnly');\n","import {\n    Nil,\n    isNumber,\n    isFunction,\n    classify,\n    setMixClassAttribute,\n} from '@cdp/core-utils';\nimport {\n    ensurePositiveNumber,\n    swing,\n} from './utils';\nimport { ElementBase } from './static';\nimport {\n    DOMIterable,\n    isNodeElement,\n    isNodeHTMLOrSVGElement,\n    isNodeDocument,\n} from './base';\nimport { getOffsetSize } from './styles';\nimport {\n    window,\n    requestAnimationFrame,\n} from './ssr';\n\n/**\n * @en [[DOM]]`.scrollTo()` options definition.\n * @ja [[DOM]]`.scrollTo()` に指定するオプション定義\n */\nexport interface DOMScrollOptions {\n    /**\n     * @en the vertical scroll value by pixcels.\n     * @ja 縦スクロール量をピクセルで指定\n     */\n    top?: number;\n\n    /**\n     * @en the horizontal scroll value by pixcels.\n     * @ja 横スクロール量をピクセルで指定\n     */\n    left?: number;\n\n    /**\n     * @en the time to spend on scroll. [msec]\n     * @ja スクロールに費やす時間 [msec]\n     */\n    duration?: number;\n\n    /**\n     * @en timing function default: 'swing'\n     * @ja タイミング関数 既定値: 'swing'\n     */\n    easing?: 'linear' | 'swing' | ((progress: number) => number);\n\n    /**\n     * @en scroll completion callback.\n     * @ja スクロール完了コールバック\n     */\n    callback?: () => void;\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal query scroll target element */\nfunction queryTargetElement(el: ElementBase | Nil): Element | null {\n    if (isNodeElement(el)) {\n        return el;\n    } else if (isNodeDocument(el)) {\n        return el.documentElement;\n    } else if (window === el) {\n        return window.document.documentElement;\n    } else {\n        return null;\n    }\n}\n\n/** @internal helper for `scrollTo()` */\nfunction parseArgs(...args: unknown[]): DOMScrollOptions {\n    const options: DOMScrollOptions = { easing: 'swing' };\n    if (1 === args.length) {\n        Object.assign(options, args[0]);\n    } else {\n        const [left, top, duration, easing, callback] = args;\n        Object.assign(options, {\n            top,\n            left,\n            duration,\n            easing,\n            callback,\n        });\n    }\n\n    options.top      = ensurePositiveNumber(options.top);\n    options.left     = ensurePositiveNumber(options.left);\n    options.duration = ensurePositiveNumber(options.duration);\n\n    return options;\n}\n\n/** @internal helper for `scrollTo()` */\nfunction execScroll(el: HTMLElement | SVGElement, options: DOMScrollOptions): void {\n    const { top, left, duration, easing, callback } = options;\n\n    const initialTop = el.scrollTop;\n    const initialLeft = el.scrollLeft;\n    let enableTop = isNumber(top);\n    let enableLeft = isNumber(left);\n\n    // non animation case\n    if (!duration) {\n        let notify = false;\n        if (enableTop && top !== initialTop) {\n            el.scrollTop = top as number;\n            notify = true;\n        }\n        if (enableLeft && left !== initialLeft) {\n            el.scrollLeft = left as number;\n            notify = true;\n        }\n        if (notify && isFunction(callback)) {\n            callback();\n        }\n        return;\n    }\n\n    const calcMetrics = (enable: boolean, base: number, initialValue: number, type: 'width' | 'height'): { max: number; new: number; initial: number; } => {\n        if (!enable) {\n            return { max: 0, new: 0, initial: 0 };\n        }\n        const maxValue = el[`scroll${classify(type)}`] - getOffsetSize(el, type);\n        const newValue = Math.max(Math.min(base, maxValue), 0);\n        return { max: maxValue, new: newValue, initial: initialValue };\n    };\n\n    const metricsTop = calcMetrics(enableTop, top as number, initialTop, 'height');\n    const metricsLeft = calcMetrics(enableLeft, left as number, initialLeft, 'width');\n\n    if (enableTop && metricsTop.new === metricsTop.initial) {\n        enableTop = false;\n    }\n    if (enableLeft && metricsLeft.new === metricsLeft.initial) {\n        enableLeft = false;\n    }\n    if (!enableTop && !enableLeft) {\n        // need not to scroll\n        return;\n    }\n\n    const calcProgress = (value: number): number => {\n        if (isFunction(easing)) {\n            return easing(value);\n        } else {\n            return 'linear' === easing ? value : swing(value);\n        }\n    };\n\n    const delta = { top: 0, left: 0 };\n    const startTime = Date.now();\n\n    const animate = (): void => {\n        const elapse = Date.now() - startTime;\n        const progress = Math.max(Math.min(elapse / duration, 1), 0);\n        const progressCoeff = calcProgress(progress);\n\n        // update delta\n        if (enableTop) {\n            delta.top = metricsTop.initial + (progressCoeff * (metricsTop.new - metricsTop.initial));\n        }\n        if (enableLeft) {\n            delta.left = metricsLeft.initial + (progressCoeff * (metricsLeft.new - metricsLeft.initial));\n        }\n\n        // check done\n        if ((enableTop && metricsTop.new > metricsTop.initial && delta.top >= metricsTop.new)       || // scroll down\n            (enableTop && metricsTop.new < metricsTop.initial && delta.top <= metricsTop.new)       || // scroll up\n            (enableLeft && metricsLeft.new > metricsLeft.initial && delta.left >= metricsLeft.new)  || // scroll right\n            (enableLeft && metricsLeft.new < metricsLeft.initial && delta.left <= metricsLeft.new)     // scroll left\n        ) {\n            // ensure destination\n            enableTop && (el.scrollTop = metricsTop.new);\n            enableLeft && (el.scrollLeft = metricsLeft.new);\n            if (isFunction(callback)) {\n                callback();\n            }\n            // release reference immediately.\n            el = null!; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            return;\n        }\n\n        // update scroll position\n        enableTop && (el.scrollTop = delta.top);\n        enableLeft && (el.scrollLeft = delta.left);\n\n        requestAnimationFrame(animate);\n    };\n\n    requestAnimationFrame(animate);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Mixin base class which concentrated the manipulation methods.\n * @ja スクロールメソッドを集約した Mixin Base クラス\n */\nexport class DOMScroll<TElement extends ElementBase> implements DOMIterable<TElement> {\n\n///////////////////////////////////////////////////////////////////////\n// imprements: DOMIterable<T>\n\n    readonly [n: number]: TElement;\n    readonly length!: number;\n    [Symbol.iterator]: () => Iterator<TElement>;\n    entries!: () => IterableIterator<[number, TElement]>;\n\n///////////////////////////////////////////////////////////////////////\n// public: Scroll\n\n    /**\n     * @en Get the number of pixels vertical scrolled.\n     * @ja 縦方向スクロールされたピクセル数を取得\n     */\n    public scrollTop(): number;\n\n    /**\n     * @en Set the number of pixels vertical scrolled.\n     * @ja 縦方向スクロールするピクセル数を指定\n     *\n     * @param position\n     *  - `en` the scroll value by pixcels.\n     *  - `ja` スクロール量をピクセルで指定\n     * @param duration\n     *  - `en` the time to spend on scroll. [msec]\n     *  - `ja` スクロールに費やす時間 [msec]\n     * @param easing\n     *  - `en` timing function default: 'swing'\n     *  - `ja` タイミング関数 既定値: 'swing'\n     * @param callback\n     *  - `en` scroll completion callback.\n     *  - `ja` スクロール完了コールバック\n     */\n    public scrollTop(\n        position: number,\n        duration?: number,\n        easing?: 'linear' | 'swing' | ((progress: number) => number),\n        callback?: () => void\n    ): this;\n\n    public scrollTop(\n        position?: number,\n        duration?: number,\n        easing?: 'linear' | 'swing' | ((progress: number) => number),\n        callback?: () => void\n    ): number | this {\n        if (null == position) {\n            // getter\n            const el = queryTargetElement(this[0]);\n            return el ? el.scrollTop : 0;\n        } else {\n            // setter\n            return this.scrollTo({\n                top: position,\n                duration,\n                easing,\n                callback,\n            });\n        }\n    }\n\n    /**\n     * @en Get the number of pixels horizontal scrolled.\n     * @ja 横方向スクロールされたピクセル数を取得\n     */\n    public scrollLeft(): number;\n\n    /**\n     * @en Set the number of pixels horizontal scrolled.\n     * @ja 横方向スクロールするピクセル数を指定\n     *\n     * @param position\n     *  - `en` the scroll value by pixcels.\n     *  - `ja` スクロール量をピクセルで指定\n     * @param duration\n     *  - `en` the time to spend on scroll. [msec]\n     *  - `ja` スクロールに費やす時間 [msec]\n     * @param easing\n     *  - `en` timing function default: 'swing'\n     *  - `ja` タイミング関数 既定値: 'swing'\n     * @param callback\n     *  - `en` scroll completion callback.\n     *  - `ja` スクロール完了コールバック\n     */\n    public scrollLeft(\n        position: number,\n        duration?: number,\n        easing?: 'linear' | 'swing' | ((progress: number) => number),\n        callback?: () => void\n    ): this;\n\n    public scrollLeft(\n        position?: number,\n        duration?: number,\n        easing?: 'linear' | 'swing' | ((progress: number) => number),\n        callback?: () => void\n    ): number | this {\n        if (null == position) {\n            // getter\n            const el = queryTargetElement(this[0]);\n            return el ? el.scrollLeft : 0;\n        } else {\n            // setter\n            return this.scrollTo({\n                left: position,\n                duration,\n                easing,\n                callback,\n            });\n        }\n    }\n\n    /**\n     * @en Set the number of pixels vertical and horizontal scrolled.\n     * @ja 縦横方向スクロールするピクセル数を指定\n     *\n     * @param x\n     *  - `en` the horizontal scroll value by pixcels.\n     *  - `ja` 横スクロール量をピクセルで指定\n     * @param y\n     *  - `en` the vertical scroll value by pixcels.\n     *  - `ja` 縦スクロール量をピクセルで指定\n     * @param duration\n     *  - `en` the time to spend on scroll. [msec]\n     *  - `ja` スクロールに費やす時間 [msec]\n     * @param easing\n     *  - `en` timing function default: 'swing'\n     *  - `ja` タイミング関数 既定値: 'swing'\n     * @param callback\n     *  - `en` scroll completion callback.\n     *  - `ja` スクロール完了コールバック\n     */\n    public scrollTo(\n        x: number,\n        y: number,\n        duration?: number,\n        easing?: 'linear' | 'swing' | ((progress: number) => number),\n        callback?: () => void\n    ): this;\n\n    /**\n     * @en Set the scroll values by optoins.\n     * @ja オプションを用いてスクロール指定\n     */\n    public scrollTo(options: DOMScrollOptions): this;\n\n    public scrollTo(...args: unknown[]): this {\n        const options = parseArgs(...args);\n        for (const el of this) {\n            const elem = queryTargetElement(el);\n            if (isNodeHTMLOrSVGElement(elem)) {\n                execScroll(elem, options);\n            }\n        }\n        return this;\n    }\n}\n\nsetMixClassAttribute(DOMScroll, 'protoExtendsOnly');\n","import { setMixClassAttribute, Writable } from '@cdp/core-utils';\nimport { ElementBase, DOM } from './static';\nimport {\n    DOMIterable,\n    isNodeElement,\n    isTypeElement,\n} from './base';\n\n/**\n * @en [[DOM]] effect parameter.\n * @ja [[DOM]] エフェクト効果のパラメータ\n */\nexport type DOMEffectParameters = Keyframe[] | PropertyIndexedKeyframes | null;\n\n/**\n * @en [[DOM]] effect options.\n * @ja [[DOM]] エフェクト効果のオプション\n */\nexport type DOMEffectOptions = number | KeyframeAnimationOptions;\n\n/**\n * @en [[DOM]] effect context object.\n * @ja [[DOM]] のエフェクト効果のコンテキストオブジェクト\n */\nexport interface DOMEffectContext<TElement extends ElementBase> {\n    /**\n     * @en [[DOM]] instance that called [[animate]]() method.\n     * @ja [[animate]]() メソッドを実行した [[DOM]] インスタンス\n     */\n    readonly dom: DOM<TElement>;\n\n    /**\n     * @en `Element` and `Animation` instance map by execution [[animate]]() method at this time.\n     * @ja 今回実行した `Element` と `Animation` インスタンスのマップ\n     */\n    readonly animations: Map<TElement, Animation>;\n\n    /**\n     * @en The current finished Promise for this animation.\n     * @ja 対象アニメーションの終了時に発火する `Promise` オブジェクト\n     */\n    readonly finished: Promise<DOMEffectContext<TElement>>;\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal */ const _animContextMap = new WeakMap<Element, Set<Animation>>();\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Mixin base class which concentrated the animation/effect methods.\n * @ja アニメーション/エフェクト操作メソッドを集約した Mixin Base クラス\n */\nexport class DOMEffects<TElement extends ElementBase> implements DOMIterable<TElement> {\n\n///////////////////////////////////////////////////////////////////////\n// imprements: DOMIterable<T>\n\n    readonly [n: number]: TElement;\n    readonly length!: number;\n    [Symbol.iterator]: () => Iterator<TElement>;\n    entries!: () => IterableIterator<[number, TElement]>;\n\n///////////////////////////////////////////////////////////////////////\n// public: Effects\n\n    /**\n     * @en Start animation by `Web Animation API`.\n     * @ja `Web Animation API` を用いてアニメーションを実行\n     */\n    public animate(params: DOMEffectParameters, options: DOMEffectOptions): DOMEffectContext<TElement> {\n        const result = {\n            dom: this as DOMIterable<TElement> as DOM<TElement>,\n            animations: new Map<TElement, Animation>(),\n        } as Writable<DOMEffectContext<TElement>>;\n\n        if (!isTypeElement(this)) {\n            result.finished = Promise.resolve(result);\n            return result;\n        }\n\n        for (const el of this) {\n            if (isNodeElement(el)) {\n                const anim = el.animate(params, options);\n                const context = _animContextMap.get(el) || new Set();\n                context.add(anim);\n                _animContextMap.set(el, context);\n                result.animations.set(el as Node as TElement, anim);\n            }\n        }\n\n        result.finished = Promise.all([...result.animations.values()].map(anim => anim.finished)).then(() => result);\n\n        return result;\n    }\n\n    /**\n     * @en Cancel current running animation.\n     * @ja 現在実行しているアニメーションを中止\n     */\n    public cancel(): this {\n        if (isTypeElement(this)) {\n            for (const el of this) {\n                const context = _animContextMap.get(el as Element);\n                if (context) {\n                    for (const animation of context) {\n                        animation.cancel();\n                    }\n                    _animContextMap.delete(el as Element);\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @en Finish current running animation.\n     * @ja 現在実行しているアニメーションを終了\n     */\n    public finish(): this {\n        if (isTypeElement(this)) {\n            for (const el of this) {\n                const context = _animContextMap.get(el as Element);\n                if (context) {\n                    for (const animation of context) {\n                        animation.finish();\n                    }\n                    // finish では破棄しない\n                }\n            }\n        }\n        return this;\n    }\n}\n\nsetMixClassAttribute(DOMEffects, 'protoExtendsOnly');\n","import {\n    Class,\n    mixins,\n    setMixClassAttribute,\n} from '@cdp/core-utils';\nimport {\n    ElementBase,\n    SelectorBase,\n    ElementifySeed,\n    QueryContext,\n    elementify,\n} from './utils';\nimport { DOMBase } from './base';\nimport { DOMAttributes } from './attributes';\nimport { DOMTraversing } from './traversing';\nimport { DOMManipulation } from './manipulation';\nimport { DOMStyles } from './styles';\nimport { DOMEvents } from './events';\nimport { DOMScroll } from './scroll';\nimport { DOMEffects } from './effects';\n\ntype DOMFeatures<T extends ElementBase>\n    = DOMBase<T>\n    & DOMAttributes<T>\n    & DOMTraversing<T>\n    & DOMManipulation<T>\n    & DOMStyles<T>\n    & DOMEvents<T>\n    & DOMScroll<T>\n    & DOMEffects<T>;\n\n/**\n * @en [[DOM]] plugin method definition.\n * @ja [[DOM]] プラグインメソッド定義\n *\n * @note\n *  - プラグイン拡張定義はこのインターフェイスマージする.\n *  - TypeScript 3.7 時点で, module interface のマージは module の完全なパスを必要とするため,\n *    本レポジトリでは bundle した `dist/dom.d.ts` を提供する.\n *\n * @see\n *  - https://github.com/microsoft/TypeScript/issues/33326\n *  - https://stackoverflow.com/questions/57848134/trouble-updating-an-interface-using-declaration-merging\n */\nexport interface DOMPlugin { } // eslint-disable-line @typescript-eslint/no-empty-interface\n\n/**\n * @en This interface provides DOM operations like `jQuery` library.\n * @ja `jQuery` のようなDOM 操作を提供するインターフェイス\n */\nexport interface DOM<T extends ElementBase = HTMLElement> extends DOMFeatures<T>, DOMPlugin { }\n\nexport type DOMSelector<T extends SelectorBase = HTMLElement> = ElementifySeed<T> | DOM<T extends ElementBase ? T : never>;\nexport type DOMResult<T extends SelectorBase> = T extends DOM<ElementBase> ? T : (T extends ElementBase ? DOM<T> : DOM<HTMLElement>);\nexport type DOMIterateCallback<T extends ElementBase> = (index: number, element: T) => boolean | void;\n\n/**\n * @en This class provides DOM operations like `jQuery` library.\n * @ja `jQuery` のようなDOM 操作を提供\n *\n * UNSUPPORTED METHOD LIST\n *\n * [Traversing]\n *  .addBack()\n *  .end()\n *\n * [Effects]\n * .show()\n * .hide()\n * .toggle()\n * .stop()\n * .clearQueue()\n * .delay()\n * .dequeue()\n * .fadeIn()\n * .fadeOut()\n * .fadeTo()\n * .fadeToggle()\n * .queue()\n * .slideDown()\n * .slideToggle()\n * .slideUp()\n */\nexport class DOMClass extends mixins(\n    DOMBase,\n    DOMAttributes,\n    DOMTraversing,\n    DOMManipulation,\n    DOMStyles,\n    DOMEvents,\n    DOMScroll,\n    DOMEffects,\n) {\n    /**\n     * private constructor\n     *\n     * @param elements\n     *  - `en` operation targets `Element` array.\n     *  - `ja` 操作対象の `Element` 配列\n     */\n    private constructor(elements: ElementBase[]) {\n        super(elements);\n        // all source classes have no constructor.\n    }\n\n    /**\n     * @en Create [[DOM]] instance from `selector` arg.\n     * @ja 指定された `selector` [[DOM]] インスタンスを作成\n     *\n     * @internal\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n     *  - `ja` [[DOM]] のもとになるオブジェクト(群)またはセレクタ文字列\n     * @param context\n     *  - `en` Set using `Document` context. When being un-designating, a fixed value of the environment is used.\n     *  - `ja` 使用する `Document` コンテキストを指定. 未指定の場合は環境の既定値が使用される.\n     * @returns [[DOM]] instance.\n     */\n    public static create<T extends SelectorBase>(selector?: DOMSelector<T>, context?: QueryContext | null): DOMResult<T> {\n        if (selector && !context) {\n            if (isDOMClass(selector)) {\n                return selector as DOMResult<T>;\n            }\n        }\n        return new DOMClass((elementify(selector as ElementifySeed<T>, context))) as unknown as DOMResult<T>;\n    }\n}\n\n// mixin による `instanceof` は無効に設定\nsetMixClassAttribute(DOMClass as unknown as Class, 'instanceOf', null);\n\n/**\n * @en Check the value-type is [[DOM]].\n * @ja [[DOM]] 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isDOMClass(x: unknown): x is DOM {\n    return x instanceof DOMClass;\n}\n","import { setup } from './static';\nimport { DOMClass } from './class';\n\n// init for static\nsetup(DOMClass.prototype, DOMClass.create);\n\nexport * from './exports';\nexport { default as default } from './exports';\n","import { safe } from '@cdp/core-utils';\n\n/*\n * SSR (Server Side Rendering) 環境においてもオブジェクト等の存在を保証する\n */\n\n/** @internal */ const _location         = safe(globalThis.location);\n/** @internal */ const _navigator        = safe(globalThis.navigator);\n/** @internal */ const _screen           = safe(globalThis.screen);\n/** @internal */ const _devicePixelRatio = safe(globalThis.devicePixelRatio);\n\n/** @internal */\nexport {\n    _location as location,\n    _navigator as navigator,\n    _screen as screen,\n    _devicePixelRatio as devicePixelRatio,\n};\n","import { location } from './ssr';\n\n/**\n * @en Get the directory to which `url` belongs.\n * @ja 指定 `url` の所属するディレクトリを取得\n *\n * @param url\n *  - `en` target URL\n *  - `ja` 対象の URL\n */\nexport const getWebDirectory = (url: string): string => {\n    const match = /(.+\\/)([^/]*#[^/]+)?/.exec(url);\n    return (match && match[1]) || '';\n};\n\n/**\n * @en Accsessor for Web root location <br>\n *     Only the browser environment will be an allocating place in index.html, and becomes effective.\n * @ja Web root location へのアクセス <br>\n *     index.html の配置場所となり、ブラウザ環境のみ有効となる.\n */\nexport const webRoot: string = getWebDirectory(location.href);\n\n/**\n * @en Converter from relative path to absolute url string. <br>\n *     If you want to access to Assets and in spite of the script location, the function is available.\n * @ja 相対 path を絶対 URL に変換 <br>\n *     js の配置に依存することなく `assets` アクセスしたいときに使用する.\n *\n * @see https://stackoverflow.com/questions/2188218/relative-paths-in-javascript-in-an-external-file\n *\n * @example <br>\n *\n * ```ts\n *  console.log(toUrl('/res/data/collection.json'));\n *  // \"http://localhost:8080/app/res/data/collection.json\"\n * ```\n *\n * @param path\n *  - `en` set relative path from [[webRoot]].\n *  - `ja` [[webRoot]] からの相対パスを指定\n */\nexport const toUrl = (path: string): string => {\n    if (null != path && null != path[0]) {\n        return ('/' === path[0]) ? webRoot + path.slice(1) : webRoot + path;\n    } else {\n        return webRoot;\n    }\n};\n","import { Writable, getGlobal } from '@cdp/core-utils';\nimport {\n    navigator,\n    screen,\n    devicePixelRatio,\n} from './ssr';\n\n/** @internal */\nconst enum Threshold {\n    TABLET_MIN_WIDTH = 600, // fallback detection value\n}\n\n/**\n * @en Platform information.\n * @ja プラットフォーム情報\n *\n * @see other framework implementation <br>\n *  - Framework7\n *    - https://github.com/framework7io/framework7/blob/master/src/core/shared/get-device.js\n *    - https://github.com/framework7io/framework7/blob/master/src/core/shared/get-device.d.ts\n *    - https://github.com/framework7io/framework7/blob/master/src/core/shared/get-support.js\n *    - https://github.com/framework7io/framework7/blob/master/src/core/shared/get-support.d.ts\n *    - https://github.com/framework7io/framework7/blob/v4/src/core/utils/device.js    // check legacy device: iPhoneX etc\n *    - https://github.com/framework7io/framework7/blob/v4/src/core/utils/device.d.ts\n *  - OnsenUI\n *    - https://github.com/OnsenUI/OnsenUI/blob/master/core/src/ons/platform.js\n *  - Web\n *    - https://www.bit-hive.com/articles/20190820\n */\nexport interface Platform {\n    /** true for iOS info */\n    readonly ios: boolean;\n    /** true for Android info */\n    readonly android: boolean;\n    /** true for Android Chrome */\n    readonly androidChrome: boolean;\n    /** true for desktop browser */\n    readonly desktop: boolean;\n    /** true for mobile info */\n    readonly mobile: boolean;\n    /** true for smart phone (including iPod) info */\n    readonly phone: boolean;\n    /** true for tablet info */\n    readonly tablet: boolean;\n    /** true for iPhone */\n    readonly iphone: boolean;\n    /** true for iPhoneX */\n    readonly iphoneX: boolean;\n    /** true for iPod */\n    readonly ipod: boolean;\n    /** true for iPad */\n    readonly ipad: boolean;\n    /** true for MS Edge browser */\n    readonly edge: boolean;\n    /** true for Internet Explorer browser*/\n    readonly ie: boolean;\n    /** true for FireFox browser*/\n    readonly firefox: boolean;\n    /** true for desktop MacOS */\n    readonly macos: boolean;\n    /** true for desktop Windows */\n    readonly windows: boolean;\n    /** true when app running in cordova environment */\n    readonly cordova: boolean;\n    /** true when app running in electron environment */\n    readonly electron: boolean;\n    /** Contains OS can be ios, android or windows (for Windows Phone) */\n    readonly os: string;\n    /** Contains OS version, e.g. 11.2.0 */\n    readonly osVersion: string | null | undefined;\n    /** Device pixel ratio */\n    readonly pixelRatio: number;\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal */\nconst maybeTablet = (width: number, height: number): boolean => {\n    return (Threshold.TABLET_MIN_WIDTH <= Math.min(width, height));\n};\n\n/** @internal */\nconst supportTouch = (): boolean => {\n    return !!((navigator.maxTouchPoints > 0) || ('ontouchstart' in globalThis));\n};\n\n/**\n * @internal\n * @see Screen.orientation <br>\n *  - https://developer.mozilla.org/ja/docs/Web/API/Screen/orientation\n */\nconst supportOrientation = (ua: string): boolean => {\n    return ('orientation' in globalThis) || (0 <= ua.indexOf('Windows Phone'));\n};\n\n/**\n * @en Query platform information.\n * @ja プラットフォーム情報の取得\n *\n * @param context\n *  - `en` given `Navigator`, `Screen`, `devicePixelRatio` information.\n *  - `ja` 環境の `Navigator`, `Screen`, `devicePixelRatio` を指定\n */\nexport const queryPlatform = (\n    context?: {\n        navigator?: { userAgent: string; platform: string; standalone?: boolean; };\n        screen?: { width: number; height: number; };\n        devicePixelRatio?: number;\n    }\n): Platform => {\n    context = context || { navigator, screen, devicePixelRatio };\n    const info = {\n        ios: false,\n        android: false,\n        androidChrome: false,\n        desktop: false,\n        mobile: false,\n        phone: false,\n        tablet: false,\n        iphone: false,\n        iphoneX: false,\n        ipod: false,\n        ipad: false,\n        edge: false,\n        ie: false,\n        firefox: false,\n        macos: false,\n        windows: false,\n        cordova: !!(getGlobal()['cordova']),\n        electron: false,\n    } as unknown as Writable<Platform>;\n\n    const { userAgent: ua, platform: os, standalone } = context.navigator || navigator as { userAgent: string; platform: string; standalone?: boolean; };\n    const { width: screenWidth, height: screenHeight } = context.screen || screen;\n    const pixelRatio = context.devicePixelRatio;\n\n    const android  = /(Android);?[\\s/]+([\\d.]+)?/.exec(ua);\n    let   ipad     = /(iPad).*OS\\s([\\d_]+)/.exec(ua);\n    const ipod     = /(iPod)(.*OS\\s([\\d_]+))?/.exec(ua);\n    let   iphone   = !ipad && /(iPhone\\sOS|iOS)\\s([\\d_]+)/.exec(ua);\n    const ie       = 0 <= ua.indexOf('MSIE ') || 0 <= ua.indexOf('Trident/');\n    const edge     = 0 <= ua.indexOf('Edge/');\n    const firefox  = 0 <= ua.indexOf('Gecko/') && 0 <= ua.indexOf('Firefox/');\n    const windows  = 'Win32' === os;\n    let   macos    = 'MacIntel' === os;\n    const electron = ua.toLowerCase().startsWith('electron');\n\n    // iPhone(X) / iPad(Pro)Desktop Mode\n    if (!iphone && !ipad\n        && macos\n        && supportTouch()\n        && (undefined !== standalone\n//            (1024 === screenWidth && 1366 === screenHeight) // Pro 12.9 portrait\n//         || (1366 === screenWidth && 1024 === screenHeight) // Pro 12.9 landscape\n//         || ( 834 === screenWidth && 1194 === screenHeight) // Pro 11 portrait\n//         || (1194 === screenWidth &&  834 === screenHeight) // Pro 11 landscape\n//         || ( 834 === screenWidth && 1112 === screenHeight) // Pro 10.5 portrait\n//         || (1112 === screenWidth &&  834 === screenHeight) // Pro 10.5 landscape\n//         || ( 768 === screenWidth && 1024 === screenHeight) // other portrait\n//         || (1024 === screenWidth &&  768 === screenHeight) // other landscape\n        )\n    ) {\n        const regex = /(Version)\\/([\\d.]+)/.exec(ua);\n        if (maybeTablet(screenWidth, screenHeight)) {\n            ipad = regex;\n        } else {\n            iphone = regex;\n        }\n        macos = false;\n    }\n\n    info.ie = ie;\n    info.edge = edge;\n    info.firefox = firefox;\n\n    // Android\n    if (android && !windows) {\n        info.os = 'android';\n        info.osVersion = android[2];\n        info.android = true;\n        info.androidChrome = 0 <= ua.toLowerCase().indexOf('chrome');\n        if (0 <= ua.indexOf('Mobile')) {\n            info.phone = true;\n        } else {\n            info.tablet = true;\n        }\n    }\n    if (ipad || iphone || ipod) {\n        info.os = 'ios';\n        info.ios = true;\n    }\n    // iOS\n    if (iphone && !ipod) {\n        info.osVersion = iphone[2].replace(/_/g, '.');\n        info.phone = true;\n        info.iphone = true;\n        // iPhone X\n        if (\n            (375 === screenWidth && 812 === screenHeight) // X, XS portrait\n         || (812 === screenWidth && 375 === screenHeight) // X, XS landscape\n         || (414 === screenWidth && 896 === screenHeight) // XS Max, XR portrait\n         || (896 === screenWidth && 414 === screenHeight) // XS Max, XR landscape\n        ) {\n            info.iphoneX = true;\n        }\n    }\n    if (ipad) {\n        info.osVersion = ipad[2].replace(/_/g, '.');\n        info.tablet = true;\n        info.ipad = true;\n    }\n    if (ipod) {\n        info.osVersion = ipod[3] ? ipod[3].replace(/_/g, '.') : null;\n        info.phone = true;\n        info.ipod = true;\n    }\n\n    // Desktop\n    info.desktop = !supportOrientation(ua);\n    if (info.desktop) {\n        info.electron = electron;\n        info.macos    = macos;\n        info.windows  = windows;\n        info.macos && (info.os = 'macos');\n        info.windows && (info.os = 'windows');\n    }\n\n    // Mobile\n    info.mobile = !info.desktop;\n    if (info.mobile && !info.phone && !info.tablet) {\n        if (maybeTablet(screenWidth, screenHeight)) {\n            info.tablet = true;\n        } else {\n            info.phone = true;\n        }\n    }\n\n    // Pixel Ratio\n    info.pixelRatio = pixelRatio || 1;\n\n    return info;\n};\n\n/**\n * @en Platform information on runtime.\n * @ja ランタイムのプラットフォーム情報\n */\nexport const platform = queryPlatform();\n","const consoleLogger = {\n  type: 'logger',\n\n  log(args) {\n    this.output('log', args);\n  },\n\n  warn(args) {\n    this.output('warn', args);\n  },\n\n  error(args) {\n    this.output('error', args);\n  },\n\n  output(type, args) {\n    /* eslint no-console: 0 */\n    if (console && console[type]) console[type].apply(console, args);\n  },\n};\n\nclass Logger {\n  constructor(concreteLogger, options = {}) {\n    this.init(concreteLogger, options);\n  }\n\n  init(concreteLogger, options = {}) {\n    this.prefix = options.prefix || 'i18next:';\n    this.logger = concreteLogger || consoleLogger;\n    this.options = options;\n    this.debug = options.debug;\n  }\n\n  setDebug(bool) {\n    this.debug = bool;\n  }\n\n  log(...args) {\n    return this.forward(args, 'log', '', true);\n  }\n\n  warn(...args) {\n    return this.forward(args, 'warn', '', true);\n  }\n\n  error(...args) {\n    return this.forward(args, 'error', '');\n  }\n\n  deprecate(...args) {\n    return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);\n  }\n\n  forward(args, lvl, prefix, debugOnly) {\n    if (debugOnly && !this.debug) return null;\n    if (typeof args[0] === 'string') args[0] = `${prefix}${this.prefix} ${args[0]}`;\n    return this.logger[lvl](args);\n  }\n\n  create(moduleName) {\n    return new Logger(this.logger, {\n      ...{ prefix: `${this.prefix}:${moduleName}:` },\n      ...this.options,\n    });\n  }\n}\n\nexport default new Logger();\n","class EventEmitter {\n  constructor() {\n    this.observers = {};\n  }\n\n  on(events, listener) {\n    events.split(' ').forEach(event => {\n      this.observers[event] = this.observers[event] || [];\n      this.observers[event].push(listener);\n    });\n    return this;\n  }\n\n  off(event, listener) {\n    if (!this.observers[event]) return;\n    if (!listener) {\n      delete this.observers[event];\n      return;\n    }\n\n    this.observers[event] = this.observers[event].filter(l => l !== listener);\n  }\n\n  emit(event, ...args) {\n    if (this.observers[event]) {\n      const cloned = [].concat(this.observers[event]);\n      cloned.forEach(observer => {\n        observer(...args);\n      });\n    }\n\n    if (this.observers['*']) {\n      const cloned = [].concat(this.observers['*']);\n      cloned.forEach(observer => {\n        observer.apply(observer, [event, ...args]);\n      });\n    }\n  }\n}\n\nexport default EventEmitter;\n","// http://lea.verou.me/2016/12/resolve-promises-externally-with-this-one-weird-trick/\nexport function defer() {\n  let res;\n  let rej;\n\n  const promise = new Promise((resolve, reject) => {\n    res = resolve;\n    rej = reject;\n  });\n\n  promise.resolve = res;\n  promise.reject = rej;\n\n  return promise;\n}\n\nexport function makeString(object) {\n  if (object == null) return '';\n  /* eslint prefer-template: 0 */\n  return '' + object;\n}\n\nexport function copy(a, s, t) {\n  a.forEach(m => {\n    if (s[m]) t[m] = s[m];\n  });\n}\n\nfunction getLastOfPath(object, path, Empty) {\n  function cleanKey(key) {\n    return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;\n  }\n\n  function canNotTraverseDeeper() {\n    return !object || typeof object === 'string';\n  }\n\n  const stack = typeof path !== 'string' ? [].concat(path) : path.split('.');\n  while (stack.length > 1) {\n    if (canNotTraverseDeeper()) return {};\n\n    const key = cleanKey(stack.shift());\n    if (!object[key] && Empty) object[key] = new Empty();\n    // prevent prototype pollution\n    if (Object.prototype.hasOwnProperty.call(object, key)) {\n      object = object[key];\n    } else {\n      object = {};\n    }\n  }\n\n  if (canNotTraverseDeeper()) return {};\n  return {\n    obj: object,\n    k: cleanKey(stack.shift()),\n  };\n}\n\nexport function setPath(object, path, newValue) {\n  const { obj, k } = getLastOfPath(object, path, Object);\n\n  obj[k] = newValue;\n}\n\nexport function pushPath(object, path, newValue, concat) {\n  const { obj, k } = getLastOfPath(object, path, Object);\n\n  obj[k] = obj[k] || [];\n  if (concat) obj[k] = obj[k].concat(newValue);\n  if (!concat) obj[k].push(newValue);\n}\n\nexport function getPath(object, path) {\n  const { obj, k } = getLastOfPath(object, path);\n\n  if (!obj) return undefined;\n  return obj[k];\n}\n\nexport function getPathWithDefaults(data, defaultData, key) {\n  const value = getPath(data, key);\n  if (value !== undefined) {\n    return value;\n  }\n  // Fallback to default values\n  return getPath(defaultData, key);\n}\n\nexport function deepExtend(target, source, overwrite) {\n  /* eslint no-restricted-syntax: 0 */\n  for (const prop in source) {\n    if (prop !== '__proto__' && prop !== 'constructor') {\n      if (prop in target) {\n        // If we reached a leaf string in target or source then replace with source or skip depending on the 'overwrite' switch\n        if (\n          typeof target[prop] === 'string' ||\n          target[prop] instanceof String ||\n          typeof source[prop] === 'string' ||\n          source[prop] instanceof String\n        ) {\n          if (overwrite) target[prop] = source[prop];\n        } else {\n          deepExtend(target[prop], source[prop], overwrite);\n        }\n      } else {\n        target[prop] = source[prop];\n      }\n    }\n  }\n  return target;\n}\n\nexport function regexEscape(str) {\n  /* eslint no-useless-escape: 0 */\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n}\n\n/* eslint-disable */\nvar _entityMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n};\n/* eslint-enable */\n\nexport function escape(data) {\n  if (typeof data === 'string') {\n    return data.replace(/[&<>\"'\\/]/g, s => _entityMap[s]);\n  }\n\n  return data;\n}\n\nexport const isIE10 =\n  typeof window !== 'undefined' &&\n  window.navigator &&\n  window.navigator.userAgent &&\n  window.navigator.userAgent.indexOf('MSIE') > -1;\n","import EventEmitter from './EventEmitter.js';\nimport * as utils from './utils.js';\n\nfunction deepFind(obj, path, keySeparator = '.') {\n  if (!obj) return undefined;\n  if (obj[path]) return obj[path];\n  const paths = path.split(keySeparator);\n  let current = obj;\n  for (let i = 0; i < paths.length; ++i) {\n    if (typeof current[paths[i]] === 'string' && i + 1 < paths.length) {\n      return undefined;\n    }\n    if (current[paths[i]] === undefined) {\n      let j = 2;\n      let p = paths.slice(i, i + j).join(keySeparator);\n      let mix = current[p];\n      while (mix === undefined && paths.length > i + j) {\n        j++;\n        p = paths.slice(i, i + j).join(keySeparator);\n        mix = current[p];\n      }\n      if (mix === undefined) return undefined;\n      if (typeof mix === 'string') return mix;\n      if (p && typeof mix[p] === 'string') return mix[p];\n      const joinedPath = paths.slice(i + j).join(keySeparator);\n      if (joinedPath) return deepFind(mix, joinedPath, keySeparator);\n      return undefined;\n    }\n    current = current[paths[i]];\n  }\n  return current;\n}\n\nclass ResourceStore extends EventEmitter {\n  constructor(data, options = { ns: ['translation'], defaultNS: 'translation' }) {\n    super();\n    if (utils.isIE10) {\n      EventEmitter.call(this); // <=IE10 fix (unable to call parent constructor)\n    }\n\n    this.data = data || {};\n    this.options = options;\n    if (this.options.keySeparator === undefined) {\n      this.options.keySeparator = '.';\n    }\n    if (this.options.ignoreJSONStructure === undefined) {\n      this.options.ignoreJSONStructure = true;\n    }\n  }\n\n  addNamespaces(ns) {\n    if (this.options.ns.indexOf(ns) < 0) {\n      this.options.ns.push(ns);\n    }\n  }\n\n  removeNamespaces(ns) {\n    const index = this.options.ns.indexOf(ns);\n    if (index > -1) {\n      this.options.ns.splice(index, 1);\n    }\n  }\n\n  getResource(lng, ns, key, options = {}) {\n    const keySeparator =\n      options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n\n    const ignoreJSONStructure =\n      options.ignoreJSONStructure !== undefined\n        ? options.ignoreJSONStructure\n        : this.options.ignoreJSONStructure;\n\n    let path = [lng, ns];\n    if (key && typeof key !== 'string') path = path.concat(key);\n    if (key && typeof key === 'string')\n      path = path.concat(keySeparator ? key.split(keySeparator) : key);\n\n    if (lng.indexOf('.') > -1) {\n      path = lng.split('.');\n    }\n\n    const result = utils.getPath(this.data, path);\n    if (result || !ignoreJSONStructure || typeof key !== 'string') return result;\n\n    return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);\n  }\n\n  addResource(lng, ns, key, value, options = { silent: false }) {\n    let keySeparator = this.options.keySeparator;\n    if (keySeparator === undefined) keySeparator = '.';\n\n    let path = [lng, ns];\n    if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);\n\n    if (lng.indexOf('.') > -1) {\n      path = lng.split('.');\n      value = ns;\n      ns = path[1];\n    }\n\n    this.addNamespaces(ns);\n\n    utils.setPath(this.data, path, value);\n\n    if (!options.silent) this.emit('added', lng, ns, key, value);\n  }\n\n  addResources(lng, ns, resources, options = { silent: false }) {\n    /* eslint no-restricted-syntax: 0 */\n    for (const m in resources) {\n      if (\n        typeof resources[m] === 'string' ||\n        Object.prototype.toString.apply(resources[m]) === '[object Array]'\n      )\n        this.addResource(lng, ns, m, resources[m], { silent: true });\n    }\n    if (!options.silent) this.emit('added', lng, ns, resources);\n  }\n\n  addResourceBundle(lng, ns, resources, deep, overwrite, options = { silent: false }) {\n    let path = [lng, ns];\n    if (lng.indexOf('.') > -1) {\n      path = lng.split('.');\n      deep = resources;\n      resources = ns;\n      ns = path[1];\n    }\n\n    this.addNamespaces(ns);\n\n    let pack = utils.getPath(this.data, path) || {};\n\n    if (deep) {\n      utils.deepExtend(pack, resources, overwrite);\n    } else {\n      pack = { ...pack, ...resources };\n    }\n\n    utils.setPath(this.data, path, pack);\n\n    if (!options.silent) this.emit('added', lng, ns, resources);\n  }\n\n  removeResourceBundle(lng, ns) {\n    if (this.hasResourceBundle(lng, ns)) {\n      delete this.data[lng][ns];\n    }\n    this.removeNamespaces(ns);\n\n    this.emit('removed', lng, ns);\n  }\n\n  hasResourceBundle(lng, ns) {\n    return this.getResource(lng, ns) !== undefined;\n  }\n\n  getResourceBundle(lng, ns) {\n    if (!ns) ns = this.options.defaultNS;\n\n    // COMPATIBILITY: remove extend in v2.1.0\n    if (this.options.compatibilityAPI === 'v1') return { ...{}, ...this.getResource(lng, ns) };\n\n    return this.getResource(lng, ns);\n  }\n\n  getDataByLanguage(lng) {\n    return this.data[lng];\n  }\n\n  toJSON() {\n    return this.data;\n  }\n}\n\nexport default ResourceStore;\n","export default {\n  processors: {},\n\n  addPostProcessor(module) {\n    this.processors[module.name] = module;\n  },\n\n  handle(processors, value, key, options, translator) {\n    processors.forEach(processor => {\n      if (this.processors[processor])\n        value = this.processors[processor].process(value, key, options, translator);\n    });\n\n    return value;\n  },\n};\n","import baseLogger from './logger.js';\nimport EventEmitter from './EventEmitter.js';\nimport postProcessor from './postProcessor.js';\nimport * as utils from './utils.js';\n\nconst checkedLoadedFor = {};\n\nclass Translator extends EventEmitter {\n  constructor(services, options = {}) {\n    super();\n    if (utils.isIE10) {\n      EventEmitter.call(this); // <=IE10 fix (unable to call parent constructor)\n    }\n\n    utils.copy(\n      [\n        'resourceStore',\n        'languageUtils',\n        'pluralResolver',\n        'interpolator',\n        'backendConnector',\n        'i18nFormat',\n        'utils',\n      ],\n      services,\n      this,\n    );\n\n    this.options = options;\n    if (this.options.keySeparator === undefined) {\n      this.options.keySeparator = '.';\n    }\n\n    this.logger = baseLogger.create('translator');\n  }\n\n  changeLanguage(lng) {\n    if (lng) this.language = lng;\n  }\n\n  exists(key, options = { interpolation: {} }) {\n    const resolved = this.resolve(key, options);\n    return resolved && resolved.res !== undefined;\n  }\n\n  extractFromKey(key, options) {\n    let nsSeparator =\n      options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;\n    if (nsSeparator === undefined) nsSeparator = ':';\n\n    const keySeparator =\n      options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n\n    let namespaces = options.ns || this.options.defaultNS;\n    if (nsSeparator && key.indexOf(nsSeparator) > -1) {\n      const m = key.match(this.interpolator.nestingRegexp);\n      if (m && m.length > 0) {\n        return {\n          key,\n          namespaces,\n        };\n      }\n      const parts = key.split(nsSeparator);\n      if (\n        nsSeparator !== keySeparator ||\n        (nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)\n      )\n        namespaces = parts.shift();\n      key = parts.join(keySeparator);\n    }\n    if (typeof namespaces === 'string') namespaces = [namespaces];\n\n    return {\n      key,\n      namespaces,\n    };\n  }\n\n  translate(keys, options, lastKey) {\n    if (typeof options !== 'object' && this.options.overloadTranslationOptionHandler) {\n      /* eslint prefer-rest-params: 0 */\n      options = this.options.overloadTranslationOptionHandler(arguments);\n    }\n    if (!options) options = {};\n\n    // non valid keys handling\n    if (keys === undefined || keys === null /* || keys === ''*/) return '';\n    if (!Array.isArray(keys)) keys = [String(keys)];\n\n    // separators\n    const keySeparator =\n      options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n\n    // get namespace(s)\n    const { key, namespaces } = this.extractFromKey(keys[keys.length - 1], options);\n    const namespace = namespaces[namespaces.length - 1];\n\n    // return key on CIMode\n    const lng = options.lng || this.language;\n    const appendNamespaceToCIMode =\n      options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;\n    if (lng && lng.toLowerCase() === 'cimode') {\n      if (appendNamespaceToCIMode) {\n        const nsSeparator = options.nsSeparator || this.options.nsSeparator;\n        return namespace + nsSeparator + key;\n      }\n\n      return key;\n    }\n\n    // resolve from store\n    const resolved = this.resolve(keys, options);\n    let res = resolved && resolved.res;\n    const resUsedKey = (resolved && resolved.usedKey) || key;\n    const resExactUsedKey = (resolved && resolved.exactUsedKey) || key;\n\n    const resType = Object.prototype.toString.apply(res);\n    const noObject = ['[object Number]', '[object Function]', '[object RegExp]'];\n    const joinArrays =\n      options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;\n\n    // object\n    const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;\n    const handleAsObject =\n      typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';\n    if (\n      handleAsObjectInI18nFormat &&\n      res &&\n      handleAsObject &&\n      noObject.indexOf(resType) < 0 &&\n      !(typeof joinArrays === 'string' && resType === '[object Array]')\n    ) {\n      if (!options.returnObjects && !this.options.returnObjects) {\n        if (!this.options.returnedObjectHandler) {\n          this.logger.warn('accessing an object - but returnObjects options is not enabled!');\n        }\n        return this.options.returnedObjectHandler\n          ? this.options.returnedObjectHandler(resUsedKey, res, { ...options, ns: namespaces })\n          : `key '${key} (${this.language})' returned an object instead of string.`;\n      }\n\n      // if we got a separator we loop over children - else we just return object as is\n      // as having it set to false means no hierarchy so no lookup for nested values\n      if (keySeparator) {\n        const resTypeIsArray = resType === '[object Array]';\n        const copy = resTypeIsArray ? [] : {}; // apply child translation on a copy\n\n        /* eslint no-restricted-syntax: 0 */\n        let newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;\n        for (const m in res) {\n          if (Object.prototype.hasOwnProperty.call(res, m)) {\n            const deepKey = `${newKeyToUse}${keySeparator}${m}`;\n            copy[m] = this.translate(deepKey, {\n              ...options,\n              ...{ joinArrays: false, ns: namespaces },\n            });\n            if (copy[m] === deepKey) copy[m] = res[m]; // if nothing found use orginal value as fallback\n          }\n        }\n        res = copy;\n      }\n    } else if (\n      handleAsObjectInI18nFormat &&\n      typeof joinArrays === 'string' &&\n      resType === '[object Array]'\n    ) {\n      // array special treatment\n      res = res.join(joinArrays);\n      if (res) res = this.extendTranslation(res, keys, options, lastKey);\n    } else {\n      // string, empty or null\n      let usedDefault = false;\n      let usedKey = false;\n\n      const needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';\n      const hasDefaultValue = Translator.hasDefaultValue(options);\n      const defaultValueSuffix = needsPluralHandling\n        ? this.pluralResolver.getSuffix(lng, options.count)\n        : '';\n      const defaultValue = options[`defaultValue${defaultValueSuffix}`] || options.defaultValue;\n\n      // fallback value\n      if (!this.isValidLookup(res) && hasDefaultValue) {\n        usedDefault = true;\n        res = defaultValue;\n      }\n      if (!this.isValidLookup(res)) {\n        usedKey = true;\n        res = key;\n      }\n\n      // save missing\n      const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;\n      if (usedKey || usedDefault || updateMissing) {\n        this.logger.log(\n          updateMissing ? 'updateKey' : 'missingKey',\n          lng,\n          namespace,\n          key,\n          updateMissing ? defaultValue : res,\n        );\n        if (keySeparator) {\n          const fk = this.resolve(key, { ...options, keySeparator: false });\n          if (fk && fk.res)\n            this.logger.warn(\n              'Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.',\n            );\n        }\n\n        let lngs = [];\n        const fallbackLngs = this.languageUtils.getFallbackCodes(\n          this.options.fallbackLng,\n          options.lng || this.language,\n        );\n        if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {\n          for (let i = 0; i < fallbackLngs.length; i++) {\n            lngs.push(fallbackLngs[i]);\n          }\n        } else if (this.options.saveMissingTo === 'all') {\n          lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);\n        } else {\n          lngs.push(options.lng || this.language);\n        }\n\n        const send = (l, k, fallbackValue) => {\n          if (this.options.missingKeyHandler) {\n            this.options.missingKeyHandler(\n              l,\n              namespace,\n              k,\n              updateMissing ? fallbackValue : res,\n              updateMissing,\n              options,\n            );\n          } else if (this.backendConnector && this.backendConnector.saveMissing) {\n            this.backendConnector.saveMissing(\n              l,\n              namespace,\n              k,\n              updateMissing ? fallbackValue : res,\n              updateMissing,\n              options,\n            );\n          }\n          this.emit('missingKey', l, namespace, k, res);\n        };\n\n        if (this.options.saveMissing) {\n          if (this.options.saveMissingPlurals && needsPluralHandling) {\n            lngs.forEach(language => {\n              this.pluralResolver.getSuffixes(language).forEach(suffix => {\n                send([language], key + suffix, options[`defaultValue${suffix}`] || defaultValue);\n              });\n            });\n          } else {\n            send(lngs, key, defaultValue);\n          }\n        }\n      }\n\n      // extend\n      res = this.extendTranslation(res, keys, options, resolved, lastKey);\n\n      // append namespace if still key\n      if (usedKey && res === key && this.options.appendNamespaceToMissingKey)\n        res = `${namespace}:${key}`;\n\n      // parseMissingKeyHandler\n      if (usedKey && this.options.parseMissingKeyHandler)\n        res = this.options.parseMissingKeyHandler(res);\n    }\n\n    // return\n    return res;\n  }\n\n  extendTranslation(res, key, options, resolved, lastKey) {\n    if (this.i18nFormat && this.i18nFormat.parse) {\n      res = this.i18nFormat.parse(\n        res,\n        options,\n        resolved.usedLng,\n        resolved.usedNS,\n        resolved.usedKey,\n        { resolved },\n      );\n    } else if (!options.skipInterpolation) {\n      // i18next.parsing\n      if (options.interpolation)\n        this.interpolator.init({\n          ...options,\n          ...{ interpolation: { ...this.options.interpolation, ...options.interpolation } },\n        });\n      const skipOnVariables =\n        (options.interpolation && options.interpolation.skipOnVariables) ||\n        this.options.interpolation.skipOnVariables;\n      let nestBef;\n      if (skipOnVariables) {\n        const nb = res.match(this.interpolator.nestingRegexp);\n        // has nesting aftbeforeer interpolation\n        nestBef = nb && nb.length;\n      }\n\n      // interpolate\n      let data = options.replace && typeof options.replace !== 'string' ? options.replace : options;\n      if (this.options.interpolation.defaultVariables)\n        data = { ...this.options.interpolation.defaultVariables, ...data };\n      res = this.interpolator.interpolate(res, data, options.lng || this.language, options);\n\n      // nesting\n      if (skipOnVariables) {\n        const na = res.match(this.interpolator.nestingRegexp);\n        // has nesting after interpolation\n        const nestAft = na && na.length;\n        if (nestBef < nestAft) options.nest = false;\n      }\n      if (options.nest !== false)\n        res = this.interpolator.nest(\n          res,\n          (...args) => {\n            if (lastKey && lastKey[0] === args[0] && !options.context) {\n              this.logger.warn(\n                `It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`,\n              );\n              return null;\n            }\n            return this.translate(...args, key);\n          },\n          options,\n        );\n\n      if (options.interpolation) this.interpolator.reset();\n    }\n\n    // post process\n    const postProcess = options.postProcess || this.options.postProcess;\n    const postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;\n\n    if (\n      res !== undefined &&\n      res !== null &&\n      postProcessorNames &&\n      postProcessorNames.length &&\n      options.applyPostProcessor !== false\n    ) {\n      res = postProcessor.handle(\n        postProcessorNames,\n        res,\n        key,\n        this.options && this.options.postProcessPassResolved\n          ? { i18nResolved: resolved, ...options }\n          : options,\n        this,\n      );\n    }\n\n    return res;\n  }\n\n  resolve(keys, options = {}) {\n    let found;\n    let usedKey; // plain key\n    let exactUsedKey; // key with context / plural\n    let usedLng;\n    let usedNS;\n\n    if (typeof keys === 'string') keys = [keys];\n\n    // forEach possible key\n    keys.forEach(k => {\n      if (this.isValidLookup(found)) return;\n      const extracted = this.extractFromKey(k, options);\n      const key = extracted.key;\n      usedKey = key;\n      let namespaces = extracted.namespaces;\n      if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);\n\n      const needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';\n      const needsContextHandling =\n        options.context !== undefined &&\n        (typeof options.context === 'string' || typeof options.context === 'number') &&\n        options.context !== '';\n\n      const codes = options.lngs\n        ? options.lngs\n        : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);\n\n      namespaces.forEach(ns => {\n        if (this.isValidLookup(found)) return;\n        usedNS = ns;\n\n        if (\n          !checkedLoadedFor[`${codes[0]}-${ns}`] &&\n          this.utils &&\n          this.utils.hasLoadedNamespace &&\n          !this.utils.hasLoadedNamespace(usedNS)\n        ) {\n          checkedLoadedFor[`${codes[0]}-${ns}`] = true;\n          this.logger.warn(\n            `key \"${usedKey}\" for languages \"${codes.join(\n              ', ',\n            )}\" won't get resolved as namespace \"${usedNS}\" was not yet loaded`,\n            'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!',\n          );\n        }\n\n        codes.forEach(code => {\n          if (this.isValidLookup(found)) return;\n          usedLng = code;\n\n          let finalKey = key;\n          const finalKeys = [finalKey];\n\n          if (this.i18nFormat && this.i18nFormat.addLookupKeys) {\n            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);\n          } else {\n            let pluralSuffix;\n            if (needsPluralHandling)\n              pluralSuffix = this.pluralResolver.getSuffix(code, options.count);\n\n            // fallback for plural if context not found\n            if (needsPluralHandling && needsContextHandling)\n              finalKeys.push(finalKey + pluralSuffix);\n\n            // get key for context if needed\n            if (needsContextHandling)\n              finalKeys.push((finalKey += `${this.options.contextSeparator}${options.context}`));\n\n            // get key for plural if needed\n            if (needsPluralHandling) finalKeys.push((finalKey += pluralSuffix));\n          }\n\n          // iterate over finalKeys starting with most specific pluralkey (-> contextkey only) -> singularkey only\n          let possibleKey;\n          /* eslint no-cond-assign: 0 */\n          while ((possibleKey = finalKeys.pop())) {\n            if (!this.isValidLookup(found)) {\n              exactUsedKey = possibleKey;\n              found = this.getResource(code, ns, possibleKey, options);\n            }\n          }\n        });\n      });\n    });\n\n    return { res: found, usedKey, exactUsedKey, usedLng, usedNS };\n  }\n\n  isValidLookup(res) {\n    return (\n      res !== undefined &&\n      !(!this.options.returnNull && res === null) &&\n      !(!this.options.returnEmptyString && res === '')\n    );\n  }\n\n  getResource(code, ns, key, options = {}) {\n    if (this.i18nFormat && this.i18nFormat.getResource)\n      return this.i18nFormat.getResource(code, ns, key, options);\n    return this.resourceStore.getResource(code, ns, key, options);\n  }\n\n  static hasDefaultValue(options) {\n    const prefix = 'defaultValue';\n\n    for (const option in options) {\n      if (\n        Object.prototype.hasOwnProperty.call(options, option) &&\n        prefix === option.substring(0, prefix.length) &&\n        undefined !== options[option]\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\nexport default Translator;\n","import baseLogger from './logger.js';\n\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nclass LanguageUtil {\n  constructor(options) {\n    this.options = options;\n\n    // temporal backwards compatibility WHITELIST REMOVAL\n    this.whitelist = this.options.supportedLngs || false;\n    // end temporal backwards compatibility WHITELIST REMOVAL\n\n    this.supportedLngs = this.options.supportedLngs || false;\n    this.logger = baseLogger.create('languageUtils');\n  }\n\n  getScriptPartFromCode(code) {\n    if (!code || code.indexOf('-') < 0) return null;\n\n    const p = code.split('-');\n    if (p.length === 2) return null;\n    p.pop();\n    if (p[p.length - 1].toLowerCase() === 'x') return null;\n    return this.formatLanguageCode(p.join('-'));\n  }\n\n  getLanguagePartFromCode(code) {\n    if (!code || code.indexOf('-') < 0) return code;\n\n    const p = code.split('-');\n    return this.formatLanguageCode(p[0]);\n  }\n\n  formatLanguageCode(code) {\n    // http://www.iana.org/assignments/language-tags/language-tags.xhtml\n    if (typeof code === 'string' && code.indexOf('-') > -1) {\n      const specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];\n      let p = code.split('-');\n\n      if (this.options.lowerCaseLng) {\n        p = p.map(part => part.toLowerCase());\n      } else if (p.length === 2) {\n        p[0] = p[0].toLowerCase();\n        p[1] = p[1].toUpperCase();\n\n        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());\n      } else if (p.length === 3) {\n        p[0] = p[0].toLowerCase();\n\n        // if lenght 2 guess it's a country\n        if (p[1].length === 2) p[1] = p[1].toUpperCase();\n        if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();\n\n        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());\n        if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());\n      }\n\n      return p.join('-');\n    }\n\n    return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;\n  }\n\n  // temporal backwards compatibility WHITELIST REMOVAL\n  isWhitelisted(code) {\n    this.logger.deprecate(\n      'languageUtils.isWhitelisted',\n      'function \"isWhitelisted\" will be renamed to \"isSupportedCode\" in the next major - please make sure to rename it\\'s usage asap.',\n    );\n\n    return this.isSupportedCode(code);\n  }\n  // end temporal backwards compatibility WHITELIST REMOVAL\n\n  isSupportedCode(code) {\n    if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {\n      code = this.getLanguagePartFromCode(code);\n    }\n    return (\n      !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1\n    );\n  }\n\n  getBestMatchFromCodes(codes) {\n    if (!codes) return null;\n\n    let found;\n\n    // pick first supported code or if no restriction pick the first one (highest prio)\n    codes.forEach(code => {\n      if (found) return;\n      let cleanedLng = this.formatLanguageCode(code);\n      if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;\n    });\n\n    // if we got no match in supportedLngs yet - check for similar locales\n    // first  de-CH --> de\n    // second de-CH --> de-DE\n    if (!found && this.options.supportedLngs) {\n      codes.forEach(code => {\n        if (found) return;\n\n        let lngOnly = this.getLanguagePartFromCode(code);\n        if (this.isSupportedCode(lngOnly)) return (found = lngOnly);\n\n        found = this.options.supportedLngs.find(supportedLng => {\n          if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;\n        });\n      });\n    }\n\n    // if nothing found, use fallbackLng\n    if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];\n\n    return found;\n  }\n\n  getFallbackCodes(fallbacks, code) {\n    if (!fallbacks) return [];\n    if (typeof fallbacks === 'function') fallbacks = fallbacks(code);\n    if (typeof fallbacks === 'string') fallbacks = [fallbacks];\n    if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;\n\n    if (!code) return fallbacks.default || [];\n\n    // asume we have an object defining fallbacks\n    let found = fallbacks[code];\n    if (!found) found = fallbacks[this.getScriptPartFromCode(code)];\n    if (!found) found = fallbacks[this.formatLanguageCode(code)];\n    if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];\n    if (!found) found = fallbacks.default;\n\n    return found || [];\n  }\n\n  toResolveHierarchy(code, fallbackCode) {\n    const fallbackCodes = this.getFallbackCodes(\n      fallbackCode || this.options.fallbackLng || [],\n      code,\n    );\n\n    const codes = [];\n    const addCode = c => {\n      if (!c) return;\n      if (this.isSupportedCode(c)) {\n        codes.push(c);\n      } else {\n        this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);\n      }\n    };\n\n    if (typeof code === 'string' && code.indexOf('-') > -1) {\n      if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));\n      if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly')\n        addCode(this.getScriptPartFromCode(code));\n      if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));\n    } else if (typeof code === 'string') {\n      addCode(this.formatLanguageCode(code));\n    }\n\n    fallbackCodes.forEach(fc => {\n      if (codes.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));\n    });\n\n    return codes;\n  }\n}\n\nexport default LanguageUtil;\n","import baseLogger from './logger.js';\n\n// definition http://translate.sourceforge.net/wiki/l10n/pluralforms\n/* eslint-disable */\nlet sets = [\n  { lngs: ['ach','ak','am','arn','br','fil','gun','ln','mfe','mg','mi','oc', 'pt', 'pt-BR',\n    'tg', 'tl', 'ti','tr','uz','wa'], nr: [1,2], fc: 1 },\n\n  { lngs: ['af','an','ast','az','bg','bn','ca','da','de','dev','el','en',\n    'eo','es','et','eu','fi','fo','fur','fy','gl','gu','ha','hi',\n    'hu','hy','ia','it','kk','kn','ku','lb','mai','ml','mn','mr','nah','nap','nb',\n    'ne','nl','nn','no','nso','pa','pap','pms','ps','pt-PT','rm','sco',\n    'se','si','so','son','sq','sv','sw','ta','te','tk','ur','yo'], nr: [1,2], fc: 2 },\n\n  { lngs: ['ay','bo','cgg','fa','ht','id','ja','jbo','ka','km','ko','ky','lo',\n    'ms','sah','su','th','tt','ug','vi','wo','zh'], nr: [1], fc: 3 },\n\n  { lngs: ['be','bs', 'cnr', 'dz','hr','ru','sr','uk'], nr: [1,2,5], fc: 4 },\n\n  { lngs: ['ar'], nr: [0,1,2,3,11,100], fc: 5 },\n  { lngs: ['cs','sk'], nr: [1,2,5], fc: 6 },\n  { lngs: ['csb','pl'], nr: [1,2,5], fc: 7 },\n  { lngs: ['cy'], nr: [1,2,3,8], fc: 8 },\n  { lngs: ['fr'], nr: [1,2], fc: 9 },\n  { lngs: ['ga'], nr: [1,2,3,7,11], fc: 10 },\n  { lngs: ['gd'], nr: [1,2,3,20], fc: 11 },\n  { lngs: ['is'], nr: [1,2], fc: 12 },\n  { lngs: ['jv'], nr: [0,1], fc: 13 },\n  { lngs: ['kw'], nr: [1,2,3,4], fc: 14 },\n  { lngs: ['lt'], nr: [1,2,10], fc: 15 },\n  { lngs: ['lv'], nr: [1,2,0], fc: 16 },\n  { lngs: ['mk'], nr: [1,2], fc: 17 },\n  { lngs: ['mnk'], nr: [0,1,2], fc: 18 },\n  { lngs: ['mt'], nr: [1,2,11,20], fc: 19 },\n  { lngs: ['or'], nr: [2,1], fc: 2 },\n  { lngs: ['ro'], nr: [1,2,20], fc: 20 },\n  { lngs: ['sl'], nr: [5,1,2,3], fc: 21 },\n  { lngs: ['he','iw'], nr: [1,2,20,21], fc: 22 }\n]\n\nlet _rulesPluralsTypes = {\n  1: function(n) {return Number(n > 1);},\n  2: function(n) {return Number(n != 1);},\n  3: function(n) {return 0;},\n  4: function(n) {return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);},\n  5: function(n) {return Number(n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5);},\n  6: function(n) {return Number((n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2);},\n  7: function(n) {return Number(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);},\n  8: function(n) {return Number((n==1) ? 0 : (n==2) ? 1 : (n != 8 && n != 11) ? 2 : 3);},\n  9: function(n) {return Number(n >= 2);},\n  10: function(n) {return Number(n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : 4) ;},\n  11: function(n) {return Number((n==1 || n==11) ? 0 : (n==2 || n==12) ? 1 : (n > 2 && n < 20) ? 2 : 3);},\n  12: function(n) {return Number(n%10!=1 || n%100==11);},\n  13: function(n) {return Number(n !== 0);},\n  14: function(n) {return Number((n==1) ? 0 : (n==2) ? 1 : (n == 3) ? 2 : 3);},\n  15: function(n) {return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2);},\n  16: function(n) {return Number(n%10==1 && n%100!=11 ? 0 : n !== 0 ? 1 : 2);},\n  17: function(n) {return Number(n==1 || n%10==1 && n%100!=11 ? 0 : 1);},\n  18: function(n) {return Number(n==0 ? 0 : n==1 ? 1 : 2);},\n  19: function(n) {return Number(n==1 ? 0 : n==0 || ( n%100>1 && n%100<11) ? 1 : (n%100>10 && n%100<20 ) ? 2 : 3);},\n  20: function(n) {return Number(n==1 ? 0 : (n==0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2);},\n  21: function(n) {return Number(n%100==1 ? 1 : n%100==2 ? 2 : n%100==3 || n%100==4 ? 3 : 0); },\n  22: function(n) {return Number(n==1 ? 0 : n==2 ? 1 : (n<0 || n>10) && n%10==0 ? 2 : 3); }\n};\n/* eslint-enable */\n\nfunction createRules() {\n  const rules = {};\n  sets.forEach((set) => {\n    set.lngs.forEach((l) => {\n      rules[l] = {\n        numbers: set.nr,\n        plurals: _rulesPluralsTypes[set.fc]\n      };\n    });\n  });\n  return rules;\n}\n\nclass PluralResolver {\n  constructor(languageUtils, options = {}) {\n    this.languageUtils = languageUtils;\n    this.options = options;\n\n    this.logger = baseLogger.create('pluralResolver');\n\n    this.rules = createRules();\n  }\n\n  addRule(lng, obj) {\n    this.rules[lng] = obj;\n  }\n\n  getRule(code) {\n    return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];\n  }\n\n  needsPlural(code) {\n    const rule = this.getRule(code);\n\n    return rule && rule.numbers.length > 1;\n  }\n\n  getPluralFormsOfKey(code, key) {\n    return this.getSuffixes(code).map((suffix) => key + suffix)\n  }\n\n  getSuffixes(code) {\n    const rule = this.getRule(code);\n\n    if (!rule) {\n      return [];\n    }\n\n    return rule.numbers.map((number) => this.getSuffix(code, number))\n  }\n\n  getSuffix(code, count) {\n    const rule = this.getRule(code);\n\n    if (rule) {\n      // if (rule.numbers.length === 1) return ''; // only singular\n\n      const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));\n      let suffix = rule.numbers[idx];\n\n      // special treatment for lngs only having singular and plural\n      if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n        if (suffix === 2) {\n          suffix = 'plural';\n        } else if (suffix === 1) {\n          suffix = '';\n        }\n      }\n\n      const returnSuffix = () => (\n        this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString()\n      );\n\n      // COMPATIBILITY JSON\n      // v1\n      if (this.options.compatibilityJSON === 'v1') {\n        if (suffix === 1) return '';\n        if (typeof suffix === 'number') return `_plural_${suffix.toString()}`;\n        return returnSuffix();\n      } else if (/* v2 */ this.options.compatibilityJSON === 'v2') {\n        return returnSuffix();\n      } else if (/* v3 - gettext index */ this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n        return returnSuffix();\n      }\n      return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();\n    }\n\n    this.logger.warn(`no plural rule found for: ${code}`);\n    return '';\n  }\n}\n\nexport default PluralResolver;\n","import * as utils from './utils.js';\nimport baseLogger from './logger.js';\n\nclass Interpolator {\n  constructor(options = {}) {\n    this.logger = baseLogger.create('interpolator');\n\n    this.options = options;\n    this.format = (options.interpolation && options.interpolation.format) || (value => value);\n    this.init(options);\n  }\n\n  /* eslint no-param-reassign: 0 */\n  init(options = {}) {\n    if (!options.interpolation) options.interpolation = { escapeValue: true };\n\n    const iOpts = options.interpolation;\n\n    this.escape = iOpts.escape !== undefined ? iOpts.escape : utils.escape;\n    this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;\n    this.useRawValueToEscape =\n      iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;\n\n    this.prefix = iOpts.prefix ? utils.regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';\n    this.suffix = iOpts.suffix ? utils.regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';\n\n    this.formatSeparator = iOpts.formatSeparator\n      ? iOpts.formatSeparator\n      : iOpts.formatSeparator || ',';\n\n    this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';\n    this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';\n\n    this.nestingPrefix = iOpts.nestingPrefix\n      ? utils.regexEscape(iOpts.nestingPrefix)\n      : iOpts.nestingPrefixEscaped || utils.regexEscape('$t(');\n    this.nestingSuffix = iOpts.nestingSuffix\n      ? utils.regexEscape(iOpts.nestingSuffix)\n      : iOpts.nestingSuffixEscaped || utils.regexEscape(')');\n\n    this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator\n      ? iOpts.nestingOptionsSeparator\n      : iOpts.nestingOptionsSeparator || ',';\n\n    this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;\n\n    this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;\n\n    // the regexp\n    this.resetRegExp();\n  }\n\n  reset() {\n    if (this.options) this.init(this.options);\n  }\n\n  resetRegExp() {\n    // the regexp\n    const regexpStr = `${this.prefix}(.+?)${this.suffix}`;\n    this.regexp = new RegExp(regexpStr, 'g');\n\n    const regexpUnescapeStr = `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${\n      this.suffix\n    }`;\n    this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');\n\n    const nestingRegexpStr = `${this.nestingPrefix}(.+?)${this.nestingSuffix}`;\n    this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');\n  }\n\n  interpolate(str, data, lng, options) {\n    let match;\n    let value;\n    let replaces;\n\n    const defaultData =\n      (this.options && this.options.interpolation && this.options.interpolation.defaultVariables) ||\n      {};\n\n    function regexSafe(val) {\n      return val.replace(/\\$/g, '$$$$');\n    }\n\n    const handleFormat = key => {\n      if (key.indexOf(this.formatSeparator) < 0) {\n        const path = utils.getPathWithDefaults(data, defaultData, key);\n        return this.alwaysFormat\n          ? this.format(path, undefined, lng, { ...options, ...data, interpolationkey: key })\n          : path;\n      }\n\n      const p = key.split(this.formatSeparator);\n      const k = p.shift().trim();\n      const f = p.join(this.formatSeparator).trim();\n\n      return this.format(utils.getPathWithDefaults(data, defaultData, k), f, lng, {\n        ...options,\n        ...data,\n        interpolationkey: k,\n      });\n    };\n\n    this.resetRegExp();\n\n    const missingInterpolationHandler =\n      (options && options.missingInterpolationHandler) || this.options.missingInterpolationHandler;\n\n    const skipOnVariables =\n      (options && options.interpolation && options.interpolation.skipOnVariables) ||\n      this.options.interpolation.skipOnVariables;\n\n    const todos = [\n      {\n        // unescape if has unescapePrefix/Suffix\n        regex: this.regexpUnescape,\n        safeValue: val => regexSafe(val),\n      },\n      {\n        // regular escape on demand\n        regex: this.regexp,\n        safeValue: val => (this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)),\n      },\n    ];\n    todos.forEach(todo => {\n      replaces = 0;\n      /* eslint no-cond-assign: 0 */\n      while ((match = todo.regex.exec(str))) {\n        value = handleFormat(match[1].trim());\n        if (value === undefined) {\n          if (typeof missingInterpolationHandler === 'function') {\n            const temp = missingInterpolationHandler(str, match, options);\n            value = typeof temp === 'string' ? temp : '';\n          } else if (skipOnVariables) {\n            value = match[0];\n            continue; // this makes sure it continues to detect others\n          } else {\n            this.logger.warn(`missed to pass in variable ${match[1]} for interpolating ${str}`);\n            value = '';\n          }\n        } else if (typeof value !== 'string' && !this.useRawValueToEscape) {\n          value = utils.makeString(value);\n        }\n        const safeValue = todo.safeValue(value);\n        str = str.replace(match[0], safeValue);\n        if (skipOnVariables) {\n          todo.regex.lastIndex += safeValue.length;\n          todo.regex.lastIndex -= match[0].length;\n        } else {\n          todo.regex.lastIndex = 0;\n        }\n        replaces++;\n        if (replaces >= this.maxReplaces) {\n          break;\n        }\n      }\n    });\n    return str;\n  }\n\n  nest(str, fc, options = {}) {\n    let match;\n    let value;\n\n    let clonedOptions = { ...options };\n    clonedOptions.applyPostProcessor = false; // avoid post processing on nested lookup\n    delete clonedOptions.defaultValue; // assert we do not get a endless loop on interpolating defaultValue again and again\n\n    // if value is something like \"myKey\": \"lorem $(anotherKey, { \"count\": {{aValueInOptions}} })\"\n    function handleHasOptions(key, inheritedOptions) {\n      const sep = this.nestingOptionsSeparator;\n      if (key.indexOf(sep) < 0) return key;\n\n      const c = key.split(new RegExp(`${sep}[ ]*{`));\n\n      let optionsString = `{${c[1]}`;\n      key = c[0];\n      optionsString = this.interpolate(optionsString, clonedOptions);\n      optionsString = optionsString.replace(/'/g, '\"');\n\n      try {\n        clonedOptions = JSON.parse(optionsString);\n\n        if (inheritedOptions) clonedOptions = { ...inheritedOptions, ...clonedOptions };\n      } catch (e) {\n        this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);\n        return `${key}${sep}${optionsString}`;\n      }\n\n      // assert we do not get a endless loop on interpolating defaultValue again and again\n      delete clonedOptions.defaultValue;\n      return key;\n    }\n\n    // regular escape on demand\n    while ((match = this.nestingRegexp.exec(str))) {\n      let formatters = [];\n\n      /**\n       * If there is more than one parameter (contains the format separator). E.g.:\n       *   - t(a, b)\n       *   - t(a, b, c)\n       *\n       * And those parameters are not dynamic values (parameters do not include curly braces). E.g.:\n       *   - Not t(a, { \"key\": \"{{variable}}\" })\n       *   - Not t(a, b, {\"keyA\": \"valueA\", \"keyB\": \"valueB\"})\n       */\n      let doReduce = false;\n      if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {\n        const r = match[1].split(this.formatSeparator).map(elem => elem.trim());\n        match[1] = r.shift();\n        formatters = r;\n        doReduce = true;\n      }\n\n      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);\n\n      // is only the nesting key (key1 = '$(key2)') return the value without stringify\n      if (value && match[0] === str && typeof value !== 'string') return value;\n\n      // no string to include or empty\n      if (typeof value !== 'string') value = utils.makeString(value);\n      if (!value) {\n        this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);\n        value = '';\n      }\n\n      if (doReduce) {\n        value = formatters.reduce(\n          /* eslint-disable-line no-loop-func:0 */\n          (v, f) =>\n            this.format(v, f, options.lng, { ...options, interpolationkey: match[1].trim() }),\n          value.trim(),\n        );\n      }\n\n      // Nested keys should not be escaped by default #854\n      // value = this.escapeValue ? regexSafe(utils.escape(value)) : regexSafe(value);\n      str = str.replace(match[0], value);\n      this.regexp.lastIndex = 0;\n    }\n    return str;\n  }\n}\n\nexport default Interpolator;\n","import * as utils from './utils.js';\nimport baseLogger from './logger.js';\nimport EventEmitter from './EventEmitter.js';\n\nfunction remove(arr, what) {\n  let found = arr.indexOf(what);\n\n  while (found !== -1) {\n    arr.splice(found, 1);\n    found = arr.indexOf(what);\n  }\n}\n\nclass Connector extends EventEmitter {\n  constructor(backend, store, services, options = {}) {\n    super();\n    if (utils.isIE10) {\n      EventEmitter.call(this); // <=IE10 fix (unable to call parent constructor)\n    }\n\n    this.backend = backend;\n    this.store = store;\n    this.services = services;\n    this.languageUtils = services.languageUtils;\n    this.options = options;\n    this.logger = baseLogger.create('backendConnector');\n\n    this.state = {};\n    this.queue = [];\n\n    if (this.backend && this.backend.init) {\n      this.backend.init(services, options.backend, options);\n    }\n  }\n\n  queueLoad(languages, namespaces, options, callback) {\n    // find what needs to be loaded\n    const toLoad = [];\n    const pending = [];\n    const toLoadLanguages = [];\n    const toLoadNamespaces = [];\n\n    languages.forEach(lng => {\n      let hasAllNamespaces = true;\n\n      namespaces.forEach(ns => {\n        const name = `${lng}|${ns}`;\n\n        if (!options.reload && this.store.hasResourceBundle(lng, ns)) {\n          this.state[name] = 2; // loaded\n        } else if (this.state[name] < 0) {\n          // nothing to do for err\n        } else if (this.state[name] === 1) {\n          if (pending.indexOf(name) < 0) pending.push(name);\n        } else {\n          this.state[name] = 1; // pending\n\n          hasAllNamespaces = false;\n\n          if (pending.indexOf(name) < 0) pending.push(name);\n          if (toLoad.indexOf(name) < 0) toLoad.push(name);\n          if (toLoadNamespaces.indexOf(ns) < 0) toLoadNamespaces.push(ns);\n        }\n      });\n\n      if (!hasAllNamespaces) toLoadLanguages.push(lng);\n    });\n\n    if (toLoad.length || pending.length) {\n      this.queue.push({\n        pending,\n        loaded: {},\n        errors: [],\n        callback,\n      });\n    }\n\n    return {\n      toLoad,\n      pending,\n      toLoadLanguages,\n      toLoadNamespaces,\n    };\n  }\n\n  loaded(name, err, data) {\n    const s = name.split('|');\n    const lng = s[0];\n    const ns = s[1];\n\n    if (err) this.emit('failedLoading', lng, ns, err);\n\n    if (data) {\n      this.store.addResourceBundle(lng, ns, data);\n    }\n\n    // set loaded\n    this.state[name] = err ? -1 : 2;\n\n    // consolidated loading done in this run - only emit once for a loaded namespace\n    const loaded = {};\n\n    // callback if ready\n    this.queue.forEach(q => {\n      utils.pushPath(q.loaded, [lng], ns);\n      remove(q.pending, name);\n\n      if (err) q.errors.push(err);\n\n      if (q.pending.length === 0 && !q.done) {\n        // only do once per loaded -> this.emit('loaded', q.loaded);\n        Object.keys(q.loaded).forEach(l => {\n          if (!loaded[l]) loaded[l] = [];\n          if (q.loaded[l].length) {\n            q.loaded[l].forEach(ns => {\n              if (loaded[l].indexOf(ns) < 0) loaded[l].push(ns);\n            });\n          }\n        });\n\n        /* eslint no-param-reassign: 0 */\n        q.done = true;\n        if (q.errors.length) {\n          q.callback(q.errors);\n        } else {\n          q.callback();\n        }\n      }\n    });\n\n    // emit consolidated loaded event\n    this.emit('loaded', loaded);\n\n    // remove done load requests\n    this.queue = this.queue.filter(q => !q.done);\n  }\n\n  read(lng, ns, fcName, tried = 0, wait = 350, callback) {\n    if (!lng.length) return callback(null, {}); // noting to load\n\n    return this.backend[fcName](lng, ns, (err, data) => {\n      if (err && data /* = retryFlag */ && tried < 5) {\n        setTimeout(() => {\n          this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);\n        }, wait);\n        return;\n      }\n      callback(err, data);\n    });\n  }\n\n  /* eslint consistent-return: 0 */\n  prepareLoading(languages, namespaces, options = {}, callback) {\n    if (!this.backend) {\n      this.logger.warn('No backend was added via i18next.use. Will not load resources.');\n      return callback && callback();\n    }\n\n    if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);\n    if (typeof namespaces === 'string') namespaces = [namespaces];\n\n    const toLoad = this.queueLoad(languages, namespaces, options, callback);\n    if (!toLoad.toLoad.length) {\n      if (!toLoad.pending.length) callback(); // nothing to load and no pendings...callback now\n      return null; // pendings will trigger callback\n    }\n\n    toLoad.toLoad.forEach(name => {\n      this.loadOne(name);\n    });\n  }\n\n  load(languages, namespaces, callback) {\n    this.prepareLoading(languages, namespaces, {}, callback);\n  }\n\n  reload(languages, namespaces, callback) {\n    this.prepareLoading(languages, namespaces, { reload: true }, callback);\n  }\n\n  loadOne(name, prefix = '') {\n    const s = name.split('|');\n    const lng = s[0];\n    const ns = s[1];\n\n    this.read(lng, ns, 'read', undefined, undefined, (err, data) => {\n      if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);\n      if (!err && data)\n        this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);\n\n      this.loaded(name, err, data);\n    });\n  }\n\n  saveMissing(languages, namespace, key, fallbackValue, isUpdate, options = {}) {\n    if (\n      this.services.utils &&\n      this.services.utils.hasLoadedNamespace &&\n      !this.services.utils.hasLoadedNamespace(namespace)\n    ) {\n      this.logger.warn(\n        `did not save key \"${key}\" as the namespace \"${namespace}\" was not yet loaded`,\n        'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!',\n      );\n      return;\n    }\n\n    // ignore non valid keys\n    if (key === undefined || key === null || key === '') return;\n\n    if (this.backend && this.backend.create) {\n      this.backend.create(languages, namespace, key, fallbackValue, null /* unused callback */, {\n        ...options,\n        isUpdate,\n      });\n    }\n\n    // write to store to avoid resending\n    if (!languages || !languages[0]) return;\n    this.store.addResource(languages[0], namespace, key, fallbackValue);\n  }\n}\n\nexport default Connector;\n","export function get() {\n  return {\n    debug: false,\n    initImmediate: true,\n\n    ns: ['translation'],\n    defaultNS: ['translation'],\n    fallbackLng: ['dev'],\n    fallbackNS: false, // string or array of namespaces\n\n    // temporal backwards compatibility WHITELIST REMOVAL\n    whitelist: false, // array with supported languages\n    nonExplicitWhitelist: false,\n    // end temporal backwards compatibility WHITELIST REMOVAL\n\n    supportedLngs: false, // array with supported languages\n    nonExplicitSupportedLngs: false,\n    load: 'all', // | currentOnly | languageOnly\n    preload: false, // array with preload languages\n\n    simplifyPluralSuffix: true,\n    keySeparator: '.',\n    nsSeparator: ':',\n    pluralSeparator: '_',\n    contextSeparator: '_',\n\n    partialBundledLanguages: false, // allow bundling certain languages that are not remotely fetched\n    saveMissing: false, // enable to send missing values\n    updateMissing: false, // enable to update default values if different from translated value (only useful on initial development, or when keeping code as source of truth)\n    saveMissingTo: 'fallback', // 'current' || 'all'\n    saveMissingPlurals: true, // will save all forms not only singular key\n    missingKeyHandler: false, // function(lng, ns, key, fallbackValue) -> override if prefer on handling\n    missingInterpolationHandler: false, // function(str, match)\n\n    postProcess: false, // string or array of postProcessor names\n    postProcessPassResolved: false, // pass resolved object into 'options.i18nResolved' for postprocessor\n    returnNull: true, // allows null value as valid translation\n    returnEmptyString: true, // allows empty string value as valid translation\n    returnObjects: false,\n    joinArrays: false, // or string to join array\n    returnedObjectHandler: false, // function(key, value, options) triggered if key returns object but returnObjects is set to false\n    parseMissingKeyHandler: false, // function(key) parsed a key that was not found in t() before returning\n    appendNamespaceToMissingKey: false,\n    appendNamespaceToCIMode: false,\n    overloadTranslationOptionHandler: function handle(args) {\n      var ret = {};\n      if (typeof args[1] === 'object') ret = args[1];\n      if (typeof args[1] === 'string') ret.defaultValue = args[1];\n      if (typeof args[2] === 'string') ret.tDescription = args[2];\n      if (typeof args[2] === 'object' || typeof args[3] === 'object') {\n        var options = args[3] || args[2];\n        Object.keys(options).forEach(function(key) {\n          ret[key] = options[key];\n        });\n      }\n      return ret;\n    },\n    interpolation: {\n      escapeValue: true,\n      format: (value, format, lng, options) => value,\n      prefix: '{{',\n      suffix: '}}',\n      formatSeparator: ',',\n      // prefixEscaped: '{{',\n      // suffixEscaped: '}}',\n      // unescapeSuffix: '',\n      unescapePrefix: '-',\n\n      nestingPrefix: '$t(',\n      nestingSuffix: ')',\n      nestingOptionsSeparator: ',',\n      // nestingPrefixEscaped: '$t(',\n      // nestingSuffixEscaped: ')',\n      // defaultVariables: undefined // object that can have values to interpolate on - extends passed in interpolation data\n      maxReplaces: 1000, // max replaces to prevent endless loop\n      skipOnVariables: false,\n    },\n  };\n}\n\n/* eslint no-param-reassign: 0 */\nexport function transformOptions(options) {\n  // create namespace object if namespace is passed in as string\n  if (typeof options.ns === 'string') options.ns = [options.ns];\n  if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];\n  if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];\n\n  // temporal backwards compatibility WHITELIST REMOVAL\n  if (options.whitelist) {\n    if (options.whitelist && options.whitelist.indexOf('cimode') < 0) {\n      options.whitelist = options.whitelist.concat(['cimode']);\n    }\n\n    options.supportedLngs = options.whitelist;\n  }\n\n  if (options.nonExplicitWhitelist) {\n    options.nonExplicitSupportedLngs = options.nonExplicitWhitelist;\n  }\n  // end temporal backwards compatibility WHITELIST REMOVAL\n\n  // extend supportedLngs with cimode\n  if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {\n    options.supportedLngs = options.supportedLngs.concat(['cimode']);\n  }\n\n  return options;\n}\n","import baseLogger from './logger.js';\nimport EventEmitter from './EventEmitter.js';\nimport ResourceStore from './ResourceStore.js';\nimport Translator from './Translator.js';\nimport LanguageUtils from './LanguageUtils.js';\nimport PluralResolver from './PluralResolver.js';\nimport Interpolator from './Interpolator.js';\nimport BackendConnector from './BackendConnector.js';\nimport { get as getDefaults, transformOptions } from './defaults.js';\nimport postProcessor from './postProcessor.js';\nimport { defer, isIE10 } from './utils.js';\n\nfunction noop() { }\n\nclass I18n extends EventEmitter {\n  constructor(options = {}, callback) {\n    super();\n    if (isIE10) {\n      EventEmitter.call(this) // <=IE10 fix (unable to call parent constructor)\n    }\n\n    this.options = transformOptions(options);\n    this.services = {};\n    this.logger = baseLogger;\n    this.modules = { external: [] };\n\n    if (callback && !this.isInitialized && !options.isClone) {\n      // https://github.com/i18next/i18next/issues/879\n      if (!this.options.initImmediate) {\n        this.init(options, callback);\n        return this;\n      }\n      setTimeout(() => {\n        this.init(options, callback);\n      }, 0);\n    }\n  }\n\n  init(options = {}, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    // temporal backwards compatibility WHITELIST REMOVAL\n    if (options.whitelist && !options.supportedLngs) {\n      this.logger.deprecate('whitelist', 'option \"whitelist\" will be renamed to \"supportedLngs\" in the next major - please make sure to rename this option asap.');\n    }\n    if (options.nonExplicitWhitelist && !options.nonExplicitSupportedLngs) {\n      this.logger.deprecate('whitelist', 'options \"nonExplicitWhitelist\" will be renamed to \"nonExplicitSupportedLngs\" in the next major - please make sure to rename this option asap.');\n    }\n    // end temporal backwards compatibility WHITELIST REMOVAL\n\n\n    this.options = { ...getDefaults(), ...this.options, ...transformOptions(options) };\n\n    this.format = this.options.interpolation.format;\n    if (!callback) callback = noop;\n\n    function createClassOnDemand(ClassOrObject) {\n      if (!ClassOrObject) return null;\n      if (typeof ClassOrObject === 'function') return new ClassOrObject();\n      return ClassOrObject;\n    }\n\n    // init services\n    if (!this.options.isClone) {\n      if (this.modules.logger) {\n        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);\n      } else {\n        baseLogger.init(null, this.options);\n      }\n\n      const lu = new LanguageUtils(this.options);\n      this.store = new ResourceStore(this.options.resources, this.options);\n\n      const s = this.services;\n      s.logger = baseLogger;\n      s.resourceStore = this.store;\n      s.languageUtils = lu;\n      s.pluralResolver = new PluralResolver(lu, {\n        prepend: this.options.pluralSeparator,\n        compatibilityJSON: this.options.compatibilityJSON,\n        simplifyPluralSuffix: this.options.simplifyPluralSuffix,\n      });\n      s.interpolator = new Interpolator(this.options);\n      s.utils = {\n        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)\n      }\n\n      s.backendConnector = new BackendConnector(\n        createClassOnDemand(this.modules.backend),\n        s.resourceStore,\n        s,\n        this.options,\n      );\n      // pipe events from backendConnector\n      s.backendConnector.on('*', (event, ...args) => {\n        this.emit(event, ...args);\n      });\n\n      if (this.modules.languageDetector) {\n        s.languageDetector = createClassOnDemand(this.modules.languageDetector);\n        s.languageDetector.init(s, this.options.detection, this.options);\n      }\n\n      if (this.modules.i18nFormat) {\n        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);\n        if (s.i18nFormat.init) s.i18nFormat.init(this);\n      }\n\n      this.translator = new Translator(this.services, this.options);\n      // pipe events from translator\n      this.translator.on('*', (event, ...args) => {\n        this.emit(event, ...args);\n      });\n\n      this.modules.external.forEach(m => {\n        if (m.init) m.init(this);\n      });\n    }\n\n    if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {\n      const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng)\n      if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0]\n    }\n    if (!this.services.languageDetector && !this.options.lng) {\n      this.logger.warn('init: no languageDetector is used and no lng is defined');\n    }\n\n    // append api\n    const storeApi = [\n      'getResource',\n      'hasResourceBundle',\n      'getResourceBundle',\n      'getDataByLanguage',\n    ];\n    storeApi.forEach(fcName => {\n      this[fcName] = (...args) => this.store[fcName](...args);\n    });\n    const storeApiChained = [\n      'addResource',\n      'addResources',\n      'addResourceBundle',\n      'removeResourceBundle',\n    ];\n    storeApiChained.forEach(fcName => {\n      this[fcName] = (...args) => {\n        this.store[fcName](...args);\n        return this;\n      };\n    });\n\n    const deferred = defer();\n\n    const load = () => {\n      const finish = (err, t) => {\n        if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn('init: i18next is already initialized. You should call init just once!');\n        this.isInitialized = true;\n        if (!this.options.isClone) this.logger.log('initialized', this.options);\n        this.emit('initialized', this.options);\n\n        deferred.resolve(t); // not rejecting on err (as err is only a loading translation failed warning)\n        callback(err, t);\n      };\n      // fix for use cases when calling changeLanguage before finished to initialized (i.e. https://github.com/i18next/i18next/issues/1552)\n      if (this.languages && this.options.compatibilityAPI !== 'v1' && !this.isInitialized) return finish(null, this.t.bind(this));\n      this.changeLanguage(this.options.lng, finish);\n    };\n\n    if (this.options.resources || !this.options.initImmediate) {\n      load();\n    } else {\n      setTimeout(load, 0);\n    }\n\n    return deferred;\n  }\n\n  /* eslint consistent-return: 0 */\n  loadResources(language, callback = noop) {\n    let usedCallback = callback;\n    let usedLng = typeof language === 'string' ? language : this.language;\n    if (typeof language === 'function') usedCallback = language;\n\n    if (!this.options.resources || this.options.partialBundledLanguages) {\n      if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback(); // avoid loading resources for cimode\n\n      const toLoad = [];\n\n      const append = lng => {\n        if (!lng) return;\n        const lngs = this.services.languageUtils.toResolveHierarchy(lng);\n        lngs.forEach(l => {\n          if (toLoad.indexOf(l) < 0) toLoad.push(l);\n        });\n      };\n\n      if (!usedLng) {\n        // at least load fallbacks in this case\n        const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);\n        fallbacks.forEach(l => append(l));\n      } else {\n        append(usedLng);\n      }\n\n      if (this.options.preload) {\n        this.options.preload.forEach(l => append(l));\n      }\n\n      this.services.backendConnector.load(toLoad, this.options.ns, usedCallback);\n    } else {\n      usedCallback(null);\n    }\n  }\n\n  reloadResources(lngs, ns, callback) {\n    const deferred = defer();\n    if (!lngs) lngs = this.languages;\n    if (!ns) ns = this.options.ns;\n    if (!callback) callback = noop;\n    this.services.backendConnector.reload(lngs, ns, err => {\n      deferred.resolve(); // not rejecting on err (as err is only a loading translation failed warning)\n      callback(err);\n    });\n    return deferred;\n  }\n\n  use(module) {\n    if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()')\n    if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()')\n\n    if (module.type === 'backend') {\n      this.modules.backend = module;\n    }\n\n    if (module.type === 'logger' || (module.log && module.warn && module.error)) {\n      this.modules.logger = module;\n    }\n\n    if (module.type === 'languageDetector') {\n      this.modules.languageDetector = module;\n    }\n\n    if (module.type === 'i18nFormat') {\n      this.modules.i18nFormat = module;\n    }\n\n    if (module.type === 'postProcessor') {\n      postProcessor.addPostProcessor(module);\n    }\n\n    if (module.type === '3rdParty') {\n      this.modules.external.push(module);\n    }\n\n    return this;\n  }\n\n  changeLanguage(lng, callback) {\n    this.isLanguageChangingTo = lng;\n    const deferred = defer();\n    this.emit('languageChanging', lng);\n\n    const done = (err, l) => {\n      if (l) {\n        this.language = l;\n        this.languages = this.services.languageUtils.toResolveHierarchy(l);\n        this.translator.changeLanguage(l);\n        this.isLanguageChangingTo = undefined;\n        this.emit('languageChanged', l);\n        this.logger.log('languageChanged', l);\n      } else {\n        this.isLanguageChangingTo = undefined;\n      }\n\n      deferred.resolve((...args) => this.t(...args));\n      if (callback) callback(err, (...args) => this.t(...args));\n    };\n\n    const setLng = lngs => {\n      // if detected lng is falsy, set it to empty array, to make sure at least the fallbackLng will be used\n      if (!lng && !lngs && this.services.languageDetector) lngs = [];\n      // depending on API in detector lng can be a string (old) or an array of languages ordered in priority\n      const l = typeof lngs === 'string' ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);\n\n      if (l) {\n        if (!this.language) {\n          this.language = l;\n          this.languages = this.services.languageUtils.toResolveHierarchy(l);\n        }\n        if (!this.translator.language) this.translator.changeLanguage(l);\n\n        if (this.services.languageDetector) this.services.languageDetector.cacheUserLanguage(l);\n      }\n\n      this.loadResources(l, err => {\n        done(err, l);\n      });\n    };\n\n    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {\n      setLng(this.services.languageDetector.detect());\n    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {\n      this.services.languageDetector.detect(setLng);\n    } else {\n      setLng(lng);\n    }\n\n    return deferred;\n  }\n\n  getFixedT(lng, ns) {\n    const fixedT = (key, opts, ...rest) => {\n      let options;\n      if (typeof opts !== 'object') {\n        options = this.options.overloadTranslationOptionHandler([key, opts].concat(rest));\n      } else {\n        options = { ...opts };\n      }\n\n      options.lng = options.lng || fixedT.lng;\n      options.lngs = options.lngs || fixedT.lngs;\n      options.ns = options.ns || fixedT.ns;\n      return this.t(key, options);\n    };\n    if (typeof lng === 'string') {\n      fixedT.lng = lng;\n    } else {\n      fixedT.lngs = lng;\n    }\n    fixedT.ns = ns;\n    return fixedT;\n  }\n\n  t(...args) {\n    return this.translator && this.translator.translate(...args);\n  }\n\n  exists(...args) {\n    return this.translator && this.translator.exists(...args);\n  }\n\n  setDefaultNamespace(ns) {\n    this.options.defaultNS = ns;\n  }\n\n  hasLoadedNamespace(ns, options = {}) {\n    if (!this.isInitialized) {\n      this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);\n      return false;\n    }\n    if (!this.languages || !this.languages.length) {\n      this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);\n      return false;\n    }\n\n    const lng = this.languages[0];\n    const fallbackLng = this.options ? this.options.fallbackLng : false;\n    const lastLng = this.languages[this.languages.length - 1];\n\n    // we're in cimode so this shall pass\n    if (lng.toLowerCase() === 'cimode') return true;\n\n    const loadNotPending = (l, n) => {\n      const loadState = this.services.backendConnector.state[`${l}|${n}`];\n      return loadState === -1 || loadState === 2;\n    };\n\n    // optional injected check\n    if (options.precheck) {\n      const preResult = options.precheck(this, loadNotPending);\n      if (preResult !== undefined) return preResult;\n    }\n\n    // loaded -> SUCCESS\n    if (this.hasResourceBundle(lng, ns)) return true;\n\n    // were not loading at all -> SEMI SUCCESS\n    if (!this.services.backendConnector.backend) return true;\n\n    // failed loading ns - but at least fallback is not pending -> SEMI SUCCESS\n    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;\n\n    return false;\n  }\n\n  loadNamespaces(ns, callback) {\n    const deferred = defer();\n\n    if (!this.options.ns) {\n      callback && callback();\n      return Promise.resolve();\n    }\n    if (typeof ns === 'string') ns = [ns];\n\n    ns.forEach(n => {\n      if (this.options.ns.indexOf(n) < 0) this.options.ns.push(n);\n    });\n\n    this.loadResources(err => {\n      deferred.resolve();\n      if (callback) callback(err);\n    });\n\n    return deferred;\n  }\n\n  loadLanguages(lngs, callback) {\n    const deferred = defer();\n\n    if (typeof lngs === 'string') lngs = [lngs];\n    const preloaded = this.options.preload || [];\n\n    const newLngs = lngs.filter(lng => preloaded.indexOf(lng) < 0);\n    // Exit early if all given languages are already preloaded\n    if (!newLngs.length) {\n      if (callback) callback();\n      return Promise.resolve();\n    }\n\n    this.options.preload = preloaded.concat(newLngs);\n    this.loadResources(err => {\n      deferred.resolve();\n      if (callback) callback(err);\n    });\n\n    return deferred;\n  }\n\n  dir(lng) {\n    if (!lng) lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;\n    if (!lng) return 'rtl';\n\n    const rtlLngs = [\n      'ar',\n      'shu',\n      'sqr',\n      'ssh',\n      'xaa',\n      'yhd',\n      'yud',\n      'aao',\n      'abh',\n      'abv',\n      'acm',\n      'acq',\n      'acw',\n      'acx',\n      'acy',\n      'adf',\n      'ads',\n      'aeb',\n      'aec',\n      'afb',\n      'ajp',\n      'apc',\n      'apd',\n      'arb',\n      'arq',\n      'ars',\n      'ary',\n      'arz',\n      'auz',\n      'avl',\n      'ayh',\n      'ayl',\n      'ayn',\n      'ayp',\n      'bbz',\n      'pga',\n      'he',\n      'iw',\n      'ps',\n      'pbt',\n      'pbu',\n      'pst',\n      'prp',\n      'prd',\n      'ug',\n      'ur',\n      'ydd',\n      'yds',\n      'yih',\n      'ji',\n      'yi',\n      'hbo',\n      'men',\n      'xmn',\n      'fa',\n      'jpr',\n      'peo',\n      'pes',\n      'prs',\n      'dv',\n      'sam',\n    ];\n\n    return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0\n      ? 'rtl'\n      : 'ltr';\n  }\n\n  /* eslint class-methods-use-this: 0 */\n  createInstance(options = {}, callback) {\n    return new I18n(options, callback);\n  }\n\n  cloneInstance(options = {}, callback = noop) {\n    const mergedOptions = { ...this.options, ...options, ...{ isClone: true } };\n    const clone = new I18n(mergedOptions);\n    const membersToCopy = ['store', 'services', 'language'];\n    membersToCopy.forEach(m => {\n      clone[m] = this[m];\n    });\n    clone.services = { ...this.services };\n    clone.services.utils = {\n      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)\n    };\n    clone.translator = new Translator(clone.services, clone.options);\n    clone.translator.on('*', (event, ...args) => {\n      clone.emit(event, ...args);\n    });\n    clone.init(mergedOptions, callback);\n    clone.translator.options = clone.options; // sync options\n    clone.translator.backendConnector.services.utils = {\n      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)\n    };\n\n    return clone;\n  }\n\n  toJSON() {\n    return {\n      options: this.options,\n      store: this.store,\n      language: this.language,\n      languages: this.languages\n    };\n  }\n}\n\nexport default new I18n();\n","/* eslint-disable\n    @typescript-eslint/no-namespace,\n */\n\nimport {\n    default as i18next,\n    i18n as i18nextInstance,\n    FallbackLngObjList as i18nextFallbackLngObjList,\n    FallbackLng as i18nextFallbackLng,\n    FormatFunction as i18nextFormatFunction,\n    InterpolationOptions as i18nextInterpolationOptions,\n    ReactOptions as i18nextReactOptions,\n    InitOptions as i18nextInitOptions,\n    TOptionsBase as i18nextTOptionsBase,\n    StringMap as i18nextStringMap,\n    TOptions as i18nextTOptions,\n    Callback as i18nextCallback,\n    ExistsFunction as i18nextExistsFunction,\n    WithT as i18nextWithT,\n    TFunctionResult as i18nextTFunctionResult,\n    TFunctionKeys as i18nextTFunctionKeys,\n    TFunction as i18nextTFunction,\n    Resource as i18nextResource,\n    ResourceLanguage as i18nextResourceLanguage,\n    ResourceKey as i18nextResourceKey,\n    Interpolator as i18nextInterpolator,\n    ResourceStore as i18nextResourceStore,\n    Services as i18nextServices,\n    Module as i18nextModule,\n    CallbackError as i18nextCallbackError,\n    ReadCallback as i18nextReadCallback,\n    MultiReadCallback as i18nextMultiReadCallback,\n    BackendModule as i18nextBackendModule,\n    LanguageDetectorModule as i18nextLanguageDetectorModule,\n    LanguageDetectorAsyncModule as i18nextLanguageDetectorAsyncModule,\n    PostProcessorModule as i18nextPostProcessorModule,\n    LoggerModule as i18nextLoggerModule,\n    I18nFormatModule as i18nextI18nFormatModule,\n    ThirdPartyModule as i18nextThirdPartyModule,\n    Modules as i18nextModules,\n    Newable as i18nextNewable,\n} from 'i18next';\n\nconst i18n: i18n.i18n = i18next;\n\ndeclare namespace i18n {\n    export type i18n = i18nextInstance;\n    export type FallbackLngObjList = i18nextFallbackLngObjList;\n    export type FallbackLng = i18nextFallbackLng;\n    export type FormatFunction = i18nextFormatFunction;\n    export type InterpolationOptions = i18nextInterpolationOptions;\n    export type ReactOptions = i18nextReactOptions;\n    export type InitOptions = i18nextInitOptions;\n    export type TOptionsBase = i18nextTOptionsBase;\n    export type StringMap = i18nextStringMap;\n    export type TOptions<T extends Record<string, unknown> = StringMap> = i18nextTOptions<T>;\n    export type Callback = i18nextCallback;\n    export type ExistsFunction<K extends string = string, T extends Record<string, unknown> = StringMap> = i18nextExistsFunction<K, T>;\n    export type WithT = i18nextWithT;\n    export type TFunctionResult = i18nextTFunctionResult;\n    export type TFunctionKeys = i18nextTFunctionKeys;\n    export type TFunction = i18nextTFunction;\n    export type Resource = i18nextResource;\n    export type ResourceLanguage = i18nextResourceLanguage;\n    export type ResourceKey = i18nextResourceKey;\n    export type Interpolator = i18nextInterpolator;\n    export type ResourceStore = i18nextResourceStore;\n    export type Services = i18nextServices;\n    export type Module = i18nextModule;\n    export type CallbackError = i18nextCallbackError;\n    export type ReadCallback = i18nextReadCallback;\n    export type MultiReadCallback = i18nextMultiReadCallback;\n    export type BackendModule<T = Record<string, unknown>> = i18nextBackendModule<T>;\n    export type LanguageDetectorModule = i18nextLanguageDetectorModule;\n    export type LanguageDetectorAsyncModule = i18nextLanguageDetectorAsyncModule;\n    export type PostProcessorModule = i18nextPostProcessorModule;\n    export type LoggerModule = i18nextLoggerModule;\n    export type I18nFormatModule = i18nextI18nFormatModule;\n    export type ThirdPartyModule = i18nextThirdPartyModule;\n    export type Modules = i18nextModules;\n    export type Newable<T> = i18nextNewable<T>;\n}\n\nexport { i18n };\n","/* eslint-disable\n    @typescript-eslint/no-namespace,\n    @typescript-eslint/no-unused-vars,\n    @typescript-eslint/restrict-plus-operands,\n */\n\nnamespace CDP_DECLARE {\n\n    const enum LOCAL_CODE_BASE {\n        I18N = CDP_KNOWN_MODULE.I18N * LOCAL_CODE_RANGE_GUIDE.FUNCTION,\n    }\n\n    /**\n     * @en Extends error code definitions.\n     * @ja 拡張通エラーコード定義\n     */\n    export enum RESULT_CODE {\n        I18N_DECLARE    = RESULT_CODE_BASE.DECLARE,\n        ERROR_I18N_CORE_LAYER = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.I18N + 1, 'i18next error'),\n    }\n}\n","import { safe } from '@cdp/core-utils';\n\n/** @internal */ const _navigator = safe(globalThis.navigator);\n\n/** @internal */\nexport {\n    _navigator as navigator,\n};\n","/* eslint-disable\n    @typescript-eslint/no-non-null-assertion,\n */\n\nimport { i18n } from '@cdp/extension-i18n';\nimport { isFunction } from '@cdp/core-utils';\nimport { RESULT_CODE, toResult } from '@cdp/result';\nimport { request } from '@cdp/ajax';\nimport { toUrl } from '@cdp/environment';\nimport { I18NOptions } from '../interfaces';\n\n/** @internal */\nconst enum Default {\n    LOAD_PATH = 'res/locales/{{ns}}.{{lng}}.json',\n}\n\n/** @internal */ type FallbackResourceMap = { [lng: string]: string; };\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en The class a simple `i18next` backend built-in plugin. It will load resources from a backend server using the `fetch` API.\n * @ja `fetch` API を用いた `i18next` backend ビルトインプラグインクラス\n *\n * @internal\n */\nexport class AjaxBackend implements i18n.BackendModule<i18n.AjaxBackendOptions> {\n    readonly type = 'backend';\n    static type = 'backend';\n    private _services!: i18n.Services;\n    private _options: i18n.AjaxBackendOptions = {};\n    private _fallbackMap: FallbackResourceMap = {};\n\n///////////////////////////////////////////////////////////////////////\n// implements: i18n.BackendModule<AjaxBackendOptions>\n\n    init(services: i18n.Services, options: i18n.AjaxBackendOptions, initOptions: I18NOptions): void {\n        this._services = services;\n        this._options = Object.assign({ loadPath: Default.LOAD_PATH }, this._options, options);\n        this._fallbackMap = Object.assign(this._fallbackMap, initOptions.fallbackResources);\n    }\n\n    read(language: string, namespace: string, callback: i18n.ReadCallback): void {\n        const lng = this._fallbackMap[language] || language;\n        const loadPath = isFunction(this._options.loadPath) ? this._options.loadPath([lng], [namespace]) : this._options.loadPath;\n        const url = this.resolveUrl(loadPath as string, { lng, ns: namespace });\n        this.loadUrl(url, callback);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// private methods:\n\n    private resolveUrl(loadPath: string, data: { lng: string; ns: string; }): string {\n        return toUrl(this._services.interpolator.interpolate(loadPath, data, undefined!, undefined!));\n    }\n\n    private loadUrl(url: string, callback: (err: i18n.CallbackError | string, data: i18n.ResourceKey | boolean) => void): void {\n        void (async () => {\n            try {\n                const json = await request.json(url, undefined, this._options);\n                callback(null, json);\n            } catch (e) {\n                const result = toResult(e);\n                const msg = `failed loading: ${url}, ${result.message}`;\n                if (RESULT_CODE.ERROR_AJAX_RESPONSE === result.code && result.cause) {\n                    const status: number = result.cause.status;\n                    if (500 <= status && status < 600) {\n                        return callback(msg, true);  // retry\n                    } else if (400 <= status && status < 500) {\n                        return callback(msg, false); // no retry\n                    }\n                }\n                callback(msg, false);\n            }\n        })();\n    }\n}\n","import { i18n } from '@cdp/extension-i18n';\nimport { PlainObject } from '@cdp/core-utils';\nimport {\n    dom as $,\n    DOM,\n} from '@cdp/dom';\nimport './module-extends';\n\n/** @internal extends [[DOM]] instance method */\nfunction extend(domOptions: Required<i18n.DomLocalizerOptions>, i18next: i18n.i18n): void {\n    const {\n        selectorAttr,\n        targetAttr,\n        optionsAttr,\n        useOptionsAttr,\n        parseDefaultValueFromContent,\n        customTagName,\n    } = domOptions;\n\n    const extendDefault = (o: PlainObject, val: string): PlainObject => {\n        if (!parseDefaultValueFromContent) {\n            return o;\n        }\n        return { ...o, ...{ defaultValue: val } };\n    };\n\n    // [prepend]/[append] helper\n    const insert = (method: 'prepend' | 'append', $el: DOM, key: string, opts: i18n.TOptions): void => {\n        const translated = i18next.t(key, extendDefault(opts, $el.html()));\n        if (false === customTagName) {\n            $el[method](translated);\n        } else {\n            const translatedWithWrap = `<${customTagName}>${translated}</${customTagName}>`;\n            const $firstChild = $($el[0].firstElementChild) as DOM;\n            if ($firstChild.is(customTagName)) {\n                $firstChild.replaceWith(translatedWithWrap);\n            } else {\n                $el[method](translatedWithWrap);\n            }\n        }\n    };\n\n    const parse = ($el: DOM, key: string, opts: i18n.TOptions): void => {\n        let attr = 'text';\n\n        if (key.startsWith('[')) {\n            const parts = key.split(']');\n            key  = parts[1].trim();\n            attr = parts[0].substr(1, parts[0].length - 1).trim();\n        }\n\n        if ('html' === attr) {\n            $el.html(i18next.t(key, extendDefault(opts, $el.html())));\n        } else if ('text' === attr) {\n            $el.text(i18next.t<string>(key, extendDefault(opts, $el.text())));\n        } else if ('prepend' === attr) {\n            insert('prepend', $el, key, opts);\n        } else if ('append' === attr) {\n            insert('append', $el, key, opts);\n        } else if (attr.startsWith('data-')) {\n            const dataAttr = attr.substr(('data-').length);\n            const translated = i18next.t(key, extendDefault(opts, $el.data(dataAttr) as string));\n            $el.data(dataAttr, translated);\n            $el.attr(attr, translated);\n        } else {\n            $el.attr(attr, i18next.t<string>(key, extendDefault(opts, $el.attr(attr) as string)));\n        }\n    };\n\n    const localize = ($el: DOM, opts: i18n.TOptions): void => {\n        const key = $el.attr(selectorAttr);\n        if (!key) {\n            return;\n        }\n\n        let $target = $el;\n        const targetSelector = $el.data(targetAttr) as string;\n\n        if (targetSelector) {\n            $target = $el.find(targetSelector);\n        }\n\n        if (!opts && true === useOptionsAttr) {\n            opts = $el.data(optionsAttr) as i18n.TOptions;\n        }\n\n        opts = opts || {};\n\n        for (const part of key.split(';')) {\n            const k = part.trim();\n            if ('' !== k) {\n                parse($target, k, opts);\n            }\n        }\n\n        if (true === useOptionsAttr) {\n            const clone = { ...opts };\n            delete clone.lng;\n            $el.data(optionsAttr, clone);\n        }\n    };\n\n    function handle(this: DOM, opts: i18n.TOptions): DOM {\n        // eslint-disable-next-line no-invalid-this\n        return this.each((index: number, el: HTMLElement) => {\n            const $el = $(el);\n            // localize element itself\n            localize($el, opts);\n            // localize children\n            const $children = $el.find(`[${selectorAttr}]`);\n            $children.each((index: number, el: HTMLElement) => {\n                localize($(el), opts);\n            });\n        });\n    }\n\n    // selector function $(mySelector).localize(opts);\n    $.fn['localize'] = handle;\n}\n\n/**\n * @en `i18next` DOM localizer built-in plugin factory.\n * @ja `i18next` DOM ローカライズビルトインプラグインファクトリーメソッド\n *\n * @internal\n */\nexport function DomLocalizer(domOptions?: i18n.DomLocalizerOptions): i18n.ThirdPartyModule {\n    return {\n        type: '3rdParty',\n        init: extend.bind(\n            null,\n            Object.assign({\n                selectorAttr: 'data-i18n',\n                targetAttr: 'i18n-target',\n                optionsAttr: 'i18n-options',\n                useOptionsAttr: false,\n                parseDefaultValueFromContent: true,\n                customTagName: 'cdp-i18n',\n            }, domOptions)\n        ),\n    };\n}\n","export * from '@cdp/extension-i18n';\nimport { i18n } from '@cdp/extension-i18n';\nimport { RESULT_CODE, makeResult } from '@cdp/result';\nimport {\n    dom as $,\n    DOMSelector,\n    DOMResult,\n} from '@cdp/dom';\nimport { I18NOptions, I18NDetectErrorBehaviour } from './interfaces';\nimport { navigator } from './ssr';\nimport { AjaxBackend, DomLocalizer } from './plugin';\n\n/**\n * @en Translate funcion.\n * @ja 翻訳関数\n */\nexport const t: i18n.TFunction = i18n.t.bind(i18n);\n\n/**\n * @en Initialize `i18next` instance.\n * @ja `i18next` インスタンスの初期化\n *\n * @param options\n *  - `en` init options\n *  - `ja` 初期化オプションを指定\n */\nexport const initializeI18N = (options?: I18NOptions): Promise<i18n.TFunction> => {\n    const opts = Object.assign({ noThrow: true }, options);\n\n    const { namespace, resourcePath: loadPath, dom, noThrow } = opts;\n\n    if (!opts.lng) {\n        opts.lng = navigator.language;\n    }\n\n    if (namespace) {\n        !opts.ns && (opts.ns = namespace);\n        !opts.defaultNS && (opts.defaultNS = namespace);\n    }\n\n    if (loadPath) {\n        opts.backend = Object.assign({ loadPath }, opts.backend);\n    }\n\n    if (opts.backend) {\n        i18n.use(AjaxBackend);\n    }\n\n    i18n.use(DomLocalizer(dom));\n\n    return new Promise((resolve, reject) => {\n        void i18n.init(opts, (error, translator) => {\n            if (error) {\n                const result = makeResult(RESULT_CODE.ERROR_I18N_CORE_LAYER, 'i18n#init() failed.', error);\n                if (noThrow) {\n                    console.warn(result.message, result);\n                } else {\n                    return reject(result);\n                }\n            }\n            resolve(translator);\n        });\n    });\n};\n\n/**\n * @en Get the current detected or set language.\n * @ja 現在設定されている言語を取得\n *\n * @returns `ja-JP`, `ja`\n */\nexport const getLanguage = (): string => {\n    return i18n.language || navigator.language;\n};\n\n/**\n * @en Get an array of `language-codes` that will be used it order to lookup the translation value.\n * @ja 翻訳の検索に使用される `language-codes` リストを取得\n *\n * @see\n *  - https://www.i18next.com/overview/api#languages\n */\nexport const getLanguageList = (): readonly string[] => {\n    return i18n.languages || [navigator.language];\n};\n\n/**\n * @en Changes the language.\n * @ja 言語の切り替え\n */\nexport const changeLanguage = (lng: string, options?: I18NDetectErrorBehaviour): Promise<i18n.TFunction> => {\n    const opts = Object.assign({ noThrow: true }, options);\n    return new Promise((resolve, reject) => {\n        void i18n.changeLanguage(lng, (error, translator) => {\n            if (error) {\n                const result = makeResult(RESULT_CODE.ERROR_I18N_CORE_LAYER, 'i18n#changeLanguate() failed.', error);\n                if (opts.noThrow) {\n                    console.warn(result.message, result);\n                } else {\n                    return reject(result);\n                }\n            }\n            resolve(translator);\n        });\n    });\n};\n\n/**\n * @en DOM localizer method.\n * @ja DOM ローカライズ\n *\n * @param selector\n *  - `en` Object(s) or the selector string which becomes origin of [[DOM]].\n *  - `ja` [[DOM]] のもとになるオブジェクト(群)またはセレクタ文字列\n * @param options\n *  - `en` translation options.\n *  - `ja` 翻訳オプション\n */\nexport const localize = <T extends string | Node>(selector: DOMSelector<T>, options?: i18n.TOptions): DOMResult<T> => {\n    return $(selector).localize(options) as DOMResult<T>;\n};\n","import {\n    Keys,\n    Types,\n    KeyToType,\n    verify,\n    deepEqual,\n    dropUndefined,\n} from '@cdp/core-utils';\nimport { Subscription, EventBroker } from '@cdp/events';\nimport {\n    Cancelable,\n    checkCanceled as cc,\n} from '@cdp/promise';\nimport {\n    StorageDataTypeList,\n    StorageInputDataTypeList,\n    IStorageOptions,\n    IStorageDataOptions,\n    IStorageDataReturnType,\n    IStorageEventCallback,\n    IStorage,\n} from '@cdp/core-storage';\nimport {\n    Serializable,\n    serialize,\n    deserialize,\n} from '@cdp/binary';\n\n/**\n * @en Web storage data type set interface.\n * @ja Web storage に格納可能な型の集合\n */\nexport type WebStorageDataTypeList = StorageDataTypeList & Serializable;\n/** WebStorage I/O options */\nexport type WebStorageOptions<K extends Keys<WebStorageDataTypeList> = Keys<WebStorageDataTypeList>> = IStorageDataOptions<WebStorageDataTypeList, K>;\n/** WebStorage return value */\nexport type WebStorageResult<K extends Keys<WebStorageDataTypeList>> = KeyToType<WebStorageDataTypeList, K>;\n/** WebStorage data type */\nexport type WebStorageDataTypes = Types<WebStorageDataTypeList>;\n/** MemoryStorage return type */\nexport type WebStorageReturnType<D extends WebStorageDataTypes> = IStorageDataReturnType<StorageDataTypeList, D>;\n/** WebStorage input data type */\nexport type WebStorageInputDataTypes = StorageInputDataTypeList<WebStorageDataTypeList>;\n/** WebStorage event callback */\nexport type WebStorageEventCallback = IStorageEventCallback<WebStorageDataTypeList>;\n\n/** @internal */\ninterface WebStorageEvent {\n    '@': [string | null, WebStorageDataTypes | null, WebStorageDataTypes | null];\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Web storage class. This class implements `IStorage` interface by using `window.localStorage`.\n * @ja ウェブストレージクラス. 本クラスは `window.localStorage` を用いて `IStorage` を実装\n */\nexport class WebStorage implements IStorage<WebStorageDataTypeList> {\n\n    /** @internal */\n    private readonly _broker = new EventBroker<WebStorageEvent>();\n    /** @internal */\n    private readonly _storage: Storage;\n\n    /**\n     * constructor\n     *\n     * @param storage\n     *  - `en` Web [[Storage]] instance\n     *  - `ja` Web [[Storage]] インスタンス\n     */\n    constructor(storage: Storage) {\n        verify('instanceOf', Storage, storage);\n        this._storage = storage;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IStorage\n    /**\n     * @en [[IStorage]] kind signature.\n     * @ja [[IStorage]] の種別を表す識別子\n     */\n    get kind(): string {\n        const signature = localStorage === this._storage ? 'local-storage' : 'session-storage';\n        return `web:${signature}`;\n    }\n\n    /**\n     * @en Returns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.\n     * @ja キーに対応する値を取得. 存在しない場合は null を返却\n     *\n     * @param key\n     *  - `en` access key\n     *  - `ja` アクセスキー\n     * @param options\n     *  - `en` I/O options\n     *  - `ja` I/O オプション\n     * @returns\n     *  - `en` Returns the value which corresponds to a key with type change designated in `dataType`.\n     *  - `ja` `dataType` で指定された型変換を行って, キーに対応する値を返却\n     */\n    getItem<D extends WebStorageDataTypes = WebStorageDataTypes>(\n        key: string,\n        options?: WebStorageOptions<never>\n    ): Promise<WebStorageReturnType<D>>;\n\n    /**\n     * @en Returns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.\n     * @ja キーに対応する値を取得. 存在しない場合は null を返却\n     *\n     * @param key\n     *  - `en` access key\n     *  - `ja` アクセスキー\n     * @param options\n     *  - `en` I/O options\n     *  - `ja` I/O オプション\n     * @returns\n     *  - `en` Returns the value which corresponds to a key with type change designated in `dataType`.\n     *  - `ja` `dataType` で指定された型変換を行って, キーに対応する値を返却\n     */\n    getItem<K extends Keys<WebStorageDataTypeList>>(\n        key: string,\n        options?: WebStorageOptions<K>\n    ): Promise<WebStorageResult<K> | null>;\n\n    async getItem(key: string, options?: WebStorageOptions): Promise<WebStorageDataTypes | null> {\n        return dropUndefined(await deserialize(this._storage[key], options!)); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    }\n\n    /**\n     * @en Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.\n     * @ja キーを指定して値を設定. 存在しない場合は新規に作成\n     *\n     * @param key\n     *  - `en` access key\n     *  - `ja` アクセスキー\n     * @param options\n     *  - `en` I/O options\n     *  - `ja` I/O オプション\n     */\n    async setItem<V extends WebStorageInputDataTypes>(key: string, value: V, options?: WebStorageOptions<never>): Promise<void> {\n        options = options || {};\n        const newVal = dropUndefined(value, true);                                      // `null` or `undefined` → 'null' or 'undefined'\n        const oldVal = dropUndefined(await deserialize(this._storage[key], options));   // `undefined` → `null`\n        if (!deepEqual(oldVal, newVal)) {\n            this._storage.setItem(key, await serialize(newVal, options));\n            !options.silent && this._broker.trigger('@', key, newVal, oldVal);\n        }\n    }\n\n    /**\n     * @en Removes the key/value pair with the given key from the list associated with the object, if a key/value pair with the given key exists.\n     * @ja 指定されたキーに対応する値が存在すれば削除\n     *\n     * @param options\n     *  - `en` storage options\n     *  - `ja` ストレージオプション\n     */\n    async removeItem(key: string, options?: IStorageOptions): Promise<void> {\n        options = options || {};\n        await cc(options.cancel);\n        const value = this._storage[key];\n        if (undefined !== value) {\n            this._storage.removeItem(key);\n            !options.silent && this._broker.trigger('@', key, null, await deserialize(value, options));\n        }\n    }\n\n    /**\n     * @en Empties the list associated with the object of all key/value pairs, if there are any.\n     * @ja すべてのキーに対応する値を削除\n     *\n     * @param options\n     *  - `en` storage options\n     *  - `ja` ストレージオプション\n     */\n    async clear(options?: IStorageOptions): Promise<void> {\n        options = options || {};\n        await cc(options.cancel);\n        if (0 < this._storage.length) {\n            this._storage.clear();\n            !options.silent && this._broker.trigger('@', null, null, null);\n        }\n    }\n\n    /**\n     * @en Returns all entry keys.\n     * @ja すべてのキー一覧を返却\n     *\n     * @param options\n     *  - `en` cancel options\n     *  - `ja` キャンセルオプション\n     */\n    async keys(options?: Cancelable): Promise<string[]> {\n        await cc(options && options.cancel);\n        return Object.keys(this._storage);\n    }\n\n    /**\n     * @en Subscrive event(s).\n     * @ja イベント購読設定\n     *\n     * @param listener\n     *  - `en` callback function.\n     *  - `ja` たコールバック関数\n     */\n    on(listener: WebStorageEventCallback): Subscription {\n        return this._broker.on('@', listener);\n    }\n\n    /**\n     * @en Unsubscribe event(s).\n     * @ja イベント購読解除\n     *\n     * @param listener\n     *  - `en` callback function.\n     *         When not set this parameter, listeners are released.\n     *  - `ja` コールバック関数\n     *         指定しない場合はすべてを解除\n     */\n    off(listener?: WebStorageEventCallback): void {\n        this._broker.off('@', listener);\n    }\n}\n\n// default storage\nexport const webStorage = new WebStorage(localStorage);\n","/* eslint-disable\n    @typescript-eslint/no-namespace,\n    @typescript-eslint/no-unused-vars,\n    @typescript-eslint/restrict-plus-operands,\n */\n\nnamespace CDP_DECLARE {\n\n    const enum LOCAL_CODE_BASE {\n        SYNC = CDP_KNOWN_MODULE.MVC * LOCAL_CODE_RANGE_GUIDE.FUNCTION + 0,\n    }\n\n    /**\n     * @en Extends error code definitions.\n     * @ja 拡張通エラーコード定義\n     */\n    export enum RESULT_CODE {\n        MVC_SYNC_DECLARE                              = RESULT_CODE_BASE.DECLARE,\n        ERROR_MVC_INVALID_SYNC_PARAMS                 = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.SYNC + 1, 'invalid sync params.'),\n        ERROR_MVC_INVALID_SYNC_STORAGE_ENTRY          = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.SYNC + 2, 'invalid sync storage entires.'),\n        ERROR_MVC_INVALID_SYNC_STORAGE_DATA_NOT_FOUND = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.SYNC + 3, 'data not found.'),\n    }\n}\n","import {\n    Cancelable,\n    checkCanceled as cc,\n} from '@cdp/promise';\nimport {\n    IDataSync,\n    SyncMethods,\n    SyncContext,\n    SyncResult,\n} from './interfaces';\n\n/**\n * @en The [[IDataSync]] implemant class which has no effects.\n * @ja 何もしない [[IDataSync]] 実装クラス\n */\nclass NullDataSync implements IDataSync<object> {\n\n///////////////////////////////////////////////////////////////////////\n// implements: IDataSync\n\n    /**\n     * @en [[IDataSync]] kind signature.\n     * @ja [[IDataSync]] の種別を表す識別子\n     */\n    get kind(): string {\n        return 'null';\n    }\n\n    /**\n     * @en Do data synchronization.\n     * @ja データ同期\n     *\n     * @param method\n     *  - `en` operation string\n     *  - `ja` オペレーションを指定\n     * @param context\n     *  - `en` synchronized context object\n     *  - `ja` 同期するコンテキストオブジェクト\n     * @param options\n     *  - `en` option object\n     *  - `ja` オプション\n     */\n    async sync<K extends SyncMethods>(method: K, context: SyncContext<object>, options?: Cancelable): Promise<SyncResult<K, object>> {\n        const { cancel } = options || {};\n        await cc(cancel);\n        const responce = Promise.resolve('read' === method ? {} : undefined);\n        context.trigger('@request', context, responce);\n        return responce as Promise<SyncResult<K, object>>;\n    }\n}\n\nexport const dataSyncNULL = new NullDataSync() as IDataSync<object>;\n","import { result } from '@cdp/core-utils';\nimport { SyncContext } from './interfaces';\n\n/** @internal resolve lack property */\nexport function resolveURL(context: SyncContext): string {\n    return result(context, 'url');\n}\n","import { RESULT_CODE, makeResult } from '@cdp/result';\nimport { AjaxOptions, ajax } from '@cdp/ajax';\nimport {\n    IDataSync,\n    SyncMethods,\n    SyncContext,\n    SyncResult,\n} from './interfaces';\nimport { resolveURL } from './internal';\n\n/**\n * @en Options interface for [[RestDataSync]].\n * @ja [[RestDataSync]] に指定するオプション\n */\nexport interface RestDataSyncOptions extends AjaxOptions<'json'> {\n    url?: string;\n}\n\n/** @internal */\nconst _methodMap = {\n    create: 'POST',\n    update: 'PUT',\n    patch: 'PATCH',\n    delete: 'DELETE',\n    read: 'GET'\n};\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en The [[IDataSync]] implemant class which compliant RESTful.\n * @ja REST に準拠した [[IDataSync]] 実装クラス\n */\nclass RestDataSync implements IDataSync {\n\n///////////////////////////////////////////////////////////////////////\n// implements: IDataSync\n\n    /**\n     * @en [[IDataSync]] kind signature.\n     * @ja [[IDataSync]] の種別を表す識別子\n     */\n    get kind(): string {\n        return 'rest';\n    }\n\n    /**\n     * @en Do data synchronization.\n     * @ja データ同期\n     *\n     * @param method\n     *  - `en` operation string\n     *  - `ja` オペレーションを指定\n     * @param context\n     *  - `en` synchronized context object\n     *  - `ja` 同期するコンテキストオブジェクト\n     * @param options\n     *  - `en` rest option object\n     *  - `ja` REST オプション\n     */\n    sync<K extends SyncMethods>(method: K, context: SyncContext, options?: RestDataSyncOptions): Promise<SyncResult<K>> {\n        const params = Object.assign({ dataType: 'json' }, options);\n\n        const url = params.url || resolveURL(context);\n        if (!url) {\n            throw makeResult(RESULT_CODE.ERROR_MVC_INVALID_SYNC_PARAMS, 'A \"url\" property or function must be specified.');\n        }\n\n        params.method = _methodMap[method];\n\n        // Ensure request data.\n        if (null == params.data && ('create' === method || 'update' === method || 'patch' === method)) {\n            params.data = context.toJSON();\n        }\n\n        // Ajax request\n        const responce = ajax(url, params);\n        context.trigger('@request', context, responce);\n        return responce as Promise<SyncResult<K>>;\n    }\n}\n\nexport const dataSyncREST = new RestDataSync() as IDataSync;\n","import {\n    PlainObject,\n    isArray,\n    isString,\n    isFunction,\n    deepMerge,\n} from '@cdp/core-utils';\nimport {\n    RESULT_CODE,\n    makeResult,\n    toResult,\n} from '@cdp/result';\nimport { IStorage, IStorageOptions } from '@cdp/core-storage';\nimport { webStorage } from '@cdp/web-storage';\nimport {\n    IDataSyncOptions,\n    IDataSync,\n    SyncMethods,\n    SyncContext,\n    SyncResult,\n} from './interfaces';\nimport { resolveURL } from './internal';\n\n/** @internal */\nconst enum Const {\n    Separator = '::',\n}\n\n/**\n * @en [[IDataSync]] interface for [[IStorage]] accessor.\n * @ja [[IStorage]] アクセッサを備える [[IDataSync]] インターフェイス\n */\nexport interface IStorageDataSync<T extends object = PlainObject> extends IDataSync<T> {\n    /**\n     * @en Get current [[IStorage]] instance.\n     * @ja 現在対象の [[IStorage]] インスタンスにアクセス\n     */\n    getStorage(): IStorage;\n\n    /**\n     * @en Set new [[IStorage]] instance.\n     * @ja 新しい [[IStorage]] インスタンスを設定\n     */\n    setStorage(newStorage: IStorage): this;\n\n    /**\n     * @en Set new id-separator.\n     * @ja 新しい ID セパレータを設定\n     *\n     * @param newSeparator\n     *  - `en` new separator string\n     *  - `ja` 新しいセパレータ文字列\n     * @returns\n     *  - `en` old separator string\n     *  - `ja` 以前い設定されていたセパレータ文字列\n     */\n    setIdSeparator(newSeparator: string): string;\n}\n\n/**\n * @en [[StorageDataSync]] construction options.\n * @ja [[StorageDataSync]] 構築に指定するオプション\n */\nexport interface StorageDataSyncConstructionOptions {\n    separator?: string;\n}\n\n/**\n * @en Options interface for [[StorageDataSync]].\n * @ja [[StorageDataSync]] に指定するオプション\n */\nexport type StorageDataSyncOptions = IDataSyncOptions & IStorageOptions;\n\n//__________________________________________________________________________________________________//\n\n/** @internal check model or not */\nfunction isModel(context: SyncContext): boolean {\n    return !!context.constructor['idAttribute'];\n}\n\n/** @internal create id */\nfunction genId(url: string): string {\n    return `${url}:${Date.now().toString(36)}`;\n}\n\n/** @internal resolve key for localStorage */\nfunction parseContext(context: SyncContext, separator: string): { model: boolean; key: string; url: string; data: { [idAttr: string]: string; }; } {\n    const model  = isModel(context);\n    const url    = resolveURL(context);\n    const idAttr = context.constructor['idAttribute'];\n    const data = (() => {\n        const retval = {} as { [idAttr: string]: string; };\n        if (model) {\n            const valid    = !isFunction(context['has']) ? false : context['has'](idAttr) as boolean;\n            retval[idAttr] = valid ? context.id as string : genId(url);\n        }\n        return retval;\n    })();\n    return {\n        model,\n        url,\n        key: `${url}${model ? `${separator}${data[idAttr]}` : ''}`,\n        data,\n    };\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en The [[IDataSync]] implemant class which target is [[IStorage]]. Default storage is [[WebStorage]].\n * @ja [[IStorage]] を対象とした [[IDataSync]] 実装クラス. 既定値は [[WebStorage]]\n */\nclass StorageDataSync implements IStorageDataSync {\n    private _storage: IStorage;\n    private _separator: string;\n\n    /**\n     * constructor\n     *\n     * @param storage\n     *  - `en` [[IStorage]] object\n     *  - `ja` [[IStorage]] オブジェクト\n     * @param options\n     *  - `en` construction options\n     *  - `ja` 構築オプション\n     */\n    constructor(storage: IStorage, options?: StorageDataSyncConstructionOptions) {\n        this._storage = storage;\n        this._separator = options?.separator || Const.Separator;\n    }\n\n    ///////////////////////////////////////////////////////////////////////\n    // implements: IStorageDataSync\n\n    /**\n     * @en Get current [[IStorage]] instance.\n     * @ja 現在対象の [[IStorage]] インスタンスにアクセス\n     */\n    getStorage(): IStorage {\n        return this._storage;\n    }\n\n    /**\n     * @en Set new [[IStorage]] instance.\n     * @ja 新しい [[IStorage]] インスタンスを設定\n     */\n    setStorage(newStorage: IStorage): this {\n        this._storage = newStorage;\n        return this;\n    }\n\n    /**\n     * @en Set new id-separator.\n     * @ja 新しい ID セパレータを設定\n     *\n     * @param newSeparator\n     *  - `en` new separator string\n     *  - `ja` 新しいセパレータ文字列\n     * @returns\n     *  - `en` old separator string\n     *  - `ja` 以前い設定されていたセパレータ文字列\n     */\n    setIdSeparator(newSeparator: string): string {\n        const oldSeparator = this._separator;\n        this._separator = newSeparator;\n        return oldSeparator;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IDataSync\n\n    /**\n     * @en [[IDataSync]] kind signature.\n     * @ja [[IDataSync]] の種別を表す識別子\n     */\n    get kind(): string {\n        return 'storage';\n    }\n\n    /**\n     * @en Do data synchronization.\n     * @ja データ同期\n     *\n     * @param method\n     *  - `en` operation string\n     *  - `ja` オペレーションを指定\n     * @param context\n     *  - `en` synchronized context object\n     *  - `ja` 同期するコンテキストオブジェクト\n     * @param options\n     *  - `en` storage option object\n     *  - `ja` ストレージオプション\n     */\n    async sync<K extends SyncMethods>(method: K, context: SyncContext, options?: StorageDataSyncOptions): Promise<SyncResult<K>> {\n        const { model, key, url, data } = parseContext(context, this._separator);\n        if (!url) {\n            throw makeResult(RESULT_CODE.ERROR_MVC_INVALID_SYNC_PARAMS, 'A \"url\" property or function must be specified.');\n        }\n\n        let responce: PlainObject | void | null;\n        switch (method) {\n            case 'create': {\n                const opts = deepMerge({ data }, options);\n                responce = await this.update(key, context, url, data[Object.keys(data)[0]], opts);\n                break;\n            }\n            case 'update':\n            case 'patch': {\n                responce = await this.update(key, context, url, context.id, options);\n                break;\n            }\n            case 'delete':\n                responce = await this.destroy(key, context, url, options);\n                break;\n            case 'read':\n                responce = await this.find(model, key, url, options);\n                if (null == responce) {\n                    throw makeResult(RESULT_CODE.ERROR_MVC_INVALID_SYNC_STORAGE_DATA_NOT_FOUND, `method: ${method}`);\n                }\n                break;\n            default:\n                throw makeResult(RESULT_CODE.ERROR_MVC_INVALID_SYNC_PARAMS, `unknown method: ${method}`);\n        }\n\n        context.trigger('@request', context, responce as Promise<PlainObject>);\n        return responce as SyncResult<K>;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// primate methods:\n\n    /** @internal */\n    private async queryEntries(url: string, options?: StorageDataSyncOptions): Promise<{ ids: boolean; items: (PlainObject | string)[]; }> {\n        const items = await this._storage.getItem<PlainObject>(url, options);\n        if (null == items) {\n            return { ids: true, items: [] };\n        } else if (isArray(items)) {\n            return { ids: !items.length || isString(items[0]), items };\n        } else {\n            throw makeResult(RESULT_CODE.ERROR_MVC_INVALID_SYNC_STORAGE_ENTRY, `entry is not Array type.`);\n        }\n    }\n\n    /** @internal */\n    private saveEntries(url: string, entries: string[], options?: StorageDataSyncOptions): Promise<void> {\n        return this._storage.setItem(url, entries, options);\n    }\n\n    /** @internal */\n    private async find(model: boolean, key: string, url: string, options?: StorageDataSyncOptions): Promise<PlainObject | null> {\n        if (model) {\n            return this._storage.getItem<PlainObject>(key, options);\n        } else {\n            try {\n                // multi-entry\n                const { ids, items } = await this.queryEntries(url, options);\n                if (ids) {\n                    // findAll\n                    const entires: PlainObject[] = [];\n                    for (const id of items as string[]) {\n                        const entry = await this._storage.getItem<PlainObject>(`${url}${this._separator}${id}`, options);\n                        entry && entires.push(entry);\n                    }\n                    return entires;\n                } else {\n                    return items;\n                }\n            } catch (e) {\n                const result = toResult(e);\n                if (RESULT_CODE.ERROR_MVC_INVALID_SYNC_STORAGE_ENTRY === result.code) {\n                    return this._storage.getItem<PlainObject>(key, options);\n                }\n                throw e;\n            }\n        }\n    }\n\n    /** @internal */\n    private async update(key: string, context: SyncContext, url: string, id?: string, options?: StorageDataSyncOptions): Promise<PlainObject | null> {\n        const { data } = options || {};\n        const attrs = Object.assign(context.toJSON(), data);\n        await this._storage.setItem(key, attrs, options);\n        if (key !== url) {\n            const { ids, items } = await this.queryEntries(url, options);\n            if (ids && id && !items.includes(id)) {\n                items.push(id);\n                await this.saveEntries(url, items as string[], options);\n            }\n        }\n        return this.find(true, key, url, options);\n    }\n\n    /** @internal */\n    private async destroy(key: string, context: SyncContext, url: string, options?: StorageDataSyncOptions): Promise<PlainObject | null> {\n        const old = await this._storage.getItem(key, options);\n        await this._storage.removeItem(key, options);\n        if (key !== url) {\n            const { ids, items } = await this.queryEntries(url, options);\n            if (ids && context.id) {\n                const entries = items.filter(i => i !== context.id);\n                await this.saveEntries(url, entries as string[], options);\n            }\n        }\n        return old as PlainObject;\n    }\n}\n\n/**\n * @en Create [[IStorageDataSync]] object with [[IStorage]].\n * @ja [[IStorage]] を指定して, [[IStorageDataSync]] オブジェクトを構築\n *\n * @param storage\n *  - `en` [[IStorage]] object\n *  - `ja` [[IStorage]] オブジェクト\n * @param options\n *  - `en` construction options\n *  - `ja` 構築オプション\n */\nexport const createStorageDataSync = (storage: IStorage, options?: StorageDataSyncConstructionOptions): IStorageDataSync => {\n    return new StorageDataSync(storage, options);\n};\n\nexport const dataSyncSTORAGE = createStorageDataSync(webStorage);\n","import { IDataSync } from './interfaces';\nimport { dataSyncNULL } from './null';\n\n/** @internal */ let _default: IDataSync = dataSyncNULL;\n\n/**\n * @en Get or update default [[IDataSync]] object.\n * @ja 既定の [[IDataSync]] オブジェクトの取得 / 更新\n *\n * @param newSync\n *  - `en` new data-sync object. if `undefined` passed, only returns the current object.\n *  - `ja` 新しい data-sync オブジェクトを指定. `undefined` が渡される場合は現在設定されている data-sync の返却のみ行う\n * @returns\n *  - `en` old data-sync object.\n *  - `ja` 以前の data-sync オブジェクトを返却\n */\nexport function defaultSync(newSync?: IDataSync): IDataSync {\n    if (null == newSync) {\n        return _default;\n    } else {\n        const oldSync = _default;\n        _default = newSync;\n        return oldSync;\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-namespace,\n    @typescript-eslint/no-unused-vars,\n    @typescript-eslint/restrict-plus-operands,\n */\n\nnamespace CDP_DECLARE {\n\n    const enum LOCAL_CODE_BASE {\n        MODEL = CDP_KNOWN_MODULE.MVC * LOCAL_CODE_RANGE_GUIDE.FUNCTION + 5,\n    }\n\n    /**\n     * @en Extends error code definitions.\n     * @ja 拡張通エラーコード定義\n     */\n    export enum RESULT_CODE {\n        MVC_MODEL_DECLARE      = RESULT_CODE_BASE.DECLARE,\n        ERROR_MVC_INVALID_DATA = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.MODEL + 1, 'invalid data.'),\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    Nil,\n    PlainObject,\n    Constructor,\n    Class,\n    Arguments,\n    isObject,\n    isEmptyObject,\n    luid,\n    escapeHTML,\n    deepCopy,\n    deepEqual,\n    diff,\n    setMixClassAttribute,\n} from '@cdp/core-utils';\nimport {\n    Subscription,\n    Silenceable,\n    EventBroker,\n    EventReceiver,\n    EventSource,\n} from '@cdp/events';\nimport { checkCanceled as cc } from '@cdp/promise';\nimport {\n    IObservable,\n    IObservableEventBrokerAccess,\n    ObservableObject,\n} from '@cdp/observable';\nimport {\n    RESULT_CODE,\n    Result,\n    makeResult,\n    SUCCEEDED,\n    FAILED,\n} from '@cdp/result';\nimport { SyncContext, defaultSync } from '@cdp/data-sync';\nimport {\n    ModelEvent,\n    ModelValidateAttributeOptions,\n    ModelAttributeInput,\n    ModelSetOptions,\n    ModelConstructionOptions,\n    ModelSyncMethods,\n    ModelSyncResult,\n    ModelDataSyncOptions,\n    ModelFetchOptions,\n    ModelSaveOptions,\n    ModelDestroyOptions,\n} from './interfaces';\n\n/** @internal */ const _defineAttributes = Symbol('define');\n/** @internal */ const _updateAttributes = Symbol('update');\n/** @internal */ const _validate         = Symbol('validate');\n/** @internal */ const _changeHandler    = Symbol('onchange');\n/** @internal */ const _broker           = Symbol('broker');\n/** @internal */ const _properties       = Symbol('properties');\n\n/** @internal */\ninterface Property<T> {\n    attrs: ObservableObject;\n    baseAttrs: T;\n    prevAttrs: T;\n    changedAttrs?: Partial<T>;\n    readonly cid: string;\n    readonly options: ModelSetOptions;\n    changeFired: boolean;\n}\n\n/**\n * @en Valid attributes result.\n * @ja 属性検証の有効値\n */\nexport const RESULT_VALID_ATTRS = Object.freeze(makeResult(RESULT_CODE.SUCCESS, 'valid attribute.'));\n\n/** @internal helper for save() */\nfunction parseSaveArgs<A extends object>(...args: any[]): { attrs?: ModelAttributeInput<A>; options?: ModelSaveOptions; } {\n    let [key, value, options] = args; // eslint-disable-line prefer-const\n    let attrs: any;\n\n    if (null == key || isObject(key)) {\n        attrs = key;\n        options = value;\n    } else {\n        (attrs = {})[key] = value;\n    }\n\n    if (options && options.data) {\n        attrs = Object.assign(attrs || {}, options.data);\n    }\n\n    return { attrs, options };\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Base class definition for model that provides a basic set of functionality for managing interaction.\n * @ja インタラクションのための基本機能を提供する Model の基底クラス定義\n *\n * @example <br>\n *\n * ```ts\n * import { Model, ModelConstructor } from '@cdp/model';\n *\n * interface ContentAttribute {\n *   uri: string;\n *   readonly size: number;\n *   cookie?: string;\n * }\n * ```\n *\n * - Basic Usage\n *\n * ```ts\n * // early cast\n * const ContentBase = Model as ModelConstructor<Model<ContentAttribute>, ContentAttribute>;\n *\n * class Content extends ContentBase {\n *   constructor(attrs: ContentAttribute) {\n *     super(attrs);\n *   }\n * }\n * ```\n *\n * or\n *\n * ```ts\n * // late cast\n * class ContentClass extends Model<ContentAttribute> {\n *   constructor(attrs: ContentAttribute) {\n *     super(attrs);\n *   }\n * }\n *\n * const Content = ContentClass as ModelConstructor<ContentClass, ContentAttribute>;\n * ```\n * then\n *\n * ```ts\n * const content = new Content({\n *   uri: 'aaa.txt',\n *   size: 10,\n *   cookie: undefined, // need explicit assign\n * });\n *\n * console.log(content.uri);    // 'aaa.txt'\n * console.log(content.size);   // '10'\n * console.log(content.cookie); // 'undefined'\n * ```\n *\n * - Using Custom TEvent\n *\n * ```ts\n * import { ModelEvent } from '@cdp/model';\n *\n * interface CustomEvent extends ModelEvent<ContentAttribute> {\n *   fire: [boolean, number];\n * }\n * \n * :\n *\n * // early cast\n * const ContentBase = Model as ModelConstructor<Model<ContentAttribute, CustomEvent>, ContentAttribute>;\n * class Content extends ContentBase {\n *   :\n * }\n *\n * // late cast\n * class ContentClass extends Model<ContentAttribute, CustomEvent> {\n *   :\n * }\n * const Content = ContentClass as ModelConstructor<ContentClass, ContentAttribute>;\n *\n * const content = new Content({ ... });\n * content.trigger('fire', true, 100);\n * ```\n */\nexport abstract class Model<T extends object = any, TEvent extends ModelEvent<T> = ModelEvent<T>> extends EventReceiver implements EventSource<TEvent> {\n    /**\n     * @en Get ID attribute name.\n     * @ja ID アトリビュート名にアクセス\n     *\n     * @override\n     */\n    static idAttribute = 'id';\n\n    /**\n     * @en Attributes pool\n     * @ja 属性格納領域\n     *\n     * @internal\n     */\n    private readonly [_properties]: Property<T>;\n\n    /**\n     * constructor\n     *\n     * @param attributes\n     *  - `en` initial attribute values\n     *  - `ja` 属性の初期値を指定\n     */\n    constructor(attributes: Required<T>, options?: ModelConstructionOptions) {\n        super();\n        const opts = Object.assign({}, options);\n        const attrs = opts.parse ? this.parse(attributes, opts) as T : attributes;\n        const props: Property<T> = {\n            attrs: ObservableObject.from(attrs),\n            baseAttrs: { ...attrs },\n            prevAttrs: { ...attrs },\n            cid: luid('model:', 8),\n            options: opts,\n            changeFired: false,\n        };\n        Object.defineProperty(this, _properties, { value: props });\n\n        for (const key of Object.keys(attrs)) {\n            this[_defineAttributes](this, key);\n        }\n\n        this[_changeHandler] = () => {\n            (this as Model).trigger('@change', this as Model);\n\n            const { _prevAttrs, _attrs } = this;\n            const changedKeys = Object.keys(diff(_prevAttrs, _attrs as unknown as Partial<T>));\n            for (const key of changedKeys) {\n                (this as any).trigger(`@change:${key}`, this, _attrs[key], _prevAttrs[key], key);\n            }\n\n            this[_properties].changeFired = true;\n        };\n\n        this[_validate]({}, opts);\n    }\n\n    /** @internal attribute update core */\n    private [_updateAttributes](name: string, val: unknown): void {\n        if (!deepEqual(this._attrs[name], val)) {\n            const { attrs, changeFired } = this[_properties];\n            if (changeFired) {\n                this[_properties].changeFired = false;\n                this[_properties].prevAttrs = { ...attrs } as T;\n            }\n            delete this[_properties].changedAttrs;\n            this._prevAttrs[name] = attrs[name];\n            attrs[name] = val;\n        }\n    }\n\n    /** @internal attribute bridge def */\n    private [_defineAttributes](instance: object, name: string): void {\n        const proto = instance.constructor.prototype;\n        if (!(name in proto)) {\n            Object.defineProperty(proto, name, {\n                get(): unknown {\n                    return this._attrs[name];\n                },\n                set(val: unknown): void {\n                    this[_updateAttributes](name, val);\n                },\n                enumerable: true,\n                configurable: true,\n            });\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// accessor: public properties\n\n    /**\n     * @en Get content ID.\n     * @ja コンテンツ ID を取得\n     */\n    get id(): string {\n        const idAttr = idAttribute(this, 'id');\n        const { cid, attrs } = this[_properties];\n        return (idAttr in attrs) ? attrs[idAttr] || cid : cid;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// accessor: protected properties\n\n    /**\n     * @en Attributes instance\n     * @ja 属性を格納するインスタンス\n     */\n    protected get _attrs(): ObservableObject {\n        return this[_properties].attrs;\n    }\n\n    /**\n     * @en Default attributes instance\n     * @ja 既定値属性を格納するインスタンス\n     */\n    protected get _baseAttrs(): T {\n        return this[_properties].baseAttrs;\n    }\n\n    /**\n     * @en Previous attributes instance\n     * @ja 変更前の属性を格納するインスタンス\n     */\n    protected get _prevAttrs(): T {\n        return this[_properties].prevAttrs;\n    }\n\n    /**\n     * @en Changed attributes instance\n     * @ja 変更のあった属性を格納するインスタンス\n     */\n    protected get _changedAttrs(): Partial<T> {\n        if (null == this[_properties].changedAttrs) {\n            this[_properties].changedAttrs = diff(this._baseAttrs, this._attrs as unknown as Partial<T>);\n        }\n        return this[_properties].changedAttrs as Partial<T>;\n    }\n\n    /**\n     * @en Get internal content ID.\n     * @ja 内部のコンテンツ ID を取得\n     */\n    protected get _cid(): string {\n        return this[_properties].cid;\n    }\n\n    /**\n     * @en Get creating options.\n     * @ja 構築時のオプションを取得\n     */\n    protected get _options(): ModelSetOptions {\n        return this[_properties].options;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// operations: events\n\n    /**\n     * @en EventSource type resolver.\n     * @ja EventSource 型解決用ヘルパーアクセッサ\n     */\n    get $(): EventSource<TEvent> {\n        return this;\n    }\n\n    /** @internal broker access */\n    private get [_broker](): EventBroker<any> {\n        return (this._attrs as IObservable as IObservableEventBrokerAccess).getBroker();\n    }\n\n    /**\n     * @en Check whether this object has clients.\n     * @ja クライアントが存在するか判定\n     *\n     * @param channel\n     *  - `en` event channel key. (string | symbol)\n     *  - `ja` イベントチャネルキー (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` に対応したコールバック関数\n     */\n    hasListener<Channel extends keyof TEvent>(channel?: Channel, listener?: (...args: Arguments<TEvent[Channel]>) => unknown): boolean {\n        return this[_broker].hasListener(channel, listener);\n    }\n\n    /**\n     * @en Returns registered channel keys.\n     * @ja 登録されているチャネルキーを返却\n     */\n    channels(): (keyof TEvent)[] {\n        return this[_broker].channels().filter(c => '@' !== c) as (keyof TEvent)[];\n    }\n\n    /**\n     * @en Notify event to clients.\n     * @ja event 発行\n     *\n     * @param channel\n     *  - `en` event channel key. (string | symbol)\n     *  - `ja` イベントチャネルキー (string | symbol)\n     * @param args\n     *  - `en` arguments for callback function of the `channel` corresponding.\n     *  - `ja` `channel` に対応したコールバック関数に渡す引数\n     */\n    public trigger<Channel extends keyof TEvent>(channel: Channel, ...args: Arguments<Partial<TEvent[Channel]>>): void {\n        (this[_broker] as any).trigger(channel, ...args);\n    }\n\n    /**\n     * @en Unsubscribe event(s).\n     * @ja イベント購読解除\n     *\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *         When not set this parameter, everything is released.\n     *  - `ja` 対象のイベントチャネルキー (string | symbol)\n     *         指定しない場合はすべて解除\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *         When not set this parameter, all same `channel` listeners are released.\n     *  - `ja` `channel` に対応したコールバック関数\n     *         指定しない場合は同一 `channel` すべてを解除\n     */\n    public off<Channel extends keyof TEvent>(channel?: Channel | Channel[], listener?: (...args: Arguments<TEvent[Channel]>) => unknown): void {\n        this._attrs.off(channel as any, listener as any);\n    }\n\n    /**\n     * @en Subscrive event(s).\n     * @ja イベント購読設定\n     *\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *  - `ja` 対象のイベントチャネルキー (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` に対応したコールバック関数\n     */\n    public on<Channel extends keyof TEvent>(channel: Channel | Channel[], listener: (...args: Arguments<TEvent[Channel]>) => unknown): Subscription {\n        this._attrs.on('@', this[_changeHandler]);\n        return this._attrs.on(channel as any, listener as any);\n    }\n\n    /**\n     * @en Subscrive event(s) but it causes the bound callback to only fire once before being removed.\n     * @ja 一度だけハンドリング可能なイベント購読設定\n     *\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *  - `ja` 対象のイベントチャネルキー (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` に対応したコールバック関数\n     */\n    public once<Channel extends keyof TEvent>(channel: Channel | Channel[], listener: (...args: Arguments<TEvent[Channel]>) => unknown): Subscription {\n        const context = this.on(channel, listener);\n        const managed = this.on(channel, () => {\n            context.unsubscribe();\n            managed.unsubscribe();\n        });\n        return context;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// operations: validation\n\n    /**\n     * @en Check valid or not.\n     * @ja 検証の成否を取得\n     */\n    get isValid(): boolean {\n        return SUCCEEDED(this.validate({ silent: true }).code);\n    }\n\n    /**\n     * @en Validate result accesser.\n     * @ja 検証結果にアクセス\n     */\n    public validate(options?: Silenceable): Result {\n        const opts = Object.assign({ validate: true, noThrow: true, extend: false }, options);\n        return this[_validate]({}, opts);\n    }\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n\n    /**\n     * @en Validate data method.\n     * @ja データ検証\n     *\n     * @override\n     *\n     * @param attributes\n     *  - `en` validatee attributes\n     *  - `ja` 被検証属性\n     * @param options\n     *  - `en` validate options\n     *  - `ja` 検証オプション\n     */\n    protected validateAttributes<A extends T>(attributes: ModelAttributeInput<A>, options?: ModelValidateAttributeOptions): Result {\n        return RESULT_VALID_ATTRS;\n    }\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n    /** @internal validate */\n    private [_validate]<A extends T>(attributes: ModelAttributeInput<A>, options?: ModelSetOptions): Result | never {\n        const { validate, silent, noThrow } = options || {};\n        if (validate) {\n            const attrs = { ...this._attrs, ...attributes };\n            const result = this.validateAttributes(attrs, options);\n            if (FAILED(result.code)) {\n                if (!silent) {\n                    (this as Model).trigger('@invalid', this as Model, attrs, result);\n                }\n                if (!noThrow) {\n                    throw result;\n                }\n            }\n            return result;\n        } else {\n            return RESULT_VALID_ATTRS;\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// operations: attributes\n\n    /**\n     * @en Check the [[Model]] has valid property. (not `null` or `undefined`)\n     * @ja [[Model]] が有効なプロパティを持っているか確認 (`null` または `undefined` でない)\n     */\n    public has(attribute: keyof T): boolean {\n        return null != (this._attrs as unknown as T)[attribute];\n    }\n\n    /**\n     * @en Get the HTML-escaped value of an attribute.\n     * @ja HTML で使用する文字を制御文字に置換した属性値を取得\n     */\n    public escape(attribute: keyof T): string {\n        return escapeHTML((this._attrs as any)[attribute]);\n    }\n\n    /**\n     * @en Update attributes for batch input with options.\n     * @ja 属性の一括設定\n     *\n     * @param attributes\n     *  - `en` update attributes\n     *  - `ja` 更新属性\n     * @param options\n     *  - `en` set attributes options\n     *  - `ja` 属性更新用オプション\n     */\n    public setAttributes<A extends T>(attributes: ModelAttributeInput<A>, options?: ModelSetOptions): this {\n        const { silent, extend } = options || {};\n\n        try {\n            if (silent) {\n                this._attrs.suspend(true);\n            }\n\n            const result = this[_validate](attributes, options);\n            if (FAILED(result.code)) {\n                return this;\n            }\n\n            for (const attr of Object.keys(attributes)) {\n                if (attr in this._attrs) {\n                    this[_updateAttributes](attr, attributes[attr]);\n                } else if (extend) {\n                    this[_defineAttributes](this, attr);\n                    this[_updateAttributes](attr, attributes[attr]);\n                }\n            }\n        } finally {\n            if (silent) {\n                this._attrs.resume();\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @en Clear all attributes on the [[Model]]. (set `undefined`)\n     * @ja [[Model]] からすべての属性を削除 (`undefined` を設定)\n     */\n    public clear(options?: ModelSetOptions): this {\n        const clearAttrs = {};\n        for (const attr of Object.keys(this._baseAttrs)) {\n            clearAttrs[attr] = undefined;\n        }\n        return this.setAttributes(clearAttrs, options);\n    }\n\n    /**\n     * @en Return a copy of the model's `attributes` object.\n     * @ja Model 属性値のコピーを返却\n     */\n    public toJSON(): T {\n        return deepCopy({ ...this._attrs } as T);\n    }\n\n    /**\n     * @es Clone this instance.\n     * @ja インスタンスの複製を返却\n     *\n     * @override\n     */\n    public clone(): this {\n        const { constructor, _attrs, _options } = this;\n        return new (constructor as Constructor<this>)(_attrs, _options);\n    }\n\n    /**\n     * @en Check changed attributes.\n     * @ja 変更された属性値を持つか判定\n     *\n     * @param attribute\n     *  - `en` checked attribute\n     *  - `ja` 検証する属性\n     */\n    public hasChanged(attribute?: keyof T): boolean {\n        if (null == attribute) {\n            return !isEmptyObject(this._changedAttrs);\n        } else {\n            return attribute in this._changedAttrs;\n        }\n    }\n\n    /**\n     * @en Return an object containing all the attributes that have changed, or `undefined` if there are no changed attributes.\n     * @ja 入力した attributes 値の差分に対して変更がある属性値を返却. 差分がない場合は `undefiend` を返却\n     *\n     * @param attributes\n     *  - `en` checked attributes\n     *  - `ja` 検証する属性\n     */\n    public changed(attributes?: Partial<T>): Partial<T> | undefined {\n        if (!attributes) {\n            return this.hasChanged() ? { ...this._changedAttrs } : undefined;\n        } else {\n            const changed = diff(this._attrs, attributes);\n            return !isEmptyObject(changed) ? changed : undefined;\n        }\n    }\n\n    /**\n     * @en Get the previous value of an attribute, recorded at the time the last `@change` event was fired.\n     * @ja `@change` が発火された前の属性値を取得\n     */\n    public previous<K extends keyof T>(attribute: K): T[K] {\n        return this._prevAttrs[attribute];\n    }\n\n///////////////////////////////////////////////////////////////////////\n// operations: sync\n\n    /**\n     * @en Check a [[Model]] is new if it has never been saved to the server, and lacks an id.\n     * @ja [[Model]] がまだサーバーに存在しないかチェック. 既定では `idAttribute` の有無で判定\n     */\n    protected isNew(): boolean {\n        const idAttr = idAttribute(this, 'id');\n        return !this.has(idAttr as keyof T);\n    }\n\n    /**\n     * @en Converts a response into the hash of attributes to be `set` on the model. The default implementation is just to pass the response along.\n     * @ja レスポンスの変換メソッド. 既定では何もしない\n     *\n     * @override\n     */\n    protected parse(response: PlainObject | void, options?: ModelSetOptions): T | void { // eslint-disable-line @typescript-eslint/no-unused-vars\n        return response as T;\n    }\n\n    /**\n     * @en Proxy [[IDataSync#sync]] by default -- but override this if you need custom syncing semantics for *this* particular model.\n     * @ja データ同期. 必要に応じてオーバーライド可能.\n     *\n     * @override\n     *\n     * @param method\n     *  - `en` operation string\n     *  - `ja` オペレーションを指定\n     * @param context\n     *  - `en` synchronized context object\n     *  - `ja` 同期するコンテキストオブジェクト\n     * @param options\n     *  - `en` option object\n     *  - `ja` オプション\n     */\n    protected sync<K extends ModelSyncMethods>(method: K, context: Model<T>, options?: ModelDataSyncOptions): Promise<ModelSyncResult<K, T>> {\n        return defaultSync().sync(method, context as SyncContext<T>, options) as unknown as Promise<ModelSyncResult<K, T>>;\n    }\n\n    /**\n     * @en Fetch the [[Model]] from the server, merging the response with the model's local attributes.\n     * @ja [[Model]] 属性のサーバー同期. レスポンスのマージを実行\n     */\n    public async fetch(options?: ModelFetchOptions): Promise<T> {\n        const opts = Object.assign({ parse: true }, options, { syncMethod: 'read' });\n\n        try {\n            const resp = await this.sync('read', this as Model<T>, opts);\n            this.setAttributes(opts.parse ? this.parse(resp, opts) as T : resp, opts);\n            (this as Model).trigger('@sync', this as Model, resp, opts);\n            return resp;\n        } catch (e) {\n            (this as Model).trigger('@error', this as Model, e, opts);\n            throw e;\n        }\n    }\n\n    /**\n     * @en Set a hash of [[Model]] attributes, and sync the model to the server. <br>\n     *     If the server returns an attributes hash that differs, the model's state will be `set` again.\n     * @ja [[Model]] 属性をサーバーに保存. <br>\n     *     異なる属性が返却される場合は再設定\n     *\n     * @param key\n     *  - `en` update attribute key\n     *  - `ja` 更新属性キー\n     * @param value\n     *  - `en` update attribute value\n     *  - `ja` 更新属性値\n     * @param options\n     *  - `en` save options\n     *  - `ja` 保存オプション\n     */\n    public async save<K extends keyof T>(key?: keyof T, value?: T[K], options?: ModelSaveOptions): Promise<PlainObject | void>;\n\n    /**\n     * @en Set a hash of [[Model]] attributes, and sync the model to the server. <br>\n     *     If the server returns an attributes hash that differs, the model's state will be `set` again.\n     * @ja [[Model]] 属性をサーバーに保存. <br>\n     *     異なる属性が返却される場合は再設定\n     *\n     * @param attributes\n     *  - `en` update attributes\n     *  - `ja` 更新属性\n     * @param options\n     *  - `en` save options\n     *  - `ja` 保存オプション\n     */\n    public async save<A extends T>(attributes: ModelAttributeInput<A> | Nil, options?: ModelSaveOptions): Promise<PlainObject | void>;\n\n    public async save(...args: unknown[]): Promise<PlainObject | void> {\n        const { attrs, options } = parseSaveArgs(...args);\n        const opts = Object.assign({ validate: true, parse: true, wait: true, extend: true }, options);\n\n        try {\n            const { wait } = opts;\n\n            const method = opts.syncMethod = this.isNew() ? 'create' : opts.patch ? 'patch' : 'update';\n\n            if (attrs) {\n                if (!wait) {\n                    this.setAttributes(attrs, opts);\n                    this[_properties].baseAttrs = { ...this._attrs } as T;\n                } else {\n                    this[_validate](attrs, opts);\n                }\n                if ('patch' === method) {\n                    opts.data = attrs;\n                } else {\n                    opts.data = Object.assign(this.toJSON(), attrs);\n                }\n            }\n\n            const resp = await this.sync(method, this as Model<T>, opts);\n\n            let serverAttrs = opts.parse ? this.parse(resp, opts) : resp;\n            if (attrs && wait) {\n                serverAttrs = Object.assign({}, attrs, serverAttrs);\n            }\n            if (isObject(serverAttrs) && !isEmptyObject(serverAttrs)) {\n                this.setAttributes(serverAttrs as T, opts);\n                this[_properties].baseAttrs = { ...this._attrs } as T;\n            }\n\n            (this as Model).trigger('@sync', this as Model, resp as PlainObject, opts);\n            return resp;\n        } catch (e) {\n            (this as Model).trigger('@error', this as Model, e, opts);\n            throw e;\n        }\n    }\n\n    /**\n     * @en Destroy this [[Model]] on the server if it was already persisted.\n     * @ja [[Model]] をサーバーから削除\n     *\n     * @param options\n     *  - `en` destroy options\n     *  - `ja` 破棄オプション\n     */\n    public async destroy(options?: ModelDestroyOptions): Promise<PlainObject | void> {\n        const opts = Object.assign({ wait: true }, options, { syncMethod: 'delete' });\n\n        try {\n            const { wait, cancel } = opts;\n            const exists = !this.isNew();\n            const destruct = (): void => {\n                this.stopListening();\n                (this as Model).trigger('@destroy', this as Model, opts);\n            };\n\n            !wait && destruct();\n\n            let resp: PlainObject | void;\n            if (!exists) {\n                await cc(cancel);\n            } else {\n                resp = await this.sync('delete', this as Model<T>, opts);\n            }\n\n            wait && destruct();\n            exists && (this as Model).trigger('@sync', this as Model, resp as PlainObject, opts);\n\n            return resp;\n        } catch (e) {\n            (this as Model).trigger('@error', this as Model, e, opts);\n            throw e;\n        }\n    }\n}\n\n// mixin による `instanceof` は無効に設定\nsetMixClassAttribute(Model as unknown as Class, 'instanceOf', null);\n\n/**\n * @en Check the value-type is [[Model]].\n * @ja [[Model]] 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isModel(x: unknown): x is Model {\n    return x instanceof Model;\n}\n\n/**\n * @en Query [[Model]] `id-attribute`.\n * @ja [[Model]] の `id-attribute` を取得\n */\nexport function idAttribute(x: unknown, fallback = ''): string {\n    return isObject(x) ? (x.constructor['idAttribute'] || fallback) : fallback;\n}\n","/* eslint-disable\n    @typescript-eslint/no-namespace,\n    @typescript-eslint/no-unused-vars,\n    @typescript-eslint/restrict-plus-operands,\n */\n\nnamespace CDP_DECLARE {\n\n    const enum LOCAL_CODE_BASE {\n        COLLECTION = CDP_KNOWN_MODULE.MVC * LOCAL_CODE_RANGE_GUIDE.FUNCTION + 10,\n    }\n\n    /**\n     * @en Extends error code definitions.\n     * @ja 拡張通エラーコード定義\n     */\n    export enum RESULT_CODE {\n        MVC_COLLECTION_DECLARE = RESULT_CODE_BASE.DECLARE,\n        ERROR_MVC_INVALID_ACCESS         = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.COLLECTION + 1, 'invalid access.'),\n        ERROR_MVC_INVALID_COMPARATORS    = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.COLLECTION + 2, 'invalid comparators.'),\n        ERROR_MVC_EDIT_PERMISSION_DENIED = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.COLLECTION + 3, 'editing permission denied.'),\n    }\n}\n","import { getLanguage } from '@cdp/i18n';\nimport {\n    SortOrder,\n    SortCallback,\n    SortKey,\n} from '../interfaces';\n\n/**\n * @en `Intl.Collator` factory function type definition.\n * @ja `Intl.Collator` を返却する関数型定義\n */\nexport type CollatorProvider = () => Intl.Collator;\n\n/** @internal default Intl.Collator provider */\nlet _collator: CollatorProvider = (): Intl.Collator => {\n    return new Intl.Collator(getLanguage(), { sensitivity: 'base', numeric: true });\n};\n\n/**\n * @ja 既定の Intl.Collator を設定\n *\n * @param newProvider\n *  - `en` new [[CollatorProvider]] object. if `undefined` passed, only returns the current object.\n *  - `ja` 新しい [[CollatorProvider]] オブジェクトを指定. `undefined` が渡される場合は現在設定されているオブジェクトの返却のみ行う\n * @returns\n *  - `en` old [[CollatorProvider]] object.\n *  - `ja` 設定されていた [[CollatorProvider]] オブジェクト\n */\nexport function defaultCollatorProvider(newProvider?: CollatorProvider): CollatorProvider {\n    if (null == newProvider) {\n        return _collator;\n    } else {\n        const oldProvider = _collator;\n        _collator = newProvider;\n        return oldProvider;\n    }\n}\n\n/**\n * @en Get string comparator function.\n * @ja 文字列比較用関数を取得\n *\n * @param prop\n *  - `en` property name\n *  - `ja` プロパティ名を指定\n * @param order\n *  - `en` sort order code\n *  - `ja` ソート順を指定\n */\nexport function getStringComparator<T, K extends string = string>(prop: K, order: SortOrder): SortCallback<T> {\n    return (lhs: T, rhs: T): number => {\n        // undefined は '' と同等に扱う\n        const lhsProp = (null != lhs[prop as string]) ? lhs[prop as string] : '';\n        const rhsProp = (null != rhs[prop as string]) ? rhs[prop as string] : '';\n        return order * _collator().compare(lhsProp, rhsProp);\n    };\n}\n\n/**\n * @en Get date comparator function.\n * @ja 日時比較用関数を取得\n *\n * @param prop\n *  - `en` property name\n *  - `ja` プロパティ名を指定\n * @param order\n *  - `en` sort order code\n *  - `ja` ソート順を指定\n */\nexport function getDateComparator<T, K extends string = string>(prop: K, order: SortOrder): SortCallback<T> {\n    return (lhs: T, rhs: T): number => {\n        const lhsDate = lhs[prop as string];\n        const rhsDate = rhs[prop as string];\n        if (lhsDate === rhsDate) {\n            // (undefined === undefined) or 自己参照\n            return 0;\n        } else if (null == lhsDate) {\n            // undefined は最低値扱い (昇順時に先頭へ)\n            return -1 * order;\n        } else if (null == rhsDate) {\n            // undefined は最低値扱い (昇順時に先頭へ)\n            return 1 * order;\n        } else {\n            const lhsValue = Object(lhsDate).valueOf();\n            const rhsValue = Object(rhsDate).valueOf();\n            if (lhsValue === rhsValue) {\n                return 0;\n            } else {\n                return (lhsValue < rhsValue ? -1 * order : 1 * order);\n            }\n        }\n    };\n}\n\n/**\n * @en Get generic comparator function by comparative operator.\n * @ja 比較演算子を用いた汎用比較関数の取得\n *\n * @param prop\n *  - `en` property name\n *  - `ja` プロパティ名を指定\n * @param order\n *  - `en` sort order code\n *  - `ja` ソート順を指定\n */\nexport function getGenericComparator<T, K extends string = string>(prop: K, order: SortOrder): SortCallback<T> {\n    return (lhs: T, rhs: T): number => {\n        if (lhs[prop as string] === rhs[prop as string]) {\n            return 0;\n        } else if (null == lhs[prop as string]) {\n            // undefined は最低値扱い (昇順時に先頭へ)\n            return -1 * order;\n        } else if (null == rhs[prop as string]) {\n            // undefined は最低値扱い (昇順時に先頭へ)\n            return 1 * order;\n        } else {\n            return (lhs[prop as string] < rhs[prop as string] ? -1 * order : 1 * order);\n        }\n    };\n}\n\n/**\n * @en Get boolean comparator function.\n * @ja 真偽値比較用関数を取得\n */\nexport const getBooleanComparator = getGenericComparator;\n\n/**\n * @en Get numeric comparator function.\n * @ja 数値比較用関数を取得\n */\nexport const getNumberComparator = getGenericComparator;\n\n/**\n * @en Convert to comparator from [[SortKey]].\n * @ja [[SortKey]] を comparator に変換\n */\nexport function toComparator<T, K extends string = string>(sortKey: SortKey<K>): SortCallback<T> {\n    const { name, type, order } = sortKey;\n    switch (type) {\n        case 'string':\n            return getStringComparator<T, K>(name, order);\n        case 'boolean':\n            return getBooleanComparator<T, K>(name, order);\n        case 'number':\n            return getNumberComparator<T, K>(name, order);\n        case 'date':\n            return getDateComparator<T, K>(name, order);\n        default:\n            return getGenericComparator<T, K>(name, order);\n    }\n}\n\n/**\n * @en Convert to comparator array from [[SortKey]] array.\n * @ja [[SortKey]] 配列を comparator 配列に変換\n */\nexport function convertSortKeys<T, K extends string = string>(sortKeys: SortKey<K>[]): SortCallback<T>[] {\n    const comparators: SortCallback<T>[] = [];\n    for (const sortKey of sortKeys) {\n        comparators.push(toComparator(sortKey));\n    }\n    return comparators;\n}\n","import { unique } from '@cdp/core-utils';\nimport {\n    CancelToken,\n    checkCanceled as cc,\n} from '@cdp/promise';\nimport { ObservableArray, ArrayChangeRecord } from '@cdp/observable';\nimport { RESULT_CODE, makeResult } from '@cdp/result';\n\nconst {\n    /** @internal */ trunc\n} = Math;\n\n/** @internal wait for change detection */\nfunction makePromise<T>(editor: ObservableArray<T>, remap?: T[]): Promise<ArrayChangeRecord<T>[]> {\n    return new Promise(resolve => {\n        const callback = (records: ArrayChangeRecord<T>[]): void => {\n            editor.off(callback);\n            if (remap) {\n                remap.length = 0;\n                remap.push(...editor);\n            }\n            resolve(records);\n        };\n        editor.on(callback);\n    });\n}\n\n/** @internal convert to [[ObservableArray]] if needed. */\nasync function getEditContext<T>(\n    target: ObservableArray<T> | T[],\n    token?: CancelToken\n): Promise<{ editor: ObservableArray<T>; promise: Promise<ArrayChangeRecord<T>[]>; }> | never {\n    if (target instanceof ObservableArray) {\n        await cc(token);\n        return {\n            editor: target,\n            promise: makePromise(target),\n        };\n    } else if (Array.isArray(target)) {\n        const editor = ObservableArray.from(target);\n        await cc(token);\n        return {\n            editor,\n            promise: makePromise(editor, target),\n        };\n    } else {\n        throw makeResult(RESULT_CODE.NOT_SUPPORTED, 'target is not Array or ObservableArray.');\n    }\n}\n\n/** @internal valid orders index */\nfunction validOrders(length: number, orders: number[]): boolean | never {\n    if (null == orders || orders.length <= 0) {\n        return false;\n    }\n\n    for (const index of orders) {\n        if (index < 0 || length <= index || trunc(index) !== index) {\n            throw makeResult(RESULT_CODE.NOT_SUPPORTED, `orders[] index is invalid. index: ${index}`);\n        }\n    }\n\n    return true;\n}\n\n/**\n * @en Clear all array elements.\n * @ja 配列の全削除\n *\n * @param target\n *  - `en` target array\n *  - `ja` 対象配列\n * @param token\n *  - `en` [[CancelToken]] reference. (enable `undefined`)\n *  - `ja` [[CancelToken]] を指定 (undefined 可)\n * @returns\n *  - `en` Changed information\n *  - `ja` 変更情報\n */\nexport async function clearArray<T>(target: ObservableArray<T> | T[], token?: CancelToken): Promise<ArrayChangeRecord<T>[]> {\n    if (target.length <= 0) {\n        return [];\n    }\n\n    const { editor, promise } = await getEditContext(target, token);\n\n    editor.splice(0, target.length);\n\n    return promise;\n}\n\n/**\n * @en Append source elements to the end of array.\n * @ja 配列の末尾に追加\n *\n * @param target\n *  - `en` target array\n *  - `ja` 対象配列\n * @param src\n *  - `en` source elements\n *  - `ja` 追加元要素\n * @param token\n *  - `en` [[CancelToken]] reference. (enable `undefined`)\n *  - `ja` [[CancelToken]] を指定 (undefined 可)\n * @returns\n *  - `en` Changed information\n *  - `ja` 変更情報\n */\nexport async function appendArray<T>(target: ObservableArray<T> | T[], src: T[], token?: CancelToken): Promise<ArrayChangeRecord<T>[]> {\n    if (null == src || src.length <= 0) {\n        return [];\n    }\n\n    const { editor, promise } = await getEditContext(target, token);\n\n    editor.push(...src);\n\n    return promise;\n}\n\n/**\n * @en Insert source elements to specified index of array.\n * @ja 指定した位置に挿入\n *\n * @param target\n *  - `en` target array\n *  - `ja` 対象配列\n * @param index\n *  - `ja` target array position index\n *  - `ja` 追加先のインデックス\n * @param src\n *  - `en` source elements\n *  - `ja` 追加元要素\n * @param token\n *  - `en` [[CancelToken]] reference. (enable `undefined`)\n *  - `ja` [[CancelToken]] を指定 (undefined 可)\n * @returns\n *  - `en` Changed information\n *  - `ja` 変更情報\n */\nexport async function insertArray<T>(target: ObservableArray<T> | T[], index: number, src: T[], token?: CancelToken): Promise<ArrayChangeRecord<T>[]> {\n    // 最後の要素に追加するため index == target.length を許容\n    if (index < 0 || target.length < index || trunc(index) !== index) {\n        throw makeResult(RESULT_CODE.NOT_SUPPORTED, `insertArray(), index is invalid. index: ${index}`);\n    } else if (null == src || src.length <= 0) {\n        return [];\n    }\n\n    const { editor, promise } = await getEditContext(target, token);\n\n    editor.splice(index, 0, ...src);\n\n    return promise;\n}\n\n/**\n * @en Reorder array elements position.\n * @ja 項目の位置を変更\n *\n * @param target\n *  - `en` target array\n *  - `ja` 対象配列\n * @param index\n *  - `ja` target array position index\n *  - `ja` 追加先のインデックス\n * @param orders\n *  - `en` edit order index array\n *  - `ja` インデックス配列\n * @param token\n *  - `en` [[CancelToken]] reference. (enable `undefined`)\n *  - `ja` [[CancelToken]] を指定 (undefined 可)\n * @returns\n *  - `en` Changed information\n *  - `ja` 変更情報\n */\nexport async function reorderArray<T>(target: ObservableArray<T> | T[], index: number, orders: number[], token?: CancelToken): Promise<ArrayChangeRecord<T>[]> {\n    // 最後の要素に追加するため index == target.length を許容\n    if (index < 0 || target.length < index || trunc(index) !== index) {\n        throw makeResult(RESULT_CODE.NOT_SUPPORTED, `reorderArray(), index is invalid. index: ${index}`);\n    } else if (!validOrders(target.length, orders)) {\n        return [];\n    }\n\n    const { editor, promise } = await getEditContext(target, token);\n\n    // 作業配列で編集\n    let work: (T | null)[] = Array.from(editor);\n    {\n        const reorders: T[] = [];\n        for (const order of unique(orders)) {\n            reorders.push(editor[order]);\n            work[order] = null;\n        }\n\n        work.splice(index, 0, ...reorders);\n        work = work.filter((value) => {\n            return null != value;\n        });\n    }\n\n    // 値を書き戻し\n    for (const idx of work.keys()) {\n        editor[idx] = work[idx] as T;\n    }\n\n    return promise;\n}\n\n/**\n * @en Remove array elements.\n * @ja 項目の削除\n *\n * @param target\n *  - `en` target array\n *  - `ja` 対象配列\n * @param orders\n *  - `en` removed order index array\n *  - `ja` インデックス配列\n * @param token\n *  - `en` [[CancelToken]] reference. (enable `undefined`)\n *  - `ja` [[CancelToken]] を指定 (undefined 可)\n * @returns\n *  - `en` Changed information\n *  - `ja` 変更情報\n */\nexport async function removeArray<T>(target: ObservableArray<T> | T[], orders: number[], token?: CancelToken): Promise<ArrayChangeRecord<T>[]> {\n    if (!validOrders(target.length, orders)) {\n        return [];\n    }\n\n    const { editor, promise } = await getEditContext(target, token);\n\n    // 降順ソート\n    orders.sort((lhs, rhs) => {\n        return (lhs < rhs ? 1 : -1);\n    });\n\n    for (const order of unique(orders)) {\n        editor.splice(order, 1);\n    }\n\n    return promise;\n}\n","import { Keys, computeDate } from '@cdp/core-utils';\nimport { FilterCallback, DynamicCombination } from '../interfaces';\n\n/** @internal */ export type ValueTypeALL<T extends object> = Extract<number | string | Date, T[Keys<T>]>;\n/** @internal */ export type ValueTypeComparable<T extends object> = Extract<number | Date, T[Keys<T>]>;\n/** @internal */ export type ValueTypeString<T extends object> = Extract<string, T[Keys<T>]>;\n/** @internal */ export type DynamicOperatorDateUnit = 'year' | 'month' | 'day' | undefined;\n\n/** @internal DynamicPackageOperator.EQUAL */\nexport function equal<T extends object>(prop: keyof T, value: ValueTypeALL<T>): FilterCallback<T> {\n    return (item: T) => item[prop] === value;\n}\n\n/** @internal DynamicPackageOperator.NOT_EQUAL */\nexport function notEqual<T extends object>(prop: keyof T, value: ValueTypeALL<T>): FilterCallback<T> {\n    return (item: T) => item[prop] !== value;\n}\n\n/** @internal DynamicPackageOperator.GREATER */\nexport function greater<T extends object>(prop: keyof T, value: ValueTypeComparable<T>): FilterCallback<T> {\n    return (item: T) => item[prop] > value;\n}\n\n/** @internal DynamicPackageOperator.LESS */\nexport function less<T extends object>(prop: keyof T, value: ValueTypeComparable<T>): FilterCallback<T> {\n    return (item: T) => item[prop] < value;\n}\n\n/** @internal DynamicPackageOperator.GREATER_EQUAL */\nexport function greaterEqual<T extends object>(prop: keyof T, value: ValueTypeComparable<T>): FilterCallback<T> {\n    return (item: T) => item[prop] >= value;\n}\n\n/** @internal DynamicPackageOperator.LESS_EQUAL */\nexport function lessEqual<T extends object>(prop: keyof T, value: ValueTypeComparable<T>): FilterCallback<T> {\n    return (item: T) => item[prop] <= value;\n}\n\n/** @internal DynamicPackageOperator.LIKE */\nexport function like<T extends object>(prop: keyof T, value: ValueTypeString<T>): FilterCallback<T> {\n    return (item: T) => String(item[prop]).toLocaleLowerCase().includes(value.toLocaleLowerCase());\n}\n\n/** @internal DynamicPackageOperator.NOT_LIKE */\nexport function notLike<T extends object>(prop: keyof T, value: ValueTypeString<T>): FilterCallback<T> {\n    return (item: T) => !String(item[prop]).toLocaleLowerCase().includes(value.toLocaleLowerCase());\n}\n\n/** @internal DynamicPackageOperator.DATE_LESS_EQUAL */\nexport function dateLessEqual<T extends object>(prop: keyof T, value: number, unit: DynamicOperatorDateUnit): FilterCallback<T> {\n    return (item: T) => {\n        const date = computeDate(new Date(), -1 * value, unit);\n        return date <= (item[prop] as unknown as Date);\n    };\n}\n\n/** @internal DynamicPackageOperator.DATE_LESS_NOT_EQUAL */\nexport function dateLessNotEqual<T extends object>(prop: keyof T, value: number, unit: DynamicOperatorDateUnit): FilterCallback<T> {\n    return (item: T) => {\n        const date = computeDate(new Date(), -1 * value, unit);\n        return !(date <= (item[prop] as unknown as Date));\n    };\n}\n\n/** @internal DynamicPackageOperator.RANGE */\nexport function range<T extends object>(prop: keyof T, min: ValueTypeComparable<T>, max: ValueTypeComparable<T>): FilterCallback<T> {\n    return combination(DynamicCombination.AND, greaterEqual(prop, min), lessEqual(prop, max));\n}\n\n/** @internal フィルタの合成 */\nexport function combination<T extends object>(type: DynamicCombination, lhs: FilterCallback<T>, rhs: FilterCallback<T> | undefined): FilterCallback<T> {\n    return !rhs ? lhs : (item: T) => {\n        switch (type) {\n            case DynamicCombination.AND:\n                return lhs(item) && rhs(item);\n            case DynamicCombination.OR:\n                return lhs(item) || rhs(item);\n            default:\n                console.warn(`unknown combination: ${type}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n                // fail safe\n                return lhs(item) && rhs(item);\n        }\n    };\n}\n","import { Keys } from '@cdp/core-utils';\nimport { convertSortKeys } from '../utils';\nimport {\n    SortCallback,\n    FilterCallback,\n    SortKey,\n    DynamicConditionSeed,\n    DynamicOperatorContext,\n    DynamicLimitCondition,\n    DynamicOperator,\n    DynamicCombination,\n} from '../interfaces';\nimport {\n    ValueTypeALL,\n    ValueTypeComparable,\n    ValueTypeString,\n    equal,\n    notEqual,\n    greater,\n    less,\n    greaterEqual,\n    lessEqual,\n    like,\n    notLike,\n    dateLessEqual,\n    dateLessNotEqual,\n    range,\n    combination,\n} from './dynamic-filters';\n\n/**\n * @en Dynamic query condition manager class.\n * @ja ダイナミッククエリ状態管理クラス\n */\nexport class DynamicCondition<TItem extends object, TKey extends Keys<TItem> = Keys<TItem>> implements DynamicConditionSeed<TItem, TKey> {\n\n    private _operators: DynamicOperatorContext<TItem>[];\n    private _combination: DynamicCombination;\n    private _sumKeys: Keys<TItem>[];\n    private _limit?: DynamicLimitCondition<TItem>;\n    private _random: boolean;\n    private _sortKeys: SortKey<TKey>[];\n\n    /**\n     * constructor\n     *\n     * @param seeds\n     *  - `en` [[DynamicConditionSeed]] instance\n     *  - `ja` [[DynamicConditionSeed]] インスタンス\n     */\n    constructor(seeds: DynamicConditionSeed<TItem, TKey> = { operators: [] }) {\n        const { operators, combination, sumKeys, limit, random, sortKeys } = seeds;\n        this._operators     = operators;\n        this._combination   = null != combination ? combination : DynamicCombination.AND;\n        this._sumKeys       = null != sumKeys ? sumKeys : [];\n        this._limit         = limit;\n        this._random        = !!random;\n        this._sortKeys      = sortKeys || [];\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: DynamicConditionSeed\n\n    get operators(): DynamicOperatorContext<TItem>[] {\n        return this._operators;\n    }\n\n    set operators(values: DynamicOperatorContext<TItem>[]) {\n        this._operators = values;\n    }\n\n    get sumKeys(): (Keys<TItem>)[] {\n        return this._sumKeys;\n    }\n\n    set sumKeys(values: (Keys<TItem>)[]) {\n        this._sumKeys = values;\n    }\n\n    get combination(): DynamicCombination {\n        return this._combination;\n    }\n\n    set combination(value: DynamicCombination) {\n        this._combination = value;\n    }\n\n    get limit(): DynamicLimitCondition<TItem> | undefined {\n        return this._limit;\n    }\n\n    set limit(value: DynamicLimitCondition<TItem> | undefined) {\n        this._limit = value;\n    }\n\n    get random(): boolean {\n        return this._random;\n    }\n\n    set random(value: boolean) {\n        this._random = value;\n    }\n\n    get sortKeys(): SortKey<TKey>[] {\n        return this._sortKeys;\n    }\n\n    set sortKeys(values: SortKey<TKey>[]) {\n        this._sortKeys = values;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public accessor:\n\n    /**\n     * @en Get comparator functions.\n     * @ja 比較関数取得\n     */\n    get comparators(): SortCallback<TItem>[] {\n        return convertSortKeys(this._sortKeys);\n    }\n\n    /**\n     * @en Get synthesis filter function.\n     * @ja 合成済みフィルタ関数取得\n     */\n    get filter(): FilterCallback<TItem> {\n        let fltr: FilterCallback<TItem> | undefined;\n\n        for (const cond of this._operators) {\n            const { operator, prop, value } = cond;\n            switch (operator) {\n                case DynamicOperator.EQUAL:\n                    fltr = combination(\n                        this._combination,\n                        equal<TItem>(prop, value as ValueTypeALL<TItem>),\n                        fltr,\n                    );\n                    break;\n                case DynamicOperator.NOT_EQUAL:\n                    fltr = combination(\n                        this._combination,\n                        notEqual<TItem>(prop, value as ValueTypeALL<TItem>),\n                        fltr,\n                    );\n                    break;\n                case DynamicOperator.GREATER:\n                    fltr = combination(\n                        this._combination,\n                        greater<TItem>(prop, value as ValueTypeComparable<TItem>),\n                        fltr,\n                    );\n                    break;\n                case DynamicOperator.LESS:\n                    fltr = combination(\n                        this._combination,\n                        less<TItem>(prop, value as ValueTypeComparable<TItem>),\n                        fltr,\n                    );\n                    break;\n                case DynamicOperator.GREATER_EQUAL:\n                    fltr = combination(\n                        this._combination,\n                        greaterEqual<TItem>(prop, value as ValueTypeComparable<TItem>),\n                        fltr,\n                    );\n                    break;\n                case DynamicOperator.LESS_EQUAL:\n                    fltr = combination(\n                        this._combination,\n                        lessEqual<TItem>(prop, value as ValueTypeComparable<TItem>),\n                        fltr,\n                    );\n                    break;\n                case DynamicOperator.LIKE:\n                    fltr = combination(\n                        this._combination,\n                        like<TItem>(prop, value as ValueTypeString<TItem>),\n                        fltr,\n                    );\n                    break;\n                case DynamicOperator.NOT_LIKE:\n                    fltr = combination(\n                        this._combination,\n                        notLike<TItem>(prop, value as ValueTypeString<TItem>),\n                        fltr,\n                    );\n                    break;\n                case DynamicOperator.DATE_LESS_EQUAL:\n                    fltr = combination(\n                        this._combination,\n                        dateLessEqual<TItem>(prop, value as number, cond.unit),\n                        fltr,\n                    );\n                    break;\n                case DynamicOperator.DATE_LESS_NOT_EQUAL:\n                    fltr = combination(\n                        this._combination,\n                        dateLessNotEqual<TItem>(prop, value as number, cond.unit),\n                        fltr,\n                    );\n                    break;\n                case DynamicOperator.RANGE:\n                    fltr = combination(\n                        this._combination,\n                        range<TItem>(prop, value as ValueTypeComparable<TItem>, cond.range as ValueTypeComparable<TItem>),\n                        fltr,\n                    );\n                    break;\n                default:\n                    console.warn(`unknown operator: ${operator}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n                    break;\n            }\n        }\n\n        return fltr || ((/* item */) => true);\n    }\n}\n","import {\n    Keys,\n    isFunction,\n    sort,\n    shuffle,\n} from '@cdp/core-utils';\nimport { checkCanceled as cc } from '@cdp/promise';\nimport { RESULT_CODE, makeResult } from '@cdp/result';\nimport {\n    SortKey,\n    SortCallback,\n    FilterCallback,\n    CollectionItemQueryOptions,\n    CollectionItemQueryResult,\n    CollectionQueryInfo,\n    CollectionItemProvider,\n    DynamicLimit,\n} from '../interfaces';\nimport { convertSortKeys } from '../utils/comparator';\nimport { DynamicCondition } from './dynamic-condition';\n\nconst {\n    /** @internal */ trunc\n} = Math;\n\n/** @internal 使用するプロパティが保証された CollectionItemQueryOptions */\ninterface SafeCollectionQueryOptions<TItem extends object, TKey extends Keys<TItem>> extends CollectionItemQueryOptions<TItem, TKey> {\n    sortKeys: SortKey<TKey>[];\n    comparators: SortCallback<TItem>[];\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Apply `filter` and `sort key` to the `items` from [[queryItems]]`()` result.\n * @ja [[queryItems]]`()` した `items` に対して `filter` と `sort key` を適用\n */\nexport function searchItems<TItem>(items: TItem[], filter?: FilterCallback<TItem> | null, ...comparators: SortCallback<TItem>[]): TItem[] {\n    let result = isFunction(filter) ? items.filter(filter) : items.slice();\n    for (const comparator of comparators) {\n        if (isFunction(comparator)) {\n            result = sort(result, comparator);\n        }\n    }\n    return result;\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal conditinalFix に使用する Criteria Map */\nconst _limitCriteria = {\n    [DynamicLimit.COUNT]: null,\n    [DynamicLimit.SUM]: { coeff: 1 },\n    [DynamicLimit.SECOND]: { coeff: 1000 },\n    [DynamicLimit.MINUTE]: { coeff: 60 * 1000 },\n    [DynamicLimit.HOUR]: { coeff: 60 * 60 * 1000 },\n    [DynamicLimit.DAY]: { coeff: 24 * 60 * 60 * 1000 },\n    [DynamicLimit.KB]: { coeff: 1024 },\n    [DynamicLimit.MB]: { coeff: 1024 * 1024 },\n    [DynamicLimit.GB]: { coeff: 1024 * 1024 * 1024 },\n    [DynamicLimit.TB]: { coeff: 1024 * 1024 * 1024 * 1024 },\n};\n\n/**\n * @en Fix the target items by [[DynamicCondition]].\n * @ja [[DynamicCondition]] に従い対象を整形\n *\n * @param items\n *  - `en` target items (destructive)\n *  - `ja` 対象のアイテム (破壊的)\n * @param condition\n *  - `en` condition object\n *  - `ja` 条件オブジェクト\n */\nexport function conditionalFix<TItem extends object, TKey extends Keys<TItem> = Keys<TItem>>(\n    items: TItem[],\n    condition: DynamicCondition<TItem, TKey>\n): CollectionItemQueryResult<TItem> {\n    const { random, limit, sumKeys } = condition;\n\n    if (random) {\n        shuffle(items, true);\n    }\n\n    if (limit) {\n        const { unit, value, prop } = limit;\n        const reset: TItem[] = [];\n        const criteria = _limitCriteria[unit];\n        const limitCount = value;\n        const excess = !!limit.excess;\n        let count = 0;\n        for (const item of items) {\n            if (!criteria) {\n                count++;\n            } else if (null != item[prop as Keys<TItem>]) {\n                count += (Number(item[prop as Keys<TItem>]) / criteria.coeff);\n            } else {\n                console.warn(`cannot access property: ${prop}`);\n                continue;\n            }\n\n            if (limitCount < count) {\n                if (excess) {\n                    reset.push(item);\n                }\n                break;\n            } else {\n                reset.push(item);\n            }\n        }\n        items = reset;\n    }\n\n    const result = {\n        total: items.length,\n        items,\n    } as CollectionItemQueryResult<TItem, Keys<TItem>>;\n\n    if (0 < sumKeys.length) {\n        for (const item of items) {\n            for (const key of sumKeys) {\n                if (!(key in result)) {\n                    (result[key] as unknown as number) = 0;\n                }\n                (result[key] as unknown as number) += Number(item[key]);\n            }\n        }\n    }\n\n    return result;\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal すでにキャッシュされている対象に対して CollectionItemQueryOptions に指定された振る舞いを行う内部 query 関数 */\nasync function queryFromCache<TItem extends object, TKey extends Keys<TItem>>(\n    cached: TItem[],\n    options: SafeCollectionQueryOptions<TItem, TKey>\n): Promise<CollectionItemQueryResult<TItem>> {\n    const {\n        filter,\n        comparators,\n        index: baseIndex,\n        limit,\n        cancel: token,\n        progress,\n        auto,\n        noSearch,\n    } = options;\n\n    // 対象なし\n    if (!cached.length) {\n        return {\n            total: 0,\n            items: [],\n            options,\n        } as CollectionItemQueryResult<TItem>;\n    }\n\n    // キャッシュに対してフィルタリング, ソートを実行\n    const targets = noSearch ? cached.slice() : searchItems(cached, filter, ...comparators);\n\n    const results: TItem[] = [];\n    let index: number = (null != baseIndex) ? baseIndex : 0;\n\n    while (true) {\n        await cc(token);\n        if (index < 0 || targets.length <= index || trunc(index) !== index) {\n            throw makeResult(RESULT_CODE.ERROR_MVC_INVALID_ACCESS, `invalid index: ${index}`);\n        } else if (null != limit && (limit <= 0 || trunc(limit) !== limit)) {\n            throw makeResult(RESULT_CODE.ERROR_MVC_INVALID_ACCESS, `invalid limit: ${ limit }`);\n        }\n\n        const opts = Object.assign(options, { index });\n        const items = targets.slice(index, (null != limit) ? index + limit : undefined);\n\n        results.push(...items);\n\n        const retval = {\n            total: targets.length,\n            items,\n            options: { ...opts } as CollectionItemQueryOptions<TItem>,\n        } as CollectionItemQueryResult<TItem>;\n\n        // 進捗通知\n        if (isFunction(progress)) {\n            progress({ ...retval });\n        }\n\n        if (auto && null != limit) {\n            if (targets.length <= index + limit) {\n                // 自動継続指定時には最後にすべての item を返却\n                retval.items = results;\n            } else {\n                index += items.length;\n                continue;\n            }\n        }\n\n        return retval;\n    }\n}\n\n/** @internal レスポンスのキャッシュを試行 */\nfunction tryCache<TItem extends object, TKey extends Keys<TItem>>(\n    queryInfo: CollectionQueryInfo<TItem, TKey>,\n    result: CollectionItemQueryResult<TItem>,\n    options: CollectionItemQueryOptions<TItem>\n): void {\n    const { noCache, noSearch } = options;\n    const canCache = !noCache && !noSearch && result.total && result.total === result.items.length;\n    if (canCache) {\n        queryInfo.cache = { ...result };\n        delete queryInfo.cache.options;\n    }\n}\n\n/** @internal `provider` 関数を使用して CollectionItemQueryOptions に指定された振る舞いを行う内部 `query` 関数 */\nasync function queryFromProvider<TItem extends object, TKey extends Keys<TItem>>(\n    queryInfo: CollectionQueryInfo<TItem, TKey>,\n    provider: CollectionItemProvider<TItem, TKey>,\n    options: SafeCollectionQueryOptions<TItem, TKey>\n): Promise<CollectionItemQueryResult<TItem>> {\n    const {\n        index: baseIndex,\n        limit,\n        cancel: token,\n        progress,\n        auto,\n    } = options;\n\n    const results: TItem[] = [];\n\n    const receivedAll = (resp: CollectionItemQueryResult<TItem>): boolean => {\n        const hasCond = !!resp.options?.condition;\n        return hasCond || resp.total === resp.items.length;\n    };\n\n    let index: number = (null != baseIndex) ? baseIndex : 0;\n\n    while (true) {\n        await cc(token);\n        if (index < 0 || trunc(index) !== index) {\n            throw makeResult(RESULT_CODE.ERROR_MVC_INVALID_ACCESS, `invalid index: ${index}`);\n        } else if (null != limit && (limit <= 0 || trunc(limit) !== limit)) {\n            throw makeResult(RESULT_CODE.ERROR_MVC_INVALID_ACCESS, `invalid limit: ${limit}`);\n        }\n\n        const opts = Object.assign(options, { index });\n        let resp = await provider(opts);\n        const nextOpts = Object.assign({}, opts, resp.options);\n\n        if (receivedAll(resp)) {\n            tryCache(queryInfo, resp, nextOpts);\n\n            const { noSearch, condition: seed } = nextOpts;\n            if (seed) {\n                const condition = new DynamicCondition(seed);\n                resp = conditionalFix(searchItems(\n                    resp.items,\n                    condition.filter,\n                    ...condition.comparators\n                ), condition);\n\n                if (queryInfo.cache) {\n                    Object.assign(queryInfo.cache, resp);\n                    delete queryInfo.cache.options;\n                }\n            }\n\n            return queryFromCache(resp.items, Object.assign(opts, { noSearch }));\n        }// eslint-disable-line brace-style\n\n        else {\n            results.push(...resp.items);\n\n            const retval = {\n                total: resp.total,\n                items: resp.items,\n                options: nextOpts,\n            } as CollectionItemQueryResult<TItem>;\n\n            // 進捗通知\n            if (isFunction(progress)) {\n                progress({ ...retval });\n            }\n\n            if (auto && null != limit) {\n                if (resp.total <= index + limit) {\n                    // 自動継続指定時には最後にすべての item を返却\n                    retval.items = results;\n                } else {\n                    index += resp.items.length;\n                    continue;\n                }\n            }\n\n            tryCache(queryInfo, retval, nextOpts);\n            return retval;\n        }\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal SafeCollectionQueryOptions に変換 */\nfunction ensureOptions<TItem extends object, TKey extends Keys<TItem>>(\n    options: CollectionItemQueryOptions<TItem, TKey> | undefined\n): SafeCollectionQueryOptions<TItem, TKey> {\n    const opts = Object.assign({ sortKeys: [] }, options);\n    const { noSearch, sortKeys } = opts;\n\n    if (!noSearch && (!opts.comparators || opts.comparators.length <= 0)) {\n        opts.comparators = convertSortKeys(sortKeys);\n    }\n\n    return opts as SafeCollectionQueryOptions<TItem, TKey>;\n}\n\n/**\n * @en Low level function for [[Collection]] query items.\n * @ja [[Collection]] Item をクエリする低レベル関数\n *\n * @param queryInfo\n *  - `en` query information\n *  - `ja` クエリ情報\n * @param provider\n *  - `en` provider function\n *  - `ja` プロバイダ関数\n * @param options\n *  - `en` query options\n *  - `ja` クエリオプション\n */\nexport async function queryItems<TItem extends object, TKey extends Keys<TItem>>(\n    queryInfo: CollectionQueryInfo<TItem, TKey>,\n    provider: CollectionItemProvider<TItem, TKey>,\n    options?: CollectionItemQueryOptions<TItem, TKey>\n): Promise<TItem[]> {\n    const opts = ensureOptions(options);\n    const { sortKeys, comparators, filter } = opts;\n\n    // query に使用した sort, filter 情報をキャッシュ\n    Object.assign(queryInfo, { sortKeys, comparators, filter });\n\n    if (queryInfo.cache) {\n        return (await queryFromCache(queryInfo.cache.items, opts)).items;\n    } else {\n        return (await queryFromProvider(queryInfo, provider, opts)).items;\n    }\n}\n","import {\n    Constructor,\n    Class,\n    UnknownObject,\n    PlainObject,\n    Keys,\n    isNil,\n    isArray,\n    isFunction,\n    isString,\n    noop,\n    luid,\n    at,\n    setMixClassAttribute,\n} from '@cdp/core-utils';\nimport {\n    Silenceable,\n    Subscribable,\n    EventBroker,\n    EventSource,\n    EventPublisher,\n} from '@cdp/events';\nimport {\n    Result,\n    RESULT_CODE,\n    FAILED,\n    makeResult,\n} from '@cdp/result';\nimport { SyncContext, defaultSync } from '@cdp/data-sync';\nimport {\n    Model,\n    ModelConstructionOptions,\n    ModelSaveOptions,\n    isModel,\n} from '@cdp/model';\nimport {\n    SortCallback,\n    FilterCallback,\n    CollectionSortOptions,\n    CollectionItemQueryResult,\n    CollectionItemQueryOptions,\n    CollectionItemProvider,\n    CollectionQueryInfo,\n    CollectionEvent,\n    CollectionConstructionOptions,\n    CollectionOperationOptions,\n    CollectionAddOptions,\n    CollectionSetOptions,\n    CollectionReSortOptions,\n    CollectionUpdateOptions,\n    CollectionQueryOptions,\n    CollectionRequeryOptions,\n    CollectionAfterFilterOptions,\n} from './interfaces';\nimport { convertSortKeys } from './utils';\nimport { searchItems, queryItems } from './query';\n\n/** @internal */ const _properties             = Symbol('properties');\n/** @internal */ const _createIterableIterator = Symbol('create-iterable-iterator');\n/** @internal */ const _prepareModel           = Symbol('prepare-model');\n/** @internal */ const _removeModels           = Symbol('remove-models');\n/** @internal */ const _addReference           = Symbol('add-reference');\n/** @internal */ const _removeReference        = Symbol('remove-reference');\n/** @internal */ const _onModelEvent           = Symbol('model-event-handler');\n\n/** @internal */\ninterface Property<T extends object, K extends Keys<T>> {\n    readonly constructOptions: CollectionConstructionOptions<T, K>;\n    readonly provider: CollectionItemProvider<T, K>;\n    readonly cid: string;\n    readonly queryOptions: CollectionItemQueryOptions<T, K>;\n    queryInfo: CollectionQueryInfo<T, K>;\n    readonly modelOptions: ModelConstructionOptions;\n    readonly byId: Map<string, T>;\n    store: T[];\n    afterFilter?: FilterCallback<T>;\n}\n\n/** @internal reset model context */\nconst resetModelStore = <T extends object, K extends Keys<T>>(context: Property<T, K>): void => {\n    context.byId.clear();\n    context.store.length = 0;\n};\n\n/** @internal */\nconst ensureSortOptions = <T extends object, K extends Keys<T>>(options: CollectionSortOptions<T, K>): Required<CollectionSortOptions<T, K>> => {\n    const { sortKeys: keys, comparators: comps } = options;\n    return {\n        sortKeys: keys || [],\n        comparators: comps || convertSortKeys(keys || []),\n    };\n};\n\n/** @internal */\nconst modelIdAttribute = <T extends object>(ctor: Constructor<T> | undefined): string => {\n    return ctor?.['idAttribute'] || 'id';\n};\n\n/** @internal */\nconst getModelId = <T extends object>(attrs: T, ctor: Constructor<T> | undefined): string => {\n    return attrs[modelIdAttribute(ctor)];\n};\n\n/** @internal */\nconst getChangedIds = <T extends object>(obj: object, ctor: Constructor<T> | undefined): { id: string; prevId?: string; } | undefined => {\n    type ModelLike = { previous: (key: string) => string; };\n    const model = obj as ModelLike;\n\n    const idAttribute = modelIdAttribute(ctor);\n    const id = model[idAttribute];\n    if (!isString(id)) {\n        return undefined;\n    }\n\n    return { id: model[idAttribute], prevId: isFunction(model.previous) ? model.previous(idAttribute) : undefined };\n};\n\n/** @internal */\nconst modelConstructor = <T extends object, E extends CollectionEvent<T>, K extends Keys<T>>(self: Collection<T, E, K>): Class | undefined => {\n    return self.constructor['model'];\n};\n\n/** @internal */\nconst isCollectionModel = <T extends object, E extends CollectionEvent<T>, K extends Keys<T>>(x: unknown, self: Collection<T, E, K>): x is T => {\n    const ctor = modelConstructor(self);\n    return isFunction(ctor) ? x instanceof ctor : false;\n};\n\n/** @internal */\nconst spliceArray = <T>(target: T[], insert: T[], at: number): void => {\n    at = Math.min(Math.max(at, 0), target.length);\n    target.splice(at, 0, ...insert);\n};\n\n/** @internal */\nfunction parseFilterArgs<T extends object>(...args: unknown[]): CollectionAfterFilterOptions<T> {\n    const [filter, options] = args;\n    if (null == filter) {\n        return {};\n    } else if (!isFunction(filter)) {\n        return filter as CollectionAfterFilterOptions<T>;\n    } else {\n        return Object.assign({}, options, { filter }) as CollectionAfterFilterOptions<T>;\n    }\n}\n\n/** @internal */ const _setOptions = { add: true, remove: true, merge: true };\n/** @internal */ const _addOptions = { add: true, remove: false };\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Base class definition for collection that is ordered sets of models.\n * @ja Model の集合を扱う Collection の基底クラス定義.\n *\n * @example <br>\n *\n * ```ts\n * import { PlainObject } from '@cdp/core-utils';\n * import { Model, ModelConstructor } from '@cdp/model';\n * import {\n *     Collection,\n *     CollectionItemQueryOptions,\n *     CollectionItemQueryResult,\n * } from '@cdp/collection';\n *\n * // Model schema\n * interface TrackAttribute {\n *   uri: string;\n *   title: string;\n *   artist: string;\n *   album:  string;\n *   releaseDate: Date;\n *   :\n * }\n *\n * // Model definition\n * const TrackBase = Model as ModelConstructor<Model<TrackAttribute>, TrackAttribute>;\n * class Track extends TrackBase {\n *     static idAttribute = 'uri';\n * }\n *\n * // Collection definition\n * class Playlist extends Collection<Track> {\n *     // set target Model constructor\n *     static readonly model = Track;\n *\n *     // @override if need to use custom content provider for fetch.\n *     protected async sync(\n *         options?: CollectionItemQueryOptions<Track>\n *     ): Promise<CollectionItemQueryResult<object>> {\n *         // some specific implementation here.\n *         const items = await customProvider(options);\n *         return {\n *             total: items.length,\n *             items,\n *             options,\n *         } as CollectionItemQueryResult<object>;\n *     }\n *\n *     // @override if need to convert a response into a list of models.\n *     protected parse(response: PlainObject[]): TrackAttribute[] {\n *         return response.map(seed => {\n *             const date = seed.releaseDate;\n *             seed.releaseDate = new Date(date);\n *             return seed;\n *         }) as TrackAttribute[];\n *      }\n * }\n *\n * let seeds: TrackAttribute[];\n *\n * const playlist = new Playlist(seeds, {\n *     // default query options\n *     queryOptions: {\n *         sortKeys: [\n *             { name: 'title', order: SortOrder.DESC, type: 'string' },\n *         ],\n *     }\n * });\n *\n * await playlist.requery();\n *\n * for (const track of playlist) {\n *     console.log(JSON.stringify(track.toJSON()));\n * }\n * ```\n */\nexport abstract class Collection<\n    TModel extends object = any, // eslint-disable-line @typescript-eslint/no-explicit-any\n    TEvent extends CollectionEvent<TModel> = CollectionEvent<TModel>,\n    TKey extends Keys<TModel> = Keys<TModel>\n> extends EventSource<TEvent> implements Iterable<TModel> {\n\n    /**\n     * @en Model constructor. <br>\n     *     The constructor is used internally by this [[Collection]] class for [[TModel]] construction.\n     * @ja Model コンストラクタ <br>\n     *     [[Collection]] クラスが [[TModel]] を構築するために使用する\n     */\n    static readonly model?: Class;\n\n    /** @internal */\n    private readonly [_properties]: Property<TModel, TKey>;\n\n///////////////////////////////////////////////////////////////////////\n// construction/destruction:\n\n    /**\n     * constructor\n     *\n     * @param seeds\n     *  - `en` given the seed of model array.\n     *  - `ja` Model 要素の配列を指定\n     * @param options\n     *  - `en` construction options.\n     *  - `ja` 構築オプション\n     */\n    constructor(seeds?: TModel[] | PlainObject[], options?: CollectionConstructionOptions<TModel, TKey>) {\n        super();\n        const opts = Object.assign({ modelOptions: {}, queryOptions: {} }, options);\n\n        const { modelOptions, queryOptions } = opts;\n\n        this[_properties] = {\n            constructOptions: opts,\n            provider: opts.provider || this.sync.bind(this),\n            cid: luid('collection:', 8),\n            queryOptions,\n            queryInfo: {},\n            modelOptions,\n            byId: new Map<string, TModel>(),\n            store: [],\n        } as unknown as Property<TModel, TKey>;\n\n        this.initQueryInfo();\n\n        /* model event handler */\n        this[_onModelEvent] = (event: string, model: TModel | undefined, collection: this, options: CollectionOperationOptions): void => {\n            if (isString(event) && event.startsWith('@') && model) {\n                if (('@add' === event || '@remove' === event) && collection !== this) {\n                    return;\n                }\n                if ('@destroy' === event) {\n                    // model event arguments adjustment.\n                    options = (collection as any); // eslint-disable-line @typescript-eslint/no-explicit-any\n                    collection = this;\n                    this.remove(model, options);\n                }\n                if (event.startsWith('@change')) {\n                    // model event arguments adjustment.\n                    options = {};\n                    collection = this;\n                    if ('@change' === event) {\n                        const ids = getChangedIds(model, modelConstructor(this));\n                        if (ids) {\n                            const { id, prevId } = ids;\n                            if (prevId !== id) {\n                                const { byId } = this[_properties];\n                                byId.set(id, model);\n                                if (null != prevId) {\n                                    byId.delete(prevId);\n                                }\n                            }\n                        }\n                    }\n                }\n                // delegate event\n                this.trigger.call(this, event, model, collection, options); // eslint-disable-line no-useless-call\n            }\n        };\n\n        if (seeds) {\n            this.reset(seeds, Object.assign({ silent: true }, opts));\n        }\n    }\n\n    /**\n     * @ja Initialize query info\n     * @ja クエリ情報の初期化\n     */\n    protected initQueryInfo(): void {\n        const { sortKeys, comparators } = ensureSortOptions(this._defaultQueryOptions);\n        this._queryInfo = { sortKeys, comparators };\n    }\n\n    /**\n     * @en Released all instances and event listener under the management.\n     * @ja 管理対象を破棄\n     *\n     * @param options\n     *  - `en` options (reserved).\n     *  - `ja` オプション (予約)\n     */\n    public release(options?: CollectionOperationOptions): this { // eslint-disable-line @typescript-eslint/no-unused-vars\n        this[_properties].afterFilter = undefined;\n        this[_properties].store = [];\n        this.initQueryInfo();\n        return this.stopListening();\n    }\n\n    /**\n     * @ja Clear cache instance method\n     * @ja キャッシュの破棄\n     */\n    protected clearCache(): void {\n        delete this._queryInfo.cache;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// accessor: attributes\n\n    /**\n     * @en Get content ID.\n     * @ja コンテント ID を取得\n     */\n    get id(): string {\n        return this[_properties].cid;\n    }\n\n    /**\n     * @en Get models.\n     * @ja Model アクセス\n     */\n    get models(): readonly TModel[] {\n        const { _queryFilter, _afterFilter } = this;\n        const { store } = this[_properties];\n        return (_afterFilter && _afterFilter !== _queryFilter) ? store.filter(_afterFilter) : store;\n    }\n\n    /**\n     * @en number of models.\n     * @ja 内包する Model 数\n     */\n    get length(): number {\n        return this.models.length;\n    }\n\n    /**\n     * @en Check applied after-filter.\n     * @ja 絞り込み用フィルタが適用されているかを判定\n     */\n    get filtered(): boolean {\n        return !!this[_properties].afterFilter;\n    }\n\n    /**\n     * @en [[CollectionQueryInfo]] instance\n     * @ja [[CollectionQueryInfo]] を格納するインスタンス\n     */\n    protected get _queryInfo(): CollectionQueryInfo<TModel, TKey> {\n        return this[_properties].queryInfo;\n    }\n\n    /**\n     * @en [[CollectionQueryInfo]] instance\n     * @ja [[CollectionQueryInfo]] を格納するインスタンス\n     */\n    protected set _queryInfo(val: CollectionQueryInfo<TModel, TKey>) {\n        this[_properties].queryInfo = val;\n    }\n\n    /**\n     * @en Get creating options.\n     * @ja 構築時のオプションを取得\n     */\n    protected get _options(): CollectionConstructionOptions<TModel, TKey> {\n        return this[_properties].constructOptions;\n    }\n\n    /**\n     * @en Get default provider.\n     * @ja 既定のプロバイダを取得\n     */\n    protected get _provider(): CollectionItemProvider<TModel, TKey> {\n        return this[_properties].provider;\n    }\n\n    /**\n     * @en Get default parse behaviour.\n     * @ja 既定の parse 動作を取得\n     */\n    protected get _defaultParse(): boolean | undefined {\n        return this._options.parse;\n    }\n\n    /**\n     * @en Get default query options.\n     * @ja 既定のクエリオプションを取得\n     */\n    protected get _defaultQueryOptions(): CollectionItemQueryOptions<TModel, TKey> {\n        return this[_properties].queryOptions;\n    }\n\n    /**\n     * @en Get last query options.\n     * @ja 最後のクエリオプションを取得\n     */\n    protected get _lastQueryOptions(): CollectionItemQueryOptions<TModel, TKey> {\n        const { sortKeys, comparators, filter } = this[_properties].queryInfo;\n        const opts: CollectionItemQueryOptions<TModel, TKey> = {};\n\n        sortKeys.length && (opts.sortKeys = sortKeys);\n        comparators.length && (opts.comparators = comparators);\n        filter && (opts.filter = filter);\n\n        return opts;\n    }\n\n    /**\n     * @en Access to sort comparators.\n     * @ja ソート用比較関数へのアクセス\n     */\n    protected get _comparators(): SortCallback<TModel>[] {\n        return this[_properties].queryInfo.comparators;\n    }\n\n    /**\n     * @en Access to query-filter.\n     * @ja クエリ用フィルタ関数へのアクセス\n     */\n    protected get _queryFilter(): FilterCallback<TModel> | undefined {\n        return this[_properties].queryInfo.filter;\n    }\n\n    /**\n     * @en Access to after-filter.\n     * @ja 絞り込み用フィルタ関数へのアクセス\n     */\n    protected get _afterFilter(): FilterCallback<TModel> | undefined {\n        return this[_properties].afterFilter;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// operations: utils\n\n    /**\n     * @en Get a model from a collection, specified by an `id`, a `cid`, or by passing in a model instance.\n     * @ja `id`, `cid` およびインスタンスから Model を特定\n     *\n     * @param seed\n     *  - `en` `id`, a `cid`, or by passing in a model instance\n     *  - `ja`  `id`, `cid` およびインスタンス\n     */\n    public get(seed: string | object | undefined): TModel | undefined {\n        if (null == seed) {\n            return undefined;\n        }\n\n        const { byId } = this[_properties];\n        if (isString(seed) && byId.has(seed)) {\n            return byId.get(seed);\n        }\n\n        const id = getModelId(isModel(seed) ? seed.toJSON() : seed as object, modelConstructor(this));\n        const cid = (seed as object as { _cid?: string; })._cid;\n\n        return byId.get(id) || (cid && byId.get(cid)) as TModel | undefined;\n    }\n\n    /**\n     * @en Returns `true` if the model is in the collection by an `id`, a `cid`, or by passing in a model instance.\n     * @ja `id`, `cid` およびインスタンスから Model を所有しているか判定\n     *\n     * @param seed\n     *  - `en` `id`, a `cid`, or by passing in a model instance\n     *  - `ja`  `id`, `cid` およびインスタンス\n     */\n    public has(seed: string | object | undefined): boolean {\n        return null != this.get(seed);\n    }\n\n    /**\n     * @en Return a copy of the model's `attributes` object.\n     * @ja Model 属性値のコピーを返却\n     */\n    public toJSON(): object[] {\n        return this.models.map(m => isModel(m) ? m.toJSON() : m);\n    }\n\n    /**\n     * @es Clone this instance.\n     * @ja インスタンスの複製を返却\n     *\n     * @override\n     */\n    public clone(): this {\n        const { constructor, _options } = this;\n        return new (constructor as Constructor<this>)(this[_properties].store, _options);\n    }\n\n    /**\n     * @en Force a collection to re-sort itself.\n     * @ja Collection 要素の再ソート\n     *\n     * @param options\n     *  - `en` sort options.\n     *  - `ja` ソートオプション\n     */\n    public sort(options?: CollectionReSortOptions<TModel, TKey>): this {\n        const opts = options || {};\n        const { noThrow, silent } = opts;\n        const { sortKeys, comparators: comps } = ensureSortOptions(opts);\n        const comparators = 0 < comps.length ? comps : this._comparators;\n\n        if (comparators.length <= 0) {\n            if (noThrow) {\n                return this;\n            }\n            throw makeResult(RESULT_CODE.ERROR_MVC_INVALID_COMPARATORS, 'Cannot sort a set without a comparator.');\n        }\n\n        this[_properties].store = searchItems(this[_properties].store, this._afterFilter, ...comparators);\n\n        // update queryInfo\n        this[_properties].queryInfo.comparators = comparators;\n        if (0 < sortKeys.length) {\n            this[_properties].queryInfo.sortKeys = sortKeys;\n        }\n\n        if (!silent) {\n            (this as Collection).trigger('@sort', this as Collection, opts);\n        }\n\n        return this;\n    }\n\n    /**\n     * @en Apply after-filter to collection itself.\n     * @ja 絞り込み用フィルタの適用\n     *\n     * @param callback\n     *  - `en` filter callback.\n     *  - `ja` フィルタコールバック関数\n     * @param options\n     *  - `en` Silenceable options.\n     *  - `ja` Silenceable オプション\n     */\n    public filter(callback: FilterCallback<TModel> | undefined, options?: Silenceable): this;\n\n    /**\n     * @en Apply after-filter to collection itself.\n     * @ja 絞り込み用フィルタの適用\n     *\n     * @param options\n     *  - `en` after-filter options.\n     *  - `ja` 絞り込みオプション\n     */\n    public filter(options: CollectionAfterFilterOptions<TModel>): this;\n\n    public filter(...args: unknown[]): this {\n        const opts = parseFilterArgs(...args);\n        const { filter, silent } = opts;\n        if (filter !== this[_properties].afterFilter) {\n            this[_properties].afterFilter = filter;\n            if (!silent) {\n                (this as Collection).trigger('@filter', this as Collection, opts);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @en Get the model at the given index. If negative value is given, the target will be found from the last index.\n     * @ja インデックス指定による Model へのアクセス. 負値の場合は末尾検索を実行\n     *\n     * @param index\n     *  - `en` A zero-based integer indicating which element to retrieve. <br>\n     *         If negative index is counted from the end of the matched set.\n     *  - `ja` 0 base のインデックスを指定 <br>\n     *         負値が指定された場合, 末尾からのインデックスとして解釈される\n     */\n    public at(index: number): TModel {\n        return at(this.models as TModel[], index);\n    }\n\n    /**\n     * @en Get the first element of the model.\n     * @ja Model の最初の要素を取得\n     */\n    public first(): TModel | undefined;\n\n    /**\n     * @en Get the value of `count` elements of the model from the first.\n     * @ja Model の先頭から`count` 分の要素を取得\n     */\n    public first(count: number): TModel[];\n\n    public first(count?: number): TModel | TModel[] | undefined {\n        const targets = this.models;\n        if (null == count) {\n            return targets[0];\n        } else {\n            return targets.slice(0, count);\n        }\n    }\n\n    /**\n     * @en Get the last element of the model.\n     * @ja Model の最初の要素を取得\n     */\n    public last(): TModel | undefined;\n\n    /**\n     * @en Get the value of `count` elements of the model from the last.\n     * @ja Model の先頭から`count` 分の要素を取得\n     */\n    public last(count: number): TModel[];\n\n    public last(count?: number): TModel | TModel[] | undefined {\n        const targets = this.models;\n        if (null == count) {\n            return targets[targets.length - 1];\n        } else {\n            return targets.slice(-1 * count);\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// operations: sync\n\n    /**\n     * @en Converts a response into the hash of attributes to be `set` on the collection. The default implementation is just to pass the response along.\n     * @ja レスポンスの変換メソッド. 既定では何もしない\n     *\n     * @override\n     */\n    protected parse(response: PlainObject | void, options?: CollectionSetOptions): TModel[] | PlainObject[] | undefined { // eslint-disable-line @typescript-eslint/no-unused-vars\n        return response as TModel[];\n    }\n\n    /**\n     * @en The [[fetch]] method proxy that is compatible with [[CollectionItemProvider]] returns one-shot result.\n     * @ja [[CollectionItemProvider]] 互換の単発の fetch 結果を返却. 必要に応じてオーバーライド可能.\n     *\n     * @override\n     *\n     * @param options\n     *  - `en` option object\n     *  - `ja` オプション\n     */\n    protected async sync(options?: CollectionItemQueryOptions<TModel, TKey>): Promise<CollectionItemQueryResult<object>> {\n        const items = await defaultSync().sync('read', this as SyncContext, options) as TModel[];\n        return {\n            total: items.length,\n            items,\n            options,\n        } as CollectionItemQueryResult<object>;\n    }\n\n    /**\n     * @en Fetch the [[Model]] from the server, merging the response with the model's local attributes.\n     * @ja [[Model]] 属性のサーバー同期. レスポンスのマージを実行\n     *\n     * @param options\n     *  - `en` fetch options.\n     *  - `ja` フェッチオプション\n     */\n    public async fetch(options?: CollectionQueryOptions<TModel, TKey>): Promise<object[]> {\n        const opts = Object.assign({ progress: noop }, this._defaultQueryOptions, options);\n\n        try {\n            const { progress: original, limit, reset, noCache } = opts;\n            const { _queryInfo, _provider } = this;\n            const finalize = (null == limit);\n\n            opts.progress = (info: CollectionItemQueryResult<TModel>) => {\n                original(info);\n                !finalize && this.add(info.items, opts);\n            };\n\n            if (noCache) {\n                this.clearCache();\n            }\n\n            if (!finalize && reset) {\n                this.reset(undefined, { silent: true });\n            }\n\n            const resp = await queryItems(_queryInfo, _provider, opts);\n\n            if (finalize) {\n                reset ? this.reset(resp, opts) : this.add(resp, opts);\n            }\n\n            (this as Collection).trigger('@sync', this as Collection, resp, opts);\n            return resp;\n        } catch (e) {\n            (this as Collection).trigger('@error', undefined, this as Collection, e, opts);\n            throw e;\n        }\n    }\n\n    /**\n     * @en Execute `fetch()` with last query options.\n     * @ja 前回と同条件で `fetch()` を実行\n     *\n     * @param options\n     *  - `en` requery options.\n     *  - `ja` リクエリオプション\n     */\n    public requery(options?: CollectionRequeryOptions): Promise<object[]> {\n        const opts = Object.assign({}, this._lastQueryOptions, options, { reset: true });\n        return this.fetch(opts);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// operations: collection setup\n\n    /**\n     * @en \"Smart\" update method of the collection with the passed list of models.\n     *       - if the model is already in the collection its attributes will be merged.\n     *       - if the collection contains any models that aren't present in the list, they'll be removed.\n     *       - All of the appropriate `@add`, `@remove`, and `@update` events are fired as this happens.\n     * @ja Collection の汎用更新処理\n     *       - 追加時にすでに Model が存在するときは、属性をマージ\n     *       - 指定リストに存在しない Model は削除\n     *       - 適切な `@add`, `@remove`, `@update` イベントを発生\n     *\n     * @param seed\n     *  - `en` Nil value.\n     *  - `ja` Nil 要素\n     * @param options\n     *  - `en` set options.\n     *  - `ja` 設定オプション\n     */\n    public set(seed: undefined, options?: CollectionSetOptions): void;\n\n    /**\n     * @en \"Smart\" update method of the collection with the passed list of models.\n     *       - if the model is already in the collection its attributes will be merged.\n     *       - if the collection contains any models that aren't present in the list, they'll be removed.\n     *       - All of the appropriate `@add`, `@remove`, and `@update` events are fired as this happens.\n     * @ja Collection の汎用更新処理\n     *       - 追加時にすでに Model が存在するときは、属性をマージ\n     *       - 指定リストに存在しない Model は削除\n     *       - 適切な `@add`, `@remove`, `@update` イベントを発生\n     *\n     * @param seed\n     *  - `en` given the seed of model.\n     *  - `ja` Model 要素を指定\n     * @param options\n     *  - `en` set options.\n     *  - `ja` 設定オプション\n     */\n    public set(seed: TModel | UnknownObject, options?: CollectionSetOptions): TModel;\n\n    /**\n     * @en \"Smart\" update method of the collection with the passed list of models.\n     *       - if the model is already in the collection its attributes will be merged.\n     *       - if the collection contains any models that aren't present in the list, they'll be removed.\n     *       - All of the appropriate `@add`, `@remove`, and `@update` events are fired as this happens.\n     * @ja Collection の汎用更新処理\n     *       - 追加時にすでに Model が存在するときは、属性をマージ\n     *       - 指定リストに存在しない Model は削除\n     *       - 適切な `@add`, `@remove`, `@update` イベントを発生\n     *\n     * @param seeds\n     *  - `en` given the seed of model array.\n     *  - `ja` Model 要素の配列を指定\n     * @param options\n     *  - `en` set options.\n     *  - `ja` 設定オプション\n     */\n    public set(seeds: (TModel | PlainObject)[], options?: CollectionSetOptions): TModel[];\n\n    public set(seeds?: TModel | UnknownObject | (TModel | PlainObject)[], options?: CollectionSetOptions): TModel | TModel[] | void {\n        if (isNil(seeds)) {\n            return;\n        }\n\n        const opts = Object.assign({ parse: this._defaultParse }, _setOptions, options) as CollectionUpdateOptions<TModel>;\n        if (opts.parse && !isCollectionModel(seeds, this)) {\n            seeds = this.parse(seeds, options) || [];\n        }\n\n        const singular = !isArray(seeds);\n        const items: (TModel | object | undefined)[] = singular ? [seeds] : (seeds as object[]).slice();\n\n        const { store } = this[_properties];\n\n        const at = ((candidate): number | void => {\n            if (null != candidate) {\n                if (candidate > store.length) {\n                    return store.length;\n                }\n                if (candidate < 0) {\n                    candidate += store.length;\n                    return (candidate < 0) ? 0 : candidate;\n                }\n                return candidate;\n            }\n        })(opts.at);\n\n        const set: object[]      = [];\n        const toAdd: TModel[]    = [];\n        const toMerge: TModel[]  = [];\n        const toRemove: TModel[] = [];\n        const modelSet = new Set<object>();\n\n        const { add, merge, remove, parse, silent } = opts;\n\n        let sort = false;\n        const sortable = this._comparators.length && null == at && false !== opts.sort;\n\n        type ModelFeature = {\n            parse: (atrr?: object, options?: object) => object;\n            setAttributes: (atrr: object, options?: object) => void;\n            hasChanged: () => boolean;\n        };\n\n        // Turn bare objects into model references, and prevent invalid models from being added.\n        for (const [i, item] of items.entries()) {\n            // If a duplicate is found, prevent it from being added and optionally merge it into the existing model.\n            const existing = this.get(item) as ModelFeature;\n            if (existing) {\n                if (merge && item !== existing) {\n                    let attrs = isModel(item) ? item.toJSON() : item;\n                    if (parse && isFunction(existing.parse)) {\n                        attrs = existing.parse(attrs, opts);\n                    }\n\n                    if (isFunction(existing.setAttributes)) {\n                        existing.setAttributes(attrs, opts);\n                    } else {\n                        Object.assign(existing, attrs);\n                    }\n\n                    toMerge.push(existing as TModel);\n                    if (sortable && !sort) {\n                        sort = isFunction(existing.hasChanged) ? existing.hasChanged() : true;\n                    }\n                }\n                if (!modelSet.has(existing)) {\n                    modelSet.add(existing);\n                    set.push(existing);\n                }\n                items[i] = existing;\n            } // eslint-disable-line brace-style\n\n            // If this is a new, valid model, push it to the `toAdd` list.\n            else if (add) {\n                const model = items[i] = this[_prepareModel](item, opts);\n                if (model) {\n                    toAdd.push(model);\n                    this[_addReference](model);\n                    modelSet.add(model);\n                    set.push(model);\n                }\n            }\n        }\n\n        // Remove stale models.\n        if (remove) {\n            for (const model of store) {\n                if (!modelSet.has(model)) {\n                    toRemove.push(model);\n                }\n            }\n            if (toRemove.length) {\n                this[_removeModels](toRemove, opts);\n            }\n        }\n\n        // See if sorting is needed, update `length` and splice in new models.\n        let orderChanged = false;\n        const replace = !sortable && add && remove;\n        if (set.length && replace) {\n            orderChanged = (store.length !== set.length) || store.some((m, index) => m !== set[index]);\n            store.length = 0;\n            spliceArray(store, set, 0);\n        } else if (toAdd.length) {\n            if (sortable) {\n                sort = true;\n            }\n            spliceArray(store, toAdd, null == at ? store.length : at);\n        }\n\n        // Silently sort the collection if appropriate.\n        if (sort) {\n            this.sort({ silent: true });\n        }\n\n        // Unless silenced, it's time to fire all appropriate add/sort/update events.\n        if (!silent) {\n            for (const [i, model] of toAdd.entries()) {\n                if (null != at) {\n                    opts.index = at + i;\n                }\n                if (isModel(model) || (model instanceof EventBroker)) {\n                    (model as Model).trigger('@add', model as Model, this, opts);\n                } else {\n                    (this as Collection).trigger('@add', model, this as Collection, opts);\n                }\n            }\n            if (sort || orderChanged) {\n                (this as Collection).trigger('@sort', this as Collection, opts);\n            }\n            if (toAdd.length || toRemove.length || toMerge.length) {\n                opts.changes = {\n                    added: toAdd,\n                    removed: toRemove,\n                    merged: toMerge\n                };\n                (this as Collection).trigger('@update', this as Collection, opts);\n            }\n        }\n\n        // drop undefined\n        const retval = items.filter(i => null != i) as TModel[];\n\n        // Return the added (or merged) model (or models).\n        return singular ? retval[0] : (retval.length ? retval : void 0);\n    }\n\n    /**\n     * @en Replace a collection with a new list of models (or attribute hashes), triggering a single `reset` event on completion.\n     * @ja Collection を新しい Model 一覧で置換. 完了時に `reset` イベントを発行\n     *\n     * @param seeds\n     *  - `en` given the seed of model array.\n     *  - `ja` Model 要素の配列を指定\n     * @param options\n     *  - `en` reset options.\n     *  - `ja` リセットオプション\n     */\n    public reset(seeds?: (TModel | PlainObject)[], options?: CollectionOperationOptions): TModel[] {\n        const opts = Object.assign({}, options) as CollectionOperationOptions & { previous: TModel[]; };\n        const { store } = this[_properties];\n        for (const model of store) {\n            this[_removeReference](model);\n        }\n\n        opts.previous = store.slice();\n        resetModelStore(this[_properties]);\n\n        const models = seeds ? this.add(seeds, Object.assign({ silent: true }, opts)) : [];\n\n        if (!opts.silent) {\n            (this as Collection).trigger('@reset', this as Collection, opts);\n        }\n\n        return models;\n    }\n\n    /**\n     * @en Add model to the collection.\n     * @ja Collection への Model の追加\n     *\n     * @param seed\n     *  - `en` given the seed of model.\n     *  - `ja` Model 要素を指定\n     * @param options\n     *  - `en` add options.\n     *  - `ja` 追加オプション\n     */\n    public add(seed: TModel | UnknownObject, options?: CollectionAddOptions): TModel;\n\n    /**\n     * @en Add to the collection with the passed list of models.\n     * @ja Model リスト指定による Collection への追加\n     *\n     * @param seeds\n     *  - `en` given the seed of model array.\n     *  - `ja` Model 要素の配列を指定\n     * @param options\n     *  - `en` add options.\n     *  - `ja` 追加オプション\n     */\n    public add(seeds: (TModel | PlainObject)[], options?: CollectionAddOptions): TModel[];\n\n    public add(seeds: TModel | UnknownObject | (TModel | PlainObject)[], options?: CollectionAddOptions): TModel | TModel[] {\n        return this.set(seeds as UnknownObject, Object.assign({ merge: false }, options, _addOptions));\n    }\n\n    /**\n     * @en Remove a model from the set.\n     * @ja Collection から Model を削除\n     *\n     * @param seed\n     *  - `en` given the seed of model.\n     *  - `ja` Model 要素を指定\n     * @param options\n     *  - `en` remove options.\n     *  - `ja` 削除オプション\n     */\n    public remove(seed: TModel | UnknownObject, options?: CollectionOperationOptions): TModel;\n\n    /**\n     * @en Remove a list of models from the set.\n     * @ja Model リスト指定による Collection からの削除\n     *\n     * @param seeds\n     *  - `en` given the seed of model array.\n     *  - `ja` Model 要素の配列を指定\n     * @param options\n     *  - `en` remove options.\n     *  - `ja` 削除オプション\n     */\n    public remove(seeds: (TModel | PlainObject)[], options?: CollectionOperationOptions): TModel[];\n\n    public remove(seeds: TModel | UnknownObject | (TModel | PlainObject)[], options?: CollectionOperationOptions): TModel | TModel[] | undefined {\n        const opts = Object.assign({}, options) as CollectionUpdateOptions<TModel>;\n        const singular = !isArray(seeds);\n        const items = singular ? [seeds as TModel] : (seeds as TModel[]).slice();\n        const removed = this[_removeModels](items, opts);\n        if (!opts.silent && removed.length) {\n            opts.changes = { added: [], merged: [], removed };\n            (this as Collection).trigger('@update', this as Collection, opts);\n        }\n        return singular ? removed[0] : removed;\n    }\n\n    /**\n     * @en Add a model to the end of the collection.\n     * @ja 末尾に Model を追加\n     *\n     * @param seed\n     *  - `en` given the seed of model.\n     *  - `ja` Model 要素を指定\n     * @param options\n     *  - `en` add options.\n     *  - `ja` 追加オプション\n     */\n    public push(seed: TModel | PlainObject, options?: CollectionAddOptions): TModel {\n        const { store } = this[_properties];\n        return this.add(seed, Object.assign({ at: store.length }, options));\n    }\n\n    /**\n     * @en Remove a model from the end of the collection.\n     * @ja 末尾の Model を削除\n     *\n     * @param options\n     *  - `en` Silenceable options.\n     *  - `ja` Silenceable オプション\n     */\n    public pop(options?: Silenceable): TModel | undefined {\n        const { store } = this[_properties];\n        return this.remove(store[store.length - 1], options);\n    }\n\n    /**\n     * @en Add a model to the beginning of the collection.\n     * @ja 先頭に Model を追加\n     *\n     * @param seed\n     *  - `en` given the seed of model.\n     *  - `ja` Model 要素を指定\n     * @param options\n     *  - `en` add options.\n     *  - `ja` 追加オプション\n     */\n    public unshift(seed: TModel | PlainObject, options?: CollectionAddOptions): TModel {\n        return this.add(seed, Object.assign({ at: 0 }, options));\n    }\n\n    /**\n     * @en Remove a model from the beginning of the collection.\n     * @ja 先頭の Model を削除\n     *\n     * @param options\n     *  - `en` Silenceable options.\n     *  - `ja` Silenceable オプション\n     */\n    public shift(options?: Silenceable): TModel | undefined {\n        const { store } = this[_properties];\n        return this.remove(store[0], options);\n    }\n\n    /**\n     * @en Create a new instance of a model in this collection.\n     * @ja 新しい Model インスタンスを作成し, Collection に追加\n     *\n     * @param attrs\n     *  - `en` attributes object.\n     *  - `ja` 属性オブジェクトを指定\n     * @param options\n     *  - `en` model construction options.\n     *  - `ja` Model 構築オプション\n     */\n    public create(attrs: object, options?: ModelSaveOptions): TModel | undefined {\n        const { wait } = options || {};\n        const seed = this[_prepareModel](attrs, options as Silenceable);\n        if (!seed) {\n            return undefined;\n        }\n\n        const model = isModel(seed) ? seed : undefined;\n        if (!wait || !model) {\n            this.add(seed, options);\n        }\n\n        if (model) {\n            void (async () => {\n                try {\n                    await model.save(undefined, options);\n                    if (wait) {\n                        this.add(seed, options);\n                    }\n                } catch (e) {\n                    (this as Collection).trigger('@error', model, this as Collection, e, options);\n                }\n            })();\n        }\n\n        return seed;\n    }\n\n    /** @internal model preparation */\n    private [_prepareModel](attrs: object | TModel | undefined, options: CollectionOperationOptions): TModel | undefined {\n        if (isCollectionModel(attrs, this)) {\n            return attrs;\n        }\n\n        const constructor = modelConstructor(this);\n        const { modelOptions } = this[_properties];\n        if (constructor) {\n            const opts = Object.assign({}, modelOptions, options);\n            const model = new constructor(attrs, opts) as { validate: () => Result; };\n            if (isFunction(model.validate)) {\n                const result = model.validate();\n                if (FAILED(result.code)) {\n                    (this as Collection).trigger('@invalid', attrs as Model, this as Collection, result, opts);\n                    return undefined;\n                }\n            }\n            return model as TModel;\n        }\n\n        // plain object\n        return attrs as TModel;\n    }\n\n    /** @internal Internal method called by both remove and set. */\n    private [_removeModels](models: TModel[], options: CollectionSetOptions): TModel[] {\n        const opts = Object.assign({}, options) as CollectionUpdateOptions<TModel>;\n        const removed: TModel[] = [];\n        for (const mdl of models) {\n            const model = this.get(mdl);\n            if (!model) {\n                continue;\n            }\n\n            const { store } = this[_properties];\n            const index = store.indexOf(model);\n            store.splice(index, 1);\n\n            // Remove references before triggering 'remove' event to prevent an infinite loop.\n            this[_removeReference](model, true);\n\n            if (!opts.silent) {\n                opts.index = index;\n                if (isModel(model) || (model instanceof EventBroker)) {\n                    (model as Model).trigger('@remove', model as Model, this, opts);\n                } else {\n                    (this as Collection).trigger('@remove', model, this as Collection, opts);\n                }\n            }\n\n            removed.push(model);\n            this[_removeReference](model, false);\n        }\n        return removed;\n    }\n\n    /** @internal Internal method to create a model's ties to a collection. */\n    private [_addReference](model: TModel): void {\n        const { byId } = this[_properties];\n        const { _cid, id } = model as { _cid: string; id: string; };\n        if (null != _cid) {\n            byId.set(_cid, model);\n        }\n        if (null != id) {\n            byId.set(id, model);\n        }\n        if (isModel(model) || (model instanceof EventPublisher)) {\n            this.listenTo(model as Subscribable, '*', this[_onModelEvent]);\n        }\n    }\n\n    /** @internal Internal method to sever a model's ties to a collection. */\n    private [_removeReference](model: TModel, partial = false): void {\n        const { byId } = this[_properties];\n        const { _cid, id } = model as { _cid: string; id: string; };\n        if (null != _cid) {\n            byId.delete(_cid);\n        }\n        if (null != id) {\n            byId.delete(id);\n        }\n        if (!partial && (isModel(model) || (model instanceof EventPublisher))) {\n            this.stopListening(model as Subscribable, '*', this[_onModelEvent]);\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: Iterable<TModel>\n\n    /**\n     * @en Iterator of [[ElementBase]] values in the array.\n     * @ja 格納している [[ElementBase]] にアクセス可能なイテレータオブジェクトを返却\n     */\n    [Symbol.iterator](): Iterator<TModel> {\n        const iterator = {\n            base: this.models,\n            pointer: 0,\n            next(): IteratorResult<TModel> {\n                if (this.pointer < this.base.length) {\n                    return {\n                        done: false,\n                        value: this.base[this.pointer++],\n                    };\n                } else {\n                    return {\n                        done: true,\n                        value: undefined!, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                    };\n                }\n            },\n        };\n        return iterator as Iterator<TModel>;\n    }\n\n    /**\n     * @en Returns an iterable of key(id), value(model) pairs for every entry in the array.\n     * @ja key(id), value(model) 配列にアクセス可能なイテレータオブジェクトを返却\n     */\n    entries(): IterableIterator<[string, TModel]> {\n        return this[_createIterableIterator]((key: string, value: TModel) => [key, value]);\n    }\n\n    /**\n     * @en Returns an iterable of keys(id) in the array.\n     * @ja key(id) 配列にアクセス可能なイテレータオブジェクトを返却\n     */\n    keys(): IterableIterator<string> {\n        return this[_createIterableIterator]((key: string) => key);\n    }\n\n    /**\n     * @en Returns an iterable of values([[ElementBase]]) in the array.\n     * @ja values([[ElementBase]]) 配列にアクセス可能なイテレータオブジェクトを返却\n     */\n    values(): IterableIterator<TModel> {\n        return this[_createIterableIterator]((key: string, value: TModel) => value);\n    }\n\n    /** @internal common iterator create function */\n    private [_createIterableIterator]<R>(valueGenerator: (key: string, value: TModel) => R): IterableIterator<R> {\n        const context = {\n            base: this.models,\n            pointer: 0,\n        };\n\n        const pos2key = (pos: number): string => {\n            return getModelId(context.base[pos], modelConstructor(this)) || String(pos);\n        };\n\n        const iterator: IterableIterator<R> = {\n            next(): IteratorResult<R> {\n                const current = context.pointer;\n                if (current < context.base.length) {\n                    context.pointer++;\n                    return {\n                        done: false,\n                        value: valueGenerator(pos2key(current), context.base[current]),\n                    };\n                } else {\n                    return {\n                        done: true,\n                        value: undefined!, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                    };\n                }\n            },\n            [Symbol.iterator](): IterableIterator<R> {\n                return this;\n            },\n        };\n\n        return iterator;\n    }\n}\n\n// mixin による `instanceof` は無効に設定\nsetMixClassAttribute(Collection as Class, 'instanceOf', null);\n","import type { CancelToken } from '@cdp/promise';\nimport { ArrayChangeRecord } from '@cdp/observable';\nimport { RESULT_CODE, makeResult } from '@cdp/result';\nimport type { ListChanged, ListEditOptions } from './interfaces';\nimport {\n    clearArray,\n    appendArray,\n    insertArray,\n    reorderArray,\n    removeArray,\n} from './utils';\nimport type { Collection } from './base';\n\n/**\n * @en Edited collection type definition.\n * @ja 被編集 Collection の型定義\n */\nexport type CollectionEditee<M extends object> = Collection<M, any, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n/** @internal */\nfunction prepare<T extends object>(collection: Collection<T>): T[] | never {\n    if (collection.filtered) {\n        throw makeResult(RESULT_CODE.ERROR_MVC_EDIT_PERMISSION_DENIED, 'collection is applied after-filter.');\n    }\n    return collection.models.slice();\n}\n\n/** @internal */\nasync function exec<T extends object>(\n    collection: Collection<T>,\n    options: ListEditOptions | undefined,\n    operation: (targets: T[], token: CancelToken | undefined) => Promise<ArrayChangeRecord<T>[]>,\n): Promise<ArrayChangeRecord<T>[]> {\n    const targets = prepare<T>(collection);\n    const change = await operation(targets, options?.cancel);\n    collection.set(targets, options);\n    return change;\n}\n\n/** @internal */\nfunction min(indices: number[]): number {\n    return indices.reduce((lhs, rhs) => Math.min(lhs, rhs));\n}\n\n/** @internal */\nfunction makeListChanged<T>(\n    type: 'add' | 'remove' | 'reorder',\n    changes: ArrayChangeRecord<T>[],\n    rangeFrom: number,\n    rangeTo: number,\n    at?: number,\n): ListChanged<T> {\n    const changed = !!changes.length;\n    return {\n        type,\n        list: changes,\n        range: changed ? { from: rangeFrom, to: rangeTo } : undefined,\n        insertedTo: changed ? at : undefined,\n    } as ListChanged<T>;\n}\n\n/**\n * @en Clear all elements of [[Collection]].\n * @ja [[Collection]] 要素の全削除\n *\n * @param collection\n *  - `en` target [[Collection]]\n *  - `ja` 対象 [[Collection]]\n * @param options\n *  - `en` [[CollectionEditOptions]] reference.\n *  - `ja` [[CollectionEditOptions]] を指定\n * @returns\n *  - `en` Changed information\n *  - `ja` 変更情報\n */\nexport async function clearCollection<T extends object>(\n    collection: CollectionEditee<T>,\n    options?: ListEditOptions\n): Promise<ListChanged<T>> {\n    const rangeTo = collection.length - 1;\n    const changes = await exec(collection, options, (targets, token) => clearArray(targets, token));\n    return makeListChanged('remove', changes, 0, rangeTo);\n}\n\n/**\n * @en Append source elements to the end of [[Collection]].\n * @ja [[Collection]] の末尾に追加\n *\n * @param collection\n *  - `en` target [[Collection]]\n *  - `ja` 対象 [[Collection]]\n * @param src\n *  - `en` source elements\n *  - `ja` 追加元要素\n * @param options\n *  - `en` [[CollectionEditOptions]] reference.\n *  - `ja` [[CollectionEditOptions]] を指定\n * @returns\n *  - `en` Changed information\n *  - `ja` 変更情報\n */\nexport async function appendCollection<T extends object>(\n    collection: CollectionEditee<T>,\n    src: T[],\n    options?: ListEditOptions\n): Promise<ListChanged<T>> {\n    const rangeFrom = collection.length;\n    const changes = await exec(collection, options, (targets, token) => appendArray(targets, src, token));\n    return makeListChanged('add', changes, rangeFrom, collection.length - 1, rangeFrom);\n}\n\n/**\n * @en Insert source elements to specified index of [[Collection]].\n * @ja [[Collection]] の指定した位置に挿入\n *\n * @param collection\n *  - `en` target [[Collection]]\n *  - `ja` 対象 [[Collection]]\n * @param index\n *  - `ja` target array position index\n *  - `ja` 追加先のインデックス\n * @param src\n *  - `en` source elements\n *  - `ja` 追加元要素\n * @param options\n *  - `en` [[CollectionEditOptions]] reference.\n *  - `ja` [[CollectionEditOptions]] を指定\n * @returns\n *  - `en` Changed information\n *  - `ja` 変更情報\n */\nexport async function insertCollection<T extends object>(\n    collection: CollectionEditee<T>,\n    index: number,\n    src: T[],\n    options?: ListEditOptions\n): Promise<ListChanged<T>> {\n    const changes = await exec(collection, options, (targets, token) => insertArray(targets, index, src, token));\n    return makeListChanged('add', changes, index, collection.length - 1, index);\n}\n\n/**\n * @en Reorder [[Collection]] elements position.\n * @ja [[Collection]] 項目の位置を変更\n *\n * @param collection\n *  - `en` target [[Collection]]\n *  - `ja` 対象 [[Collection]]\n * @param index\n *  - `ja` target array position index\n *  - `ja` 追加先のインデックス\n * @param orders\n *  - `en` edit order index array\n *  - `ja` インデックス配列\n * @param options\n *  - `en` [[CollectionEditOptions]] reference.\n *  - `ja` [[CollectionEditOptions]] を指定\n * @returns\n *  - `en` Changed information\n *  - `ja` 変更情報\n */\nexport async function reorderCollection<T extends object>(\n    collection: CollectionEditee<T>,\n    index: number,\n    orders: number[],\n    options?: ListEditOptions\n): Promise<ListChanged<T>> {\n    const rangeFrom = min([index, ...orders]);\n    const changes = await exec(collection, options, (targets, token) => reorderArray(targets, index, orders, token));\n    return makeListChanged('reorder', changes, rangeFrom, collection.length - 1, index);\n}\n\n/**\n * @en Remove [[Collection]] elements.\n * @ja [[Collection]] 項目の削除\n *\n * @param collection\n *  - `en` target [[Collection]]\n *  - `ja` 対象 [[Collection]]\n * @param orders\n *  - `en` removed order index array\n *  - `ja` インデックス配列\n * @param options\n *  - `en` [[CollectionEditOptions]] reference.\n *  - `ja` [[CollectionEditOptions]] を指定\n * @returns\n *  - `en` Changed information\n *  - `ja` 変更情報\n */\nexport async function removeCollection<T extends object>(\n    collection: CollectionEditee<T>,\n    orders: number[],\n    options?: ListEditOptions\n): Promise<ListChanged<T>> {\n    const rangeFrom = min(orders);\n    const rangeTo = collection.length - 1;\n    const changes = await exec(collection, options, (targets, token) => removeArray(targets, orders, token));\n    return makeListChanged('remove', changes, rangeFrom, rangeTo);\n}\n","import { safe } from '@cdp/core-utils';\n/** @internal */ export const document = safe(globalThis.document);\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    Nil,\n    PlainObject,\n    UnknownFunction,\n    isFunction,\n    isEmptyObject,\n    luid,\n    drop,\n} from '@cdp/core-utils';\nimport { EventSource } from '@cdp/events';\nimport {\n    DOM,\n    DOMSelector,\n    DOMResult,\n    DOMEventListener,\n    DOMEventMap,\n    EventType,\n    EventTypeOrNamespace,\n    dom as $,\n} from '@cdp/dom';\nimport { ViewEventsHash, ViewConstructionOptions } from './interfaces';\nimport { document } from './ssr';\n\n/** @internal */ const _properties    = Symbol('properties');\n/** @internal */ const _ensureElement = Symbol('ensure-element');\n\n/** @internal */\ninterface Property<T extends Node> {\n    readonly cid: string;\n    readonly events?: ViewEventsHash<T>;\n    readonly id?: string;\n    readonly className?: string;\n    readonly attributes?: PlainObject<string | number | boolean | null>;\n    readonly tagName: string;\n    $el: DOM<T>;\n}\n\n//__________________________________________________________________________________________________//\n\nexport type ViewFindSelector = Node | string | Nil;\n\n/**\n * @en Base class definition for view that manages the layout and a DOM events.\n * @ja レイアウト管理と DOM イベントの監視を行う View の基底クラス定義\n *\n * @example <br>\n *\n * ```ts\n * import { TemplateEngine } from '@cdp/core-template';\n * import { DOM, dom as $ } from '@cdp/dom';\n * import { View, ViewEventsHash } from '@cdp/view';\n * import { ToDo, ToDoEventSource } from './todo';\n *\n * const _template = TemplateEngine.compile($('#item-template').html());\n *\n * export class ToDoView extends View {\n *     private _model: ToDo;\n *     private _$input?: DOM<HTMLInputElement>;\n *\n *     constructor(todo: ToDo) {\n *         super({ tagName: 'li' });\n *         this._model = todo;\n *         this.listenTo(this._model as ToDoEventSource, '@change', this.render.bind(this));\n *         this.listenTo(this._model as ToDoEventSource, '@destroy', this.remove.bind(this));\n *     }\n *\n *     protected events(): ViewEventsHash<HTMLElement> {\n *         return {\n *             'click .toggle':   this.toggleDone,\n *             'dblclick .view':  this.edit,\n *             'click a.destroy': this.clear,\n *             'keypress .edit':  this.updateOnEnter,\n *             'blur .edit':      this.close,\n *         };\n *     }\n *\n *     render(): this {\n *         this.$el.html(_template(this._model.toJSON()));\n *         this.$el.toggleClass('done', this._model.done);\n *         this._$input = this.$('.edit') as DOM<HTMLInputElement>;\n *         return this;\n *     }\n *     :\n * }\n * ```\n */\nexport abstract class View<TElement extends Node = HTMLElement, TEvent extends object = object> extends EventSource<TEvent> {\n\n    /** @internal */\n    private readonly [_properties]: Property<TElement>;\n\n///////////////////////////////////////////////////////////////////////\n// construction/destruction:\n\n    /**\n     * constructor\n     *\n     * @param options\n     *  - `en` construction options.\n     *  - `ja` 構築オプション\n     */\n    constructor(options?: ViewConstructionOptions<TElement>) {\n        super();\n\n        const { el, tagName, id, attributes, className, events } = options || {};\n        this[_properties] = {\n            cid: luid('view:', 8),\n            events,\n            id,\n            className,\n            attributes,\n            tagName: tagName || 'div',\n        } as Property<TElement>;\n\n        this[_ensureElement](el);\n    }\n\n    /**\n     * @en Release all listeners.\n     * @ja すべてのリスナーを解除\n     */\n    public release(): this {\n        this.undelegateEvents();\n        this.stopListening();\n        this.off();\n        return this;\n    }\n\n    /**\n     * @en Remove this view by taking the element out of the DOM with release all listeners.\n     * @ja View から DOM を切り離し, リスナーを解除\n     */\n    public remove(): this {\n        this.release();\n        this.$el.remove();\n        return this;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// accessor: attributes\n\n    /**\n     * @en Get content ID.\n     * @ja コンテンツ ID を取得\n     */\n    get id(): string {\n        const { cid, id } = this[_properties];\n        return id || cid;\n    }\n\n    /**\n     * @en Get element.\n     * @ja 要素を取得\n     */\n    get el(): TElement | undefined {\n        return this[_properties].$el[0];\n    }\n\n    /**\n     * @en Get [[DOM]] object.\n     * @ja [[DOM]] オブジェクトを取得\n     */\n    get $el(): DOM<TElement> {\n        return this[_properties].$el;\n    }\n\n    /**\n     * @en Get internal content ID.\n     * @ja 内部のコンテンツ ID を取得\n     */\n    protected get _cid(): string {\n        return this[_properties].cid;\n    }\n\n    /**\n     * @en Get default tag name.\n     * @ja 既定のタグ名を取得\n     */\n    protected get _tagName(): string {\n        return this[_properties].tagName;\n    }\n\n    /**\n     * @en Attributes instance\n     * @ja 属性を格納するインスタンス\n     */\n    protected get _attrs(): PlainObject<string | number | boolean | null> {\n        const { attributes, id, className } = this[_properties];\n        return Object.assign(drop({ id, class: className }), attributes);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// operation:\n\n    /**\n     * @en Change the view's element (`this.el` property) and re-delegate the view's events on the new element.\n     * @ja View が管轄する要素 (`this.el` property) の変更. イベント再設定も実行\n     *\n     * @param el\n     *  - `en` Object or the selector string which becomes origin of element.\n     *  - `ja` 要素のもとになるオブジェクトまたはセレクタ文字列\n     */\n    public setElement(el: DOMSelector<TElement | string>): this {\n        this.undelegateEvents();\n        this[_properties].$el = $(el) as DOM<TElement>;\n        this.delegateEvents();\n        return this;\n    }\n\n    /**\n     * @en Set DOM callbacks from [[ViewEventsHash]] object.\n     * @ja [[ViewEventsHash]] オブジェクトから DOM コールバックを設定\n     *\n     * @param events\n     *  - `en` [[ViewEventsHash]] object. `this.events()` is used by default.\n     *  - `ja` [[ViewEventsHash]] オブジェクト. 既定値は `this.events()`\n     */\n    public delegateEvents(events?: ViewEventsHash<TElement>): this {\n        const hash = events || this.events();\n        if (isEmptyObject(hash)) {\n            return this;\n        }\n\n        this.undelegateEvents();\n\n        for (const key of Object.keys(hash)) {\n            let method = hash[key] as UnknownFunction;\n            if (!isFunction(method)) {\n                method = this[method];\n            }\n            if (!method) {\n                continue;\n            }\n            const match = /^(\\S+)\\s*(.*)$/.exec(key) as RegExpExecArray;\n            this.delegate<any>(match[1], match[2], method.bind(this));\n        }\n\n        return this;\n    }\n\n    /**\n     * @en Clears all callbacks previously bound to the view by `delegate`.\n     * @ja `delegate` されたイベントをすべて削除\n     */\n    public undelegateEvents(): this {\n        this.$el && this.$el.off<any>(`.${this._cid}`);\n        return this;\n    }\n\n    /**\n     * @en Add event handler function to one or more events to the elements. (live event available)\n     * @ja 要素に対して, 1つまたは複数のイベントハンドラを設定 (動的要素にも有効)\n     *\n     * @param type\n     *  - `en` event name or event name array.\n     *  - `ja` イベント名またはイベント名配列\n     * @param selector\n     *  - `en` A selector string to filter the descendants of the selected elements that trigger the event.\n     *  - `ja` イベント発行元をフィルタリングするセレクタ文字列\n     * @param listener\n     *  - `en` callback function\n     *  - `ja` コールバック関数\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public delegate<TEventMap extends DOMEventMap<TElement>>(\n        type: EventType<TEventMap> | (EventType<TEventMap>)[],\n        selector: string,\n        listener: DOMEventListener<TElement, TEventMap>,\n        options?: boolean | AddEventListenerOptions\n    ): this;\n\n    /**\n     * @en Add event handler function to one or more events to the elements. (live event available)\n     * @ja 要素に対して, 1つまたは複数のイベントハンドラを設定 (動的要素にも有効)\n     *\n     * @param type\n     *  - `en` event name or event name array.\n     *  - `ja` イベント名またはイベント名配列\n     * @param listener\n     *  - `en` callback function\n     *  - `ja` コールバック関数\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public delegate<TEventMap extends DOMEventMap<TElement>>(\n        type: EventType<TEventMap> | (EventType<TEventMap>)[],\n        listener: DOMEventListener<TElement, TEventMap>,\n        options?: boolean | AddEventListenerOptions\n    ): this;\n\n    public delegate(type: string, ...args: unknown[]): this {\n        (this.$el as any).on(`${type}.${this._cid}`, ...args);\n        return this;\n    }\n\n    /**\n     * @en Remove event handler. The handler designated at [[on]] or [[once]] and that same condition are released. <br>\n     *     If the method receives no arguments, all handlers are released.\n     * @ja 設定されているイベントハンドラの解除. [[on]] または [[once]] と同条件で指定したものが解除される <br>\n     *     引数が無い場合はすべてのハンドラが解除される.\n     *\n     * @param type\n     *  - `en` event name or event name array.\n     *  - `ja` イベント名またはイベント名配列\n     * @param selector\n     *  - `en` A selector string to filter the descendants of the selected elements that trigger the event.\n     *  - `ja` イベント発行元をフィルタリングするセレクタ文字列\n     * @param listener\n     *  - `en` callback function\n     *  - `ja` コールバック関数\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public undelegate<TEventMap extends DOMEventMap<TElement>>(\n        type: EventTypeOrNamespace<TEventMap> | (EventTypeOrNamespace<TEventMap>)[],\n        selector: string,\n        listener?: DOMEventListener<TElement, TEventMap>,\n        options?: boolean | AddEventListenerOptions\n    ): this;\n\n    /**\n     * @en Remove event handler. The handler designated at [[on]] or [[once]] and that same condition are released. <br>\n     *     If the method receives no arguments, all handlers are released.\n     * @ja 設定されているイベントハンドラの解除. [[on]] または [[once]] と同条件で指定したものが解除される <br>\n     *     引数が無い場合はすべてのハンドラが解除される.\n     *\n     * @param type\n     *  - `en` event name or event name array.\n     *  - `ja` イベント名またはイベント名配列\n     * @param listener\n     *  - `en` callback function\n     *  - `ja` コールバック関数\n     * @param options\n     *  - `en` options for `addEventLisntener`\n     *  - `ja` `addEventLisntener` に指定するオプション\n     */\n    public undelegate<TEventMap extends DOMEventMap<TElement>>(\n        type: EventTypeOrNamespace<TEventMap> | (EventTypeOrNamespace<TEventMap>)[],\n        listener?: DOMEventListener<TElement, TEventMap>,\n        options?: boolean | AddEventListenerOptions\n    ): this;\n\n    public undelegate(type: string, ...args: unknown[]): this {\n        (this.$el as any).off(`${type}.${this._cid}`, ...args);\n        return this;\n    }\n\n    /**\n     * @en Get the descendants of each element in the current set of matched elements, filtered by a selector.\n     * @ja 配下の要素に対して指定したセレクタに一致する要素を検索\n     *\n     * @param selector\n     *  - `en` Object(s) or the selector string which becomes origin of DOM.\n     *  - `ja` DOM のもとになるインスタンス(群)またはセレクタ文字列\n     */\n    public $<T extends ViewFindSelector = ViewFindSelector>(selector: DOMSelector<T>): DOMResult<T> {\n        return this.$el.find(selector);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// override:\n\n    /**\n     * @en The events hash (or method) can be used to specify a set of DOM events that will be bound to methods on your View through delegateEvents.\n     * @ja イベントセレクタとコールバックのハッシュを定義し, ルートエンティティで捕捉する DOM イベントを指定\n     *\n     *\n     * @example <br>\n     *\n     * ```ts\n     * class SampleView extends View {\n     *     protected events(): ViewEventsHash {\n     *         return {\n     *             'mousedown .title':  'edit',\n     *             'click .button':     'save',\n     *             'click .open':       function(e) { ... },\n     *             'click .close':      this.onClose,\n     *         };\n     *     }\n     * }\n     * ```\n     *\n     * @override\n     */\n    protected events(): ViewEventsHash<TElement> {\n        return Object.assign({}, this[_properties].events);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// abstract:\n\n    /**\n     * @en Implement this function with your code that renders the view template from model data, and updates `this.el` with the new HTML.\n     * @ja `this.el` 更新時の新しい HTML をレンダリングロジックの実装関数. モデル更新と View テンプレートを連動させる.\n     *\n     * @example <br>\n     *\n     * ```ts\n     * import { TemplateEngine } from '@cdp/core-template';\n     *\n     * class SampleView extends View {\n     *     private _template = TemplateEngine.compile('{{title}}');\n     *     render(): void {\n     *         this.$el.html(this._template(this.model));\n     *     }\n     * }\n     * ```\n     */\n    abstract render(...args: unknown[]): Promise<this | void> | this | void;\n\n///////////////////////////////////////////////////////////////////////\n// internal:\n\n    /** @internal */\n    private [_ensureElement](el?: DOMSelector<TElement | string>): void {\n        if (!el) {\n            const { _attrs, _tagName } = this;\n            this.setElement(document.createElement(_tagName) as Node as TElement);\n            this.$el.attr(_attrs);\n        } else {\n            this.setElement(el);\n        }\n    }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node'; index: number;\n}|{\n  readonly type: 'attribute';\n  index: number;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    // eslint-disable-next-line no-control-regex\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: readonly unknown[]) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari does not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\ndeclare const trustedTypes: typeof window.trustedTypes;\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes!.createPolicy('lit-html', {createHTML: (s) => s});\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: readonly unknown[];\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: readonly unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment position.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    let value = this.getHTML();\n    if (policy !== undefined) {\n      // this is secure because `this.strings` is a TemplateStringsArray.\n      // TODO: validate this when\n      // https://github.com/tc39/proposal-array-is-template-object is\n      // implemented.\n      value = policy.createHTML(value) as unknown as string;\n    }\n    template.innerHTML = value;\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    const parts = this.parts;\n\n    // If we're assigning an attribute via syntax like:\n    //    attr=\"${foo}\"  or  attr=${foo}\n    // but not\n    //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n    // then we don't want to coerce the attribute value into one long\n    // string. Instead we want to just return the value itself directly,\n    // so that sanitizeDOMValue can get the actual value rather than\n    // String(value)\n    // The exception is if v is an array, in which case we do want to smash\n    // it together into a string without calling String() on the array.\n    //\n    // This also allows trusted values (when using TrustedTypes) being\n    // assigned to DOM sinks without being stringified in the process.\n    if (l === 1 && strings[0] === '' && strings[1] === '') {\n      const v = parts[0].value;\n      if (typeof v === 'symbol') {\n        return String(v);\n      }\n      if (typeof v === 'string' || !isIterable(v)) {\n        return v;\n      }\n    }\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    if (this.startNode.parentNode === null) {\n      return;\n    }\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: readonly string[];\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: readonly string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n  try {\n    const options = {\n      get capture() {\n        eventOptionsSupported = true;\n        return false;\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.addEventListener('test', options as any, options);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.removeEventListener('test', options as any, options);\n  } catch (_e) {\n    // event options not supported\n  }\n})();\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behavior, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport interface TemplateCache {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>;\n  readonly keyString: Map<string, Template>;\n}\n\nexport const templateCaches = new Map<string, TemplateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n  (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.4.1');\n}\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {createMarker, directive, NodePart, Part} from '../lit-html.js';\n\n/**\n * A directive that renders the items of an async iterable[1], appending new\n * values after previous values, similar to the built-in support for iterables.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is appended to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncAppend = directive(\n    <T>(value: AsyncIterable<T>,\n        mapper?: (v: T, index?: number) => unknown) => async (part: Part) => {\n      if (!(part instanceof NodePart)) {\n        throw new Error('asyncAppend can only be used in text bindings');\n      }\n      // If we've already set up this particular iterable, we don't need\n      // to do anything.\n      if (value === part.value) {\n        return;\n      }\n      part.value = value;\n\n      // We keep track of item Parts across iterations, so that we can\n      // share marker nodes between consecutive Parts.\n      let itemPart;\n      let i = 0;\n\n      for await (let v of value) {\n        // Check to make sure that value is the still the current value of\n        // the part, and if not bail because a new value owns this part\n        if (part.value !== value) {\n          break;\n        }\n\n        // When we get the first value, clear the part. This lets the\n        // previous value display until we can replace it.\n        if (i === 0) {\n          part.clear();\n        }\n\n        // As a convenience, because functional-programming-style\n        // transforms of iterables and async iterables requires a library,\n        // we accept a mapper function. This is especially convenient for\n        // rendering a template for each item.\n        if (mapper !== undefined) {\n          // This is safe because T must otherwise be treated as unknown by\n          // the rest of the system.\n          v = mapper(v, i) as T;\n        }\n\n        // Like with sync iterables, each item induces a Part, so we need\n        // to keep track of start and end nodes for the Part.\n        // Note: Because these Parts are not updatable like with a sync\n        // iterable (if we render a new value, we always clear), it may\n        // be possible to optimize away the Parts and just re-use the\n        // Part.setValue() logic.\n\n        let itemStartNode = part.startNode;\n\n        // Check to see if we have a previous item and Part\n        if (itemPart !== undefined) {\n          // Create a new node to separate the previous and next Parts\n          itemStartNode = createMarker();\n          // itemPart is currently the Part for the previous item. Set\n          // it's endNode to the node we'll use for the next Part's\n          // startNode.\n          itemPart.endNode = itemStartNode;\n          part.endNode.parentNode!.insertBefore(itemStartNode, part.endNode);\n        }\n        itemPart = new NodePart(part.options);\n        itemPart.insertAfterNode(itemStartNode);\n        itemPart.setValue(v);\n        itemPart.commit();\n        i++;\n      }\n    });\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {directive, NodePart, Part} from '../lit-html.js';\n\n/**\n * A directive that renders the items of an async iterable[1], replacing\n * previous values with new values, so that only one value is ever rendered\n * at a time.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is rendered to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncReplace = directive(\n    <T>(value: AsyncIterable<T>, mapper?: (v: T, index?: number) => unknown) =>\n        async (part: Part) => {\n          if (!(part instanceof NodePart)) {\n            throw new Error('asyncReplace can only be used in text bindings');\n          }\n          // If we've already set up this particular iterable, we don't need\n          // to do anything.\n          if (value === part.value) {\n            return;\n          }\n\n          // We nest a new part to keep track of previous item values separately\n          // of the iterable as a value itself.\n          const itemPart = new NodePart(part.options);\n          part.value = value;\n\n          let i = 0;\n\n          for await (let v of value) {\n            // Check to make sure that value is the still the current value of\n            // the part, and if not bail because a new value owns this part\n            if (part.value !== value) {\n              break;\n            }\n\n            // When we get the first value, clear the part. This let's the\n            // previous value display until we can replace it.\n            if (i === 0) {\n              part.clear();\n              itemPart.appendIntoPart(part);\n            }\n\n            // As a convenience, because functional-programming-style\n            // transforms of iterables and async iterables requires a library,\n            // we accept a mapper function. This is especially convenient for\n            // rendering a template for each item.\n            if (mapper !== undefined) {\n              // This is safe because T must otherwise be treated as unknown by\n              // the rest of the system.\n              v = mapper(v, i) as T;\n            }\n\n            itemPart.setValue(v);\n            itemPart.commit();\n            i++;\n          }\n        });\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateInstance} from '../lib/template-instance.js';\nimport {Template} from '../lib/template.js';\nimport {directive, NodePart, Part, reparentNodes, TemplateResult} from '../lit-html.js';\n\ninterface CachedTemplate {\n  readonly instance: TemplateInstance;\n  readonly nodes: DocumentFragment;\n}\nconst templateCaches =\n    new WeakMap<NodePart, WeakMap<Template, CachedTemplate>>();\n\n/**\n * Enables fast switching between multiple templates by caching the DOM nodes\n * and TemplateInstances produced by the templates.\n *\n * Example:\n *\n * ```\n * let checked = false;\n *\n * html`\n *   ${cache(checked ? html`input is checked` : html`input is not checked`)}\n * `\n * ```\n */\nexport const cache = directive((value: unknown) => (part: Part) => {\n  if (!(part instanceof NodePart)) {\n    throw new Error('cache can only be used in text bindings');\n  }\n\n  let templateCache = templateCaches.get(part);\n\n  if (templateCache === undefined) {\n    templateCache = new WeakMap();\n    templateCaches.set(part, templateCache);\n  }\n\n  const previousValue = part.value;\n\n  // First, can we update the current TemplateInstance, or do we need to move\n  // the current nodes into the cache?\n  if (previousValue instanceof TemplateInstance) {\n    if (value instanceof TemplateResult &&\n        previousValue.template === part.options.templateFactory(value)) {\n      // Same Template, just trigger an update of the TemplateInstance\n      part.setValue(value);\n      return;\n    } else {\n      // Not the same Template, move the nodes from the DOM into the cache.\n      let cachedTemplate = templateCache.get(previousValue.template);\n      if (cachedTemplate === undefined) {\n        cachedTemplate = {\n          instance: previousValue,\n          nodes: document.createDocumentFragment(),\n        };\n        templateCache.set(previousValue.template, cachedTemplate);\n      }\n      reparentNodes(\n          cachedTemplate.nodes, part.startNode.nextSibling, part.endNode);\n    }\n  }\n\n  // Next, can we reuse nodes from the cache?\n  if (value instanceof TemplateResult) {\n    const template = part.options.templateFactory(value);\n    const cachedTemplate = templateCache.get(template);\n    if (cachedTemplate !== undefined) {\n      // Move nodes out of cache\n      part.setValue(cachedTemplate.nodes);\n      part.commit();\n      // Set the Part value to the TemplateInstance so it'll update it.\n      part.value = cachedTemplate.instance;\n    }\n  }\n  part.setValue(value);\n});\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\n// IE11 doesn't support classList on SVG elements, so we emulate it with a Set\nclass ClassList {\n  element: Element;\n  classes: Set<string> = new Set();\n  changed = false;\n\n  constructor(element: Element) {\n    this.element = element;\n    const classList = (element.getAttribute('class') || '').split(/\\s+/);\n    for (const cls of classList) {\n      this.classes.add(cls);\n    }\n  }\n  add(cls: string) {\n    this.classes.add(cls);\n    this.changed = true;\n  }\n\n  remove(cls: string) {\n    this.classes.delete(cls);\n    this.changed = true;\n  }\n\n  commit() {\n    if (this.changed) {\n      let classString = '';\n      this.classes.forEach((cls) => classString += cls + ' ');\n      this.element.setAttribute('class', classString);\n    }\n  }\n}\n\nexport interface ClassInfo {\n  readonly [name: string]: string|boolean|number;\n}\n\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst previousClassesCache = new WeakMap<Part, Set<string>>();\n\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `class` if the property value is truthy; if the property value is\n * falsey, the property name is removed from the element's `class`. For example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo: ClassInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'class' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `classMap` directive must be used in the `class` attribute ' +\n        'and must be the only part in the attribute.');\n  }\n\n  const {committer} = part;\n  const {element} = committer;\n\n  let previousClasses = previousClassesCache.get(part);\n  if (previousClasses === undefined) {\n    // Write static classes once\n    // Use setAttribute() because className isn't a string on SVG elements\n    element.setAttribute('class', committer.strings.join(' '));\n    previousClassesCache.set(part, previousClasses = new Set());\n  }\n\n  const classList =\n      (element.classList || new ClassList(element)) as DOMTokenList | ClassList;\n\n  // Remove old classes that no longer apply\n  // We use forEach() instead of for-of so that re don't require down-level\n  // iteration.\n  previousClasses.forEach((name) => {\n    if (!(name in classInfo)) {\n      classList.remove(name);\n      previousClasses!.delete(name);\n    }\n  });\n\n  // Add or remove classes based on their classMap value\n  for (const name in classInfo) {\n    const value = classInfo[name];\n    if (value != previousClasses.has(name)) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      if (value) {\n        classList.add(name);\n        previousClasses.add(name);\n      } else {\n        classList.remove(name);\n        previousClasses.delete(name);\n      }\n    }\n  }\n  if (typeof (classList as ClassList).commit === 'function') {\n    (classList as ClassList).commit();\n  }\n});\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {directive, Part} from '../lit-html.js';\n\nconst previousValues = new WeakMap<Part, unknown>();\n\n/**\n * Prevents re-render of a template function until a single value or an array of\n * values changes.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([user.id, company.id], () => html`...`)}\n *   </div>\n * ```\n *\n * In this case, the template only renders if either `user.id` or `company.id`\n * changes.\n *\n * guard() is useful with immutable data patterns, by preventing expensive work\n * until data updates.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n *   </div>\n * ```\n *\n * In this case, items are mapped over only when the array reference changes.\n *\n * @param value the value to check before re-rendering\n * @param f the template function\n */\nexport const guard =\n    directive((value: unknown, f: () => unknown) => (part: Part): void => {\n      const previousValue = previousValues.get(part);\n      if (Array.isArray(value)) {\n        // Dirty-check arrays by item\n        if (Array.isArray(previousValue) &&\n            previousValue.length === value.length &&\n            value.every((v, i) => v === previousValue[i])) {\n          return;\n        }\n      } else if (\n          previousValue === value &&\n          (value !== undefined || previousValues.has(part))) {\n        // Dirty-check non-arrays by identity\n        return;\n      }\n\n      part.setValue(f());\n      // Copy the value if it's an array so that if it's mutated we don't forget\n      // what the previous values were.\n      previousValues.set(\n          part, Array.isArray(value) ? Array.from(value) : value);\n    });\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part} from '../lit-html.js';\n\nconst previousValues = new WeakMap<Part, unknown>();\n\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = directive((value: unknown) => (part: Part) => {\n  const previousValue = previousValues.get(part);\n\n  if (value === undefined && part instanceof AttributePart) {\n    // If the value is undefined, remove the attribute, but only if the value\n    // was previously defined.\n    if (previousValue !== undefined || !previousValues.has(part)) {\n      const name = part.committer.name;\n      part.committer.element.removeAttribute(name);\n    }\n  } else if (value !== previousValue) {\n    part.setValue(value);\n  }\n\n  previousValues.set(part, value);\n});\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {DirectiveFn} from '../lib/directive.js';\nimport {createMarker, directive, NodePart, Part, removeNodes, reparentNodes} from '../lit-html.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart =\n    (containerPart: NodePart, beforePart?: NodePart): NodePart => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = beforePart === undefined ? containerPart.endNode :\n                                                    beforePart.startNode;\n      const startNode = container.insertBefore(createMarker(), beforeNode);\n      container.insertBefore(createMarker(), beforeNode);\n      const newPart = new NodePart(containerPart.options);\n      newPart.insertAfterNode(startNode);\n      return newPart;\n    };\n\nconst updatePart = (part: NodePart, value: unknown) => {\n  part.setValue(value);\n  part.commit();\n  return part;\n};\n\nconst insertPartBefore =\n    (containerPart: NodePart, part: NodePart, ref?: NodePart) => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = ref ? ref.startNode : containerPart.endNode;\n      const endNode = part.endNode.nextSibling;\n      if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n      }\n    };\n\nconst removePart = (part: NodePart) => {\n  removeNodes(\n      part.startNode.parentNode!, part.startNode, part.endNode.nextSibling);\n};\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap<NodePart, (NodePart | null)[]>();\nconst keyListCache = new WeakMap<NodePart, unknown[]>();\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat =\n    directive(\n        <T>(items: Iterable<T>,\n            keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n            template?: ItemTemplate<T>):\n            DirectiveFn => {\n              let keyFn: KeyFn<T>;\n              if (template === undefined) {\n                template = keyFnOrTemplate;\n              } else if (keyFnOrTemplate !== undefined) {\n                keyFn = keyFnOrTemplate as KeyFn<T>;\n              }\n\n              return (containerPart: Part): void => {\n                if (!(containerPart instanceof NodePart)) {\n                  throw new Error('repeat can only be used in text bindings');\n                }\n                // Old part & key lists are retrieved from the last update\n                // (associated with the part for this instance of the directive)\n                const oldParts = partListCache.get(containerPart) || [];\n                const oldKeys = keyListCache.get(containerPart) || [];\n\n                // New part list will be built up as we go (either reused from\n                // old parts or created for new keys in this update). This is\n                // saved in the above cache at the end of the update.\n                const newParts: NodePart[] = [];\n\n                // New value list is eagerly generated from items along with a\n                // parallel array indicating its key.\n                const newValues: unknown[] = [];\n                const newKeys: unknown[] = [];\n                let index = 0;\n                for (const item of items) {\n                  newKeys[index] = keyFn ? keyFn(item, index) : index;\n                  newValues[index] = template !(item, index);\n                  index++;\n                }\n\n                // Maps from key to index for current and previous update; these\n                // are generated lazily only when needed as a performance\n                // optimization, since they are only required for multiple\n                // non-contiguous changes in the list, which are less common.\n                let newKeyToIndexMap!: Map<unknown, number>;\n                let oldKeyToIndexMap!: Map<unknown, number>;\n\n                // Head and tail pointers to old parts and new values\n                let oldHead = 0;\n                let oldTail = oldParts.length - 1;\n                let newHead = 0;\n                let newTail = newValues.length - 1;\n\n                // Overview of O(n) reconciliation algorithm (general approach\n                // based on ideas found in ivi, vue, snabbdom, etc.):\n                //\n                // * We start with the list of old parts and new values (and\n                //   arrays of their respective keys), head/tail pointers into\n                //   each, and we build up the new list of parts by updating\n                //   (and when needed, moving) old parts or creating new ones.\n                //   The initial scenario might look like this (for brevity of\n                //   the diagrams, the numbers in the array reflect keys\n                //   associated with the old parts or new values, although keys\n                //   and parts/values are actually stored in parallel arrays\n                //   indexed using the same head/tail pointers):\n                //\n                //      oldHead v                 v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n                //                                      item order\n                //      newHead ^                 ^ newTail\n                //\n                // * Iterate old & new lists from both sides, updating,\n                //   swapping, or removing parts at the head/tail locations\n                //   until neither head nor tail can move.\n                //\n                // * Example below: keys at head pointers match, so update old\n                //   part 0 in-place (no need to move it) and record part 0 in\n                //   the `newParts` list. The last thing we do is advance the\n                //   `oldHead` and `newHead` pointers (will be reflected in the\n                //   next diagram).\n                //\n                //      oldHead v                 v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n                //                                      & newHead\n                //      newHead ^                 ^ newTail\n                //\n                // * Example below: head pointers don't match, but tail\n                //   pointers do, so update part 6 in place (no need to move\n                //   it), and record part 6 in the `newParts` list. Last,\n                //   advance the `oldTail` and `oldHead` pointers.\n                //\n                //         oldHead v              v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n                //                                      & newTail\n                //         newHead ^              ^ newTail\n                //\n                // * If neither head nor tail match; next check if one of the\n                //   old head/tail items was removed. We first need to generate\n                //   the reverse map of new keys to index (`newKeyToIndexMap`),\n                //   which is done once lazily as a performance optimization,\n                //   since we only hit this case if multiple non-contiguous\n                //   changes were made. Note that for contiguous removal\n                //   anywhere in the list, the head and tails would advance\n                //   from either end and pass each other before we get to this\n                //   case and removals would be handled in the final while loop\n                //   without needing to generate the map.\n                //\n                // * Example below: The key at `oldTail` was removed (no longer\n                //   in the `newKeyToIndexMap`), so remove that part from the\n                //   DOM and advance just the `oldTail` pointer.\n                //\n                //         oldHead v           v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n                //         newHead ^           ^ newTail\n                //\n                // * Once head and tail cannot move, any mismatches are due to\n                //   either new or moved items; if a new key is in the previous\n                //   \"old key to old index\" map, move the old part to the new\n                //   location, otherwise create and insert a new part. Note\n                //   that when moving an old part we null its position in the\n                //   oldParts array if it lies between the head and tail so we\n                //   know to skip it when the pointers get there.\n                //\n                // * Example below: neither head nor tail match, and neither\n                //   were removed; so find the `newHead` key in the\n                //   `oldKeyToIndexMap`, and move that old part's DOM into the\n                //   next head position (before `oldParts[oldHead]`). Last,\n                //   null the part in the `oldPart` array since it was\n                //   somewhere in the remaining oldParts still to be scanned\n                //   (between the head and tail pointers) so that we know to\n                //   skip that old part on future iterations.\n                //\n                //         oldHead v        v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n                //                                      newHead\n                //         newHead ^           ^ newTail\n                //\n                // * Note that for moves/insertions like the one above, a part\n                //   inserted at the head pointer is inserted before the\n                //   current `oldParts[oldHead]`, and a part inserted at the\n                //   tail pointer is inserted before `newParts[newTail+1]`. The\n                //   seeming asymmetry lies in the fact that new parts are\n                //   moved into place outside in, so to the right of the head\n                //   pointer are old parts, and to the right of the tail\n                //   pointer are new parts.\n                //\n                // * We always restart back from the top of the algorithm,\n                //   allowing matching and simple updates in place to\n                //   continue...\n                //\n                // * Example below: the head pointers once again match, so\n                //   simply update part 1 and record it in the `newParts`\n                //   array.  Last, advance both head pointers.\n                //\n                //         oldHead v        v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n                //                                      & newHead\n                //            newHead ^        ^ newTail\n                //\n                // * As mentioned above, items that were moved as a result of\n                //   being stuck (the final else clause in the code below) are\n                //   marked with null, so we always advance old pointers over\n                //   these so we're comparing the next actual old value on\n                //   either end.\n                //\n                // * Example below: `oldHead` is null (already placed in\n                //   newParts), so advance `oldHead`.\n                //\n                //            oldHead v     v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n                //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n                //               newHead ^     ^ newTail\n                //\n                // * Note it's not critical to mark old parts as null when they\n                //   are moved from head to tail or tail to head, since they\n                //   will be outside the pointer range and never visited again.\n                //\n                // * Example below: Here the old tail key matches the new head\n                //   key, so the part at the `oldTail` position and move its\n                //   DOM to the new head position (before `oldParts[oldHead]`).\n                //   Last, advance `oldTail` and `newHead` pointers.\n                //\n                //               oldHead v  v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n                //                                     advance oldTail & newHead\n                //               newHead ^     ^ newTail\n                //\n                // * Example below: Old and new head keys match, so update the\n                //   old head part in place, and advance the `oldHead` and\n                //   `newHead` pointers.\n                //\n                //               oldHead v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n                //                                      newHead\n                //                  newHead ^  ^ newTail\n                //\n                // * Once the new or old pointers move past each other then all\n                //   we have left is additions (if old list exhausted) or\n                //   removals (if new list exhausted). Those are handled in the\n                //   final while loops at the end.\n                //\n                // * Example below: `oldHead` exceeded `oldTail`, so we're done\n                //   with the main loop.  Create the remaining part and insert\n                //   it at the new head position, and the update is complete.\n                //\n                //                   (oldHead > oldTail)\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n                //                     newHead ^ newTail\n                //\n                // * Note that the order of the if/else clauses is not\n                //   important to the algorithm, as long as the null checks\n                //   come first (to ensure we're always working on valid old\n                //   parts) and that the final else clause comes last (since\n                //   that's where the expensive moves occur). The order of\n                //   remaining clauses is is just a simple guess at which cases\n                //   will be most common.\n                //\n                // * TODO(kschaaf) Note, we could calculate the longest\n                //   increasing subsequence (LIS) of old items in new position,\n                //   and only move those not in the LIS set. However that costs\n                //   O(nlogn) time and adds a bit more code, and only helps\n                //   make rare types of mutations require fewer moves. The\n                //   above handles removes, adds, reversal, swaps, and single\n                //   moves of contiguous items in linear time, in the minimum\n                //   number of moves. As the number of multiple moves where LIS\n                //   might help approaches a random shuffle, the LIS\n                //   optimization becomes less helpful, so it seems not worth\n                //   the code at this point. Could reconsider if a compelling\n                //   case arises.\n\n                while (oldHead <= oldTail && newHead <= newTail) {\n                  if (oldParts[oldHead] === null) {\n                    // `null` means old part at head has already been used\n                    // below; skip\n                    oldHead++;\n                  } else if (oldParts[oldTail] === null) {\n                    // `null` means old part at tail has already been used\n                    // below; skip\n                    oldTail--;\n                  } else if (oldKeys[oldHead] === newKeys[newHead]) {\n                    // Old head matches new head; update in place\n                    newParts[newHead] =\n                        updatePart(oldParts[oldHead]!, newValues[newHead]);\n                    oldHead++;\n                    newHead++;\n                  } else if (oldKeys[oldTail] === newKeys[newTail]) {\n                    // Old tail matches new tail; update in place\n                    newParts[newTail] =\n                        updatePart(oldParts[oldTail]!, newValues[newTail]);\n                    oldTail--;\n                    newTail--;\n                  } else if (oldKeys[oldHead] === newKeys[newTail]) {\n                    // Old head matches new tail; update and move to new tail\n                    newParts[newTail] =\n                        updatePart(oldParts[oldHead]!, newValues[newTail]);\n                    insertPartBefore(\n                        containerPart,\n                        oldParts[oldHead]!,\n                        newParts[newTail + 1]);\n                    oldHead++;\n                    newTail--;\n                  } else if (oldKeys[oldTail] === newKeys[newHead]) {\n                    // Old tail matches new head; update and move to new head\n                    newParts[newHead] =\n                        updatePart(oldParts[oldTail]!, newValues[newHead]);\n                    insertPartBefore(\n                        containerPart, oldParts[oldTail]!, oldParts[oldHead]!);\n                    oldTail--;\n                    newHead++;\n                  } else {\n                    if (newKeyToIndexMap === undefined) {\n                      // Lazily generate key-to-index maps, used for removals &\n                      // moves below\n                      newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                      oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                    }\n                    if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                      // Old head is no longer in new list; remove\n                      removePart(oldParts[oldHead]!);\n                      oldHead++;\n                    } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                      // Old tail is no longer in new list; remove\n                      removePart(oldParts[oldTail]!);\n                      oldTail--;\n                    } else {\n                      // Any mismatches at this point are due to additions or\n                      // moves; see if we have an old part we can reuse and move\n                      // into place\n                      const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                      const oldPart =\n                          oldIndex !== undefined ? oldParts[oldIndex] : null;\n                      if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(\n                            containerPart, oldParts[oldHead]!);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                      } else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(\n                            containerPart, oldPart, oldParts[oldHead]!);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex as number] = null;\n                      }\n                      newHead++;\n                    }\n                  }\n                }\n                // Add parts for any remaining new values\n                while (newHead <= newTail) {\n                  // For all remaining additions, we insert before last new\n                  // tail, since old pointers are no longer valid\n                  const newPart =\n                      createAndInsertPart(containerPart, newParts[newTail + 1]);\n                  updatePart(newPart, newValues[newHead]);\n                  newParts[newHead++] = newPart;\n                }\n                // Remove any remaining unused old parts\n                while (oldHead <= oldTail) {\n                  const oldPart = oldParts[oldHead++];\n                  if (oldPart !== null) {\n                    removePart(oldPart);\n                  }\n                }\n                // Save order of new parts for next round\n                partListCache.set(containerPart, newParts);\n                keyListCache.set(containerPart, newKeys);\n              };\n            }) as\n    <T>(items: Iterable<T>,\n        keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n        template?: ItemTemplate<T>) => DirectiveFn;\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\nexport interface StyleInfo {\n  readonly [name: string]: string;\n}\n\n/**\n * Stores the StyleInfo object applied to a given AttributePart.\n * Used to unset existing values when a new StyleInfo object is applied.\n */\nconst previousStylePropertyCache = new WeakMap<AttributePart, Set<string>>();\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS properties. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo {StyleInfo}\n */\nexport const styleMap = directive((styleInfo: StyleInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'style' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `styleMap` directive must be used in the style attribute ' +\n        'and must be the only part in the attribute.');\n  }\n\n  const {committer} = part;\n  const {style} = committer.element as HTMLElement;\n\n  let previousStyleProperties = previousStylePropertyCache.get(part);\n\n  if (previousStyleProperties === undefined) {\n    // Write static styles once\n    style.cssText = committer.strings.join(' ');\n    previousStylePropertyCache.set(part, previousStyleProperties = new Set());\n  }\n\n  // Remove old properties that no longer exist in styleInfo\n  // We use forEach() instead of for-of so that re don't require down-level\n  // iteration.\n  previousStyleProperties.forEach((name) => {\n    if (!(name in styleInfo)) {\n      previousStyleProperties!.delete(name);\n      if (name.indexOf('-') === -1) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (style as any)[name] = null;\n      } else {\n        style.removeProperty(name);\n      }\n    }\n  });\n\n  // Add or update properties\n  for (const name in styleInfo) {\n    previousStyleProperties.add(name);\n    if (name.indexOf('-') === -1) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (style as any)[name] = styleInfo[name];\n    } else {\n      style.setProperty(name, styleInfo[name]);\n    }\n  }\n});\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isPrimitive} from '../lib/parts.js';\nimport {directive, NodePart, Part} from '../lit-html.js';\n\ninterface PreviousValue {\n  readonly value: unknown;\n  readonly fragment: DocumentFragment;\n}\n\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap<NodePart, PreviousValue>();\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value: unknown) => (part: Part): void => {\n  if (!(part instanceof NodePart)) {\n    throw new Error('unsafeHTML can only be used in text bindings');\n  }\n\n  const previousValue = previousValues.get(part);\n\n  if (previousValue !== undefined && isPrimitive(value) &&\n      value === previousValue.value && part.value === previousValue.fragment) {\n    return;\n  }\n\n  const template = document.createElement('template');\n  template.innerHTML = value as string;  // innerHTML casts to string internally\n  const fragment = document.importNode(template.content, true);\n  part.setValue(fragment);\n  previousValues.set(part, {value, fragment});\n});\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isPrimitive} from '../lib/parts.js';\nimport {directive, Part} from '../lit-html.js';\n\ninterface AsyncState {\n  /**\n   * The last rendered index of a call to until(). A value only renders if its\n   * index is less than the `lastRenderedIndex`.\n   */\n  lastRenderedIndex: number;\n\n  values: unknown[];\n}\n\nconst _state = new WeakMap<Part, AsyncState>();\n// Effectively infinity, but a SMI.\nconst _infinity = 0x7fffffff;\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n *     const content = fetch('./content.txt').then(r => r.text());\n *     html`${until(content, html`<span>Loading...</span>`)}`\n */\nexport const until = directive((...args: unknown[]) => (part: Part) => {\n  let state = _state.get(part)!;\n  if (state === undefined) {\n    state = {\n      lastRenderedIndex: _infinity,\n      values: [],\n    };\n    _state.set(part, state);\n  }\n  const previousValues = state.values;\n  let previousLength = previousValues.length;\n  state.values = args;\n\n  for (let i = 0; i < args.length; i++) {\n    // If we've rendered a higher-priority value already, stop.\n    if (i > state.lastRenderedIndex) {\n      break;\n    }\n\n    const value = args[i];\n\n    // Render non-Promise values immediately\n    if (isPrimitive(value) ||\n        typeof (value as {then?: unknown}).then !== 'function') {\n      part.setValue(value);\n      state.lastRenderedIndex = i;\n      // Since a lower-priority value will never overwrite a higher-priority\n      // synchronous value, we can stop processing now.\n      break;\n    }\n\n    // If this is a Promise we've already handled, skip it.\n    if (i < previousLength && value === previousValues[i]) {\n      continue;\n    }\n\n    // We have a Promise that we haven't seen before, so priorities may have\n    // changed. Forget what we rendered before.\n    state.lastRenderedIndex = _infinity;\n    previousLength = 0;\n\n    Promise.resolve(value).then((resolvedValue: unknown) => {\n      const index = state.values.indexOf(value);\n      // If state.values doesn't contain the value, we've re-rendered without\n      // the value, so don't render it. Then, only render if the value is\n      // higher-priority than what's already been rendered.\n      if (index > -1 && index < state.lastRenderedIndex) {\n        state.lastRenderedIndex = index;\n        part.setValue(resolvedValue);\n        part.commit();\n      }\n    });\n  }\n});\n","export {\n    TemplateResult,\n    SVGTemplateResult,\n    RenderOptions,\n    Part,\n    html,\n    svg,\n    render,\n    parts,\n    directive,\n} from 'lit-html';\n\nimport { Part, DirectiveFn } from 'lit-html';\nimport { asyncAppend } from 'lit-html/directives/async-append';\nimport { asyncReplace } from 'lit-html/directives/async-replace';\nimport { cache } from 'lit-html/directives/cache';\nimport { ClassInfo, classMap } from 'lit-html/directives/class-map';\nimport { guard } from 'lit-html/directives/guard';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport { KeyFn, ItemTemplate, repeat } from 'lit-html/directives/repeat';\nimport { StyleInfo, styleMap } from 'lit-html/directives/style-map';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html';\nimport { until } from 'lit-html/directives/until';\n\nexport interface TemplateDirectives {\n    asyncAppend: (value: AsyncIterable<unknown>, mapper?: ((v: unknown, index?: number | undefined) => unknown) | undefined) => (part: Part) => Promise<void>;\n    asyncReplace: (value: AsyncIterable<unknown>, mapper?: ((v: unknown, index?: number | undefined) => unknown) | undefined) => (part: Part) => Promise<void>;\n    cache: (value: unknown) => (part: Part) => void;\n    classMap: (classInfo: ClassInfo) => (part: Part) => void;\n    guard: (value: unknown, f: () => unknown) => (part: Part) => void;\n    ifDefined: (value: unknown) => (part: Part) => void;\n    repeat: <T>(items: Iterable<T>, keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>, template?: ItemTemplate<T> | undefined) => DirectiveFn;\n    styleMap: (styleInfo: StyleInfo) => (part: Part) => void;\n    unsafeHTML: (value: unknown) => (part: Part) => void;\n    until: (...args: unknown[]) => (part: Part) => void;\n}\n\nexport const directives: TemplateDirectives = {\n    asyncAppend,\n    asyncReplace,\n    cache,\n    classMap,\n    guard,\n    ifDefined,\n    repeat,\n    styleMap,\n    unsafeHTML,\n    until,\n};\n\n/**\n * @en Convert from `string` to `TemplateStringsArray`. <br>\n *     This method is helper brigdge for the [[html]] or the [[svg]] are able to received plain string.\n * @ja `string` を `TemplateStringsArray`に変換. <br>\n *     [[html]] や [[svg]] が文字列を受け付けるためのブリッジメソッド\n *\n * @example <br>\n *\n * ```ts\n * import { toTemplateStringsArray as bridge } from '@cdp/extension-template';\n *\n * const raw = '<p>Hello Raw String</p>';\n * render(html(bridge(raw)), document.body);\n * ```\n *\n * @param src\n *  - `en` plain string. ex) [[JST]] returned value.\n *  - `ja` プレーン文字列. ex) [[JST]] の戻り値などを想定\n */\nexport const toTemplateStringsArray = (src: string): TemplateStringsArray => {\n    const ta = [src] as { raw?: string[]; };\n    ta.raw = [src];\n    return ta as unknown as TemplateStringsArray;\n};\n","/** \r\n * @param {object} config = {\r\n *  html: lit-html.html,\r\n *  delimiter: { start: '{{', end: '}}' },\r\n *  transformers: { // note that transformVariable is not here. It gets applied when no transformer.test has passed\r\n *    name: {\r\n *      test: (str, config) => bool,\r\n *      transform: (str, config) => ({\r\n *        remainingTmplStr: str,\r\n *        insertionPoint: ctx => lit-html.TemplateResult | undefined, // if undefined remainingTmplStr will be merged with last static part \r\n *      }),\r\n *    },\r\n *  },\r\n *  transformVariable, \r\n * }\r\n * @returns {function} strTemplate => ctx => lit-html.TemplateResult\r\n */\r\nexport default config => strTemplate => transform(strTemplate, config)\r\n\r\nexport function transform(tmpl2Parse, config) {\r\n  const staticParts = []\r\n  const insertionPoints = []\r\n\r\n  let remainingTmplStr = tmpl2Parse\r\n  let startIndexOfIP = remainingTmplStr.indexOf(config.delimiter.start)\r\n  while (startIndexOfIP >= 0) {\r\n    if (remainingTmplStr.indexOf(config.delimiter.end, startIndexOfIP) < 0)\r\n      throw new Error(`missing end delimiter at: '${remainingTmplStr}'`)\r\n\r\n    staticParts.push(remainingTmplStr.substring(0, startIndexOfIP))\r\n\r\n    const iPTransformResult = transformIP(\r\n      remainingTmplStr.substring(startIndexOfIP + config.delimiter.start.length),\r\n      config\r\n    )\r\n\r\n    if (iPTransformResult.insertionPoint) {\r\n      remainingTmplStr = iPTransformResult.remainingTmplStr\r\n      insertionPoints.push(iPTransformResult.insertionPoint)\r\n      startIndexOfIP = remainingTmplStr.indexOf(config.delimiter.start)\r\n    } else { // e.g. comment or customDelimeter\r\n      const lastStaticPart = staticParts.pop()\r\n      remainingTmplStr = lastStaticPart + iPTransformResult.remainingTmplStr\r\n      startIndexOfIP = remainingTmplStr.indexOf(config.delimiter.start, lastStaticPart.length)\r\n    }\r\n  }\r\n\r\n  staticParts.push(remainingTmplStr)\r\n\r\n  return ctx =>\r\n    config.html(staticParts, ...insertionPoints.map(iP => iP(ctx)))\r\n}\r\n\r\nfunction transformIP(remainingTmplStr, config) {\r\n  const transformer = Object.values(config.transformers).find(t => t.test(remainingTmplStr, config))\r\n  const transformFunction = transformer\r\n    ? transformer.transform\r\n    : config.transformVariable\r\n  return transformFunction(remainingTmplStr, config)\r\n}","export function ctx2Value(ctx, key) {\r\n  if (key === '.')\r\n    return ctx\r\n\r\n  let result = ctx\r\n  for (let k of key.split('.')) {\r\n    if (!result.hasOwnProperty(k))\r\n      return ''\r\n\r\n    result = result[k]\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport function ctx2MustacheString(ctx, key) {\r\n  return mustacheStringyfy(ctx2Value(ctx, key))\r\n}\r\n\r\nfunction mustacheStringyfy(value) {\r\n  if (value === undefined || value === null)\r\n    return ''\r\n\r\n  return '' + value\r\n}","import { ctx2MustacheString } from '../helper/dataHelper.js'\r\n\r\nexport default (remainingTmplStr, { delimiter }) => {\r\n  const indexOfEndDelimiter = remainingTmplStr.indexOf(delimiter.end)\r\n  const dataKey = remainingTmplStr.substring(0, indexOfEndDelimiter)\r\n  return {\r\n    remainingTmplStr: remainingTmplStr.substring(indexOfEndDelimiter + delimiter.end.length),\r\n    insertionPoint: ctx => ctx2MustacheString(ctx, dataKey)\r\n  }\r\n}","import { ctx2MustacheString } from '../helper/dataHelper.js'\r\n\r\n/** Note, this is unsafe to use, because the rendered output could be any JavaScript! */\r\nexport default unsafeHTML => ({\r\n  test: remainingTmplStr => remainingTmplStr[0] === '{',\r\n  transform: (remainingTmplStr, { delimiter }) => {\r\n    const indexOfEndDelimiter = remainingTmplStr.indexOf('}' + delimiter.end)\r\n    if (indexOfEndDelimiter < 0)\r\n      throw new Error(`missing end delimiter at: '${delimiter.start}${remainingTmplStr}'`)\r\n  \r\n    const dataKey = remainingTmplStr.substring(1, indexOfEndDelimiter)\r\n    return {\r\n      remainingTmplStr: remainingTmplStr.substring(indexOfEndDelimiter + 1 + delimiter.end.length),\r\n      insertionPoint: ctx => unsafeHTML(ctx2MustacheString(ctx, dataKey)),\r\n    }\r\n  }\r\n})","export function isMustacheFalsy(value) {\r\n  return [null, undefined, false, 0, NaN, '']\r\n    .some(falsy => falsy === value)\r\n    || (value.length && value.length === 0)\r\n}","export function parseSection(tmplStr, delimiter) {\r\n  const indexOfStartTagEnd = tmplStr.indexOf(delimiter.end)\r\n  const dataKey = tmplStr.substring(1, indexOfStartTagEnd)\r\n  const endTag = `${delimiter.start}/${dataKey}${delimiter.end}`\r\n  const indexOfEndTagStart = tmplStr.indexOf(endTag)\r\n  if (indexOfEndTagStart < 0)\r\n    throw new Error(`missing end delimiter at: '${delimiter.start}${tmplStr}'`)\r\n  \r\n  return {\r\n    dataKey,\r\n    innerTmpl: tmplStr.substring(indexOfStartTagEnd + delimiter.start.length, indexOfEndTagStart),\r\n    remainingTmplStr: tmplStr.substring(indexOfEndTagStart + endTag.length),\r\n  }\r\n}","import { transform } from '../lit-transformer.js'\r\nimport { ctx2Value } from '../helper/dataHelper.js'\r\nimport { isMustacheFalsy } from '../helper/isMustacheFalsy.js'\r\nimport { parseSection } from '../helper/sectionHelper.js'\r\n\r\n/** Note, unlike within mustache functions as data values are not supported out of the box */\r\nexport default () => ({\r\n  test: remainingTmplStr => remainingTmplStr[0] === '#',\r\n  transform: (remainingTmplStr, config) => {\r\n    const parsedSection = parseSection(remainingTmplStr, config.delimiter)\r\n    const transformedInnerTmpl = transform(parsedSection.innerTmpl, config)\r\n    \r\n    return {\r\n      remainingTmplStr: parsedSection.remainingTmplStr,\r\n      insertionPoint: ctx => {\r\n        const sectionData = ctx2Value(ctx, parsedSection.dataKey)\r\n        \r\n        if (isMustacheFalsy(sectionData))\r\n          return '';\r\n\r\n        return sectionData.map\r\n          ? sectionData.map(innerCtx => transformedInnerTmpl(innerCtx))\r\n          : transformedInnerTmpl(ctx)\r\n      }\r\n    }\r\n  }\r\n})","import { ctx2Value } from '../helper/dataHelper.js'\r\nimport { isMustacheFalsy } from '../helper/isMustacheFalsy.js'\r\nimport { parseSection } from '../helper/sectionHelper.js'\r\n\r\nexport default () => ({\r\n  test: remainingTmplStr => remainingTmplStr[0] === '^',\r\n  transform: (remainingTmplStr, { delimiter }) => {\r\n    const parsedSection = parseSection(remainingTmplStr, delimiter)\r\n\r\n    return {\r\n      remainingTmplStr: parsedSection.remainingTmplStr,\r\n      insertionPoint: ctx =>\r\n        isMustacheFalsy(ctx2Value(ctx, parsedSection.dataKey))\r\n          ? parsedSection.innerTmpl\r\n          : '',\r\n    }\r\n  }\r\n})","export default () => ({\r\n  test: remainingTmplStr => remainingTmplStr[0] === '!',\r\n  transform: (remainingTmplStr, { delimiter }) => ({\r\n    remainingTmplStr: remainingTmplStr.substring(remainingTmplStr.indexOf(delimiter.end) + delimiter.end.length),\r\n    insertionPoint: undefined,\r\n  })\r\n})","export default () => ({\r\n  test: remainingTmplStr => remainingTmplStr[0] === '=',\r\n  transform: (remainingTmplStr, config) => {\r\n    const originalEndDeliLength = config.delimiter.end.length\r\n    const indexOfEndTag = remainingTmplStr.indexOf('=' + config.delimiter.end)\r\n    if (indexOfEndTag < 0 )\r\n      throw new Error(`missing end delimiter at: '${remainingTmplStr}'`)\r\n\r\n    const [ newStartDeli, newEndDeli ] = remainingTmplStr.substring(1, indexOfEndTag).split(' ')\r\n\r\n    config.delimiter.start = newStartDeli\r\n    config.delimiter.end = newEndDeli\r\n    \r\n    return {\r\n      remainingTmplStr: remainingTmplStr.substring(indexOfEndTag + 1 + originalEndDeliLength),\r\n      insertionPoint: undefined,  \r\n    }\r\n  }\r\n})","import type {\n    TemplateTag,\n    UnsafeHTMLDirective,\n    TemplateTransformer,\n    TransformTester,\n    TransformExecutor,\n    TransformeContext,\n    TransformConfig,\n} from 'lit-transformer/src/interfaces';\n\nimport createDefault from 'lit-transformer';\nimport createCustom from 'lit-transformer/src/lit-transformer';\n\nimport variable from 'lit-transformer/src/transformers/variableTransformer';\nimport unsafeVariable from 'lit-transformer/src/transformers/unsafeVariable';\nimport section from 'lit-transformer/src/transformers/section';\nimport invertedSection from 'lit-transformer/src/transformers/invertedSection';\nimport comment from 'lit-transformer/src/transformers/comment';\nimport customDelimiter from 'lit-transformer/src/transformers/customDelimiter';\n\nfunction createTransformFactory(html: TemplateTag, unsafeHTML: UnsafeHTMLDirective): TemplateTransformer;\nfunction createTransformFactory(config: TransformConfig): TemplateTransformer;\nfunction createTransformFactory(arg1: unknown, arg2?: unknown): TemplateTransformer {\n    if ('function' === typeof arg1) {\n        return createDefault(arg1 as TemplateTag, arg2 as UnsafeHTMLDirective);\n    } else {\n        return createCustom(Object.assign({\n            delimiter: { start: '{{', end: '}}' },\n            transformers: {},\n        }, arg1) as TransformConfig);\n    }\n}\n\nconst transformer: {\n    variable: TransformExecutor;\n    unsafeVariable: (unsafeHTML: UnsafeHTMLDirective) => TransformeContext;\n    section: () => TransformeContext;\n    invertedSection: () => TransformeContext;\n    comment: () => TransformeContext;\n    customDelimiter: () => TransformeContext;\n} = {\n    variable,\n    unsafeVariable,\n    section,\n    invertedSection,\n    comment,\n    customDelimiter,\n};\n\nexport {\n    TemplateTag,\n    UnsafeHTMLDirective,\n    TemplateTransformer,\n    TransformTester,\n    TransformExecutor,\n    TransformeContext,\n    TransformConfig,\n    createTransformFactory,\n    transformer,\n};\n","import createTransform from './lit-transformer.js'\r\nimport transformVariable from './transformers/variableTransformer.js'\r\nimport unsafeVariableTransformer from './transformers/unsafeVariable.js'\r\nimport sectionTransformer from './transformers/section.js'\r\nimport invertedSectionTransformer from './transformers/invertedSection.js'\r\nimport commentTransformer from './transformers/comment.js'\r\nimport customDelimiterTransformer from './transformers/customDelimiter.js'\r\n\r\nexport default (html, unsafeHTML) =>\r\n  createTransform({\r\n    html,\r\n    delimiter: { start: '{{', end: '}}' },\r\n    transformVariable,\r\n    transformers: {\r\n      unsafeVariable: unsafeVariableTransformer(unsafeHTML),\r\n      section: sectionTransformer(),\r\n      invertedSection: invertedSectionTransformer(),\r\n      comment: commentTransformer(),\r\n      customDelimiterTransformer: customDelimiterTransformer(),\r\n    },\r\n  })","import {\n    TemplateResult,\n    SVGTemplateResult,\n    html,\n    directives,\n} from '@cdp/extension-template';\nimport { TemplateTransformer, createTransformFactory } from '@cdp/extension-template-transformer';\nimport { PlainObject } from '@cdp/core-utils';\n\n/** @internal default transformer for mustache. */\nconst mustache = createTransformFactory(html, directives.unsafeHTML);\n\n/**\n * @en Compiled JavaScript template interface\n * @ja コンパイル済みテンプレート格納インターフェイス\n */\nexport interface CompiledTemplate {\n    /**\n     * @en Source template string\n     * @ja テンプレート文字列\n     */\n    source: string;\n\n    /**\n     * @en Get [[TemplateResult]] that applied given parameter(s).\n     * @ja パラメータを適用し [[TemplateResult]] へ変換\n     *\n     * @param view\n     *  - `en` template parameters for source.\n     *  - `ja` テンプレートパラメータ\n     */\n    (view?: PlainObject): TemplateResult | SVGTemplateResult;\n}\n\n/**\n * @en [[TemplateBridge]] compile options\n * @ja [[TemplateBridge]] コンパイルオプション\n */\nexport interface TemplateBridgeCompileOptions {\n    transformer?: TemplateTransformer;\n}\n\n/**\n * @en Template bridge for other template engine source.\n * @ja 他のテンプレートエンジンの入力を変換するテンプレートブリッジクラス\n */\nexport class TemplateBridge {\n    /** @internal */\n    private static _transformer = mustache;\n\n///////////////////////////////////////////////////////////////////////\n// public static methods:\n\n    /**\n     * @en Get [[CompiledTemplate]] from template source.\n     * @ja テンプレート文字列から [[CompiledTemplate]] を取得\n     *\n     * @param template\n     *  - `en` template source string\n     *  - `ja` テンプレート文字列\n     * @param options\n     *  - `en` compile options\n     *  - `ja` コンパイルオプション\n     */\n    public static compile(template: string, options?: TemplateBridgeCompileOptions): CompiledTemplate {\n        const { transformer } = Object.assign({ transformer: TemplateBridge._transformer }, options);\n        const engine = transformer(template);\n        const jst = (view?: PlainObject): TemplateResult | SVGTemplateResult => {\n            return engine(view);\n        };\n        jst.source = template;\n        return jst;\n    }\n\n    /**\n     * @en Update default transformer object.\n     * @ja 既定の変換オブジェクトの更新\n     *\n     * @param newTransformer\n     *  - `en` new transformer object.\n     *  - `ja` 新しい変換オブジェクトを指定.\n     * @returns\n     *  - `en` old transformer object.\n     *  - `ja` 以前の変換オブジェクトを返却\n     */\n    public static setTransformer(newTransformer: TemplateTransformer): TemplateTransformer {\n        const oldTransformer = TemplateBridge._transformer;\n        TemplateBridge._transformer = newTransformer;\n        return oldTransformer;\n    }\n}\n","import { safe } from '@cdp/core-utils';\n/** @internal */ export const document = safe(globalThis.document);\n","import { JST, TemplateEngine } from '@cdp/core-template';\nimport { request } from '@cdp/ajax';\nimport { document } from './ssr';\nimport { CompiledTemplate, TemplateBridge } from './bridge';\n\n/** @internal */\ninterface TemplateElementMap {\n    [url: string]: Element;\n}\n\n/** @internal */\ninterface TemplateSourceMap {\n    [key: string]: string;\n}\n\n/** @internal */ let _mapElement: TemplateElementMap = {};\n/** @internal */ let _mapSource: TemplateSourceMap = {};\n\n/** @internal */\nfunction queryTemplateSource(selector: string, el: Element | null, cache: boolean): string | undefined {\n    const key = `${selector}${el ? `::${el.innerHTML.replace(/\\s/gm, '')}` : ''}`;\n    if (_mapSource[key]) {\n        return _mapSource[key];\n    }\n    const context = el || document;\n    const target = context.querySelector(selector);\n    const source = target?.innerHTML;\n    cache && source && (_mapSource[key] = source);\n    return source;\n}\n\n/** @internal */\nasync function queryTemplateElement(url: string | undefined, cache: boolean): Promise<Element | null> {\n    if (!url) {\n        return null;\n    }\n    if (_mapElement[url]) {\n        return _mapElement[url];\n    } else {\n        const html = await request.text(url);\n        const template = document.createElement('template');\n        template.innerHTML = html;\n        const el = template.content.firstElementChild;\n        cache && el && (_mapElement[url] = el);\n        return el;\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Template query type list.\n * @ja テンプレート取得時に指定可能な型一覧\n */\nexport interface TemplateQueryTypeList {\n    engine: JST;\n    bridge: CompiledTemplate;\n}\n\n/**\n * @en Template query type definitions.\n * @ja テンプレート取得時に指定可能な型指定子\n */\nexport type TemplateQueryTypes = keyof TemplateQueryTypeList;\n\n/**\n * @en Template query options.\n * @ja テンプレート取得オプション\n */\nexport interface TemplateQueryOptions<T extends TemplateQueryTypes> {\n    type?: T;\n    url?: string;\n    cache?: boolean;\n}\n\n/**\n * @en Clear template's resources.\n * @ja テンプレートリソースキャッシュの削除\n */\nexport function clearTemplateCache(): void {\n    _mapElement = {};\n    _mapSource  = {};\n}\n\n/**\n * @en Get compiled JavaScript template.\n * @ja コンパイル済み JavaScript テンプレート取得\n *\n * @param selector\n *  - `en` The selector string of DOM.\n *  - `ja` DOM セレクタ文字列\n * @param options\n *  - `en` query options\n *  - `ja` クエリオプション\n */\nexport async function getTemplate<T extends TemplateQueryTypes = 'engine'>(\n    selector: string, options?: TemplateQueryOptions<T>\n): Promise<TemplateQueryTypeList[T]> {\n    const { type, url, cache } = Object.assign({ type: 'engine', cache: true }, options);\n    const el  = await queryTemplateElement(url, cache);\n    const src = queryTemplateSource(selector, el, cache);\n    if (!src) {\n        throw new URIError(`cannot specified template resource. { selector: ${selector},  url: ${url} }`);\n    }\n    switch (type) {\n        case 'engine':\n            return TemplateEngine.compile(src) as TemplateQueryTypeList[T];\n        case 'bridge':\n            return TemplateBridge.compile(src) as TemplateQueryTypeList[T];\n        default:\n            throw new TypeError(`[type: ${type}] is unknown.`);\n    }\n}\n","/**\n * @en Cursor position constant.\n * @ja カーソル位置定数\n */\nexport const enum CursorPos {\n    OUT_OF_RANGE    = -1,\n    CURRENT         = -2,\n}\n\n/**\n * @en Seek expression function type.\n * @ja シーク式関数定義\n */\nexport type SeekExp<T> = (value: T, index?: number, obj?: T[]) => boolean;\n\n/**\n * @en The class provides cursor interface for Array. <br>\n *     It is different from Iterator interface of es2015, and that provides interface which is similar to DB recordset's one.\n * @ja Array 用カーソル I/F を提供するクラス <br>\n *     es2015 の Iterator I/F とは異なり、DB recordset オブジェクトライクな走査 I/F を提供する\n */\nexport class ArrayCursor<T = any> { // eslint-disable-line @typescript-eslint/no-explicit-any\n    /** @internal 対象の配列  */\n    private _array: T[];\n    /** @internal 要素外の先頭を示しているときに true  */\n    private _bof: boolean;\n    /** @internal 要素外の末尾を示しているときに true */\n    private _eof: boolean;\n    /** @internal 現在の index */\n    private _index: number;\n\n    /**\n     * constructor\n     *\n     * @param array\n     *  - `en` target array\n     *  - `ja` 走査対象の配列を指定\n     * @param initialIndex\n     *  - `en` initial index. default: 0\n     *  - `ja` 初期化する index を指定 default: 0\n     */\n    constructor(array: T[], initialIndex = 0) {\n        this._array = array;\n        this._index = initialIndex;\n        if (this.valid()) {\n            this._bof = this._eof = false;\n        } else {\n            this._index = CursorPos.OUT_OF_RANGE;\n            this._bof = true;\n            this._eof = false;\n        }\n    }\n\n    /**\n     * @en Reset target array.\n     * @ja 対象の再設定\n     *\n     * @param array\n     *  - `en` target array. default: empty array.\n     *  - `ja` 走査対象の配列を指定.   default: 空配列\n     * @param initialIndex\n     *  - `en` initial index. default: CURSOR.OUT_OF_RANGE\n     *  - `ja` 初期化する index を指定 default: CURSOR.OUT_OF_RANGE\n     */\n    public reset(array: T[] = [], initialIndex: number = CursorPos.OUT_OF_RANGE): ArrayCursor<T> {\n        this._array = array;\n        this._index = initialIndex;\n        if (this.valid()) {\n            this._bof = this._eof = false;\n        } else {\n            this._index = CursorPos.OUT_OF_RANGE;\n            this._bof = true;\n            this._eof = false;\n        }\n        return this;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// accessors:\n\n    /**\n     * @en Access to current element.\n     * @ja 現在の要素にアクセス\n     */\n    get current(): T | undefined {\n        return this._array[this._index];\n    }\n\n    /**\n     * @en Get current index.\n     * @ja 現在指し示している index を取得\n     */\n    get index(): number {\n        return this._index;\n    }\n\n    /**\n     * @en Get target array length.\n     * @ja 走査対象の要素数を取得\n     */\n    get length(): number {\n        return this._array.length;\n    }\n\n    /**\n     * @en Judge BOF or not.\n     * @ja 要素外の先頭か判定\n     */\n    get isBOF(): boolean {\n        return this._bof;\n    }\n\n    /**\n     * @en Judge EOF or not.\n     * @ja 要素外の末尾か判定\n     */\n    get isEOF(): boolean {\n        return this._eof;\n    }\n\n    /**\n     * @en Access to raw array instance.\n     * @ja 走査対象にアクセス\n     */\n    get array(): T[] {\n        return this._array;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// cursor operation:\n\n    /**\n     * @en Move to first element position.\n     * @ja 先頭要素へ移動\n     */\n    public moveFirst(): ArrayCursor<T> {\n        this._index = 0;\n        this._bof = this._eof = false;\n        if (!this.valid()) {\n            this._index = CursorPos.OUT_OF_RANGE;\n            this._bof = true;\n        }\n        return this;\n    }\n\n    /**\n     * @en Move to last element position.\n     * @ja 末尾要素へ移動\n     */\n    public moveLast(): ArrayCursor<T> {\n        this._index = this._array.length - 1;\n        this._bof = this._eof = false;\n        if (!this.valid()) {\n            this._eof = true;\n        }\n        return this;\n    }\n\n    /**\n     * @en Move to next element position.\n     * @ja カーソルを次へ移動\n     */\n    public moveNext(): ArrayCursor<T> {\n        if (this._bof) {\n            this._bof = false;\n            this._index = 0;\n        } else {\n            this._index++;\n        }\n        if (!this.valid()) {\n            this._index = CursorPos.OUT_OF_RANGE;\n            this._eof = true;\n        }\n        return this;\n    }\n\n    /**\n     * @en Move to previous element position.\n     * @ja カーソルを前へ移動\n     */\n    public movePrevious(): ArrayCursor<T> {\n        if (this._eof) {\n            this._eof = false;\n            this._index = this.length - 1;\n        } else {\n            this._index--;\n        }\n        if (!this.valid()) {\n            this._index = CursorPos.OUT_OF_RANGE;\n            this._bof = true;\n        }\n        return this;\n    }\n\n    /**\n     * @en Seek by passed criteria. <br>\n     *     If the operation failed, the cursor position set to EOF.\n     * @ja 指定条件でシーク <br>\n     *     シークに失敗した場合は EOF 状態になる\n     *\n     * @param criteria\n     *  - `en` index or seek expression\n     *  - `ja` index / 条件式を指定\n     */\n    public seek(criteria: number | SeekExp<T>): ArrayCursor<T> {\n        if ('number' === typeof criteria) {\n            this._index = criteria;\n        } else {\n            this._index = this._array.findIndex(criteria);\n        }\n        if (!this.valid()) {\n            this._index = CursorPos.OUT_OF_RANGE;\n            this._bof = false;\n            this._eof = true;\n        }\n        return this;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// private methods:\n\n    /**\n     * カーソルが有効な範囲を示しているか判定\n     *\n     * @internal\n     *\n     * @returns true: 有効 / false: 無効\n     */\n    private valid(): boolean {\n        return (0 <= this._index && this._index < this._array.length);\n    }\n}\n"]}