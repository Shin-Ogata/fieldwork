{"version":3,"names":["getGlobal","globalThis","Function","ensureObject","parent","names","root","name","getGlobalNamespace","namespace","getConfig","configName","exists","x","isNullish","isString","isNumber","isBoolean","isSymbol","isPrimitive","isArray","Array","isObject","Boolean","isPlainObject","Object","getPrototypeOf","ownInstanceOf","isEmptyObject","isFunction","isIterable","Symbol","iterator","_typedArrayNames","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","isTypedArray","className","ctor","prototype","toStringTagName","toStringTag","constructor","toString","call","slice","sameClass","lhs","rhs","$cdp","_verifier","notNullish","message","TypeError","typeOf","type","array","iterable","instanceOf","notOwnInstanceOf","hasProperty","prop","String","hasOwnProperty","verify","method","args","arrayEqual","len","length","i","deepEqual","bufferEqual","size","byteLength","pos","f64L","f64R","is","L","DataView","R","getUint32","getUint16","getUint8","assignValue","target","key","value","valueL","valueOf","valueR","isRegExpL","RegExp","isRegExpR","isArrayL","isArrayR","isBufferL","ArrayBuffer","isBufferR","isBufferViewL","isView","isBufferViewR","buffer","isIterableL","isIterableR","keysL","Set","keys","keysR","has","add","cloneArrayBuffer","arrayBuffer","result","set","needUpdate","oldValue","newValue","exceptUndefined","undefined","mergeObjectProperty","source","merge","cloneRegExp","regexp","flags","lastIndex","cloneTypedArray","typedArray","byteOffset","cloneDataView","dataView","mergeArray","mergeSet","item","Map","mergeMap","k","v","get","obj","deepMerge","sources","deepCopy","src","_objPrototype","_instanceOf","hasInstance","_override","_isInherited","_constructors","_classBase","_classSources","_protoExtendsOnly","reflectProperties","defineProperty","getOwnPropertyDescriptor","copyProperties","getOwnPropertyNames","filter","test","forEach","getOwnPropertySymbols","setInstanceOf","behaviour","isPrototypeOf","applied","defineProperties","writable","enumerable","mixins","base","_hasSourceConstructor","_MixinBase","super","constructors","this","srcClass","handler","apply","thisobj","arglist","Proxy","map","isMixedWith","reduce","p","c","instance","ctors","desc","orgInstanceOf","inst","propName","invert","accessible","callable","safe","create","stub","_root","setTimeout","bind","clearTimeout","setInterval","clearInterval","post","executor","Promise","resolve","then","noop","debounce","wait","options","lastArgs","lastThis","lastCallTime","timerId","lastInvokeTime","waitValue","Number","opts","assign","leading","trailing","maxWait","Math","max","invokeFunc","time","thisArg","shouldInvoke","timeSinceLastCall","timeSinceLastInvoke","trailingEdge","timerExpired","Date","now","timeWaiting","min","remainingWait","debounced","isInvoking","leadingEdge","cancel","flush","pending","createEscaper","escaper","match","join","regexTest","regexReplace","replace","mapHtmlEscape","escapeHTML","unescapeHTML","fromTypedData","data","JSON","stringify","dropUndefined","nullishSerialize","restoreNullish","_localId","randomInt","floor","random","_regexCancelLikeString","isCancelLikeError","error","capitalize","lowercaseRest","remainingChars","toLowerCase","charAt","toUpperCase","decapitalize","camelize","lower","trim","unique","difference","others","arrays","acc","ary","el","includes","async","callback","all","a","_computeDateFuncMap","year","date","setUTCFullYear","getUTCFullYear","month","setUTCMonth","getUTCMonth","day","setUTCDate","getUTCDate","hour","setUTCHours","getUTCHours","setUTCMinutes","getUTCMinutes","sec","setUTCSeconds","getUTCSeconds","msec","setUTCMilliseconds","getUTCMilliseconds","_status","statusAddRef","status","statusRelease","retval","_mapListeners","WeakMap","listeners","validChannel","channel","validListener","listener","triggerEvent","original","list","eventArgs","handled","e","reject","EventPublisher","publish","hasListener","channels","on","ch","freeze","enable","unsubscribe","delete","once","context","managed","off","clear","EventBroker","trigger","_context","register","subscriptions","s","push","listenerMap","unregister","values","EventReceiver","listenTo","listenToOnce","stopListening","EventSource","_EventSource","_cancel","_close","invalidSubscription","_tokens","getContext","CancelToken","linkedTokens","close","token","onCancel","onClose","linkedTokenSet","t","broker","reason","seal","cancelable","requested","closed","NativePromise","nativeThen","_create","CancelablePromise","species","cancelToken","thenArgs","dispose","Error","setPrototypeOf","onfulfilled","onrejected","onfinally","finally","extendPromise","promises","safePromises","promise","catch","checkCanceled","checkStatus","race","noAutomaticNativeExtend","Deferred","arg1","arg2","resolveArgs","publications","EventBrokerProxy","_broker","_internal","_notify","_stockChange","_notifyChanges","verifyObservable","_proxyHandler","receiver","Reflect","state","ObservableObject","internal","changed","changeMap","property","props","suspend","noRecord","resume","getObservableState","getBroker","from","observable","notify","properties","keyValue","keyValuePairs","curValue","eventBroker","attributes","byMethod","oldLength","newLength","stock","scrap","isValidArrayIndex","deleteProperty","index","n","trunc","ObservableArray","arguments","records","indexes","argLength","sort","comparator","old","splice","start","deleteCount","items","oldLen","shift","unshift","callbackfn","rci","findRelatedChangeIndex","checkType","rct","r","prevRecord","CDP_DECLARE","RESULT_CODE","ASSIGN_RESULT_CODE","extend","_code2message","declareResultCode","code","succeeded","RangeError","signed","resultCode","ERROR_MESSAGE_MAP","DECLARE_SUCCESS_CODE","DECLARE_ERROR_CODE","FAILED","SUCCEEDED","toNameString","tag","prefix","toHelpString","isFinite","configurable","Result","SUCCESS","FAIL","cause","isError","isSucceeded","isFailed","isCanceled","ABORT","codeName","help","MemoryStorage","_storage","kind","getItem","cc","dataType","setItem","newVal","oldVal","silent","removeItem","memoryStorage","globalSettings","tags","escape","cache","escapeTemplateExp","Scanner","_source","_tail","_pos","eos","scan","exec","string","substring","scanUntil","search","Context","_view","_parent","_cache","view","parentContext","lookup","intermediateValue","lookupHit","indexOf","split","_regexp","white","space","equals","curly","Writer","parse","template","cacheKey","buildCacheKey","tokens","parseTemplate","lineHasNonSpace","sections","spaces","hasTag","nonSpace","indentation","tagIndex","stripSpace","pop","compileTags","tagsToCompile","openingTag","closingTag","closingCurly","reTag","reWhite","reEquals","reCurly","_regxpTags","scanner","openSection","reOpeningTag","reClosingTag","reClosingCurly","valueLength","chr","nestTokens","nestedTokens","collector","section","squashTokens","squashedTokens","lastToken","render","partials","renderTokens","originalTemplate","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","self","subRender","indentPartial","partial","filteredIndentation","partialByNl","indentedValue","writer","PromiseManager","_pool","cancelSource","always","release","allSettled","any","abort","canceler","Registry","_rootKey","_defaultOptions","_store","storage","rootKey","formatSpace","jsonSpace","load","save","read","field","structure","lastKey","reg","targetRoot","write","noSave","remove","TemplateEngine","compile","typeString","jst","cacheLocation","clearCache","setGlobalSettings","setiings","oldSettings","createScanner","createContext","createWriter","at","idx","classify","combination","count","val","entries","n1","row","j","n2","concat","computeDate","unit","getTime","func","dasherize","diff","drop","dropValues","every","bits","find","findIndex","groupBy","sumKeys","groupKey","_groupKey","_sumKeys","hash","res","_key","keyList","h","resKey","indices","excludes","exList","ex","intersection","isBigInt","isNumeric","isNaN","isObservable","isResult","isStatusIn","luid","zeroPad","id","padStart","makeCanceledResult","makeResult","omit","omitKeys","memo","permutation","parts","pick","pickKeys","initialValue","hasInit","fallback","o","sameType","sample","last","rand","temp","scheduler","tasks","runTasks","work","task","setMixClassAttribute","attr","shuffle","destructive","swap","sleep","elapse","some","statusScope","throttle","toResult","toTypedData","underscored","union","flat","without"],"sources":["cdp:///@cdp/lib-core/core-utils/config.ts","cdp:///@cdp/lib-core/core-utils/types.ts","cdp:///@cdp/lib-core/core-utils/verify.ts","cdp:///@cdp/lib-core/core-utils/deep-circuit.ts","cdp:///@cdp/lib-core/core-utils/mixins.ts","cdp:///@cdp/lib-core/core-utils/object.ts","cdp:///@cdp/lib-core/core-utils/safe.ts","cdp:///@cdp/lib-core/core-utils/timer.ts","cdp:///@cdp/lib-core/core-utils/misc.ts","cdp:///@cdp/lib-core/core-utils/array.ts","cdp:///@cdp/lib-core/core-utils/date.ts","cdp:///@cdp/lib-core/core-utils/status.ts","cdp:///@cdp/lib-core/events/publisher.ts","cdp:///@cdp/lib-core/events/broker.ts","cdp:///@cdp/lib-core/events/receiver.ts","cdp:///@cdp/lib-core/events/source.ts","cdp:///@cdp/lib-core/promise/internal.ts","cdp:///@cdp/lib-core/promise/cancel-token.ts","cdp:///@cdp/lib-core/promise/cancelable-promise.ts","cdp:///@cdp/lib-core/promise/utils.ts","cdp:///@cdp/lib-core/promise/deferred.ts","cdp:///@cdp/lib-core/observable/internal.ts","cdp:///@cdp/lib-core/observable/object.ts","cdp:///@cdp/lib-core/observable/array.ts","cdp:///@cdp/lib-core/result/result-code-defs.ts","cdp:///@cdp/lib-core/result/result-code.ts","cdp:///@cdp/lib-core/result/result.ts","cdp:///@cdp/lib-core/core-storage/memory-storage.ts","cdp:///@cdp/lib-core/core-template/internal.ts","cdp:///@cdp/lib-core/core-template/cache.ts","cdp:///@cdp/lib-core/core-template/utils.ts","cdp:///@cdp/lib-core/core-template/scanner.ts","cdp:///@cdp/lib-core/core-template/context.ts","cdp:///@cdp/lib-core/core-template/parse.ts","cdp:///@cdp/lib-core/core-template/writer.ts","cdp:///@cdp/lib-core/core-template/class.ts","cdp:///@cdp/lib-core/promise/promise-manager.ts","cdp:///@cdp/lib-core/core-storage/registry.ts","cdp:///@cdp/lib-core/observable/common.ts"],"sourcesContent":["import type { UnknownObject } from './types';\n\n/**\n * @en Safe `global` accessor.\n * @ja `global` アクセッサ\n * \n * @returns\n *  - `en` `global` object of the runtime environment\n *  - `ja` 環境に応じた `global` オブジェクト\n */\nexport function getGlobal(): typeof globalThis {\n    // eslint-disable-next-line no-new-func, @typescript-eslint/no-implied-eval\n    return ('object' === typeof globalThis) ? globalThis : Function('return this')();\n}\n\n/**\n * @en Ensure named object as parent's property.\n * @ja 親オブジェクトを指定して, 名前に指定したオブジェクトの存在を保証\n *\n * @param parent\n *  - `en` parent object. If null given, `globalThis` is assigned.\n *  - `ja` 親オブジェクト. null の場合は `globalThis` が使用される\n * @param names\n *  - `en` object name chain for ensure instance.\n *  - `ja` 保証するオブジェクトの名前\n */\nexport function ensureObject<T extends object = UnknownObject>(parent: object | null, ...names: string[]): T {\n    let root = (parent ?? getGlobal()) as UnknownObject;\n    for (const name of names) {\n        root[name] = root[name] || {};\n        root = root[name] as UnknownObject;\n    }\n    return root as T;\n}\n\n/**\n * @en Global namespace accessor.\n * @ja グローバルネームスペースアクセッサ\n */\nexport function getGlobalNamespace<T extends object = UnknownObject>(namespace: string): T {\n    return ensureObject<T>(null, namespace);\n}\n\n/**\n * @en Global config accessor.\n * @ja グローバルコンフィグアクセッサ\n *\n * @returns default: `CDP.Config`\n */\nexport function getConfig<T extends object = UnknownObject>(namespace = 'CDP', configName = 'Config'): T {\n    return ensureObject<T>(getGlobalNamespace(namespace), configName);\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n    @typescript-eslint/no-unsafe-function-type,\n    @typescript-eslint/no-empty-object-type,\n */\n\n/**\n * @en Primitive type of JavaScript.\n * @ja JavaScript のプリミティブ型\n */\nexport type Primitive = string | number | boolean | symbol | bigint | null | undefined;\n\n/**\n * @en The general null type.\n * @ja 空を示す型定義\n */\nexport type Nullish = void | null | undefined;\n\n/**\n * @en The type of object or {@link Nullish}.\n * @ja {@link Nullish} になりえるオブジェクト型定義\n */\nexport type Nullable<T extends object> = T | Nullish;\n\n/**\n * @en Avoid the `Function`types.\n * @ja 汎用関数型\n */\nexport type UnknownFunction = (...args: unknown[]) => unknown;\n\n/**\n * @en Avoid the `Object` and `{}` types, as they mean \"any non-nullish value\".\n * @ja 汎用オブジェクト型. `Object` および `{}` タイプは「nullでない値」を意味するため代価として使用\n */\nexport type UnknownObject = Record<string | number | symbol, unknown>;\n\n/**\n * @en JavaScript type set interface.\n * @ja JavaScript の型の集合\n */\ninterface TypeList {\n    string: string;\n    number: number;\n    boolean: boolean;\n    symbol: symbol;\n    bigint: bigint;\n    undefined: void | undefined;\n    object: object | null;\n    function(...args: unknown[]): unknown;\n}\n\n/**\n * @en The key list of {@link TypeList}.\n * @ja {@link TypeList} キー一覧\n */\nexport type TypeKeys = keyof TypeList;\n\n/**\n * @en Type base definition.\n * @ja 型の規定定義\n */\nexport interface Type<T extends object> extends Function {\n    readonly prototype: T;\n}\n\n/**\n * @en Type of constructor.\n * @ja コンストラクタ型\n */\nexport interface Constructor<T extends object> extends Type<T> {\n    new(...args: any[]): T;\n}\n\n/**\n * @en Type of class.\n * @ja クラス型\n */\nexport type Class<T extends object = object> = Constructor<T>;\n\n/**\n * @en Ensure for function parameters to tuple.\n * @ja 関数パラメータとして tuple を保証\n */\nexport type Arguments<T> = T extends any[] ? T : [T];\n\n/**\n * @en Rmove `readonly` attributes from input type.\n * @ja `readonly` 属性を解除\n */\nexport type Writable<T> = { -readonly [K in keyof T]: T[K] };\n\n/**\n * @en Convert to subscript accessible type.\n * @ja 添え字アクセス可能な型に変換\n */\nexport type Accessible<T, S = unknown> = T & Record<string | number | symbol, S>;\n\n/**\n * @en Extract functional property names.\n * @ja 関数プロパティ名の抽出\n */\nexport type FunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T] & string;\n\n/**\n * @en Extract functional properties.\n * @ja 関数プロパティの抽出\n */\nexport type FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;\n\n/**\n * @en Extract non-functional property names.\n * @ja 非関数プロパティ名の抽出\n */\nexport type NonFunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T] & string;\n\n/**\n * @en Extract non-functional properties.\n * @ja 非関数プロパティの抽出\n */\nexport type NonFunctionProperties<T> = Pick<T, NonFunctionPropertyNames<T>>;\n\n/**\n * @en Extract non-functional types.\n * @ja 非関数型の抽出\n */\nexport type NonFunction<T> = T extends Function ? never : T;\n\n/**\n * @en Extract object key list. (ensure only 'string')\n * @ja オブジェクトのキー一覧を抽出 ('string' 型のみを保証)\n */\nexport type Keys<T extends object> = keyof Omit<T, number | symbol>;\n\n/**\n * @en Extract object type list.\n * @ja オブジェクトの型一覧を抽出\n */\nexport type Types<T extends object> = T[keyof T];\n\n/**\n * @en Convert object key to type.\n * @ja オブジェクトキーから型へ変換\n */\nexport type KeyToType<O extends object, K extends keyof O> = K extends keyof O ? O[K] : never;\n\n/**\n * @en Convert object type to key.\n * @ja オブジェクト型からキーへ変換\n */\nexport type TypeToKey<O extends object, T extends Types<O>> = { [K in keyof O]: O[K] extends T ? K : never }[keyof O];\n\n/**\n * @en The {@link PlainObject} type is a JavaScript object containing zero or more key-value pairs. <br>\n *     'Plain' means it from other kinds of JavaScript objects. ex: null, user-defined arrays, and host objects such as `document`.\n * @ja 0 以上の key-value ペアを持つ {@link PlainObject} 定義 <br>\n *     'Plain' とは他の種類の JavaScript オブジェクトを含まないオブジェクトを意味する. 例:  null, ユーザー定義配列, または `document` のような組み込みオブジェクト\n */\nexport type PlainObject<T = {} | null | undefined> = Record<string, T>;\n\n/**\n * @en Object can be guaranteed definition. Be careful not to abuse it because it does not force the cast.\n *   - Unlike {@link PlainObject}, it can accept Class (built-in object), Array, Function.\n *   - Unlike `object`, you can access unknown properties.\n *   - Unlike `{} / Object`, it can repel {@link Primitive}.\n * @ja Object を保証可能な定義. キャストを強制しないため乱用しないように注意が必要.\n *   - {@link PlainObject} と違い、Class (組み込みオブジェクト), Array, Function を受け付けることができる.\n *   - `object` と違い、未知のプロパティにアクセスすることができる.\n *   - `{} / Object` と違い、{@link Primitive} をはじくことができる.\n */\nexport type AnyObject = Record<string, any>;\n\n/**\n * @en The data type list by which style compulsion is possible.\n * @ja 型強制可能なデータ型一覧\n */\nexport type TypedData = string | number | boolean | null | object;\n\n/**\n * @en The data type list of TypedArray.\n * @ja TypedArray 一覧\n */\nexport type TypedArray = Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array;\n\n/**\n * @en TypedArray constructor.\n * @ja TypedArray コンストラクタ定義\n */\nexport interface TypedArrayConstructor {\n    readonly prototype: TypedArray;\n    new(seed: number | ArrayLike<number> | ArrayBufferLike): TypedArray;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): TypedArray;\n\n    /**\n     * @en The size in bytes of each element in the array.\n     * @ja 要素のバイトサイズ\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * @en Returns a new array from a set of elements.\n     * @ja 要素を設定し新規配列を返却\n     *\n     * @param items\n     *  - `en` A set of elements to include in the new array object.\n     *  - `ja` 新たに設定する要素\n     */\n    of(...items: number[]): TypedArray;\n\n    /**\n     * @en Creates an array from an array-like or iterable object.\n     * @ja array-like / iteratable オブジェクトから新規配列を作成\n     *\n     * @param arrayLike\n     *  - `en` An array-like or iterable object to convert to an array.\n     *  - `ja` array-like もしくは iteratable オブジェクト\n     */\n    from(arrayLike: ArrayLike<number>): TypedArray;\n\n    /**\n     * @en Creates an array from an array-like or iterable object.\n     * @ja array-like / iteratable オブジェクトから新規配列を作成\n     *\n     * @param arrayLike\n     *  - `en` An array-like or iterable object to convert to an array.\n     *  - `ja` array-like もしくは iteratable オブジェクト\n     * @param mapfn\n     *  - `en` A mapping function to call on every element of the array.\n     *  - `ja` 全要素に適用するプロキシ関数\n     * @param thisArg\n     *  - `en` Value of 'this' used to invoke the mapfn.\n     *  - `ja` mapfn に使用する 'this'\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: unknown): TypedArray;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Check the value exists.\n * @ja 値が存在するか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function exists<T>(x: T | Nullish): x is T {\n    return null != x;\n}\n\n/**\n * @en Check the value-type is {@link Nullish}.\n * @ja {@link Nullish} 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isNullish(x: unknown): x is Nullish {\n    return null == x;\n}\n\n/**\n * @en Check the value-type is String.\n * @ja String 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isString(x: unknown): x is string {\n    return 'string' === typeof x;\n}\n\n/**\n * @en Check the value-type is Number.\n * @ja Number 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isNumber(x: unknown): x is number {\n    return 'number' === typeof x;\n}\n\n/**\n * @en Check the value-type is Boolean.\n * @ja Boolean 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isBoolean(x: unknown): x is boolean {\n    return 'boolean' === typeof x;\n}\n\n/**\n * @en Check the value-type is Symble.\n * @ja Symbol 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isSymbol(x: unknown): x is symbol {\n    return 'symbol' === typeof x;\n}\n\n/**\n * @en Check the value-type is BigInt.\n * @ja BigInt 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isBigInt(x: unknown): x is bigint {\n    return 'bigint' === typeof x;\n}\n\n/**\n * @en Check the value-type is primitive type.\n * @ja プリミティブ型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isPrimitive(x: unknown): x is Primitive {\n    return !x || ('function' !== typeof x) && ('object' !== typeof x);\n}\n\n/**\n * @en Check the value-type is Array.\n * @ja Array 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport const isArray = Array.isArray;\n\n/**\n * @en Check the value-type is Object.\n * @ja Object 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isObject(x: unknown): x is object {\n    return Boolean(x) && 'object' === typeof x;\n}\n\n/**\n * @en Check the value-type is {@link PlainObject}.\n * @ja {@link PlainObject} 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isPlainObject(x: unknown): x is PlainObject {\n    if (!isObject(x)) {\n        return false;\n    }\n\n    // create from `Object.create( null )` is plain\n    if (!Object.getPrototypeOf(x)) {\n        return true;\n    }\n\n    return ownInstanceOf(Object, x);\n}\n\n/**\n * @en Check the value-type is empty object.\n * @ja 空オブジェクトであるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isEmptyObject(x: unknown): x is object {\n    if (!isPlainObject(x)) {\n        return false;\n    }\n    for (const name in x) {\n        return false;\n    }\n    return true;\n}\n\n/**\n * @en Check the value-type is Function.\n * @ja Function 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isFunction(x: unknown): x is TypeList['function'] {\n    return 'function' === typeof x;\n}\n\n/**\n * @en Check the value can be convert to a number.\n * @ja 数値に変換可能か判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isNumeric(x: unknown): x is number {\n    return !isNullish(x) && !isBoolean(x) && !isArray(x) && !isSymbol(x) && ('' !== x) && !Number.isNaN(Number(x));\n}\n\n/**\n * @en Check the value-type is input.\n * @ja 指定した型であるか判定\n *\n * @param type\n *  - `en` evaluated type\n *  - `ja` 評価する型\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function typeOf<K extends TypeKeys>(type: K, x: unknown): x is TypeList[K] {\n    return typeof x === type;\n}\n\n/**\n * @en Check the value has iterator.\n * @ja iterator を所有しているか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isIterable<T>(x: Nullable<Iterable<T>>): x is Iterable<T>;\nexport function isIterable(x: unknown): x is Iterable<unknown>;\nexport function isIterable(x: unknown): any {\n    return Symbol.iterator in Object(x);\n}\n\n/** @internal */\nconst _typedArrayNames: Record<string, boolean> = {\n    'Int8Array': true,\n    'Uint8Array': true,\n    'Uint8ClampedArray': true,\n    'Int16Array': true,\n    'Uint16Array': true,\n    'Int32Array': true,\n    'Uint32Array': true,\n    'Float32Array': true,\n    'Float64Array': true,\n};\n\n/**\n * @en Check the value is one of {@link TypedArray}.\n * @ja 指定したインスタンスが {@link TypedArray} の一種であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isTypedArray(x: unknown): x is TypedArray {\n    return !!_typedArrayNames[className(x)];\n}\n\n/**\n * @en Check the value instance of input.\n * @ja 指定したインスタンスであるか判定\n *\n * @param ctor\n *  - `en` evaluated constructor\n *  - `ja` 評価するコンストラクタ\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function instanceOf<T extends object>(ctor: Nullable<Type<T>>, x: unknown): x is T {\n    return ('function' === typeof ctor) && (x instanceof ctor);\n}\n\n/**\n * @en Check the value instance of input constructor (except sub class).\n * @ja 指定コンストラクタのインスタンスであるか判定 (派生クラスは含めない)\n *\n * @param ctor\n *  - `en` evaluated constructor\n *  - `ja` 評価するコンストラクタ\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function ownInstanceOf<T extends object>(ctor: Nullable<Type<T>>, x: unknown): x is T {\n    return (null != x) && ('function' === typeof ctor) && (Object.getPrototypeOf(x) === Object(ctor.prototype));\n}\n\n/**\n * @en Get the value's class name.\n * @ja クラス名を取得\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function className(x: any): string {\n    if (x != null) {\n        const toStringTagName = x[Symbol.toStringTag];\n        if (isString(toStringTagName)) {\n            return toStringTagName;\n        } else if (isFunction(x) && x.prototype && null != x.name) {\n            return x.name;\n        } else {\n            const ctor = x.constructor;\n            if (isFunction(ctor) && ctor === (Object(ctor.prototype) as object).constructor) {\n                return ctor.name;\n            }\n        }\n    }\n    return (Object.prototype.toString.call(x) as string).slice(8, -1);\n}\n\n/**\n * @en Check input values are same value-type.\n * @ja 入力が同一型であるか判定\n *\n * @param lhs\n *  - `en` evaluated value\n *  - `ja` 評価する値\n * @param rhs\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function sameType(lhs: unknown, rhs: unknown): boolean {\n    return typeof lhs === typeof rhs;\n}\n\n/**\n * @en Check input values are same class.\n * @ja 入力が同一クラスであるか判定\n *\n * @param lhs\n *  - `en` evaluated value\n *  - `ja` 評価する値\n * @param rhs\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function sameClass(lhs: unknown, rhs: unknown): boolean {\n    if (null == lhs && null == rhs) {\n        return className(lhs) === className(rhs);\n    } else {\n        return (null != lhs) && (null != rhs) && (Object.getPrototypeOf(lhs) === Object.getPrototypeOf(rhs));\n    }\n}\n\n/**\n * @en Common Symble for framework.\n * @ja フレームワークが共通で使用する Symble\n */\nexport const $cdp = Symbol('@cdp');\n","/* eslint-disable\n    @typescript-eslint/no-unsafe-function-type,\n */\n\nimport {\n    UnknownFunction,\n    TypeKeys,\n    isArray,\n    exists,\n    className,\n} from './types';\n\n/**\n * @en Type verifier interface definition. <br>\n *     If invalid value received, the method throws `TypeError`.\n * @ja 型検証のインターフェイス定義 <br>\n *     違反した場合は `TypeError` を発生\n *\n *\n */\ninterface Verifier {\n    /**\n     * @en Verification for the input value is not {@link Nullish}.\n     * @ja {@link Nullish} でないことを検証\n     *\n     * @param notNullish.x\n     *  - `en` evaluated value\n     *  - `ja` 評価する値\n     * @param notNullish.message\n     *  - `en` custom error message\n     *  - `ja` カスタムエラーメッセージ\n     */\n    notNullish: (x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input is {@link TypeKeys}.\n     * @ja 指定した {@link TypeKeys} であるか検証\n     *\n     * @param typeOf.type\n     *  - `en` one of {@link TypeKeys}\n     *  - `ja` {@link TypeKeys} を指定\n     * @param typeOf.x\n     *  - `en` evaluated value\n     *  - `ja` 評価する値\n     * @param typeOf.message\n     *  - `en` custom error message\n     *  - `ja` カスタムエラーメッセージ\n     */\n    typeOf: (type: TypeKeys, x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input value is `Array`.\n     * @ja `Array` であるか検証\n     *\n     * @param array.x\n     *  - `en` evaluated value\n     *  - `ja` 評価する値\n     * @param array.message\n     *  - `en` custom error message\n     *  - `ja` カスタムエラーメッセージ\n     */\n    array: (x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input value is `Iterable`.\n     * @ja `Iterable` であるか検証\n     *\n     * @param iterable.x\n     *  - `en` evaluated value\n     *  - `ja` 評価する値\n     * @param iterable.message\n     *  - `en` custom error message\n     *  - `ja` カスタムエラーメッセージ\n     */\n    iterable: (x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input instance is equal comparative target constructor.\n     * @ja 指定コンストラクタのインスタンスであるか検証\n     *\n     * @param instanceOf.ctor\n     *  - `en` comparative target constructor\n     *  - `ja` 比較対象のコンストラクタ\n     * @param instanceOf.x\n     *  - `en` evaluated value\n     *  - `ja` 評価する値\n     * @param instanceOf.message\n     *  - `en` custom error message\n     *  - `ja` カスタムエラーメッセージ\n     */\n    instanceOf: (ctor: Function, x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input instance has `strictly` comparative target constructor.\n     * @ja 指定コンストラクタの厳密一致したインスタンスであるか検証\n     *\n     * @param ownInstanceOf.ctor\n     *  - `en` comparative target constructor\n     *  - `ja` 比較対象のコンストラクタ\n     * @param ownInstanceOf.x\n     *  - `en` evaluated value\n     *  - `ja` 評価する値\n     * @param ownInstanceOf.message\n     *  - `en` custom error message\n     *  - `ja` カスタムエラーメッセージ\n     */\n    ownInstanceOf: (ctor: Function, x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input instance has not `strictly` equal comparative target constructor.\n     * @ja 指定コンストラクタを持つインスタンスでないことを検証\n     *\n     * @param notOwnInstanceOf.ctor\n     *  - `en` comparative target constructor\n     *  - `ja` 比較対象のコンストラクタ\n     * @param notOwnInstanceOf.x\n     *  - `en` evaluated value\n     *  - `ja` 評価する値\n     * @param notOwnInstanceOf.message\n     *  - `en` custom error message\n     *  - `ja` カスタムエラーメッセージ\n     */\n    notOwnInstanceOf: (ctor: Function, x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input value has specified property.\n     * @ja 指定プロパティを持っているか検証\n     *\n     * @param hasProperty.prop\n     *  - `en` specified property\n     *  - `ja` 対象のプロパティ\n     * @param hasProperty.x\n     *  - `en` evaluated value\n     *  - `ja` 評価する値\n     * @param hasProperty.message\n     *  - `en` custom error message\n     *  - `ja` カスタムエラーメッセージ\n     */\n    hasProperty: (x: unknown, prop: PropertyKey, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input value has own specified property.\n     * @ja 指定プロパティを入力値自身持っているか検証\n     *\n     * @param hasOwnProperty.prop\n     *  - `en` specified property\n     *  - `ja` 対象のプロパティ\n     * @param hasOwnProperty.x\n     *  - `en` evaluated value\n     *  - `ja` 評価する値\n     * @param hasOwnProperty.message\n     *  - `en` custom error message\n     *  - `ja` カスタムエラーメッセージ\n     */\n    hasOwnProperty: (x: unknown, prop: PropertyKey, message?: string | null) => void | never;\n}\n\n/**\n * @en List of method for type verify.\n * @ja 型検証が提供するメソッド一覧\n */\nexport type VerifyMethod = keyof Verifier;\n\n/**\n * @en Concrete type verifier object.\n * @ja 型検証実装オブジェクト\n *\n * @internal\n */\nconst _verifier: Verifier = {\n    notNullish: (x: unknown, message?: string | null): void | never => {\n        if (null == x) {\n            exists(message) || (message = `${className(x)} is not a valid value.`);\n            throw new TypeError(message);\n        }\n    },\n\n    typeOf: (type: TypeKeys, x: unknown, message?: string | null): void | never => {\n        if (typeof x !== type) {\n            exists(message) || (message = `Type of ${className(x)} is not ${type}.`);\n            throw new TypeError(message);\n        }\n    },\n\n    array: (x: unknown, message?: string | null): void | never => {\n        if (!isArray(x)) {\n            exists(message) || (message = `${className(x)} is not an Array.`);\n            throw new TypeError(message);\n        }\n    },\n\n    iterable: (x: unknown, message?: string | null): void | never => {\n        if (!(Symbol.iterator in Object(x))) {\n            exists(message) || (message = `${className(x)} is not an iterable object.`);\n            throw new TypeError(message);\n        }\n    },\n\n    instanceOf: (ctor: Function, x: unknown, message?: string | null): void | never => {\n        if (!(x instanceof ctor)) {\n            exists(message) || (message = `${className(x)} is not an instance of ${ctor.name}.`);\n            throw new TypeError(message);\n        }\n    },\n\n    ownInstanceOf: (ctor: Function, x: unknown, message?: string | null): void | never => {\n        if (null == x || Object.getPrototypeOf(x) !== Object(ctor.prototype)) {\n            exists(message) || (message = `The object is not own instance of ${ctor.name}.`);\n            throw new TypeError(message);\n        }\n    },\n\n    notOwnInstanceOf: (ctor: Function, x: unknown, message?: string | null): void | never => {\n        if (null != x && Object.getPrototypeOf(x) === Object(ctor.prototype)) {\n            exists(message) || (message = `The object is own instance of ${ctor.name}.`);\n            throw new TypeError(message);\n        }\n    },\n\n    hasProperty: (x: unknown, prop: PropertyKey, message?: string | null): void | never => {\n        if (null == x || !(prop in (x as object))) {\n            exists(message) || (message = `The object does not have property ${String(prop)}.`);\n            throw new TypeError(message);\n        }\n    },\n\n    hasOwnProperty: (x: unknown, prop: PropertyKey, message?: string | null): void | never => {\n        if (null == x || !Object.prototype.hasOwnProperty.call(x, prop)) {\n            exists(message) || (message = `The object does not have own property ${String(prop)}.`);\n            throw new TypeError(message);\n        }\n    },\n};\n\n/**\n * @en Verify method.\n * @ja 検証メソッド\n *\n * @param method\n *  - `en` method name which using\n *  - `ja` 使用するメソッド名\n * @param args\n *  - `en` arguments which corresponds to the method name\n *  - `ja` メソッド名に対応する引数\n */\nexport function verify<TMethod extends VerifyMethod>(method: TMethod, ...args: Parameters<Verifier[TMethod]>): void | never {\n    (_verifier[method] as UnknownFunction)(...args);\n}\n\nexport { verify as default };\n","import {\n    UnknownObject,\n    TypedArray,\n    TypedArrayConstructor,\n    isFunction,\n    isArray,\n    isObject,\n    isIterable,\n    isTypedArray,\n    sameClass,\n} from './types';\n\n/** @internal helper for deepEqual() */\nfunction arrayEqual(lhs: unknown[], rhs: unknown[]): boolean {\n    const len = lhs.length;\n    if (len !== rhs.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (!deepEqual(lhs[i], rhs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @internal helper for deepEqual() */\nfunction bufferEqual(lhs: SharedArrayBuffer | ArrayBuffer, rhs: SharedArrayBuffer | ArrayBuffer): boolean {\n    const size = lhs.byteLength;\n    if (size !== rhs.byteLength) {\n        return false;\n    }\n    let pos = 0;\n    if (size - pos >= 8) {\n        const len = size >>> 3;\n        const f64L = new Float64Array(lhs, 0, len);\n        const f64R = new Float64Array(rhs, 0, len);\n        for (let i = 0; i < len; i++) {\n            if (!Object.is(f64L[i], f64R[i])) {\n                return false;\n            }\n        }\n        pos = len << 3;\n    }\n    if (pos === size) {\n        return true;\n    }\n    const L = new DataView(lhs);\n    const R = new DataView(rhs);\n    if (size - pos >= 4) {\n        if (!Object.is(L.getUint32(pos), R.getUint32(pos))) {\n            return false;\n        }\n        pos += 4;\n    }\n    if (size - pos >= 2) {\n        if (!Object.is(L.getUint16(pos), R.getUint16(pos))) {\n            return false;\n        }\n        pos += 2;\n    }\n    if (size > pos) {\n        if (!Object.is(L.getUint8(pos), R.getUint8(pos))) {\n            return false;\n        }\n        pos += 1;\n    }\n    return pos === size;\n}\n\n/**\n * @en Set by specifying key and value for the object. (prototype pollution countermeasure)\n * @ja オブジェクトに key, value を指定して設定 (プロトタイプ汚染対策)\n */\nexport function assignValue(target: UnknownObject, key: string | number | symbol, value: unknown): void {\n    if ('__proto__' !== key && 'constructor' !== key) {\n        target[key] = value;\n    }\n}\n\n/**\n * @en Performs a deep comparison between two values to determine if they are equivalent.\n * @ja 2値の詳細比較をし, 等しいかどうか判定\n */\nexport function deepEqual(lhs: unknown, rhs: unknown): boolean {\n    if (lhs === rhs) {\n        return true;\n    }\n    if (isFunction(lhs) && isFunction(rhs)) {\n        return lhs.length === rhs.length && lhs.name === rhs.name;\n    }\n    if (!isObject(lhs) || !isObject(rhs)) {\n        return false;\n    }\n    { // Primitive Wrapper Objects / Date\n        const valueL = lhs.valueOf();\n        const valueR = rhs.valueOf();\n        if (lhs !== valueL || rhs !== valueR) {\n            return valueL === valueR;\n        }\n    }\n    { // RegExp\n        const isRegExpL = lhs instanceof RegExp;\n        const isRegExpR = rhs instanceof RegExp;\n        if (isRegExpL || isRegExpR) {\n            return isRegExpL === isRegExpR && String(lhs) === String(rhs);\n        }\n    }\n    { // Array\n        const isArrayL = isArray(lhs);\n        const isArrayR = isArray(rhs);\n        if (isArrayL || isArrayR) {\n            return isArrayL === isArrayR && arrayEqual(lhs as unknown[], rhs as unknown[]);\n        }\n    }\n    { // ArrayBuffer\n        const isBufferL = lhs instanceof ArrayBuffer;\n        const isBufferR = rhs instanceof ArrayBuffer;\n        if (isBufferL || isBufferR) {\n            return isBufferL === isBufferR && bufferEqual(lhs as ArrayBuffer, rhs as ArrayBuffer);\n        }\n    }\n    { // ArrayBufferView\n        const isBufferViewL = ArrayBuffer.isView(lhs);\n        const isBufferViewR = ArrayBuffer.isView(rhs);\n        if (isBufferViewL || isBufferViewR) {\n            return isBufferViewL === isBufferViewR && sameClass(lhs, rhs)\n                && bufferEqual((lhs as ArrayBufferView).buffer, (rhs as ArrayBufferView).buffer);\n        }\n    }\n    { // other Iterable\n        const isIterableL = isIterable(lhs);\n        const isIterableR = isIterable(rhs);\n        if (isIterableL || isIterableR) {\n            return isIterableL === isIterableR && arrayEqual([...(lhs as unknown[])], [...(rhs as unknown[])]);\n        }\n    }\n    if (sameClass(lhs, rhs)) {\n        const keysL = new Set(Object.keys(lhs));\n        const keysR = new Set(Object.keys(rhs));\n        if (keysL.size !== keysR.size) {\n            return false;\n        }\n        for (const key of keysL) {\n            if (!keysR.has(key)) {\n                return false;\n            }\n        }\n        for (const key of keysL) {\n            if (!deepEqual((lhs as UnknownObject)[key], (rhs as UnknownObject)[key])) {\n                return false;\n            }\n        }\n    } else {\n        for (const key in lhs) {\n            if (!(key in rhs)) {\n                return false;\n            }\n        }\n        const keys = new Set<string>();\n        for (const key in rhs) {\n            if (!(key in lhs)) {\n                return false;\n            }\n            keys.add(key);\n        }\n        for (const key of keys) {\n            if (!deepEqual((lhs as UnknownObject)[key], (rhs as UnknownObject)[key])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal clone RegExp */\nfunction cloneRegExp(regexp: RegExp): RegExp {\n    const result = new RegExp(regexp.source, regexp.flags);\n    result.lastIndex = regexp.lastIndex;\n    return result;\n}\n\n/** @internal clone ArrayBuffer */\nfunction cloneArrayBuffer(arrayBuffer: ArrayBuffer): ArrayBuffer {\n    const result = new ArrayBuffer(arrayBuffer.byteLength);\n    new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n    return result;\n}\n\n/** @internal clone DataView */\nfunction cloneDataView(dataView: DataView): DataView {\n    const buffer = cloneArrayBuffer(dataView.buffer);\n    return new DataView(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/** @internal clone TypedArray */\nfunction cloneTypedArray<T extends TypedArray>(typedArray: T): T {\n    const buffer = cloneArrayBuffer(typedArray.buffer);\n    return new (typedArray.constructor as TypedArrayConstructor)(buffer, typedArray.byteOffset, typedArray.length) as T;\n}\n\n/** @internal check necessary to update */\nfunction needUpdate(oldValue: unknown, newValue: unknown, exceptUndefined: boolean): boolean {\n    if (oldValue !== newValue) {\n        return true;\n    } else {\n        return (exceptUndefined && undefined === oldValue);\n    }\n}\n\n/** @internal merge Array */\nfunction mergeArray(target: unknown[], source: unknown[]): unknown[] {\n    for (let i = 0, len = source.length; i < len; i++) {\n        const oldValue = target[i];\n        const newValue = merge(oldValue, source[i]);\n        !needUpdate(oldValue, newValue, false) || (target[i] = newValue);\n    }\n    return target;\n}\n\n/** @internal merge Set */\nfunction mergeSet(target: Set<unknown>, source: Set<unknown>): Set<unknown> {\n    for (const item of source) {\n        target.has(item) || target.add(merge(undefined, item));\n    }\n    return target;\n}\n\n/** @internal merge Map */\nfunction mergeMap(target: Map<unknown, unknown>, source: Map<unknown, unknown>): Map<unknown, unknown> {\n    for (const [k, v] of source) {\n        const oldValue = target.get(k);\n        const newValue = merge(oldValue, v);\n        !needUpdate(oldValue, newValue, false) || target.set(k, newValue);\n    }\n    return target;\n}\n\n/** @internal merge object property */\nfunction mergeObjectProperty(target: UnknownObject, source: UnknownObject, key: string | number | symbol): void {\n    if ('__proto__' !== key && 'constructor' !== key) {\n        const oldValue = target[key];\n        const newValue = merge(oldValue, source[key]);\n        !needUpdate(oldValue, newValue, true) || (target[key] = newValue);\n    }\n}\n\n/** @internal helper for deepMerge() */\nfunction merge(target: unknown, source: unknown): unknown {\n    if (undefined === source || target === source) {\n        return target;\n    }\n    if (!isObject(source)) {\n        return source;\n    }\n    // Primitive Wrapper Objects / Date\n    if (source.valueOf() !== source) {\n        return deepEqual(target, source) ? target : new (source.constructor as ObjectConstructor)(source.valueOf());\n    }\n    // RegExp\n    if (source instanceof RegExp) {\n        return deepEqual(target, source) ? target : cloneRegExp(source);\n    }\n    // ArrayBuffer\n    if (source instanceof ArrayBuffer) {\n        return deepEqual(target, source) ? target : cloneArrayBuffer(source);\n    }\n    // ArrayBufferView\n    if (ArrayBuffer.isView(source)) {\n        return deepEqual(target, source) ? target : isTypedArray(source) ? cloneTypedArray(source) : cloneDataView(source as DataView);\n    }\n    // Array\n    if (Array.isArray(source)) {\n        return mergeArray(isArray(target) ? target : [], source);\n    }\n    // Set\n    if (source instanceof Set) {\n        return mergeSet(target instanceof Set ? target : new Set(), source);\n    }\n    // Map\n    if (source instanceof Map) {\n        return mergeMap(target instanceof Map ? target : new Map(), source);\n    }\n\n    const obj = isObject(target) ? target : {};\n    if (sameClass(target, source)) {\n        for (const key of Object.keys(source)) {\n            mergeObjectProperty(obj as UnknownObject, source as UnknownObject, key);\n        }\n    } else {\n        for (const key in source) {\n            mergeObjectProperty(obj as UnknownObject, source as UnknownObject, key);\n        }\n    }\n    return obj;\n}\n\n/**\n * @en Recursively merges own and inherited enumerable string keyed properties of source objects into the destination object.\n * @ja オブジェクトの再帰的マージを実行\n */\nexport function deepMerge<T, S1, S2, S3, S4, S5, S6, S7, S8, S9>(\n    target: T,\n    ...sources: [S1, S2?, S3?, S4?, S5?, S6?, S7?, S8?, S9?, ...unknown[]]\n): T & S1 & S2 & S3 & S4 & S5 & S6 & S7 & S8 & S9;\nexport function deepMerge<X>(target: unknown, ...sources: unknown[]): X;\nexport function deepMerge(target: unknown, ...sources: unknown[]): unknown {\n    let result = target;\n    for (const source of sources) {\n        result = merge(result, source);\n    }\n    return result;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Create deep copy instance of source object.\n * @ja ディープコピーオブジェクトの生成\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/structuredClone\n */\nexport function deepCopy<T>(src: T): T {\n    return deepMerge(undefined, src);\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport type {\n    UnknownFunction,\n    UnknownObject,\n    Accessible,\n    Nullish,\n    Type,\n    Class,\n    Constructor,\n} from './types';\n\n/**\n * @en Mixin class's base interface.\n * @ja Mixin クラスの基底インターフェイス定義\n */\nexport declare class MixinClass {\n    /**\n     * @en call mixin source class's `super()`. <br>\n     *     This method should be called from constructor.\n     * @ja Mixin クラスの基底インターフェイス定義 <br>\n     *     コンストラクタから呼ぶことを想定\n     *\n     * @param srcClass\n     *  - `en` construction target class name. ex) from S1 available\n     *  - `ja` コンストラクトするクラス名を指定 ex) S1 から指定可能\n     * @param args\n     *  - `en` construction parameters\n     *  - `ja` コンストラクトに使用する引数\n     */\n    protected super<T extends Class>(srcClass: T, ...args: ConstructorParameters<T>): this;\n\n    /**\n     * @en Check the input class is mixined (excluding own class).\n     * @ja 指定クラスが Mixin されているか確認 (自身のクラスは含まれない)\n     *\n     * @param mixedClass\n     *  - `en` set target class constructor\n     *  - `ja` 対象クラスのコンストラクタを指定\n     */\n    public isMixedWith<T extends object>(mixedClass: Constructor<T>): boolean;\n}\n\n/**\n * @en Mixed sub class constructor definitions.\n * @ja 合成したサブクラスのコンストラクタ定義\n */\nexport interface MixinConstructor<B extends Class, U extends object> extends Type<U> {\n    /**\n     * @en constructor\n     * @ja コンストラクタ\n     *\n     * @param args\n     *  - `en` base class arguments\n     *  - `ja` 基底クラスに指定した引数\n     * @returns\n     *  - `en` union type of classes when calling {@link mixins}()\n     *  - `ja` {@link mixins}() に渡したクラスの集合\n     */\n    new(...args: ConstructorParameters<B>): U;\n}\n\n/**\n * @en Definition of {@link setMixClassAttribute} function's arguments.\n * @ja {@link setMixClassAttribute} の取りうる引数定義\n */\nexport interface MixClassAttribute {\n    /**\n     * @en Suppress providing constructor-trap for the mixin source class. In this case, `isMixedWith`, `instanceof` also becomes invalid. (for improving performance)\n     * @ja Mixin Source クラスに対して, コンストラクタトラップを抑止. これを指定した場合, `isMixedWith`, `instanceof` も無効になる. (パフォーマンス改善)\n     */\n    protoExtendsOnly: void;\n\n    /**\n     * @en Setup [Symbol.hasInstance] property. <br>\n     *     The class designated as a source of {@link mixins}() has [Symbol.hasInstance] property implicitly. <br>\n     *     It's used to avoid becoming the behavior `instanceof` doesn't intend when the class is extended from the mixined class the other place.\n     * @ja [Symbol.hasInstance] プロパティ設定<br>\n     *     {@link mixins}() のソースに指定されたクラスは [Symbol.hasInstance] を暗黙的に備えるため<br>\n     *     そのクラスが他で継承されている場合 `instanceof` が意図しない振る舞いとなるのを避けるために使用する.\n     */\n    instanceOf: ((inst: object) => boolean) | Nullish;\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal */ const _objPrototype     = Object.prototype;\n/** @internal */ const _instanceOf       = Function.prototype[Symbol.hasInstance];\n/** @internal */ const _override         = Symbol('override');\n/** @internal */ const _isInherited      = Symbol('is-inherited');\n/** @internal */ const _constructors     = Symbol('constructors');\n/** @internal */ const _classBase        = Symbol('class-base');\n/** @internal */ const _classSources     = Symbol('class-sources');\n/** @internal */ const _protoExtendsOnly = Symbol('proto-extends-only');\n\n/** @internal copy properties core */\nfunction reflectProperties(target: UnknownObject, source: object, key: string | symbol): void {\n    try {\n        if (null == target[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key) as PropertyDecorator);\n        }\n    } catch {\n        // noop\n    }\n}\n\n/** @internal object properties copy method */\nfunction copyProperties(target: object, source: object): void {\n    source && Object.getOwnPropertyNames(source)\n        .filter(key => !/(prototype|name|constructor)/.test(key))\n        .forEach(key => {\n            reflectProperties(target as UnknownObject, source, key);\n        });\n    source && Object.getOwnPropertySymbols(source)\n        .forEach(key => {\n            reflectProperties(target as UnknownObject, source, key);\n        });\n}\n\n/** @internal helper for setMixClassAttribute(target, 'instanceOf') */\nfunction setInstanceOf<T extends object>(target: Constructor<T>, method: ((inst: object) => boolean) | Nullish): void {\n    const behaviour = method ?? (null === method ? undefined : ((i: object) => Object.prototype.isPrototypeOf.call(target.prototype, i)));\n    const applied = behaviour && Object.getOwnPropertyDescriptor(target, _override);\n    if (!applied) {\n        Object.defineProperties(target, {\n            [Symbol.hasInstance]: {\n                value: behaviour,\n                writable: true,\n                enumerable: false,\n            },\n            [_override]: {\n                value: behaviour ? true : undefined,\n                writable: true,\n            },\n        });\n    }\n}\n\n/**\n * @en Set the Mixin class attribute.\n * @ja Mixin クラスに対して属性を設定\n *\n * @example <br>\n *\n * ```ts\n * // 'protoExtendOnly'\n * class Base { constructor(a, b) {} };\n * class MixA { };\n * setMixClassAttribute(MixA, 'protoExtendsOnly');  // for improving construction performance\n * class MixB { constructor(c, d) {} };\n *\n * class MixinClass extends mixins(Base, MixA, MixB) {\n *     constructor(a, b, c, d){\n *         // calling `Base` constructor\n *         super(a, b);\n *\n *         // calling Mixin class's constructor\n *         this.super(MixA);        // no affect\n *         this.super(MixB, c, d);\n *     }\n * }\n *\n * const mixed = new MixinClass();\n * console.log(mixed instanceof MixA);    // false\n * console.log(mixed.isMixedWith(MixA));  // false\n *\n * // 'instanceOf'\n * class Base {};\n * class Source {};\n * class MixinClass extends mixins(Base, Source) {};\n *\n * class Other extends Source {};\n *\n * const other = new Other();\n * const mixed = new MixinClass();\n * console.log(other instanceof Source);        // true\n * console.log(other instanceof Other);         // true\n * console.log(mixed instanceof MixinClass);    // true\n * console.log(mixed instanceof Base);          // true\n * console.log(mixed instanceof Source);        // true\n * console.log(mixed instanceof Other);         // true ???\n *\n * setMixClassAttribute(Other, 'instanceOf'); // or setMixClassAttribute(Other, 'instanceOf', null);\n * console.log(other instanceof Source);        // true\n * console.log(other instanceof Other);         // true\n * console.log(mixed instanceof Other);         // false !\n *\n * // [Best Practice] If you declare the derived-class from mixin, you should call the function for avoiding `instanceof` limitation.\n * class DerivedClass extends MixinClass {}\n * setMixClassAttribute(DerivedClass, 'instanceOf');\n * ```\n *\n * @param target\n *  - `en` set target constructor\n *  - `ja` 設定対象のコンストラクタ\n * @param attr\n *  - `en`:\n *    - `protoExtendsOnly`: Suppress providing constructor-trap for the mixin source class. (for improving performance)\n *    - `instanceOf`      : function by using [Symbol.hasInstance] <br>\n *                          Default behaviour is `{ return target.prototype.isPrototypeOf(instance) }`\n *                          If set `null`, delete [Symbol.hasInstance] property.\n *  - `ja`:\n *    - `protoExtendsOnly`: Mixin Source クラスに対して, コンストラクタトラップを抑止 (パフォーマンス改善)\n *    - `instanceOf`      : [Symbol.hasInstance] が使用する関数を指定 <br>\n *                          既定では `{ return target.prototype.isPrototypeOf(instance) }` が使用される\n *                         `null` 指定をすると [Symbol.hasInstance] プロパティを削除する\n */\nexport function setMixClassAttribute<T extends object, U extends keyof MixClassAttribute>(\n    target: Constructor<T>,\n    attr: U,\n    method?: MixClassAttribute[U]\n): void {\n    switch (attr) {\n        case 'protoExtendsOnly':\n            (target as Accessible<Constructor<T>>)[_protoExtendsOnly] = true;\n            break;\n        case 'instanceOf':\n            setInstanceOf(target, method);\n            break;\n        default:\n            break;\n    }\n}\n\n/**\n * @en Mixin function for multiple inheritance. <br>\n *     Resolving type support for maximum 10 classes.\n * @ja 多重継承のための Mixin <br>\n *     最大 10 クラスの型解決をサポート\n *\n * @example <br>\n *\n * ```ts\n * class Base { constructor(a, b) {} };\n * class MixA { constructor(a, b) {} };\n * class MixB { constructor(c, d) {} };\n *\n * class MixinClass extends mixins(Base, MixA, MixB) {\n *     constructor(a, b, c, d){\n *         // calling `Base` constructor\n *         super(a, b);\n *\n *         // calling Mixin class's constructor\n *         this.super(MixA, a, b);\n *         this.super(MixB, c, d);\n *     }\n * }\n * ```\n *\n * @param base\n *  - `en` primary base class. super(args) is this class's one.\n *  - `ja` 基底クラスコンストラクタ. 同名プロパティ, メソッドは最優先される. super(args) はこのクラスのものが指定可能.\n * @param sources\n *  - `en` multiple extends class\n *  - `ja` 拡張クラスコンストラクタ\n * @returns\n *  - `en` mixined class constructor\n *  - `ja` 合成されたクラスコンストラクタ\n */\nexport function mixins<\n    B extends Class,\n    S1 extends object,\n    S2 extends object,\n    S3 extends object,\n    S4 extends object,\n    S5 extends object,\n    S6 extends object,\n    S7 extends object,\n    S8 extends object,\n    S9 extends object>(\n    base: B,\n    ...sources: [\n        Constructor<S1>,\n        Constructor<S2>?,\n        Constructor<S3>?,\n        Constructor<S4>?,\n        Constructor<S5>?,\n        Constructor<S6>?,\n        Constructor<S7>?,\n        Constructor<S8>?,\n        Constructor<S9>?,\n        ...any[]\n    ]): MixinConstructor<B, MixinClass & InstanceType<B> & S1 & S2 & S3 & S4 & S5 & S6 & S7 & S8 & S9> {\n\n    let _hasSourceConstructor = false;\n\n    class _MixinBase extends (base as unknown as Constructor<MixinClass>) {\n\n        private readonly [_constructors]: Map<Constructor<object>, UnknownFunction | null>;\n        private readonly [_classBase]: Constructor<object>;\n\n        constructor(...args: unknown[]) {\n            super(...args);\n\n            const constructors = new Map<Constructor<object>, UnknownFunction>();\n            this[_constructors] = constructors;\n            this[_classBase] = base;\n\n            if (_hasSourceConstructor) {\n                for (const srcClass of sources) {\n                    if (!srcClass[_protoExtendsOnly]) {\n                        const handler = {\n                            apply: (target: unknown, thisobj: unknown, arglist: unknown[]) => {\n                                const obj = new srcClass(...arglist);\n                                copyProperties(this, obj);\n                            }\n                        };\n                        // proxy for 'construct' and cache constructor\n                        constructors.set(srcClass, new Proxy(srcClass, handler as ProxyHandler<object>));\n                    }\n                }\n            }\n        }\n\n        protected super<T extends Class>(srcClass: T, ...args: ConstructorParameters<T>): this {\n            const map = this[_constructors];\n            const ctor = map.get(srcClass);\n            if (ctor) {\n                ctor.call(this, ...args);\n                map.set(srcClass, null);    // prevent calling twice\n            }\n            return this;\n        }\n\n        public isMixedWith<T extends object>(srcClass: Constructor<T>): boolean {\n            if (this.constructor === srcClass) {\n                return false;\n            } else if (this[_classBase] === srcClass) {\n                return true;\n            } else {\n                return this[_classSources].reduce((p, c) => p || (srcClass === c), false);\n            }\n        }\n\n        public static [Symbol.hasInstance](instance: unknown): boolean {\n            return Object.prototype.isPrototypeOf.call(_MixinBase.prototype, instance);\n        }\n\n        public [_isInherited]<T extends object>(srcClass: Constructor<T>): boolean {\n            const ctors = this[_constructors];\n            if (ctors.has(srcClass)) {\n                return true;\n            }\n            for (const ctor of ctors.keys()) {\n                if (Object.prototype.isPrototypeOf.call(srcClass, ctor)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private get [_classSources](): Constructor<object>[] {\n            return [...this[_constructors].keys()];\n        }\n    }\n\n    for (const srcClass of sources) {\n        // provide custom instanceof\n        const desc = Object.getOwnPropertyDescriptor(srcClass, Symbol.hasInstance);\n        if (!desc || desc.writable) {\n            const orgInstanceOf = desc ? srcClass[Symbol.hasInstance] : _instanceOf;\n            setInstanceOf(srcClass, (inst: UnknownObject) => {\n                return orgInstanceOf.call(srcClass, inst) || ((inst?.[_isInherited]) ? (inst[_isInherited] as UnknownFunction)(srcClass) : false);\n            });\n        }\n        // provide prototype\n        copyProperties(_MixinBase.prototype, srcClass.prototype);\n        let parent = Object.getPrototypeOf(srcClass.prototype);\n        while (_objPrototype !== parent) {\n            copyProperties(_MixinBase.prototype, parent);\n            parent = Object.getPrototypeOf(parent);\n        }\n        // check constructor\n        if (!_hasSourceConstructor) {\n            _hasSourceConstructor = !srcClass[_protoExtendsOnly];\n        }\n    }\n\n    return _MixinBase as any;\n}\n","import { assignValue, deepEqual } from './deep-circuit';\nimport {\n    UnknownObject,\n    Accessible,\n    Nullish,\n    Writable,\n    isArray,\n    isObject,\n    isFunction,\n} from './types';\nimport { verify } from './verify';\n\n/**\n * @en Check whether input source has a property.\n * @ja 入力元がプロパティを持っているか判定\n *\n * @param src\n */\nexport function has(src: unknown, propName: string): boolean {\n    return null != src && isObject(src) && (propName in src);\n}\n\n/**\n * @en Get shallow copy of `target` which has only `pickKeys`.\n * @ja `pickKeys` で指定されたプロパティのみを持つ `target` の Shallow Copy を取得\n *\n * @param target\n *  - `en` copy source object\n *  - `ja` コピー元オブジェクト\n * @param pickKeys\n *  - `en` copy target keys\n *  - `ja` コピー対象のキー一覧\n */\nexport function pick<T extends object, K extends keyof T>(target: T, ...pickKeys: K[]): Writable<Pick<T, K>> {\n    verify('typeOf', 'object', target);\n    return pickKeys.reduce((obj, key) => {\n        key in target && assignValue(obj, key, target[key]);\n        return obj;\n    }, {} as Writable<Pick<T, K>>);\n}\n\n/**\n * @en Get shallow copy of `target` without `omitKeys`.\n * @ja `omitKeys` で指定されたプロパティ以外のキーを持つ `target` の Shallow Copy を取得\n *\n * @param target\n *  - `en` copy source object\n *  - `ja` コピー元オブジェクト\n * @param omitKeys\n *  - `en` omit target keys\n *  - `ja` 削除対象のキー一覧\n */\nexport function omit<T extends object, K extends keyof T>(target: T, ...omitKeys: K[]): Writable<Omit<T, K>> {\n    verify('typeOf', 'object', target);\n    const obj = {} as Writable<Omit<T, K>>;\n    for (const key of Object.keys(target)) {\n        !omitKeys.includes(key as K) && assignValue(obj, key, (target as UnknownObject)[key]);\n    }\n    return obj;\n}\n\n/**\n * @en Invert the keys and values of an object. The values must be serializable.\n * @ja オブジェクトのキーと値を逆転する. すべての値がユニークであることが前提\n *\n * @param target\n *  - `en` target object\n *  - `ja` 対象オブジェクト\n */\nexport function invert<T extends object = UnknownObject>(target: object): T {\n    const result = {};\n    for (const key of Object.keys(target)) {\n        assignValue(result, (target as UnknownObject)[key] as (string | number | symbol), key);\n    }\n    return result as T;\n}\n\n/**\n * @en Get shallow copy of difference between `base` and `src`.\n * @ja `base` と `src` の差分プロパティをもつオブジェクトの Shallow Copy を取得\n *\n * @param base\n *  - `en` base object\n *  - `ja` 基準となるオブジェクト\n * @param src\n *  - `en` source object\n *  - `ja` コピー元オブジェクト\n */\nexport function diff<T extends object>(base: T, src: Partial<T>): Partial<T> {\n    verify('typeOf', 'object', base);\n    verify('typeOf', 'object', src);\n\n    const retval: Partial<T> = {};\n\n    for (const key of Object.keys(src)) {\n        if (!deepEqual((base as UnknownObject)[key], (src as UnknownObject)[key])) {\n            assignValue(retval, key, (src as UnknownObject)[key]);\n        }\n    }\n\n    return retval;\n}\n\n/**\n * @en Get shallow copy of `base` without `dropValue`.\n * @ja `dropValue` で指定されたプロパティ値以外のキーを持つ `target` の Shallow Copy を取得\n *\n * @param base\n *  - `en` base object\n *  - `ja` 基準となるオブジェクト\n * @param dropValues\n *  - `en` target value. default: `undefined`.\n *  - `ja` 対象の値. 既定値: `undefined`\n */\nexport function drop<T extends object>(base: T, ...dropValues: unknown[]): Partial<T> {\n    verify('typeOf', 'object', base);\n\n    const values = [...dropValues];\n    if (!values.length) {\n        values.push(undefined);\n    }\n\n    const retval = { ...base } as Accessible<Partial<T>>;\n\n    for (const key of Object.keys(base)) {\n        for (const val of values) {\n            if (deepEqual(val, retval[key])) {\n                delete retval[key];\n                break;\n            }\n        }\n    }\n\n    return retval;\n}\n\n/**\n * @en If the value of the named property is a function then invoke it; otherwise, return it.\n * @ja object の property がメソッドならその実行結果を, プロパティならその値を返却\n *\n * @param target\n * - `en` Object to maybe invoke function `property` on.\n * - `ja` 評価するオブジェクト\n * @param property\n * - `en` The function by name to invoke on `object`.\n * - `ja` 評価するプロパティ名\n * @param fallback\n * - `en` The value to be returned in case `property` doesn't exist or is undefined.\n * - `ja` 存在しなかった場合の fallback 値\n */\nexport function result<T = any>(target: object | Nullish, property: string | string[], fallback?: T): T { // eslint-disable-line @typescript-eslint/no-explicit-any\n    const props = isArray(property) ? property : [property];\n    if (!props.length) {\n        return isFunction(fallback) ? fallback.call(target) : fallback;\n    }\n\n    const resolve = (o: unknown, p: unknown): unknown => {\n        return isFunction(p) ? p.call(o) : p;\n    };\n\n    let obj = target as UnknownObject;\n    for (const name of props) {\n        const prop = null == obj ? undefined : obj[name];\n        if (undefined === prop) {\n            return resolve(obj, fallback) as T;\n        }\n        obj = resolve(obj, prop) as UnknownObject;\n    }\n    return obj as unknown as T;\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\n/** @internal */\nfunction callable(): unknown {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return accessible;\n}\n\n/** @internal */\nconst accessible: unknown = new Proxy(callable, {\n    get: (target: any, name) => {\n        const prop = target[name];\n        if (null != prop) {\n            return prop;\n        } else {\n            return accessible;\n        }\n    },\n});\n\n/** @internal */\nfunction create(): unknown {\n    const stub = new Proxy({}, {\n        get: (target: any, name) => {\n            const prop = target[name];\n            if (null != prop) {\n                return prop;\n            } else {\n                return accessible;\n            }\n        },\n    });\n\n    Object.defineProperty(stub, 'stub', {\n        value: true,\n        writable: false,\n    });\n\n    return stub;\n}\n\n/**\n * @en Get safe accessible object.\n * @ja 安全にアクセス可能なオブジェクトの取得\n *\n * @example <br>\n *\n * ```ts\n * const safeWindow = safe(globalThis.window);\n * console.log(null != safeWindow.document);    // true\n * const div = safeWindow.document.createElement('div');\n * console.log(null != div);    // true\n * ```\n *\n * @param target\n *  - `en` A reference of an object with a possibility which exists.\n *  - `ja` 存在しうるオブジェクトの参照\n * @returns\n *  - `en` Reality or stub instance.\n *  - `ja` 実体またはスタブインスタンス\n */\nexport function safe<T>(target: T): T {\n    return target || create() as T;\n}\n","import { UnknownFunction } from './types';\nimport { getGlobal } from './config';\nimport { safe } from './safe';\n\n/**\n * @en Type of handle for timer functions.\n * @ja タイマー関数に使用するハンドル型\n */\nexport interface TimerHandle { } // eslint-disable-line @typescript-eslint/no-empty-object-type\n\n/**\n * @en Type of timer start functions.\n * @ja タイマー開始関数の型\n */\nexport type TimerStartFunction = (handler: UnknownFunction, timeout?: number, ...args: unknown[]) => TimerHandle;\n\n/**\n * @en Type of timer stop functions.\n * @ja タイマー停止関数の型\n */\nexport type TimerStopFunction = (handle: TimerHandle) => void;\n\n/** @internal */\ninterface TimerContext {\n    setTimeout: TimerStartFunction;\n    clearTimeout: TimerStopFunction;\n    setInterval: TimerStartFunction;\n    clearInterval: TimerStopFunction;\n}\n\n/** @internal */ const _root = getGlobal() as unknown as TimerContext;\nconst setTimeout: TimerStartFunction   = safe(_root.setTimeout).bind(_root);\nconst clearTimeout: TimerStopFunction  = safe(_root.clearTimeout).bind(_root);\nconst setInterval: TimerStartFunction  = safe(_root.setInterval).bind(_root);\nconst clearInterval: TimerStopFunction = safe(_root.clearInterval).bind(_root);\n\nexport {\n    setTimeout,\n    clearTimeout,\n    setInterval,\n    clearInterval,\n};\n","import {\n    UnknownFunction,\n    Primitive,\n    TypedData,\n    isString,\n    isBoolean,\n    isObject,\n} from './types';\nimport { invert } from './object';\nimport {\n    TimerHandle,\n    setTimeout,\n    clearTimeout,\n} from './timer';\n\n/**\n * @en Ensure asynchronous execution.\n * @ja 非同期実行を保証\n *\n * @example <br>\n *\n * ```ts\n * void post(() => exec(arg));\n * ```\n *\n * @param executor\n *  - `en` implement as function scope.\n *  - `ja` 関数スコープとして実装\n*/\nexport function post<T>(executor: () => T): Promise<T> {\n    return Promise.resolve().then(executor);\n}\n\n/**\n * @en Generic No-Operation.\n * @ja 汎用 No-Operation\n */\nexport function noop(...args: unknown[]): any { // eslint-disable-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any\n    // noop\n}\n\n/**\n * @en Wait for the designation elapse.\n * @ja 指定時間処理を待機\n *\n * @param elapse\n *  - `en` wait elapse [msec].\n *  - `ja` 待機時間 [msec]\n */\nexport function sleep(elapse: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, elapse));\n}\n\n/**\n * @en Option interface for {@link debounce}().\n * @ja {@link debounce}() に指定するオプションインターフェイス\n */\nexport interface DebounceOptions {\n    /**\n     * @en the maximum time `func` is allowed to be delayed before it's invoked.\n     * @ja コールバックの呼び出しを待つ最大時間\n     */\n    maxWait?: number;\n    /**\n     * @en Specify `true` if you want to call the callback leading edge of the waiting time. (default: false)\n     * @ja 待ち時間に対してコールバックを先呼び実行する場合は `true` を指定. (default: false)\n     */\n    leading?: boolean;\n    /**\n     * @en Specify `true` if you want to call the callback trailing edge of the waiting time. (default: true)\n     * @ja 待ち時間に対してコールバックを後呼び実行する場合は `true` を指定. (default: true)\n     */\n    trailing?: boolean;\n}\n\nexport type DebouncedFunction<T extends UnknownFunction> = T & { cancel(): void; flush(): ReturnType<T>; pending(): boolean; };\n\n/**\n * @en Returns a function, that, as long as it continues to be invoked, will not be triggered.\n * @ja 呼び出されてから wait [msec] 経過するまで実行しない関数を返却\n *\n * @param executor\n *  - `en` seed function.\n *  - `ja` 対象の関数\n * @param wait\n *  - `en` wait elapse [msec].\n *  - `ja` 待機時間 [msec]\n * @param options\n *  - `en` specify {@link DebounceOptions} object or `true` to fire the callback immediately.\n *  - `ja` {@link DebounceOptions} object もしくは即時にコールバックを発火するときは `true` を指定.\n */\nexport function debounce<T extends UnknownFunction>(executor: T, wait: number, options?: DebounceOptions | boolean): DebouncedFunction<T> {\n    type Result = ReturnType<T> | undefined;\n\n    let lastArgs: unknown;\n    let lastThis: unknown;\n    let result: Result;\n    let lastCallTime: number | undefined;\n    let timerId: TimerHandle | undefined;\n    let lastInvokeTime = 0;\n\n    const waitValue = Number(wait) || 0;\n\n    const opts = Object.assign({ leading: false, trailing: true }, (isBoolean(options) ? { leading: options, trailing: !options } : options));\n    const { leading, trailing } = opts;\n    const maxWait = null != opts.maxWait ? Math.max(Number(opts.maxWait) || 0, waitValue) : null;\n\n    const invokeFunc = (time: number): Result => {\n        const args = lastArgs;\n        const thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = executor.apply(thisArg, args);\n        return result;\n    };\n\n    const remainingWait = (time: number): number => {\n        const timeSinceLastCall = time - lastCallTime!;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        const timeWaiting = waitValue - timeSinceLastCall;\n        return null != maxWait ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n    };\n\n    const shouldInvoke = (time: number): boolean => {\n        if (undefined === lastCallTime) {\n            return true;\n        }\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        return timeSinceLastCall >= waitValue || timeSinceLastCall < 0 || (maxWait !== null && timeSinceLastInvoke >= maxWait);\n    };\n\n    const trailingEdge = (time: number): Result => {\n        timerId = undefined;\n        if (trailing && lastArgs) {\n            return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n    };\n\n    const timerExpired = (): Result | void => {\n        const time = Date.now();\n        if (shouldInvoke(time)) {\n            return trailingEdge(time);\n        }\n        timerId = setTimeout(timerExpired, remainingWait(time));\n    };\n\n    const leadingEdge = (time: number): Result => {\n        lastInvokeTime = time;\n        timerId = setTimeout(timerExpired, waitValue);\n        return leading ? invokeFunc(time) : result;\n    };\n\n    const cancel = (): void => {\n        if (undefined !== timerId) {\n            clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n    };\n\n    const flush = (): Result => {\n        return undefined === timerId ? result : trailingEdge(Date.now());\n    };\n\n    const pending = (): boolean => {\n        return null != timerId;\n    };\n\n    function debounced(this: unknown, ...args: unknown[]): Result {\n        const time = Date.now();\n        const isInvoking = shouldInvoke(time);\n\n        lastArgs = args;\n        lastThis = this;    // eslint-disable-line no-invalid-this, @typescript-eslint/no-this-alias\n        lastCallTime = time;\n\n        if (isInvoking) {\n            if (null == timerId) {\n                return leadingEdge(lastCallTime);\n            }\n            if (maxWait) {\n                timerId = setTimeout(timerExpired, waitValue);\n                return invokeFunc(lastCallTime);\n            }\n        }\n        if (null == timerId) {\n            timerId = setTimeout(timerExpired, waitValue);\n        }\n        return result;\n    }\n\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    debounced.pending = pending;\n\n    return debounced as DebouncedFunction<T>;\n}\n\n/**\n * @en Option interface for {@link throttle}().\n * @ja {@link throttle}() に指定するオプションインターフェイス\n */\nexport interface ThrottleOptions {\n    /**\n     * @en Specify `true` if you want to call the callback leading edge of the waiting time. (default: true)\n     * @ja 待ち時間に対してコールバックを先呼び実行する場合は `true` を指定. (default: true)\n     */\n    leading?: boolean;\n    /**\n     * @en Specify `true` if you want to call the callback trailing edge of the waiting time. (default: true)\n     * @ja 待ち時間に対してコールバックを後呼び実行する場合は `true` を指定. (default: true)\n     */\n    trailing?: boolean;\n}\n\n/**\n * @en Returns a function, that, when invoked, will only be triggered at most once during a given time.\n * @ja 関数の実行を wait [msec] に1回に制限\n *\n * @example <br>\n *\n * ```ts\n * const throttled = throttle(upatePosition, 100);\n * $(window).scroll(throttled);\n * ```\n *\n * @param executor\n *  - `en` seed function.\n *  - `ja` 対象の関数\n * @param elapse\n *  - `en` wait elapse [msec].\n *  - `ja` 待機時間 [msec]\n * @param options\n */\nexport function throttle<T extends UnknownFunction>(executor: T, elapse: number, options?: ThrottleOptions): DebouncedFunction<T> {\n    const { leading, trailing } = Object.assign({ leading: true, trailing: true }, options);\n    return debounce(executor, elapse, {\n        leading,\n        trailing,\n        maxWait: elapse,\n    });\n}\n\n/**\n * @en Returns a function that will be executed at most one time, no matter how often you call it.\n * @ja 1度しか実行されない関数を返却. 2回目以降は最初のコールのキャッシュを返却\n *\n * @param executor\n *  - `en` seed function.\n *  - `ja` 対象の関数\n */\nexport function once<T extends UnknownFunction>(executor: T): T {\n    /* eslint-disable no-invalid-this */\n    let memo: unknown;\n    return function (this: unknown, ...args: unknown[]): unknown {\n        if (executor) {\n            memo = executor.call(this, ...args);\n            executor = null!;\n        }\n        return memo;\n    } as T;\n    /* eslint-enable no-invalid-this */\n}\n\n/**\n * @en Return a deferred executable function object.\n * @ja 遅延実行可能な関数オブジェクトを返却\n *\n * @example <br>\n *\n * ```ts\n * const schedule = scheduler();\n * schedule(() => task1());\n * schedule(() => task2());\n * ```\n */\nexport function scheduler(): (exec: () => void) => void {\n    let tasks: (() => void)[] = [];\n    let id: Promise<void> | null;\n\n    function runTasks(): void {\n        id = null;\n        const work = tasks;\n        tasks = [];\n        for (const task of work) {\n            task();\n        }\n    }\n\n    return function(task: () => unknown): void {\n        tasks.push(task);\n        if (null == id) {\n            id = post(runTasks);\n        }\n    };\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Create escape function from map.\n * @ja 文字置換関数を作成\n *\n * @param map\n *  - `en` key: target char, value: replace char\n *  - `ja` key: 置換対象, value: 置換文字\n * @returns\n *  - `en` espace function\n *  - `ja` エスケープ関数\n */\nexport function createEscaper(map: Record<string, string>): (src: Primitive) => string {\n    const escaper = (match: string): string => {\n        return map[match];\n    };\n\n    const source = `(?:${Object.keys(map).join('|')})`;\n    const regexTest = RegExp(source);\n    const regexReplace = RegExp(source, 'g');\n\n    return (src: Primitive): string => {\n        src = (null == src || 'symbol' === typeof src) ? '' : String(src);\n        return regexTest.test(src) ? src.replace(regexReplace, escaper) : src;\n    };\n}\n\n/** @internal */\nconst mapHtmlEscape = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '`': '&#x60;'\n};\n\n/**\n * @en Escape HTML string.\n * @ja HTML で使用する文字を制御文字に置換\n *\n * @brief <br>\n *\n * ```ts\n * const mapHtmlEscape = {\n *     '<' : '&lt;',\n *     '>' : '&gt;',\n *     '&' : '&amp;',\n *     '″': '&quot;',\n *     `'` : '&#39;',\n *     '`' : '&#x60;'\n * };\n * ```\n */\nexport const escapeHTML = createEscaper(mapHtmlEscape);\n\n/**\n * @en Unescape HTML string.\n * @ja HTML で使用する制御文字を復元\n */\nexport const unescapeHTML = createEscaper(invert(mapHtmlEscape));\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert to the style compulsion value from input string.\n * @ja 入力文字列を型強制した値に変換\n *\n * @param data\n *  - `en` input string\n *  - `ja` 変換対象の文字列\n */\nexport function toTypedData(data: string | undefined): TypedData | undefined {\n    if ('true' === data) {\n        // boolean: true\n        return true;\n    } else if ('false' === data) {\n        // boolean: false\n        return false;\n    } else if ('null' === data) {\n        // null\n        return null;\n    } else if (data === String(Number(data))) {\n        // number: 数値変換 → 文字列変換で元に戻るとき\n        return Number(data);\n    } else if (data && /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/.test(data)) {\n        // object\n        return JSON.parse(data);\n    } else {\n        // string / undefined\n        return data;\n    }\n}\n\n/**\n * @en Convert to string from {@link TypedData}.\n * @ja {@link TypedData} を文字列に変換\n *\n * @param data\n *  - `en` input string\n *  - `ja` 変換対象の文字列\n */\nexport function fromTypedData(data: TypedData | undefined): string | undefined {\n    if (undefined === data || isString(data)) {\n        return data;\n    } else if (isObject(data)) {\n        return JSON.stringify(data);\n    } else {\n        return String(data);\n    }\n}\n\n/**\n * @en Convert to `Web API` stocked type. <br>\n *     Ensure not to return `undefined` value.\n * @ja `Web API` 格納形式に変換 <br>\n *     `undefined` を返却しないことを保証\n */\nexport function dropUndefined<T>(value: T | null | undefined, nullishSerialize = false): T | 'null' | 'undefined' | null {\n    return value ?? (nullishSerialize ? String(value) : null) as T | 'null' | 'undefined' | null;\n}\n\n/**\n * @en Deserialize from `Web API` stocked type. <br>\n *     Convert from 'null' or 'undefined' string to original type.\n * @ja 'null' or 'undefined' をもとの型に戻す\n */\nexport function restoreNullish<T>(value: T | 'null' | 'undefined'): T | null | undefined {\n    if ('null' === value) {\n        return null;\n    } else if ('undefined' === value) {\n        return undefined;\n    } else {\n        return value;\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal */ let _localId = 0;\n\n/**\n * @en Get local unique id. <br>\n *     \"local unique\" means guarantees unique during in script life cycle only.\n * @ja ローカルユニーク ID の取得 <br>\n *     スクリプトライフサイクル中の同一性を保証する.\n *\n * @param prefix\n *  - `en` ID prefix\n *  - `ja` ID に付与する Prefix\n * @param zeroPad\n *  - `en` 0 padding order\n *  - `ja` 0 詰めする桁数を指定\n */\nexport function luid(prefix = '', zeroPad?: number): string {\n    const id = (++_localId).toString(16);\n    return (null != zeroPad) ? `${prefix}${id.padStart(zeroPad, '0')}` : `${prefix}${id}`;\n}\n\n/**\n * @en Returns a random integer between `0` and `max`, inclusive.\n * @ja `0` - `max` のランダムの整数値を生成\n *\n * @param max\n *  - `en` The maximum random number.\n *  - `ja` 整数の最大値\n */\nexport function randomInt(max: number): number;\n\n/**\n * @en Returns a random integer between `min` and `max`, inclusive.\n * @ja `min` - `max` のランダムの整数値を生成\n *\n * @param min\n *  - `en` The maximum random number.\n *  - `ja` 整数の最大値\n * @param max\n *  - `en` The maximum random number.\n *  - `ja` 整数の最大値\n */\nexport function randomInt(min: number, max: number): number; // eslint-disable-line @typescript-eslint/unified-signatures\n\nexport function randomInt(min: number, max?: number): number {\n    if (null == max) {\n        max = min;\n        min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal */ const _regexCancelLikeString = /(abort|cancel)/im;\n\n/**\n * @en Presume whether it's a canceled error.\n * @ja キャンセルされたエラーであるか推定\n *\n * @param error\n *  - `en` an error object handled in `catch` block.\n *  - `ja` `catch` 節などで補足したエラーを指定\n */\nexport function isCancelLikeError(error: unknown): boolean {\n    if (null == error) {\n        return false;\n    } else if (isString(error)) {\n        return _regexCancelLikeString.test(error);\n    } else if (isObject(error)) {\n        return _regexCancelLikeString.test((error as Error).message);\n    } else {\n        return false;\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Converts first letter of the string to uppercase.\n * @ja 最初の文字を大文字に変換\n *\n *\n * @example <br>\n *\n * ```ts\n * capitalize(\"foo Bar\");\n * // => \"Foo Bar\"\n *\n * capitalize(\"FOO Bar\", true);\n * // => \"Foo bar\"\n * ```\n *\n * @param src\n *  - `en` source string\n *  - `ja` 変換元文字列\n * @param lowercaseRest\n *  - `en` If `true` is passed, the rest of the string will be converted to lower case\n *  - `ja` `true` を指定した場合, 2文字目以降も小文字化\n */\nexport function capitalize(src: string, lowercaseRest = false): string {\n    const remainingChars = !lowercaseRest ? src.slice(1) : src.slice(1).toLowerCase();\n    return src.charAt(0).toUpperCase() + remainingChars;\n}\n\n/**\n * @en Converts first letter of the string to lowercase.\n * @ja 最初の文字を小文字化\n *\n * @example <br>\n *\n * ```ts\n * decapitalize(\"Foo Bar\");\n * // => \"foo Bar\"\n * ```\n *\n * @param src\n *  - `en` source string\n *  - `ja` 変換元文字列\n */\nexport function decapitalize(src: string): string {\n    return src.charAt(0).toLowerCase() + src.slice(1);\n}\n\n/**\n * @en Converts underscored or dasherized string to a camelized one. <br>\n *     Begins with a lower case letter unless it starts with an underscore, dash or an upper case letter.\n * @ja `_`, `-` 区切り文字列をキャメルケース化 <br>\n *     `-` または大文字スタートであれば, 大文字スタートが既定値\n *\n * @example <br>\n *\n * ```ts\n * camelize(\"moz-transform\");\n * // => \"mozTransform\"\n *\n * camelize(\"-moz-transform\");\n * // => \"MozTransform\"\n *\n * camelize(\"_moz_transform\");\n * // => \"MozTransform\"\n *\n * camelize(\"Moz-transform\");\n * // => \"MozTransform\"\n *\n * camelize(\"-moz-transform\", true);\n * // => \"mozTransform\"\n * ```\n *\n * @param src\n *  - `en` source string\n *  - `ja` 変換元文字列\n * @param lower\n *  - `en` If `true` is passed, force converts to lower camel case in starts with the special case.\n *  - `ja` 強制的に小文字スタートする場合には `true` を指定\n */\nexport function camelize(src: string, lower = false): string {\n    src = src.trim().replace(/[-_\\s]+(.)?/g, (match, c) => {\n        return c ? c.toUpperCase() : '';\n    });\n\n    if (true === lower) {\n        return decapitalize(src);\n    } else {\n        return src;\n    }\n}\n\n/**\n * @en Converts string to camelized class name. First letter is always upper case.\n * @ja 先頭大文字のキャメルケースに変換\n *\n * @example <br>\n *\n * ```ts\n * classify(\"some_class_name\");\n * // => \"SomeClassName\"\n * ```\n *\n * @param src\n *  - `en` source string\n *  - `ja` 変換元文字列\n */\nexport function classify(src: string): string {\n    return capitalize(camelize(src.replace(/[\\W_]/g, ' ')).replace(/\\s/g, ''));\n}\n\n/**\n * @en Converts a camelized or dasherized string into an underscored one.\n * @ja キャメルケース or `-` つなぎ文字列を `_` つなぎに変換\n *\n * @example <br>\n *\n * ```ts\n * underscored(\"MozTransform\");\n * // => \"moz_transform\"\n * ```\n *\n * @param src\n *  - `en` source string\n *  - `ja` 変換元文字列\n */\nexport function underscored(src: string): string {\n    return src.trim().replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();\n}\n\n/**\n * @en Converts a underscored or camelized string into an dasherized one.\n * @ja キャメルケース or `_` つなぎ文字列を `-` つなぎに変換\n *\n * @example <br>\n *\n * ```ts\n * dasherize(\"MozTransform\");\n * // => \"-moz-transform\"\n * ```\n *\n * @param src\n *  - `en` source string\n *  - `ja` 変換元文字列\n */\nexport function dasherize(src: string): string {\n    return src.trim().replace(/([A-Z])/g, '-$1').replace(/[_\\s]+/g, '-').toLowerCase();\n}\n","/* eslint-disable\n    no-invalid-this,\n */\n\nimport type { UnknownObject, Accessible } from './types';\nimport { assignValue } from './deep-circuit';\nimport { randomInt } from './misc';\n\n/**\n * @en Execute shuffle of an array elements.\n * @ja 配列要素のシャッフル\n *\n * @param array\n *  - `en` source array\n *  - `ja` 入力配列\n * @param destructive\n *  - `en` true: destructive / false: non-destructive (default)\n *  - `ja` true: 破壊的 / false: 非破壊的 (既定)\n */\nexport function shuffle<T>(array: T[], destructive = false): T[] {\n    const source = destructive ? array : array.slice();\n    const len = source.length;\n    for (let i = len > 0 ? len >>> 0 : 0; i > 1;) {\n        const j = i * Math.random() >>> 0;\n        const swap = source[--i];\n        source[i] = source[j];\n        source[j] = swap;\n    }\n    return source;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Execute stable sort by merge-sort algorithm.\n * @ja `merge-sort` による安定ソート\n *\n * @param array\n *  - `en` source array\n *  - `ja` 入力配列\n * @param comparator\n *  - `en` sort comparator function\n *  - `ja` ソート関数を指定\n * @param destructive\n *  - `en` true: destructive / false: non-destructive (default)\n *  - `ja` true: 破壊的 / false: 非破壊的 (既定)\n */\nexport function sort<T>(array: T[], comparator: (lhs: T, rhs: T) => number, destructive = false): T[] {\n    const source = destructive ? array : array.slice();\n    if (source.length < 2) {\n        return source;\n    }\n    const lhs = sort(source.splice(0, source.length >>> 1), comparator, true);\n    const rhs = sort(source.splice(0), comparator, true);\n    while (lhs.length && rhs.length) {\n        source.push(comparator(lhs[0], rhs[0]) <= 0 ? lhs.shift() as T : rhs.shift() as T);\n    }\n    return source.concat(lhs, rhs);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Make unique array.\n * @ja 重複要素のない配列の作成\n *\n * @param array\n *  - `en` source array\n *  - `ja` 入力配列\n */\nexport function unique<T>(array: T[]): T[] {\n    return [...new Set(array)];\n}\n\n/**\n * @en Make union array.\n * @ja 配列の和集合を返却\n *\n * @param arrays\n *  - `en` source arrays\n *  - `ja` 入力配列群\n */\nexport function union<T>(...arrays: T[][]): T[] {\n    return unique(arrays.flat());\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Get the model at the given index. If negative value is given, the target will be found from the last index.\n * @ja インデックス指定によるモデルへのアクセス. 負値の場合は末尾検索を実行\n *\n * @param array\n *  - `en` source array\n *  - `ja` 入力配列\n * @param index\n *  - `en` A zero-based integer indicating which element to retrieve. <br> If negative index is counted from the end of the matched set.\n *  - `ja` 0 base のインデックスを指定 <br> 負値が指定された場合, 末尾からのインデックスとして解釈される\n */\nexport function at<T>(array: T[], index: number): T | never {\n    const idx = Math.trunc(index);\n    const el = idx < 0 ? array[idx + array.length] : array[idx];\n    if (null == el) {\n        throw new RangeError(`invalid array index. [length: ${array.length}, given: ${index}]`);\n    }\n    return el;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Make index array.\n * @ja インデックス配列の作成\n *\n * @param array\n *  - `en` source array\n *  - `ja` 入力配列\n * @param excludes\n *  - `en` exclude index in return value.\n *  - `ja` 戻り値配列に含めないインデックスを指定\n */\nexport function indices<T>(array: T[], ...excludes: number[]): number[] {\n    const retval = [...array.keys()];\n\n    const len = array.length;\n    const exList = [...new Set(excludes)].sort((lhs, rhs) => lhs < rhs ? 1 : -1);\n    for (const ex of exList) {\n        if (0 <= ex && ex < len) {\n            retval.splice(ex, 1);\n        }\n    }\n\n    return retval;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en {@link groupBy}() options definition.\n * @ja {@link groupBy}() に指定するオプション定義\n */\nexport interface GroupByOptions<\n    T extends object,\n    TKEYS extends keyof T,\n    TSUMKEYS extends keyof T,\n    TGROUPKEY extends string\n> {\n    /**\n     * @en `GROUP BY` keys.\n     * @ja `GROUP BY` に指定するキー\n     */\n    keys: Extract<TKEYS, string>[];\n\n    /**\n     * @en Aggregatable keys.\n     * @ja 集計可能なキー一覧\n     */\n    sumKeys?: Extract<TSUMKEYS, string>[];\n\n    /**\n     * @en Grouped item access key. default: 'items',\n     * @ja グルーピングされた要素へのアクセスキー. 既定: 'items'\n     */\n    groupKey?: TGROUPKEY;\n}\n\n/**\n * @en Return type of {@link groupBy}().\n * @ja {@link groupBy}() が返却する型\n */\nexport type GroupByReturnValue<\n    T extends object,\n    TKEYS extends keyof T,\n    TSUMKEYS extends keyof T = never,\n    TGROUPKEY extends string = 'items'\n> = Readonly<Record<TKEYS, unknown> & Record<TSUMKEYS, unknown> & Record<TGROUPKEY, T[]>>;\n\n/**\n * @en Execute `GROUP BY` for array elements.\n * @ja 配列の要素の `GROUP BY` 集合を抽出\n *\n * @param array\n *  - `en` source array\n *  - `ja` 入力配列\n * @param options\n *  - `en` `GROUP BY` options\n *  - `ja` `GROUP BY` オプション\n */\nexport function groupBy<\n    T extends object,\n    TKEYS extends keyof T,\n    TSUMKEYS extends keyof T = never,\n    TGROUPKEY extends string = 'items'\n>(array: T[], options: GroupByOptions<T, TKEYS, TSUMKEYS, TGROUPKEY>): GroupByReturnValue<T, TKEYS, TSUMKEYS, TGROUPKEY>[] {\n    const { keys, sumKeys, groupKey } = options;\n    const _groupKey = groupKey ?? 'items';\n    const _sumKeys: string[] = sumKeys ?? [];\n    _sumKeys.push(_groupKey);\n\n    const hash = array.reduce((res: Accessible<T>, data: Accessible<T>) => {\n        // create groupBy internal key\n        const _key = keys.reduce((s, k) => s + String(data[k]), '');\n\n        // init keys\n        if (!(_key in res)) {\n            const keyList = keys.reduce((h: UnknownObject, k: string) => {\n                assignValue(h, k, data[k]);\n                return h;\n            }, {});\n\n            (res[_key] as UnknownObject) = _sumKeys.reduce((h, k: string) => {\n                h[k] = 0;\n                return h;\n            }, keyList);\n        }\n\n        const resKey = res[_key] as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n        // sum properties\n        for (const k of _sumKeys) {\n            if (_groupKey === k) {\n                resKey[k] = resKey[k] || [];\n                resKey[k].push(data);\n            } else {\n                resKey[k] += data[k] as number;\n            }\n        }\n\n        return res;\n    }, {});\n\n    return Object.values(hash);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Computes the list of values that are the intersection of all the arrays. Each value in the result is present in each of the arrays.\n * @ja 配列の積集合を返却. 返却された配列の要素はすべての入力された配列に含まれる\n *\n * @example <br>\n *\n * ```ts\n * console.log(intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]));\n * // => [1, 2]\n * ```\n *\n * @param arrays\n *  - `en` source array\n *  - `ja` 入力配列\n */\nexport function intersection<T>(...arrays: T[][]): T[] {\n    return arrays.reduce((acc, ary) => acc.filter(el => ary.includes(el)));\n}\n\n/**\n * @en Returns the values from array that are not present in the other arrays.\n * @ja 配列からほかの配列に含まれないものを返却\n *\n * @example <br>\n *\n * ```ts\n * console.log(difference([1, 2, 3, 4, 5], [5, 2, 10]));\n * // => [1, 3, 4]\n * ```\n *\n * @param array\n *  - `en` source array\n *  - `ja` 入力配列\n * @param others\n *  - `en` exclude element in return value.\n *  - `ja` 戻り値配列に含めない要素を指定\n */\nexport function difference<T>(array: T[], ...others: T[][]): T[] {\n    const arrays = [array, ...others] as T[][];\n    return arrays.reduce((acc, ary) => acc.filter(el => !ary.includes(el)));\n}\n\n/**\n * @en Returns a copy of the array with all instances of the values removed.\n * @ja 配列から指定要素を取り除いたものを返却\n *\n * @example <br>\n *\n * ```ts\n * console.log(without([1, 2, 1, 0, 3, 1, 4], 0, 1));\n * // => [2, 3, 4]\n * ```\n *\n * @param array\n *  - `en` source array\n *  - `ja` 入力配列\n * @param values\n *  - `en` exclude element in return value.\n *  - `ja` 戻り値配列に含めない要素を指定\n */\nexport function without<T>(array: T[], ...values: T[]): T[] {\n    return difference(array, values);\n}\n\n/**\n * @en Produce a random sample from the list.\n * @ja ランダムにサンプル値を返却\n *\n * @example <br>\n *\n * ```ts\n * console.log(sample([1, 2, 3, 4, 5, 6], 3));\n * // => [1, 6, 2]\n * ```\n *\n * @param array\n *  - `en` source array\n *  - `ja` 入力配列\n * @param count\n *  - `en` number of sampling count.\n *  - `ja` 返却するサンプル数を指定\n */\nexport function sample<T>(array: T[], count: number): T[];\n\n/**\n * @en Produce a random sample from the list.\n * @ja ランダムにサンプル値を返却\n *\n * @example <br>\n *\n * ```ts\n * console.log(sample([1, 2, 3, 4, 5, 6]));\n * // => 4\n * ```\n *\n * @param array\n *  - `en` source array\n *  - `ja` 入力配列\n */\nexport function sample<T>(array: T[]): T;\n\nexport function sample<T>(array: T[], count?: number): T | T[] {\n    if (null == count) {\n        return array[randomInt(array.length - 1)];\n    }\n    const sample = array.slice();\n    const length = sample.length;\n    count = Math.max(Math.min(count, length), 0);\n    const last = length - 1;\n    for (let index = 0; index < count; index++) {\n        const rand = randomInt(index, last);\n        const temp = sample[index];\n        sample[index] = sample[rand];\n        sample[rand] = temp;\n    }\n    return sample.slice(0, count);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Returns a result of permutation from the list.\n * @ja 配列から順列結果を返却\n *\n * @example <br>\n *\n * ```ts\n * const arr = permutation(['a', 'b', 'c'], 2);\n * console.log(JSON.stringify(arr));\n * // => [['a','b'],['a','c'],['b','a'],['b','c'],['c','a'],['c','b']]\n * ```\n *\n * @param array\n *  - `en` source array\n *  - `ja` 入力配列\n * @param count\n *  - `en` number of pick up.\n *  - `ja` 選択数\n */\nexport function permutation<T>(array: T[], count: number): T[][] {\n    const retval: T[][] = [];\n    if (array.length < count) {\n        return [];\n    }\n    if (1 === count) {\n        for (const [i, val] of array.entries()) {\n            retval[i] = [val];\n        }\n    } else {\n        for (let i = 0, n1 = array.length; i < n1; i++) {\n            const parts = array.slice(0);\n            parts.splice(i, 1);\n            const row = permutation(parts, count - 1);\n            for (let j = 0, n2 = row.length; j < n2; j++) {\n                retval.push([array[i]].concat(row[j]));\n            }\n        }\n    }\n    return retval;\n}\n\n/**\n * @en Returns a result of combination from the list.\n * @ja 配列から組み合わせ結果を返却\n *\n * @example <br>\n *\n * ```ts\n * const arr = combination(['a', 'b', 'c'], 2);\n * console.log(JSON.stringify(arr));\n * // => [['a','b'],['a','c'],['b','c']]\n * ```\n *\n * @param array\n *  - `en` source array\n *  - `ja` 入力配列\n * @param count\n *  - `en` number of pick up.\n *  - `ja` 選択数\n */\nexport function combination<T>(array: T[], count: number): T[][] {\n    const retval: T[][] = [];\n    if (array.length < count) {\n        return [];\n    }\n    if (1 === count) {\n        for (const [i, val] of array.entries()) {\n            retval[i] = [val];\n        }\n    } else {\n        for (let i = 0, n1 = array.length; i < n1 - count + 1; i++) {\n            const row = combination(array.slice(i + 1), count - 1);\n            for (let j = 0, n2 = row.length; j < n2; j++) {\n                retval.push([array[i]].concat(row[j]));\n            }\n        }\n    }\n    return retval;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Substitution method of `Array.prototype.map()` which also accepts asynchronous callback.\n * @ja 非同期コールバックを指定可能な `Array.prototype.map()` の代替メソッド\n * \n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` 入力配列\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` イテレーション適用関数\n * @param thisArg\n *  - `en` Value to use as *this* when executing the `callback`.\n *  - `ja` `callback` 実行コンテキスト\n * @returns\n *  - `en` Returns a Promise with the resultant *Array* as value.\n *  - `ja` イテレーション結果配列を格納した Promise オブジェクト\n */\nexport async function map<T, U>(this: unknown, array: T[], callback: (value: T, index: number, array: T[]) => U | Promise<U>, thisArg?: unknown): Promise<U[]> {\n    return Promise.all(\n        array.map(async (v, i, a) => {\n            return await callback.call(thisArg || this, v, i, a);\n        })\n    );\n}\n\n/**\n * @en Substitution method of `Array.prototype.filter()` which also accepts asynchronous callback.\n * @ja 非同期コールバックを指定可能な `Array.prototype.filter()` の代替メソッド\n *\n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` 入力配列\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` イテレーション適用関数\n * @param thisArg\n *  - `en` Value to use as *this* when executing the `callback`.\n *  - `ja` `callback` 実行コンテキスト\n * @returns\n *  - `en` Returns a Promise with the resultant *Array* as value.\n *  - `ja` イテレーション結果配列を格納した Promise オブジェクト\n */\nexport async function filter<T>(this: unknown, array: T[], callback: (value: T, index: number, array: T[]) => boolean | Promise<boolean>, thisArg?: unknown): Promise<T[]> {\n    const bits: boolean[] = await map(array, (v, i, a) => callback.call(thisArg || this, v, i, a));\n    return array.filter(() => bits.shift());\n}\n\n/**\n * @en Substitution method of `Array.prototype.find()` which also accepts asynchronous callback.\n * @ja 非同期コールバックを指定可能な `Array.prototype.find()` の代替メソッド\n *\n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` 入力配列\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` イテレーション適用関数\n * @param thisArg\n *  - `en` Value to use as *this* when executing the `callback`.\n *  - `ja` `callback` 実行コンテキスト\n * @returns\n *  - `en` Returns a Promise with the resultant value.\n *  - `ja` イテレーション結果を格納した Promise オブジェクト\n */\nexport async function find<T>(this: unknown, array: T[], callback: (value: T, index: number, array: T[]) => boolean | Promise<boolean>, thisArg?: unknown): Promise<T | undefined> {\n    for (const [i, v] of array.entries()) {\n        if (await callback.call(thisArg || this, v, i, array)) {\n            return v;\n        }\n    }\n    return undefined;\n}\n\n/**\n * @en Substitution method of `Array.prototype.findIndex()` which also accepts asynchronous callback.\n * @ja 非同期コールバックを指定可能な `Array.prototype.findIndex()` の代替メソッド\n *\n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` 入力配列\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` イテレーション適用関数\n * @param thisArg\n *  - `en` Value to use as *this* when executing the `callback`.\n *  - `ja` `callback` 実行コンテキスト\n * @returns\n *  - `en` Returns a Promise with the resultant index value.\n *  - `ja` インデックスを格納した Promise オブジェクト\n */\nexport async function findIndex<T>(this: unknown, array: T[], callback: (value: T, index: number, array: T[]) => boolean | Promise<boolean>, thisArg?: unknown): Promise<number> {\n    for (const [i, v] of array.entries()) {\n        if (await callback.call(thisArg || this, v, i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/**\n * @en Substitution method of `Array.prototype.some()` which also accepts asynchronous callback.\n * @ja 非同期コールバックを指定可能な `Array.prototype.some()` の代替メソッド\n *\n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` 入力配列\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` イテレーション適用関数\n * @param thisArg\n *  - `en` Value to use as *this* when executing the `callback`.\n *  - `ja` `callback` 実行コンテキスト\n * @returns\n *  - `en` Returns a Promise with the resultant boolean value.\n *  - `ja` 真偽値を格納した Promise オブジェクト\n */\nexport async function some<T>(this: unknown, array: T[], callback: (value: T, index: number, array: T[]) => unknown, thisArg?: unknown): Promise<boolean> {\n    for (const [i, v] of array.entries()) {\n        if (await callback.call(thisArg || this, v, i, array)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * @en Substitution method of `Array.prototype.every()` which also accepts asynchronous callback.\n * @ja 非同期コールバックを指定可能な `Array.prototype.every()` の代替メソッド\n *\n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` 入力配列\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` イテレーション適用関数\n * @param thisArg\n *  - `en` Value to use as *this* when executing the `callback`.\n *  - `ja` `callback` 実行コンテキスト\n * @returns\n *  - `en` Returns a Promise with the resultant boolean value.\n *  - `ja` 真偽値を格納した Promise オブジェクト\n */\nexport async function every<T>(this: unknown, array: T[], callback: (value: T, index: number, array: T[]) => unknown, thisArg?: unknown): Promise<boolean> {\n    for (const [i, v] of array.entries()) {\n        if (!await callback.call(thisArg || this, v, i, array)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * @en Substitution method of `Array.prototype.reduce()` which also accepts asynchronous callback.\n * @ja 非同期コールバックを指定可能な `Array.prototype.reduce()` の代替メソッド\n *\n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` 入力配列\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` イテレーション適用関数\n * @param initialValue\n *  - `en` Used as first argument to the first call of `callback`.\n *  - `ja` `callback` に渡される初期値\n * @returns\n *  - `en` Returns a Promise with the resultant *Array* as value.\n *  - `ja` イテレーション結果配列を格納した Promise オブジェクト\n */\nexport async function reduce<T, U>(\n    array: T[],\n    callback: (accumulator: U, currentValue: T, currentIndex: number, array: T[]) => U | Promise<U>,\n    initialValue?: U\n): Promise<U> {\n    if (array.length <= 0 && undefined === initialValue) {\n        throw TypeError('Reduce of empty array with no initial value');\n    }\n\n    const hasInit = (undefined !== initialValue);\n    let acc = (hasInit ? initialValue : array[0]) as U;\n\n    for (const [i, v] of array.entries()) {\n        if (!(!hasInit && 0 === i)) {\n            acc = await callback(acc, v, i, array);\n        }\n    }\n\n    return acc;\n}\n","/**\n * @en Date unit definitions.\n * @ja 日時オブジェクトの単位定義\n */\nexport type DateUnit = 'year' | 'month' | 'day' | 'hour' | 'min' | 'sec' | 'msec';\n\n/** @internal */\nconst _computeDateFuncMap = {\n    year: (date: Date, base: Date, add: number) => {\n        date.setUTCFullYear(base.getUTCFullYear() + add);\n        return date;\n    },\n    month: (date: Date, base: Date, add: number) => {\n        date.setUTCMonth(base.getUTCMonth() + add);\n        return date;\n    },\n    day: (date: Date, base: Date, add: number) => {\n        date.setUTCDate(base.getUTCDate() + add);\n        return date;\n    },\n    hour: (date: Date, base: Date, add: number) => {\n        date.setUTCHours(base.getUTCHours() + add);\n        return date;\n    },\n    min: (date: Date, base: Date, add: number) => {\n        date.setUTCMinutes(base.getUTCMinutes() + add);\n        return date;\n    },\n    sec: (date: Date, base: Date, add: number) => {\n        date.setUTCSeconds(base.getUTCSeconds() + add);\n        return date;\n    },\n    msec: (date: Date, base: Date, add: number) => {\n        date.setUTCMilliseconds(base.getUTCMilliseconds() + add);\n        return date;\n    },\n};\n\n/**\n * @en Calculate from the date which becomes a cardinal point before a N date time or after a N date time (by {@link DateUnit}).\n * @ja 基点となる日付から、N日後、N日前を算出\n *\n * @param base\n *  - `en` base date time.\n *  - `ja` 基準日\n * @param add\n *  - `en` relative date time.\n *  - `ja` 加算日. マイナス指定でn日前も設定可能\n * @param unit {@link DateUnit}\n */\nexport function computeDate(base: Date, add: number, unit: DateUnit = 'day'): Date {\n    const date = new Date(base.getTime());\n    const func = _computeDateFuncMap[unit];\n    if (func) {\n        return func(date, base, add);\n    } else {\n        throw new TypeError(`invalid unit: ${unit}`);\n    }\n}\n","const _status: Record<string | symbol, number> = {};\n\n/**\n * @en Increment reference count for status identifier.\n * @ja 状態変数の参照カウントのインクリメント\n *\n * @param status\n *  - `en` state identifier\n *  - `ja` 状態識別子\n * @returns\n *  - `en` reference count value\n *  - `ja` 参照カウントの値\n */\nexport function statusAddRef(status: string | symbol): number {\n    if (!_status[status]) {\n        _status[status] = 1;\n    } else {\n        _status[status]++;\n    }\n    return _status[status];\n}\n\n/**\n * @en Decrement reference count for status identifier.\n * @ja 状態変数の参照カウントのデクリメント\n *\n * @param status\n *  - `en` state identifier\n *  - `ja` 状態識別子\n * @returns\n *  - `en` reference count value\n *  - `ja` 参照カウントの値\n */\nexport function statusRelease(status: string | symbol): number {\n    if (!_status[status]) {\n        return 0;\n    } else {\n        const retval = --_status[status];\n        if (0 === retval) {\n            delete _status[status];\n        }\n        return retval;\n    }\n}\n\n/**\n * @en State variable management scope\n * @ja 状態変数管理スコープ\n *\n * @param status\n *  - `en` state identifier\n *  - `ja` 状態識別子\n * @param executor\n *  - `en` seed function.\n *  - `ja` 対象の関数\n * @returns\n *  - `en` retval of seed function.\n *  - `ja` 対象の関数の戻り値\n */\nexport async function statusScope<T>(status: string | symbol, executor: () => T | Promise<T>): Promise<T> {\n    try {\n        statusAddRef(status);\n        return await executor();\n    } finally {\n        statusRelease(status);\n    }\n}\n\n/**\n * @en Check if it's in the specified state.\n * @ja 指定した状態中であるか確認\n *\n * @param status\n *  - `en` state identifier\n *  - `ja` 状態識別子\n * @return {Boolean} true: 状態内 / false: 状態外\n * @returns\n *  - `en` `true`: within the status / `false`: out of the status\n *  - `ja` `true`: 状態内 / `false`: 状態外\n */\nexport function isStatusIn(status: string | symbol): boolean {\n    return !!_status[status];\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    Arguments,\n    isString,\n    isArray,\n    isSymbol,\n    className,\n    verify,\n} from '@cdp/core-utils';\nimport {\n    EventAll,\n    Subscription,\n    Subscribable,\n} from './interfaces';\n\n/** @internal Lisner 格納形式 */\ntype ListenersMap<T> = Map<keyof T, Set<(...args: T[keyof T][]) => unknown>>;\n\n/** @internal Lisner の弱参照 */\nconst _mapListeners = new WeakMap<EventPublisher<any>, ListenersMap<any>>();\n\n/** @internal LisnerMap の取得 */\nfunction listeners<T extends object>(instance: EventPublisher<T>): ListenersMap<T> {\n    if (!_mapListeners.has(instance)) {\n        throw new TypeError('This is not a valid EventPublisher.');\n    }\n    return _mapListeners.get(instance) as ListenersMap<T>;\n}\n\n/** @internal Channel の型検証 */\nfunction validChannel(channel: unknown): void | never {\n    if (isString(channel) || isSymbol(channel)) {\n        return;\n    }\n    throw new TypeError(`Type of ${className(channel)} is not a valid channel.`);\n}\n\n/** @internal Listener の型検証 */\nfunction validListener(listener?: (...args: unknown[]) => unknown): any {\n    if (null != listener) {\n        verify('typeOf', 'function', listener);\n    }\n    return listener;\n}\n\n/** @internal event 発行 */\nfunction triggerEvent<Event, Channel extends keyof Event>(\n    map: ListenersMap<Event>,\n    channel: Channel,\n    original: string | undefined,\n    ...args: Arguments<Partial<Event[Channel]>>\n): void {\n    const list = map.get(channel);\n    if (!list) {\n        return;\n    }\n    for (const listener of list) {\n        try {\n            const eventArgs = original ? [original, ...args] : args;\n            const handled = listener(...eventArgs);\n            // if received 'true', stop delegation.\n            if (true === handled) {\n                break;\n            }\n        } catch (e) {\n            void Promise.reject(e);\n        }\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Eventing framework class with ensuring type-safe for TypeScript. <br>\n *     The client of this class can implement original Pub-Sub (Observer) design pattern.\n * @ja 型安全を保障するイベント登録・発行クラス <br>\n *     クライアントは本クラスを派生して独自の Pub-Sub (Observer) パターンを実装可能\n *\n * @example <br>\n *\n * ```ts\n * import { EventPublisher } from '@cdp/runtime';\n *\n * // declare event interface\n * interface SampleEvent {\n *   hoge: [number, string];        // callback function's args type tuple\n *   foo: [void];                   // no args\n *   hoo: void;                     // no args (same the upon)\n *   bar: [Error];                  // any class is available.\n *   baz: Error | Number;           // if only one argument, `[]` is not required.\n * }\n *\n * // declare client class\n * class SamplePublisher extends EventPublisher<SampleEvent> {\n *   :\n *   someMethod(): void {\n *     this.publish('hoge', 100, 'test');       // OK. standard usage.\n *     this.publish('hoge', 100, true);         // NG. argument of type 'true' is not assignable\n *                                              //     to parameter of type 'string | undefined'.\n *     this.publish('hoge', 100);               // OK. all args to be optional automatically.\n *     this.publish('foo');                     // OK. standard usage.\n *     this.publish('foo', 100);                // NG. argument of type '100' is not assignable\n *                                              //     to parameter of type 'void | undefined'.\n *   }\n * }\n *\n * const sample = new SamplePublisher();\n *\n * sample.on('hoge', (a: number, b: string) => { ... });    // OK. standard usage.\n * sample.on('hoge', (a: number, b: boolean) => { ... });   // NG. types of parameters 'b'\n *                                                          //     and 'args_1' are incompatible.\n * sample.on('hoge', (a) => { ... });                       // OK. all args\n *                                                          //     to be optional automatically.\n * sample.on('hoge', (a, b, c) => { ... });                 // NG. expected 1-2 arguments,\n *                                                          //     but got 3.\n * ```\n */\nexport abstract class EventPublisher<Event extends object> implements Subscribable<Event> {\n\n    /** constructor */\n    constructor() {\n        verify('instanceOf', EventPublisher, this);\n        _mapListeners.set(this, new Map());\n    }\n\n    /**\n     * @en Notify event to clients.\n     * @ja event 発行\n     *\n     * @param channel\n     *  - `en` event channel key. (string | symbol)\n     *  - `ja` イベントチャネルキー (string | symbol)\n     * @param args\n     *  - `en` arguments for callback function of the `channel` corresponding.\n     *  - `ja` `channel` に対応したコールバック関数に渡す引数\n     */\n    protected publish<Channel extends keyof Event>(channel: Channel, ...args: Arguments<Partial<Event[Channel]>>): void {\n        const map = listeners(this);\n        validChannel(channel);\n        triggerEvent(map, channel, undefined, ...args);\n        // trigger for all handler\n        if ('*' !== channel) {\n            triggerEvent(map as unknown as ListenersMap<EventAll>, '*', channel as string, ...args);\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: Subscribable<Event>\n\n    /**\n     * @en Check whether this object has clients.\n     * @ja クライアントが存在するか判定\n     *\n     * @param channel\n     *  - `en` event channel key. (string | symbol)\n     *  - `ja` イベントチャネルキー (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` に対応したコールバック関数\n     */\n    hasListener<Channel extends keyof Event>(channel?: Channel, listener?: (...args: Arguments<Event[Channel]>) => unknown): boolean {\n        const map = listeners(this);\n        if (null == channel) {\n            return map.size > 0;\n        }\n        validChannel(channel);\n        if (null == listener) {\n            return map.has(channel);\n        }\n        validListener(listener);\n        const list = map.get(channel);\n        return list ? list.has(listener) : false;\n    }\n\n    /**\n     * @en Returns registered channel keys.\n     * @ja 登録されているチャネルキーを返却\n     */\n    channels(): (keyof Event)[] {\n        return [...listeners(this).keys()];\n    }\n\n    /**\n     * @en Subscrive event(s).\n     * @ja イベント購読設定\n     *\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *  - `ja` 対象のイベントチャネルキー (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` に対応したコールバック関数\n     */\n    on<Channel extends keyof Event>(channel: Channel | Channel[], listener: (...args: Arguments<Event[Channel]>) => unknown): Subscription {\n        const map = listeners(this);\n        validListener(listener);\n\n        const channels = isArray(channel) ? channel : [channel];\n        for (const ch of channels) {\n            validChannel(ch);\n            map.has(ch) ? map.get(ch)!.add(listener) : map.set(ch, new Set([listener]));\n        }\n\n        return Object.freeze({\n            get enable() {\n                for (const ch of channels) {\n                    const list = map.get(ch);\n                    if (!list?.has(listener)) {\n                        this.unsubscribe();\n                        return false;\n                    }\n                }\n                return true;\n            },\n            unsubscribe() {\n                for (const ch of channels) {\n                    const list = map.get(ch);\n                    if (list) {\n                        list.delete(listener);\n                        list.size > 0 || map.delete(ch);\n                    }\n                }\n            },\n        });\n    }\n\n    /**\n     * @en Subscrive event(s) but it causes the bound callback to only fire once before being removed.\n     * @ja 一度だけハンドリング可能なイベント購読設定\n     *\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *  - `ja` 対象のイベントチャネルキー (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` に対応したコールバック関数\n     */\n    once<Channel extends keyof Event>(channel: Channel | Channel[], listener: (...args: Arguments<Event[Channel]>) => unknown): Subscription {\n        const context = this.on(channel, listener);\n        const managed = this.on(channel, () => {\n            context.unsubscribe();\n            managed.unsubscribe();\n        });\n        return context;\n    }\n\n    /**\n     * @en Unsubscribe event(s).\n     * @ja イベント購読解除\n     *\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *         When not set this parameter, everything is released.\n     *  - `ja` 対象のイベントチャネルキー (string | symbol)\n     *         指定しない場合はすべて解除\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *         When not set this parameter, all same `channel` listeners are released.\n     *  - `ja` `channel` に対応したコールバック関数\n     *         指定しない場合は同一 `channel` すべてを解除\n     */\n    off<Channel extends keyof Event>(channel?: Channel | Channel[], listener?: (...args: Arguments<Event[Channel]>) => unknown): this {\n        const map = listeners(this);\n        if (null == channel) {\n            map.clear();\n            return this;\n        }\n\n        const channels = isArray(channel) ? channel : [channel];\n        const callback = validListener(listener);\n        for (const ch of channels) {\n            validChannel(ch);\n            if (null == callback) {\n                map.delete(ch);\n                continue;\n            } else {\n                const list = map.get(ch);\n                if (list) {\n                    list.delete(callback);\n                    list.size > 0 || map.delete(ch);\n                }\n            }\n        }\n\n        return this;\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport { Arguments } from '@cdp/core-utils';\nimport { Subscribable } from './interfaces';\nimport { EventPublisher } from './publisher';\n\n/** re-export */\nexport type EventArguments<T> = Arguments<T>;\n\n/**\n * @en Eventing framework object able to call `publish()` method from outside.\n * @ja 外部からの `publish()` を可能にしたイベント登録・発行クラス\n *\n * @example <br>\n *\n * ```ts\n * import { EventBroker } from '@cdp/runtime';\n *\n * // declare event interface\n * interface SampleEvent {\n *   hoge: [number, string];        // callback function's args type tuple\n * }\n *\n * const broker = new EventBroker<SampleEvent>();\n * broker.trigger('hoge', 100, 'test');     // OK. standard usage.\n * broker.trigger('hoge', 100, true);       // NG. argument of type 'true' is not assignable\n *                                          //     to parameter of type 'string | undefined'.\n * ```\n */\nexport interface EventBroker<Event extends object> extends Subscribable<Event> {\n    /**\n     * @en Notify event to clients.\n     * @ja event 発行\n     *\n     * @param channel\n     *  - `en` event channel key. (string | symbol)\n     *  - `ja` イベントチャネルキー (string | symbol)\n     * @param args\n     *  - `en` arguments for callback function of the `channel` corresponding.\n     *  - `ja` `channel` に対応したコールバック関数に渡す引数\n     */\n    trigger<Channel extends keyof Event>(channel: Channel, ...args: Arguments<Partial<Event[Channel]>>): void;\n}\n\n/**\n * @en Constructor of {@link EventBroker}\n * @ja {@link EventBroker} のコンストラクタ実体\n */\nexport const EventBroker: {\n    readonly prototype: EventBroker<any>;\n    new <T extends object>(): EventBroker<T>;\n} = EventPublisher as any;\n\nEventBroker.prototype.trigger = (EventPublisher.prototype as any).publish;\n","import {\n    UnknownFunction,\n    Arguments,\n    isArray,\n} from '@cdp/core-utils';\nimport {\n    Subscribable,\n    Subscription,\n    EventSchema,\n} from './interfaces';\n\n/** @internal */ const _context = Symbol('context');\n/** @internal */ type SubscriptionMap = Map<UnknownFunction, Subscription>;\n/** @internal */ type ListerMap       = Map<string, SubscriptionMap>;\n/** @internal */ type SubscriptionSet = Set<Subscription>;\n/** @internal */ type SubscribableMap = WeakMap<Subscribable, ListerMap>;\n\n/** @internal Lisner 格納形式 */\ninterface Context {\n    map: SubscribableMap;\n    set: SubscriptionSet;\n}\n\n/** @internal register listener context */\nfunction register(context: Context, target: Subscribable, channel: string | string[], listener: UnknownFunction): Subscription {\n    const subscriptions: Subscription[] = [];\n\n    const channels = isArray(channel) ? channel : [channel];\n    for (const ch of channels) {\n        const s = target.on(ch, listener);\n        context.set.add(s);\n        subscriptions.push(s);\n\n        const listenerMap = context.map.get(target) ?? new Map<string, Map<UnknownFunction, Subscription>>();\n        const map = listenerMap.get(ch) ?? new Map<UnknownFunction, Subscription>();\n        map.set(listener, s);\n\n        if (!listenerMap.has(ch)) {\n            listenerMap.set(ch, map);\n        }\n        if (!context.map.has(target)) {\n            context.map.set(target, listenerMap);\n        }\n    }\n\n    return Object.freeze({\n        get enable() {\n            for (const s of subscriptions) {\n                if (s.enable) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        unsubscribe() {\n            for (const s of subscriptions) {\n                s.unsubscribe();\n            }\n        },\n    });\n}\n\n/** @internal unregister listener context */\nfunction unregister(context: Context, target?: Subscribable, channel?: string | string[], listener?: UnknownFunction): void {\n    if (null != target) {\n        target.off(channel, listener);\n\n        const listenerMap = context.map.get(target);\n        if (!listenerMap) {\n            return;\n        }\n        if (null != channel) {\n            const channels = isArray(channel) ? channel : [channel];\n            for (const ch of channels) {\n                const map = listenerMap.get(ch);\n                if (!map) {\n                    return;\n                } else if (listener) {\n                    const s = map.get(listener);\n                    if (s) {\n                        s.unsubscribe();\n                        context.set.delete(s);\n                    }\n                    map.delete(listener);\n                } else {\n                    for (const s of map.values()) {\n                        s.unsubscribe();\n                        context.set.delete(s);\n                    }\n                }\n            }\n        } else {\n            for (const map of listenerMap.values()) {\n                for (const s of map.values()) {\n                    s.unsubscribe();\n                    context.set.delete(s);\n                }\n            }\n        }\n    } else {\n        for (const s of context.set) {\n            s.unsubscribe();\n        }\n        context.map = new WeakMap();\n        context.set.clear();\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en The class to which the safe event register/unregister method is offered for the object which is a short life cycle than subscription target. <br>\n *     The advantage of using this form, instead of `on()`, is that `listenTo()` allows the object to keep track of the events,\n *     and they can be removed all at once later call `stopListening()`.\n * @ja 購読対象よりもライフサイクルが短いオブジェクトに対して, 安全なイベント登録/解除メソッドを提供するクラス <br>\n *     `on()` の代わりに `listenTo()` を使用することで, 後に `stopListening()` を1度呼ぶだけですべてのリスナーを解除できる利点がある.\n *\n * @example <br>\n *\n * ```ts\n * import { EventReceiver, EventBroker } from '@cdp/runtime';\n *\n * // declare event interface\n * interface SampleEvent {\n *   hoge: [number, string];        // callback function's args type tuple\n *   foo: [void];                   // no args\n *   hoo: void;                     // no args (same the upon)\n *   bar: [Error];                  // any class is available.\n *   baz: Error | Number;           // if only one argument, `[]` is not required.\n * }\n *\n * // declare client class\n * class SampleReceiver extends EventReceiver {\n *   constructor(broker: EventBroker<SampleEvent>) {\n *     super();\n *     this.listenTo(broker, 'hoge', (num: number, str: string) => { ... });\n *     this.listenTo(broker, 'bar', (e: Error) => { ... });\n *     this.listenTo(broker, ['foo', 'hoo'], () => { ... });\n *   }\n *\n *   release(): void {\n *     this.stopListening();\n *   }\n * }\n * ```\n *\n * or\n *\n * ```ts\n * const broker   = new EventBroker<SampleEvent>();\n * const receiver = new EventReceiver();\n *\n * receiver.listenTo(broker, 'hoge', (num: number, str: string) => { ... });\n * receiver.listenTo(broker, 'bar', (e: Error) => { ... });\n * receiver.listenTo(broker, ['foo', 'hoo'], () => { ... });\n *\n * receiver.stopListening();\n * ```\n */\nexport class EventReceiver {\n    /** @internal */\n    private readonly [_context]: Context;\n\n    /** constructor */\n    constructor() {\n        this[_context] = { map: new WeakMap(), set: new Set() };\n    }\n\n    /**\n     * @en Tell an object to listen to a particular event on an other object.\n     * @ja 対象オブジェクトのイベント購読設定\n     *\n     * @param target\n     *  - `en` event listening target object.\n     *  - `ja` イベント購読対象のオブジェクト\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *  - `ja` 対象のイベントチャネルキー (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` に対応したコールバック関数\n     */\n    public listenTo<T extends Subscribable, Event extends EventSchema<T> = EventSchema<T>, Channel extends keyof Event = keyof Event>(\n        target: T,\n        channel: Channel | Channel[],\n        listener: (...args: Arguments<Event[Channel]>) => unknown\n    ): Subscription {\n        return register(this[_context], target, channel as string, listener);\n    }\n\n    /**\n     * @en Just like listenTo, but causes the bound callback to fire only once before being removed.\n     * @ja 対象オブジェクトの一度だけハンドリング可能なイベント購読設定\n     *\n     * @param target\n     *  - `en` event listening target object.\n     *  - `ja` イベント購読対象のオブジェクト\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *  - `ja` 対象のイベントチャネルキー (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` に対応したコールバック関数\n     */\n    public listenToOnce<T extends Subscribable, Event extends EventSchema<T> = EventSchema<T>, Channel extends keyof Event = keyof Event>(\n        target: T,\n        channel: Channel | Channel[],\n        listener: (...args: Arguments<Event[Channel]>) => unknown\n    ): Subscription {\n        const context = register(this[_context], target, channel as string, listener);\n        const managed = target.on(channel, () => {\n            unregister(this[_context], target, channel as string, listener);\n            managed.unsubscribe();\n        });\n        return context;\n    }\n\n    /**\n     * @en Tell an object to stop listening to events.\n     * @ja イベント購読解除\n     *\n     * @param target\n     *  - `en` event listening target object.\n     *         When not set this parameter, everything is released.\n     *  - `ja` イベント購読対象のオブジェクト\n     *         指定しない場合はすべてのリスナーを解除\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *         When not set this parameter, everything is released listeners from `target`.\n     *  - `ja` 対象のイベントチャネルキー (string | symbol)\n     *         指定しない場合は対象 `target` のリスナーをすべて解除\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *         When not set this parameter, all same `channel` listeners are released.\n     *  - `ja` `channel` に対応したコールバック関数\n     *         指定しない場合は同一 `channel` すべてを解除\n     */\n    public stopListening<T extends Subscribable, Event extends EventSchema<T> = EventSchema<T>, Channel extends keyof Event = keyof Event>(\n        target?: T,\n        channel?: Channel | Channel[],\n        listener?: (...args: Arguments<Event[Channel]>) => unknown\n    ): this {\n        unregister(this[_context], target, channel as string, listener);\n        return this;\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport { mixins } from '@cdp/core-utils';\nimport { EventBroker } from './broker';\nimport { EventReceiver } from './receiver';\n\n/**\n * @en The class which have I/F of {@link EventBroker} and {@link EventReceiver}. <br>\n *     `Events` class of `Backbone.js` equivalence.\n * @ja {@link EventBroker} と {@link EventReceiver} の I/F をあわせ持つクラス <br>\n *     `Backbone.js` の `Events` クラス相当\n *\n * @example <br>\n *\n * ```ts\n * import { EventSource } from '@cdp/runtime';\n *\n * // declare event interface\n * interface TargetEvent {\n *   hoge: [number, string];        // callback function's args type tuple\n *   foo: [void];                   // no args\n *   hoo: void;                     // no args (same the upon)\n *   bar: [Error];                  // any class is available.\n *   baz: Error | Number;           // if only one argument, `[]` is not required.\n * }\n *\n * interface SampleEvent {\n *   fuga: [number, string];        // callback function's args type tuple\n * }\n *\n * // declare client class\n * class SampleSource extends EventSource<SampleEvent> {\n *   constructor(target: EventSource<TargetEvent>) {\n *     super();\n *     this.listenTo(broker, 'hoge', (num: number, str: string) => { ... });\n *     this.listenTo(broker, 'bar', (e: Error) => { ... });\n *     this.listenTo(broker, ['foo', 'hoo'], () => { ... });\n *   }\n *\n *   release(): void {\n *     this.stopListening();\n *   }\n * }\n *\n * const sample = new SampleSource();\n *\n * sample.on('fuga', (a: number, b: string) => { ... });    // OK. standard usage.\n * sample.trigger('fuga', 100, 'test');                     // OK. standard usage.\n * ```\n */\nexport type _EventSource<T extends object> = EventBroker<T> & EventReceiver;\n\n/** @internal {@link EventSource} class */\nclass EventSource extends mixins(EventBroker, EventReceiver) {\n    constructor() {\n        super();\n        this.super(EventReceiver);\n    }\n}\n\n/**\n * @en Constructor of {@link EventSource}\n * @ja {@link EventSource} のコンストラクタ実体\n */\nconst _EventSource: {\n    readonly prototype: _EventSource<any>;\n    new <T extends object>(): _EventSource<T>;\n} = EventSource as any;\n\nexport { _EventSource as EventSource };\n","import { EventBroker, Subscription } from '@cdp/events';\n\n/** @internal */ export const _cancel = Symbol('cancel');\n/** @internal */ export const _close  = Symbol('close');\n\n/**\n * @en CancelToken state definitions.\n * @ja CancelToken の状態定義\n *\n * @internal\n */\nexport const enum CancelTokenState {\n    /** キャンセル受付可能 */\n    OPEN        = 0x0,\n    /** キャンセル受付済み */\n    REQUESTED   = 0x1,\n    /** キャンセル受付不可 */\n    CLOSED      = 0x2,\n}\n\n/**\n * @en Cancel event definitions.\n * @ja キャンセルイベント定義\n *\n * @internal\n */\nexport interface CancelEvent<T> {\n    cancel: [T];\n}\n\n/**\n * @en Internal CancelToken interface.\n * @ja CancelToken の内部インターフェイス定義\n *\n * @internal\n */\nexport interface CancelTokenContext<T = unknown> {\n    readonly broker: EventBroker<CancelEvent<T>>;\n    readonly subscriptions: Set<Subscription>;\n    reason: T | undefined;\n    status: CancelTokenState;\n}\n\n/**\n * @en Invalid subscription object declaration.\n * @ja 無効な Subscription オブジェクト\n *\n * @internal\n */\nexport const invalidSubscription = Object.freeze({\n    enable: false,\n    unsubscribe() { /* noop */ }\n}) as Subscription;\n","import { verify } from '@cdp/core-utils';\nimport { EventBroker, Subscription } from '@cdp/events';\nimport {\n    _cancel,\n    _close,\n    CancelTokenState,\n    CancelTokenContext,\n    invalidSubscription,\n} from './internal';\n\n/**\n * @en Cancellation source interface.\n * @ja キャンセル管理インターフェイス\n */\nexport interface CancelTokenSource<T = unknown> {\n    /**\n     * @en {@link CancelToken} getter.\n     * @ja {@link CancelToken} 取得\n     */\n    readonly token: CancelToken<T>;\n\n    /**\n     * @en Execute cancel.\n     * @ja キャンセル実行\n     *\n     * @param reason\n     *  - `en` cancellation reason. this arg is transmitted in promise chain.\n     *  - `ja` キャンセルの理由を指定. `Promise` チェインに伝達される.\n     */\n    cancel(reason: T): void;\n\n    /**\n     * @en Break up cancellation reception.\n     * @ja キャンセル受付を終了\n     */\n    close(): void;\n}\n\n/** @internal */ const _tokens = new WeakMap<CancelToken, CancelTokenContext>();\n\n/** @internal */\nfunction getContext<T = unknown>(instance: CancelToken<T>): CancelTokenContext<T> {\n    if (!_tokens.has(instance)) {\n        throw new TypeError('The object is not a valid CancelToken.');\n    }\n    return _tokens.get(instance) as CancelTokenContext<T>;\n}\n\n/**\n * @en The token object to which unification processing for asynchronous processing cancellation is offered. <br>\n *     Origin is `CancellationToken` of `.NET Framework`.\n * @ja 非同期処理キャンセルのための統一処理を提供するトークンオブジェクト <br>\n *     オリジナルは `.NET Framework` の `CancellationToken`\n *\n * @see https://docs.microsoft.com/en-us/dotnet/standard/threading/cancellation-in-managed-threads\n *\n * @example <br>\n *\n * ```ts\n * import { CancelToken } from '@cdp/runtime';\n * ```\n *\n * - Basic Usage\n *\n * ```ts\n * const token = new CancelToken((cancel, close) => {\n *   button1.onclick = ev => cancel(new Error('Cancel'));\n *   button2.onclick = ev => close();\n * });\n * ```\n *\n * or\n *\n * ```ts\n * const { cancel, close, token } = CancelToken.source();\n * button1.onclick = ev => cancel(new Error('Cancel'));\n * button2.onclick = ev => close();\n * ```\n *\n * - Use with Promise\n *\n * ```ts\n * const { cancel, close, token } = CancelToken.source();\n * const promise = new Promise((ok, ng) => { ... }, token);\n * promise\n *   .then(...)\n *   .then(...)\n *   .then(...)\n *   .catch(reason => {\n *     // check reason\n *   });\n * ```\n *\n * - Register & Unregister callback(s)\n *\n * ```ts\n * const { cancel, close, token } = CancelToken.source();\n * const subscription = token.register(reason => {\n *   console.log(reason.message);\n * });\n * if (someCase) {\n *   subscription.unsubscribe();\n * }\n * ```\n */\nexport class CancelToken<T = unknown> {\n\n    /**\n     * @en Create {@link CancelTokenSource} instance.\n     * @ja {@link CancelTokenSource} インスタンスの取得\n     *\n     * @param linkedTokens\n     *  - `en` relating already made {@link CancelToken} instance.\n     *        You can attach to the token that to be a cancellation target.\n     *  - `ja` すでに作成された {@link CancelToken} 関連付ける場合に指定\n     *        渡された token はキャンセル対象として紐づけられる\n     */\n    public static source<T = unknown>(...linkedTokens: CancelToken[]): CancelTokenSource<T> {\n        let cancel!: (reason: T) => void;\n        let close!: () => void;\n        const token = new CancelToken<T>((onCancel, onClose) => {\n            cancel = onCancel;\n            close = onClose;\n        }, ...linkedTokens);\n        return Object.freeze({ token, cancel, close });\n    }\n\n    /**\n     * constructor\n     *\n     * @param executor\n     *  - `en` executer that has `cancel` and `close` callback.\n     *  - `ja` キャンセル/クローズ 実行コールバックを指定\n     * @param linkedTokens\n     *  - `en` relating already made {@link CancelToken} instance.\n     *        You can attach to the token that to be a cancellation target.\n     *  - `ja` すでに作成された {@link CancelToken} 関連付ける場合に指定\n     *        渡された token はキャンセル対象として紐づけられる\n     */\n    constructor(\n        executor: (cancel: (reason: T) => void, close: () => void) => void,\n        ...linkedTokens: CancelToken[]\n    ) {\n        verify('instanceOf', CancelToken, this);\n        verify('typeOf', 'function', executor);\n\n        const linkedTokenSet = new Set(linkedTokens.filter(t => _tokens.has(t)));\n        let status = CancelTokenState.OPEN;\n        for (const t of linkedTokenSet) {\n            status |= getContext(t).status;\n        }\n\n        const context: CancelTokenContext<T> = {\n            broker: new EventBroker(),\n            subscriptions: new Set(),\n            reason: undefined,\n            status,\n        };\n        _tokens.set(this, Object.seal(context));\n\n        const cancel = this[_cancel];\n        const close = this[_close];\n        if (status === CancelTokenState.OPEN) {\n            for (const t of linkedTokenSet) {\n                context.subscriptions.add(t.register(cancel.bind(this)));\n                this.register(cancel.bind(t));\n            }\n        }\n\n        executor(cancel.bind(this), close.bind(this));\n    }\n\n    /**\n     * @en Cancellation reason accessor.\n     * @ja キャンセルの原因取得\n     */\n    get reason(): T | undefined {\n        return getContext(this).reason;\n    }\n\n    /**\n     * @en Enable cancellation state accessor.\n     * @ja キャンセル可能か判定\n     */\n    get cancelable(): boolean {\n        return getContext(this).status === CancelTokenState.OPEN;\n    }\n\n    /**\n     * @en Cancellation requested state accessor.\n     * @ja キャンセルを受け付けているか判定\n     */\n    get requested(): boolean {\n        return !!(getContext(this).status & CancelTokenState.REQUESTED);\n    }\n\n    /**\n     * @en Cancellation closed state accessor.\n     * @ja キャンセル受付を終了しているか判定\n     */\n    get closed(): boolean {\n        return !!(getContext(this).status & CancelTokenState.CLOSED);\n    }\n\n    /**\n     * @en `toString` tag override.\n     * @ja `toString` タグのオーバーライド\n     */\n    protected get [Symbol.toStringTag](): 'CancelToken' { return 'CancelToken'; }\n\n    /**\n     * @en Register custom cancellation callback.\n     * @ja キャンセル時のカスタム処理の登録\n     *\n     * @param onCancel\n     *  - `en` cancel operation callback\n     *  - `ja` キャンセルコールバック\n     * @returns\n     *  - `en` `Subscription` instance.\n     *        You can revoke cancellation to call `unsubscribe` method.\n     *  - `ja` `Subscription` インスタンス\n     *        `unsubscribe` メソッドを呼ぶことでキャンセルを無効にすることが可能\n     */\n    public register(onCancel: (reason: T) => unknown): Subscription {\n        const context = getContext(this);\n        if (!this.cancelable) {\n            return invalidSubscription;\n        }\n        return context.broker.on('cancel', onCancel);\n    }\n\n    /** @internal */\n    private [_cancel](reason: T): void {\n        const context = getContext(this);\n        verify('notNullish', reason);\n        if (!this.cancelable) {\n            return;\n        }\n        context.reason = reason;\n        context.status |= CancelTokenState.REQUESTED;\n        for (const s of context.subscriptions) {\n            s.unsubscribe();\n        }\n        context.broker.trigger('cancel', reason);\n        void Promise.resolve().then(() => this[_close]());\n    }\n\n    /** @internal */\n    private [_close](): void {\n        const context = getContext(this);\n        if (this.closed) {\n            return;\n        }\n        context.status |= CancelTokenState.CLOSED;\n        for (const s of context.subscriptions) {\n            s.unsubscribe();\n        }\n        context.subscriptions.clear();\n        context.broker.off();\n    }\n}\n","/* eslint-disable\n    no-global-assign,\n    @typescript-eslint/unbound-method,\n */\n\nimport {\n    isFunction,\n    verify,\n    getConfig,\n} from '@cdp/core-utils';\nimport { Subscription } from '@cdp/events';\nimport { CancelToken } from './cancel-token';\n\ndeclare global {\n\n    interface PromiseConstructor {\n        new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: unknown) => void) => void, cancelToken?: CancelToken | null): Promise<T>;\n        resolve<T>(value?: T | PromiseLike<T>, cancelToken?: CancelToken | null): Promise<T>;\n    }\n\n}\n\n/**\n * @en `Native Promise` constructor <br>\n *     Can be used as an alias for `Native Promise`.\n * @ja `Native Promise` コンストラクタ <br>\n *     `Native Promise` のエイリアスとして使用可能\n */\nconst NativePromise = Promise;\n\n/** @internal */ const nativeThen = NativePromise.prototype.then;\n/** @internal */ const _create = Symbol('create');\n/** @internal */ const _tokens = new WeakMap<Promise<unknown>, CancelToken>();\n\n/**\n * @en Extended `Promise` class which enabled cancellation. <br>\n *     `Native Promise` constructor is overridden by framework default behaviour.\n * @ja キャンセルを可能にした `Promise` 拡張クラス <br>\n *     既定で `Native Promise` をオーバーライドする.\n */\nclass CancelablePromise<T> extends Promise<T> {\n\n    /**\n     * @en Overriding of the default constructor used for generation of an object.\n     * @ja オブジェクトの生成に使われるデフォルトコンストラクタのオーバーライド\n     *\n     * @internal\n     */\n    static get [Symbol.species](): PromiseConstructor { return NativePromise; }\n\n    /**\n     * @en Creates a new resolved promise for the provided value.\n     * @ja 新規に解決済み promise インスタンスを作成\n     *\n     * @internal\n     *\n     * @param value\n     *  - `en` the value transmitted in promise chain.\n     *  - `ja` `Promise` に伝達する値\n     * @param cancelToken\n     *  - `en` {@link CancelToken} instance create from {@link CancelToken.source | CancelToken.source}().\n     *  - `ja` {@link CancelToken.source | CancelToken.source}() より作成した {@link CancelToken} インスタンスを指定\n     */\n    static resolve<T>(value?: T | PromiseLike<T>, cancelToken?: CancelToken | null): CancelablePromise<T> {\n        return this[_create](super.resolve(value), cancelToken);\n    }\n\n    /** @internal private construction */\n    private static [_create]<T, TResult1 = T, TResult2 = never>(\n        src: Promise<T>,\n        token?: CancelToken | null,\n        thenArgs?: [\n            ((value: T) => TResult1 | PromiseLike<TResult1>) | null | undefined,\n            ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null | undefined\n        ] | null\n    ): CancelablePromise<TResult1 | TResult2> {\n        verify('instanceOf', NativePromise, src);\n\n        let p: Promise<T | TResult1 | TResult2>;\n        if (!(token instanceof CancelToken)) {\n            p = src;\n        } else if (thenArgs && (!isFunction(thenArgs[0]) || isFunction(thenArgs[1]))) {\n            p = src;\n        } else if (token.cancelable) {\n            let s: Subscription;\n            p = new NativePromise((resolve, reject) => {\n                s = token.register(reject);\n                nativeThen.call(src, resolve, reject);\n            });\n            const dispose = (): void => {\n                s.unsubscribe();\n                _tokens.delete(p);\n            };\n            p.then(dispose, dispose);\n        } else if (token.requested) {\n            p = super.reject(token.reason);\n        } else if (token.closed) {\n            p = src;\n        } else {\n            throw new Error('Unexpected Exception');\n        }\n\n        if (thenArgs) {\n            p = nativeThen.apply(p, thenArgs);\n        }\n        if (token?.cancelable) {\n            _tokens.set(p, token);\n        }\n\n        p instanceof this || Object.setPrototypeOf(p, this.prototype);\n\n        return p as CancelablePromise<TResult1 | TResult2>;\n    }\n\n    /**\n     * constructor\n     *\n     * @param executor\n     *  - `en` A callback used to initialize the promise. This callback is passed two arguments `resolve` and `reject`.\n     *  - `ja` promise の初期化に使用するコールバックを指定. `resolve` と `reject` の2つの引数を持つ\n     * @param cancelToken\n     *  - `en` {@link CancelToken} instance create from {@link CancelToken.source | CancelToken.source}().\n     *  - `ja` {@link CancelToken.source | CancelToken.source}() より作成した {@link CancelToken} インスタンスを指定\n     */\n    constructor(\n        executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: unknown) => void) => void,\n        cancelToken?: CancelToken | null\n    ) {\n        super(executor);\n        return CancelablePromise[_create](this, cancelToken);\n    }\n\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     *\n     * @internal\n     *\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(\n        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n        onrejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null\n    ): Promise<TResult1 | TResult2> {\n        return CancelablePromise[_create](this, _tokens.get(this), [onfulfilled, onrejected]);\n    }\n\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     *\n     * @internal\n     *\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult2 = never>(onrejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null): Promise<T | TResult2> {\n        return this.then(undefined, onrejected);\n    }\n\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). <br>\n     * The resolved value cannot be modified from the callback.\n     *\n     * @internal\n     *\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | null): Promise<T> {\n        return CancelablePromise[_create](super.finally(onfinally), _tokens.get(this));\n    }\n\n}\n\n/**\n * @en Switch the global `Promise` constructor `Native Promise` or {@link CancelablePromise}. <br>\n *     `Native Promise` constructor is overridden by framework default behaviour.\n * @ja グローバル `Promise` コンストラクタを `Native Promise` または {@link CancelablePromise} に切り替え <br>\n *     既定で `Native Promise` をオーバーライドする.\n *\n * @param enable\n *  - `en` `true`: use {@link CancelablePromise} /  `false`: use `Native Promise`\n *  - `ja` `true`: {@link CancelablePromise} を使用 / `false`: `Native Promise` を使用\n */\nexport function extendPromise(enable: boolean): PromiseConstructor {\n    if (enable) {\n        Promise = CancelablePromise;\n    } else {\n        Promise = NativePromise;\n    }\n    return Promise;\n}\n\n/** @internal global config options */\ninterface GlobalConfig {\n    noAutomaticNativeExtend: boolean;\n}\n\n// default: automatic native promise override.\nextendPromise(!getConfig<GlobalConfig>().noAutomaticNativeExtend);\n\nexport {\n    NativePromise,\n    CancelablePromise,\n    CancelablePromise as Promise,\n};\n","import { CancelToken } from './cancel-token';\n\n/**\n * @en Cancelable base option definition.\n * @ja キャンセル可能な基底オプション\n */\nexport interface Cancelable {\n    cancel?: CancelToken;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Wait for promises done. <br>\n *     While control will be returned immediately when `Promise.all()` fails, but this mehtod waits for including failure.\n * @ja `Promise` オブジェクトの終了まで待機 <br>\n *     `Promise.all()` は失敗するとすぐに制御を返すのに対し、失敗も含めて待つ `Promise` オブジェクトを返却\n *\n * @param promises\n *  - `en` Promise instance array\n *  - `ja` Promise インスタンスの配列を指定\n */\nexport function wait(promises: Promise<unknown>[]): Promise<unknown[]> {\n    const safePromises = promises.map((promise) => promise.catch((e) => e));\n    return Promise.all(safePromises);\n}\n\n/**\n * @en Cancellation checker method. <br>\n *     It's practicable by `async function`.\n * @ja キャンセルチェッカー <br>\n *     `async function` で使用可能\n *\n * @example <br>\n *\n * ```ts\n *  async function someFunc(token: CancelToken): Promise<{}> {\n *    await checkCanceled(token);\n *    return {};\n *  }\n * ```\n *\n * @param token\n *  - `en` {@link CancelToken} reference. (enable `undefined`)\n *  - `ja` {@link CancelToken} を指定 (undefined 可)\n */\nexport function checkCanceled(token: CancelToken | undefined): Promise<void> {\n    return Promise.resolve(undefined, token);\n}\n\n/**\n * @en Check the status of the promise instance. <br>\n *     It's practicable by `async function`.\n * @ja Promise インスタンスの状態を確認 <br>\n *     `async function` で使用可能\n *\n * @example <br>\n *\n * ```ts\n * import { checkStatus } from '@cdp/runtime';\n *\n * let promise: Promise<unknown>; // some promise instance\n * :\n * const status = await checkStatus(promise);\n * console.log(status);\n * // 'pending' or 'fulfilled' or 'rejected'\n * ```\n *\n * @param promise\n *  - `en` Promise instance\n *  - `ja` Promise インスタンスを指定\n */\nexport function checkStatus(promise: Promise<unknown>): Promise<'pending' | 'fulfilled' | 'rejected'> {\n    const pending = {};\n    /*\n     * Promise 派生クラスでも使用するためには, `instance.constructor.race` でアクセスする必要がある\n     * promise が派生クラスである場合, Promise.race() を使用すると必ず `pending` object が返されてしまう\n     */\n    return (promise.constructor as PromiseConstructor).race([promise, pending])\n        .then(v => (v === pending) ? 'pending' : 'fulfilled', () => 'rejected');\n}\n","import {\n    UnknownFunction,\n    isFunction,\n    noop,\n} from '@cdp/core-utils';\nimport { CancelToken } from './cancel-token';\nimport { CancelablePromise, NativePromise } from './cancelable-promise';\nimport { checkStatus } from './utils';\n\n/**\n * @internal\n * Promise のクラス拡張は then chain を適切に管理するための作法が存在し、基本的には以下の3つの方針がある\n * - 1. executor を引数にとる constructor を提供する\n * - 2. static get [Symbol.species]() { return NativePromise; } を提供する\n * - 3. Deferred.prototype.constructor = NativePromise のように prototype.constructor を上書きする (Hacking)\n *\n * `Deferred` クラスでは以下の理由により, `1`, `2` の対応を行う. \n * - checkStatus() を Promise 派生クラスでも使用するためには, `instance.constructor.race` でアクセスする必要がある\n *   - `TypeError: Promise resolve or reject function is not callable` 対策のための `1`\n * - `then`, `catch`, `finaly` 時に生成されるインスタンスは `Deferred` である必要は無いため `2`\n *\n * @see https://stackoverflow.com/questions/48158730/extend-javascript-promise-and-resolve-or-reject-it-inside-constructor\n */\nconst resolveArgs = (arg1?: UnknownFunction | CancelToken | null, arg2?: CancelToken | null): [UnknownFunction, CancelToken | null | undefined] => {\n    if (isFunction(arg1)) {\n        return [arg1, arg2];\n    } else {\n        return [noop, arg1];\n    }\n};\n\n/**\n * @en `Deferred` object class that can operate `reject` and` resolve` from the outside.\n * @ja `reject`, ` resolve` を外部より操作可能な `Deferred` オブジェクトクラス\n * \n * @example <br>\n *\n * ```ts\n * const df = new Deferred();\n * df.resolve();\n * df.reject('reason');\n * \n * await df;\n * ```\n */\nexport class Deferred<T = void> extends CancelablePromise<T> {\n    readonly resolve!: (arg: T | PromiseLike<T>) => void;\n    readonly reject!: (reason?: unknown) => void;\n\n    /**\n     * constructor\n     *\n     * @param cancelToken\n     *  - `en` {@link CancelToken} instance create from {@link CancelToken.source | CancelToken.source}().\n     *  - `ja` {@link CancelToken.source | CancelToken.source}() より作成した {@link CancelToken} インスタンスを指定\n     */\n    constructor(cancelToken?: CancelToken | null);\n\n    /**\n     * constructor\n     *\n     * @param executor\n     *  - `en` A callback used to initialize the promise. This callback is passed two arguments `resolve` and `reject`.\n     *  - `ja` promise の初期化に使用するコールバックを指定. `resolve` と `reject` の2つの引数を持つ\n     * @param cancelToken\n     *  - `en` {@link CancelToken} instance create from {@link CancelToken.source | CancelToken.source}().\n     *  - `ja` {@link CancelToken.source | CancelToken.source}() より作成した {@link CancelToken} インスタンスを指定\n     */\n    constructor(\n        executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: unknown) => void) => void,\n        cancelToken?: CancelToken | null\n    );\n\n    constructor(arg1?: UnknownFunction | CancelToken | null, arg2?: CancelToken | null) {\n        const [executor, cancelToken] = resolveArgs(arg1, arg2);\n        const publications = {};\n        super((resolve, reject) => {\n            Object.assign(publications, { resolve, reject });\n            executor(resolve, reject);\n        }, cancelToken);\n        Object.assign(this, publications); // eslint-disable-line @typescript-eslint/no-floating-promises\n    }\n\n    /**\n     * @en Check the status of this instance. <br>\n     *     It's practicable by `async function`.\n     * @ja Deferred インスタンスの状態を確認 <br>\n     *     `async function` で使用可能\n     */\n    status(): Promise<'pending' | 'fulfilled' | 'rejected'> {\n        return checkStatus(this);\n    }\n\n    /** @internal */\n    get [Symbol.toStringTag](): 'Deferred' { return 'Deferred'; }\n    /** @internal */\n    static get [Symbol.species](): PromiseConstructor { return NativePromise; }\n}\n","import {\n    UnknownObject,\n    isString,\n    isSymbol,\n    className,\n} from '@cdp/core-utils';\nimport { EventBroker } from '@cdp/events';\n\n/** @internal EventBrokerProxy */\nexport class EventBrokerProxy<Event extends object> {\n    private _broker?: EventBroker<Event>;\n    public get(): EventBroker<Event> {\n        return this._broker ?? (this._broker = new EventBroker());\n    }\n}\n\n/** @internal */ export const _internal      = Symbol('internal');\n/** @internal */ export const _notify        = Symbol('notify');\n/** @internal */ export const _stockChange   = Symbol('stock-change');\n/** @internal */ export const _notifyChanges = Symbol('notify-changes');\n\n/** @internal */\nexport function verifyObservable(x: unknown): void | never {\n    if (!x || !(x as UnknownObject)[_internal]) {\n        throw new TypeError(`The object passed is not an IObservable.`);\n    }\n}\n\n/** @internal */\nexport function verifyValidKey(key: unknown): void | never {\n    if (isString(key) || isSymbol(key)) {\n        return;\n    }\n    throw new TypeError(`Type of ${className(key)} is not a valid key.`);\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    UnknownObject,\n    Accessible,\n    NonFunctionProperties,\n    NonFunctionPropertyNames,\n    isString,\n    isArray,\n    verify,\n    post,\n    deepMerge,\n    deepEqual,\n} from '@cdp/core-utils';\nimport { Subscription, EventBroker } from '@cdp/events';\nimport {\n    EventBrokerProxy,\n    _internal,\n    _notify,\n    _stockChange,\n    _notifyChanges,\n    verifyObservable,\n} from './internal';\nimport { ObservableState, IObservable } from './common';\n\n/** @internal */\ninterface InternalProps {\n    state: ObservableState;\n    changed: boolean;\n    readonly changeMap: Map<PropertyKey, any>;\n    readonly broker: EventBrokerProxy<any>;\n}\n\n/** @internal */\nconst _proxyHandler: ProxyHandler<ObservableObject> = {\n    set(target: Accessible<ObservableObject>, p, value, receiver) {\n        if (!isString(p)) {\n            return Reflect.set(target, p, value, receiver);\n        }\n        const oldValue = target[p];\n        if (ObservableState.DISABLED !== target[_internal].state && value !== oldValue) {\n            target[_stockChange](p, oldValue);\n        }\n        return Reflect.set(target, p, value, receiver);\n    },\n};\nObject.freeze(_proxyHandler);\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Observable key type definition.\n * @ja 購読可能なキーの型定義\n */\nexport type ObservableKeys<T extends ObservableObject> = NonFunctionPropertyNames<T>;\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en The object class which change can be observed.\n * @ja オブジェクトの変更を監視できるオブジェクトクラス\n *\n * @example <br>\n *\n * - Basic Usage\n *\n * ```ts\n * class Example extends ObservableObject {\n *   public a: number = 0;\n *   public b: number = 0;\n *   public get sum(): number {\n *       return this.a + this.b;\n *   }\n * }\n *\n * const observable = new Example();\n *\n * function onNumChange(newValue: number, oldValue: number, key: string) {\n *   console.log(`${key} changed from ${oldValue} to ${newValue}.`);\n * }\n * observable.on(['a', 'b'], onNumChange);\n *\n * // update\n * observable.a = 100;\n * observable.b = 200;\n *\n * // console out from `async` event loop.\n * // => 'a changed from 0 to 100.'\n * // => 'b changed from 0 to 200.'\n *\n * :\n *\n * function onSumChange(newValue: number, oldValue: number) {\n *   console.log(`sum changed from ${oldValue} to ${newVaue}.`);\n * }\n * observable.on('sum', onSumChange);\n *\n * // update\n * observable.a = 100; // nothing reaction because of no change properties.\n * observable.a = 200;\n *\n * // console out from `async` event loop.\n * // => 'sum changed from 300 to 400.'\n * ```\n */\nexport abstract class ObservableObject implements IObservable {\n    /** @internal */\n    private readonly [_internal]!: InternalProps;\n\n    /**\n     * constructor\n     *\n     * @param state\n     *  - `en` initial state. default: {@link ObservableState.ACTIVE | ObservableState.ACTIVE}\n     *  - `ja` 初期状態 既定: {@link ObservableState.ACTIVE | ObservableState.ACTIVE}\n     */\n    constructor(state = ObservableState.ACTIVE) {\n        verify('instanceOf', ObservableObject, this);\n        const internal: InternalProps = {\n            state,\n            changed: false,\n            changeMap: new Map(),\n            broker: new EventBrokerProxy<this>(),\n        };\n        Object.defineProperty(this, _internal, { value: Object.seal(internal) });\n        return new Proxy(this, _proxyHandler);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IObservable\n\n    /**\n     * @en Subscrive property changes.\n     * @ja プロパティ変更購読設定 (全プロパティ監視)\n     *\n     * @param property\n     *  - `en` wild cord signature.\n     *  - `ja` ワイルドカード\n     * @param listener\n     *  - `en` callback function of the property change.\n     *  - `ja` プロパティ変更通知コールバック関数\n     */\n    on(property: '@', listener: (context: ObservableObject) => unknown): Subscription;\n\n    /**\n     * @en Subscrive property change(s).\n     * @ja プロパティ変更購読設定\n     *\n     * @param property\n     *  - `en` target property.\n     *  - `ja` 対象のプロパティ\n     * @param listener\n     *  - `en` callback function of the property change.\n     *  - `ja` プロパティ変更通知コールバック関数\n     */\n    on<K extends ObservableKeys<this>>(property: K | K[], listener: (newValue: this[K], oldValue: this[K], key: K) => unknown): Subscription;\n\n    on<K extends ObservableKeys<this>>(property: K | K[], listener: (newValue: this[K], oldValue: this[K], key: K) => unknown): Subscription {\n        verifyObservable(this);\n        const { changeMap, broker } = this[_internal];\n        const result = broker.get().on(property, listener);\n        if (0 < changeMap.size) {\n            const props = isArray(property) ? property : [property];\n            for (const prop of props) {\n                changeMap.has(prop) || changeMap.set(prop, this[prop]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @en Unsubscribe property changes)\n     * @ja プロパティ変更購読解除 (全プロパティ監視)\n     *\n     * @param property\n     *  - `en` wild cord signature.\n     *  - `ja` ワイルドカード\n     * @param listener\n     *  - `en` callback function of the property change.\n     *  - `ja` プロパティ変更通知コールバック関数\n     */\n    off(property: '@', listener?: (context: ObservableObject) => any): void;\n\n    /**\n     * @en Unsubscribe property change(s).\n     * @ja プロパティ変更購読解除\n     *\n     * @param property\n     *  - `en` target property.\n     *         When not set this parameter, everything is released.\n     *  - `ja` 対象のプロパティ\n     *         指定しない場合はすべて解除\n     * @param listener\n     *  - `en` callback function of the property change.\n     *         When not set this parameter, all same `channel` listeners are released.\n     *  - `ja` プロパティ変更通知コールバック関数\n     *         指定しない場合は同一 `channel` すべてを解除\n     */\n    off<K extends ObservableKeys<this>>(property?: K | K[], listener?: (newValue: this[K], oldValue: this[K], key: K) => unknown): void;\n\n    off<K extends ObservableKeys<this>>(property?: K | K[], listener?: (newValue: this[K], oldValue: this[K], key: K) => unknown): void {\n        verifyObservable(this);\n        this[_internal].broker.get().off(property, listener);\n    }\n\n    /**\n     * @en Suspend or disable the event observation state.\n     * @ja イベント購読状態のサスペンド\n     *\n     * @param noRecord\n     *  - `en` `true`: not recording property changes and clear changes. / `false`: property changes are recorded and fired when {@link resume}() callded. (default)\n     *  - `ja` `true`: プロパティ変更も記録せず, 現在の記録も破棄 / `false`: プロパティ変更は記録され, {@link resume}() 時に発火する (既定)\n     */\n    suspend(noRecord = false): this {\n        verifyObservable(this);\n        this[_internal].state = noRecord ? ObservableState.DISABLED : ObservableState.SUSEPNDED;\n        if (noRecord) {\n            this[_internal].changeMap.clear();\n        }\n        return this;\n    }\n\n    /**\n     * @en Resume the event observation state.\n     * @ja イベント購読状態のリジューム\n     */\n    resume(): this {\n        verifyObservable(this);\n        const internal = this[_internal];\n        if (ObservableState.ACTIVE !== internal.state) {\n            internal.state = ObservableState.ACTIVE;\n            void post(() => this[_notifyChanges]());\n        }\n        return this;\n    }\n\n    /**\n     * @en observation state\n     * @ja 購読可能状態\n     */\n    getObservableState(): ObservableState {\n        verifyObservable(this);\n        return this[_internal].state;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IObservableEventBrokerAccess\n\n    /** @internal */\n    getBroker(): EventBroker<NonFunctionProperties<this>> {\n        const { broker } = this[_internal];\n        return broker.get();\n    }\n\n///////////////////////////////////////////////////////////////////////\n// static methods:\n\n    /**\n     * @en Create {@link ObservableObject} from any object.\n     * @ja 任意のオブジェクトから {@link ObservableObject} を生成\n     *\n     * @example <br>\n     *\n     * ```ts\n     * const observable = ObservableObject.from({ a: 1, b: 1 });\n     * function onNumChange(newValue: number, oldValue: number, key: string) {\n     *   console.log(`${key} changed from ${oldValue} to ${newValue}.`);\n     * }\n     * observable.on(['a', 'b'], onNumChange);\n     *\n     * // update\n     * observable.a = 100;\n     * observable.b = 200;\n     *\n     * // console out from `async` event loop.\n     * // => 'a changed from 1 to 100.'\n     * // => 'b changed from 1 to 200.'\n     * ```\n     */\n    public static from<T extends object>(src: T): ObservableObject & T {\n        const observable = deepMerge(new class extends ObservableObject { }(ObservableState.DISABLED), src);\n        observable.resume();\n        return observable as any;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// protected mehtods:\n\n    /**\n     * @en Force notify property change(s) in spite of active state.\n     * @ja アクティブ状態にかかわらず強制的にプロパティ変更通知を発行\n     */\n    protected notify(...properties: string[]): void {\n        verifyObservable(this);\n        if (0 === properties.length) {\n            return;\n        }\n\n        const { changeMap } = this[_internal];\n        const keyValue = new Map<PropertyKey, [any, any]>();\n        for (const key of properties) {\n            const newValue = (this as UnknownObject)[key];\n            const oldValue = changeMap.has(key) ? changeMap.get(key) : newValue;\n            keyValue.set(key, [newValue, oldValue]);\n            if (Object.prototype.hasOwnProperty.call(this, key)) {\n                this[_internal].changed = true;\n            }\n        }\n\n        this[_notify](keyValue);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// private mehtods:\n\n    /** @internal */\n    private [_stockChange](p: string, oldValue: any): void {\n        const { state, changeMap, broker } = this[_internal];\n        this[_internal].changed = true;\n        if (0 === changeMap.size) {\n            changeMap.set(p, oldValue);\n            for (const k of broker.get().channels()) {\n                changeMap.has(k) || changeMap.set(k, (this as UnknownObject)[k]);\n            }\n            if (ObservableState.ACTIVE === state) {\n                void post(() => this[_notifyChanges]());\n            }\n        } else {\n            changeMap.has(p) || changeMap.set(p, oldValue);\n        }\n    }\n\n    /** @internal */\n    private [_notifyChanges](): void {\n        const { state, changeMap } = this[_internal];\n        if (ObservableState.ACTIVE !== state) {\n            return;\n        }\n        const keyValuePairs = new Map<PropertyKey, [any, any]>();\n        for (const [key, oldValue] of changeMap) {\n            const curValue = (this as UnknownObject)[key];\n            if (!deepEqual(oldValue, curValue)) {\n                keyValuePairs.set(key, [curValue, oldValue]);\n            }\n        }\n        this[_notify](keyValuePairs);\n    }\n\n    /** @internal */\n    private [_notify](keyValue: Map<PropertyKey, [any, any]>): void {\n        const { changed, changeMap, broker } = this[_internal];\n        changeMap.clear();\n        this[_internal].changed = false;\n        const eventBroker = broker.get();\n        for (const [key, values] of keyValue) {\n            (eventBroker as any).trigger(key, ...values, key);\n        }\n        if (changed) {\n            eventBroker.trigger('@', this);\n        }\n    }\n}\n","/* eslint-disable\n    prefer-rest-params,\n */\n\nimport {\n    UnknownFunction,\n    Accessible,\n    Writable,\n    isNumber,\n    verify,\n    post,\n} from '@cdp/core-utils';\nimport { Subscription, EventBroker } from '@cdp/events';\nimport {\n    EventBrokerProxy,\n    _internal,\n    _notify,\n    _stockChange,\n    _notifyChanges,\n    verifyObservable,\n} from './internal';\nimport { ObservableState, IObservable } from './common';\n\n/**\n * @en Array change type information. <br>\n *     The value is suitable for the number of fluctuation of the element.\n * @ja 配列変更通知のタイプ <br>\n *     値は要素の増減数に相当\n *\n */\nexport const enum ArrayChangeType {\n    REMOVE = -1,\n    UPDATE = 0,\n    INSERT = 1,\n}\n\n/**\n * @en Array change record information.\n * @ja 配列変更情報\n */\nexport interface ArrayChangeRecord<T> {\n    /**\n     * @en The change type information.\n     * @ja 配列変更情報の識別子\n     */\n    readonly type: ArrayChangeType;\n\n    /**\n     * @en The change type information. <br>\n     *     ※ [Attention] The index will be different from the actual location when array size changed because that determines element operation unit.\n     * @ja 変更が発生した配列内の位置の index <br>\n     *     ※ [注意] オペレーション単位の index となり, 要素が増減する場合は実際の位置と異なることがある\n     */\n    readonly index: number;\n\n    /**\n     * @en New element's value.\n     * @ja 要素の新しい値\n     */\n    readonly newValue?: T;\n\n    /**\n     * @en Old element's value.\n     * @ja 要素の古い値\n     */\n    readonly oldValue?: T;\n}\ntype MutableChangeRecord<T> = Writable<ArrayChangeRecord<T>>;\n\n//__________________________________________________________________________________________________//\n\n/** @internal */\ninterface IArrayChangeEvent<T> {\n    '@': [ArrayChangeRecord<T>[]];\n}\n\n/** @internal */\ninterface InternalProps<T = unknown> {\n    state: ObservableState;\n    byMethod: boolean;\n    records: MutableChangeRecord<T>[];\n    readonly indexes: Set<number>;\n    readonly broker: EventBrokerProxy<IArrayChangeEvent<T>>;\n}\n\n/** @internal */\nconst _proxyHandler: ProxyHandler<ObservableArray> = {\n    defineProperty(target: Accessible<ObservableArray, number>, p, attributes) {\n        const internal = target[_internal];\n        if (ObservableState.DISABLED === internal.state || internal.byMethod || !Object.prototype.hasOwnProperty.call(attributes, 'value')) {\n            return Reflect.defineProperty(target, p, attributes);\n        }\n        const oldValue = target[p];\n        const newValue = attributes.value;\n        // eslint-disable-next-line eqeqeq\n        if ('length' === p && newValue != oldValue) { // Do NOT use strict inequality (!==)\n            const oldLength = oldValue >>> 0;\n            const newLength = newValue >>> 0;\n            const stock = (): void => {\n                const scrap = newLength < oldLength && target.slice(newLength);\n                if (scrap) { // newLength < oldLength\n                    for (let i = oldLength; --i >= newLength;) {\n                        target[_stockChange](ArrayChangeType.REMOVE, i, undefined, scrap[i - newLength]);\n                    }\n                } else {     // oldLength < newLength\n                    for (let i = oldLength; i < newLength; i++) {\n                        target[_stockChange](ArrayChangeType.INSERT, i /*, undefined, undefined */);\n                    }\n                }\n            };\n            const result = Reflect.defineProperty(target, p, attributes);\n            result && stock();\n            return result;\n        } else if (newValue !== oldValue && isValidArrayIndex(p)) {\n            const i = p as unknown as number >>> 0;\n            const type: ArrayChangeType = Number(i >= target.length); // INSERT or UPDATE\n            const result = Reflect.defineProperty(target, p, attributes);\n            result && target[_stockChange](type, i, newValue, oldValue);\n            return result;\n        } else {\n            return Reflect.defineProperty(target, p, attributes);\n        }\n    },\n    deleteProperty(target: Accessible<ObservableArray, number>, p) {\n        const internal = target[_internal];\n        if (ObservableState.DISABLED === internal.state || internal.byMethod || !Object.prototype.hasOwnProperty.call(target, p)) {\n            return Reflect.deleteProperty(target, p);\n        }\n        const oldValue = target[p];\n        const result = Reflect.deleteProperty(target, p);\n        result && isValidArrayIndex(p) && target[_stockChange](ArrayChangeType.UPDATE, p as unknown as number >>> 0, undefined, oldValue);\n        return result;\n    },\n};\nObject.freeze(_proxyHandler);\n\n/** @internal valid array index helper */\nfunction isValidArrayIndex<T>(index: T): boolean {\n    const s = String(index);\n    const n = Math.trunc(s as unknown as number);\n    return String(n) === s && 0 <= n && n < 0xFFFFFFFF;\n}\n\n/** @internal helper for index management */\nfunction findRelatedChangeIndex<T>(records: MutableChangeRecord<T>[], type: ArrayChangeType, index: number): number {\n    const checkType = type === ArrayChangeType.INSERT\n        ? (t: ArrayChangeType) => t === ArrayChangeType.REMOVE\n        : (t: ArrayChangeType) => t !== ArrayChangeType.REMOVE\n        ;\n\n    for (let i = records.length; --i >= 0;) {\n        const value = records[i];\n        if (value.index === index && checkType(value.type)) {\n            return i;\n        } else if (value.index < index && Boolean(value.type)) { // REMOVE or INSERT\n            index -= value.type;\n        }\n    }\n    return -1;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en The array class which change can be observed.\n * @ja 変更監視可能な配列クラス\n *\n * @example <br>\n *\n * - Basic Usage\n *\n * ```ts\n * const obsArray = ObservableArray.from(['a', 'b', 'c']);\n *\n * function onChangeArray(records: ArrayChangeRecord[]) {\n *   console.log(records);\n *   //  [\n *   //    { type: 1, index: 3, newValue: 'x', oldValue: undefined },\n *   //    { type: 1, index: 4, newValue: 'y', oldValue: undefined },\n *   //    { type: 1, index: 5, newValue: 'z', oldValue: undefined }\n *   //  ]\n * }\n * obsArray.on(onChangeArray);\n *\n * function addXYZ() {\n *   obsArray.push('x', 'y', 'z');\n * }\n * ```\n */\nexport class ObservableArray<T = unknown> extends Array<T> implements IObservable { // eslint-disable-line @typescript-eslint/no-unsafe-declaration-merging\n    /** @internal */\n    private readonly [_internal]!: InternalProps<T>;\n\n    /** @final constructor */\n    private constructor() {\n        super(...arguments);\n        verify('instanceOf', ObservableArray, this);\n        const internal: InternalProps<T> = {\n            state: ObservableState.ACTIVE,\n            byMethod: false,\n            records: [],\n            indexes: new Set(),\n            broker: new EventBrokerProxy<IArrayChangeEvent<T>>(),\n        };\n        Object.defineProperty(this, _internal, { value: Object.seal(internal) });\n        const argLength = arguments.length;\n        if (1 === argLength && isNumber(arguments[0])) {\n            const len = arguments[0] >>> 0;\n            for (let i = 0; i < len; i++) {\n                this[_stockChange](ArrayChangeType.INSERT, i /*, undefined */);\n            }\n        } else if (0 < argLength) {\n            for (let i = 0; i < argLength; i++) {\n                this[_stockChange](ArrayChangeType.INSERT, i, arguments[i]);\n            }\n        }\n        return new Proxy(this, _proxyHandler) as ObservableArray<T>;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IObservable\n\n    /**\n     * @en Subscrive array change(s).\n     * @ja 配列変更購読設定\n     *\n     * @param listener\n     *  - `en` callback function of the array change.\n     *  - `ja` 配列変更通知コールバック関数\n     */\n    on(listener: (records: ArrayChangeRecord<T>[]) => unknown): Subscription {\n        verifyObservable(this);\n        return this[_internal].broker.get().on('@', listener);\n    }\n\n    /**\n     * @en Unsubscribe array change(s).\n     * @ja 配列変更購読解除\n     *\n     * @param listener\n     *  - `en` callback function of the array change.\n     *         When not set this parameter, all same `channel` listeners are released.\n     *  - `ja` 配列変更通知コールバック関数\n     *         指定しない場合は同一 `channel` すべてを解除\n     */\n    off(listener?: (records: ArrayChangeRecord<T>[]) => unknown): void {\n        verifyObservable(this);\n        this[_internal].broker.get().off('@', listener);\n    }\n\n    /**\n     * @en Suspend or disable the event observation state.\n     * @ja イベント購読状態のサスペンド\n     *\n     * @param noRecord\n     *  - `en` `true`: not recording property changes and clear changes. / `false`: property changes are recorded and fired when {@link resume}() callded. (default)\n     *  - `ja` `true`: プロパティ変更も記録せず, 現在の記録も破棄 / `false`: プロパティ変更は記録され, {@link resume}() 時に発火する (既定)\n     */\n    suspend(noRecord = false): this {\n        verifyObservable(this);\n        this[_internal].state = noRecord ? ObservableState.DISABLED : ObservableState.SUSEPNDED;\n        if (noRecord) {\n            this[_internal].records = [];\n        }\n        return this;\n    }\n\n    /**\n     * @en Resume of the event subscription state.\n     * @ja イベント購読状態のリジューム\n     */\n    resume(): this {\n        verifyObservable(this);\n        const internal = this[_internal];\n        if (ObservableState.ACTIVE !== internal.state) {\n            internal.state = ObservableState.ACTIVE;\n            void post(() => this[_notifyChanges]());\n        }\n        return this;\n    }\n\n    /**\n     * @en observation state\n     * @ja 購読可能状態\n     */\n    getObservableState(): ObservableState {\n        verifyObservable(this);\n        return this[_internal].state;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// override: Array methods\n\n    /**\n     * Sorts an array.\n     * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.\n     */\n    sort(comparator?: (lhs: T, rhs: T) => number): this {\n        verifyObservable(this);\n        const internal = this[_internal];\n        const old = Array.from(this);\n        internal.byMethod = true;\n        const result = super.sort(comparator);\n        internal.byMethod = false;\n        if (ObservableState.DISABLED !== internal.state) {\n            const len = old.length;\n            for (let i = 0; i < len; i++) {\n                const oldValue = old[i];\n                const newValue = this[i];\n                if (newValue !== oldValue) {\n                    this[_stockChange](ArrayChangeType.UPDATE, i, newValue, oldValue);\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     */\n    splice(start: number, deleteCount?: number): ObservableArray<T>;\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @param items Elements to insert into the array in place of the deleted elements.\n     */\n    splice(start: number, deleteCount: number, ...items: T[]): ObservableArray<T>;\n    splice(start: number, deleteCount?: number, ...items: T[]): ObservableArray<T> {\n        verifyObservable(this);\n        const internal = this[_internal];\n        const oldLen = this.length;\n        internal.byMethod = true;\n        const result = (super.splice as UnknownFunction)(...arguments) as ObservableArray<T>;\n        internal.byMethod = false;\n        if (ObservableState.DISABLED !== internal.state) {\n            start = Math.trunc(start);\n            const from = start < 0 ? Math.max(oldLen + start, 0) : Math.min(start, oldLen);\n            for (let i = result.length; --i >= 0;) {\n                this[_stockChange](ArrayChangeType.REMOVE, from + i, undefined, result[i]);\n            }\n            const len = items.length;\n            for (let i = 0; i < len; i++) {\n                this[_stockChange](ArrayChangeType.INSERT, from + i, items[i]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Removes the first element from an array and returns it.\n     */\n    shift(): T | undefined {\n        verifyObservable(this);\n        const internal = this[_internal];\n        const oldLen = this.length;\n        internal.byMethod = true;\n        const result = super.shift();\n        internal.byMethod = false;\n        if (ObservableState.DISABLED !== internal.state && this.length < oldLen) {\n            this[_stockChange](ArrayChangeType.REMOVE, 0, undefined, result);\n        }\n        return result;\n    }\n\n    /**\n     * Inserts new elements at the start of an array.\n     * @param items  Elements to insert at the start of the Array.\n     */\n    unshift(...items: T[]): number {\n        verifyObservable(this);\n        const internal = this[_internal];\n        internal.byMethod = true;\n        const result = super.unshift(...items);\n        internal.byMethod = false;\n        if (ObservableState.DISABLED !== internal.state) {\n            const len = items.length;\n            for (let i = 0; i < len; i++) {\n                this[_stockChange](ArrayChangeType.INSERT, i, items[i]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: unknown): ObservableArray<U> {\n        /*\n         * [NOTE] original implement is very very high-cost.\n         *        so it's converted native Array once, and restored.\n         *\n         * return (super.map as UnknownFunction)(...arguments);\n         */\n        return ObservableArray.from([...this].map(callbackfn, thisArg));\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IObservableEventBrokerAccess\n\n    /** @internal */\n    getBroker(): EventBroker<IArrayChangeEvent<T>> {\n        const { broker } = this[_internal];\n        return broker.get();\n    }\n\n///////////////////////////////////////////////////////////////////////\n// private mehtods:\n\n    /** @internal */\n    private [_stockChange](type: ArrayChangeType, index: number, newValue?: T, oldValue?: T): void {\n        const { state, indexes, records } = this[_internal];\n        const rci = indexes.has(index) ? findRelatedChangeIndex(records, type, index) : -1;\n        const len = records.length;\n        if (rci >= 0) {\n            const rct = records[rci].type;\n            if (!rct /* UPDATE */) {\n                const prevRecord = records.splice(rci, 1)[0];\n                // UPDATE => UPDATE : UPDATE\n                // UPDATE => REMOVE : INSERT\n                this[_stockChange](type, index, newValue, prevRecord.oldValue);\n            } else {\n                for (let r, i = len; --i > rci;) {\n                    r = records[i];\n                    (r.index >= index) && (r.index -= rct);\n                }\n                const prevRecord = records.splice(rci, 1)[0];\n                if (type !== ArrayChangeType.REMOVE) {\n                    // INSERT => UPDATE : INSERT\n                    // REMOVE => INSERT : UPDATE\n                    this[_stockChange](Number(!type), index, newValue, prevRecord.oldValue);\n                }\n            }\n            return;\n        }\n        indexes.add(index);\n        records[len] = { type, index, newValue, oldValue };\n        if (ObservableState.ACTIVE === state && 0 === len) {\n            void post(() => this[_notifyChanges]());\n        }\n    }\n\n    /** @internal */\n    private [_notifyChanges](): void {\n        const { state, records } = this[_internal];\n        if (ObservableState.ACTIVE !== state || 0 === records.length) {\n            return;\n        }\n        for (const r of records) {\n            Object.freeze(r);\n        }\n        this[_notify](Object.freeze(records) as ArrayChangeRecord<T>[]);\n        this[_internal].records = [];\n    }\n\n    /** @internal */\n    private [_notify](records: ArrayChangeRecord<T>[]): void {\n        const internal = this[_internal];\n        internal.indexes.clear();\n        internal.broker.get().trigger('@', records);\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * Override return type of prototype methods\n */\nexport interface ObservableArray<T> {\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    concat(...items: T[][]): ObservableArray<T>;\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    concat(...items: (T | T[])[]): ObservableArray<T>;\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): this;\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array.\n     */\n    slice(start?: number, end?: number): ObservableArray<T>;\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(callbackfn: (value: T, index: number, array: T[]) => value is S, thisArg?: unknown): ObservableArray<S>;\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(callbackfn: (value: T, index: number, array: T[]) => unknown, thisArg?: unknown): ObservableArray<T>;\n}\n\n/**\n * Override return type of static methods\n */\nexport declare namespace ObservableArray { // eslint-disable-line @typescript-eslint/no-namespace\n    /**\n     * Creates an array from an array-like object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    function from<T>(arrayLike: ArrayLike<T> | Iterable<T>): ObservableArray<T>;\n    /**\n     * Creates an array from an array-like object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    function from<T, U>(arrayLike: ArrayLike<T> | Iterable<T>, mapfn: (this: void, v: T, k: number) => U, thisArg?: undefined): ObservableArray<U>;\n    function from<X, T, U>(arrayLike: ArrayLike<T> | Iterable<T>, mapfn: (this: X, v: T, k: number) => U, thisArg: X): ObservableArray<U>;\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    function of<T>(...items: T[]): ObservableArray<T>;\n}\n","/* eslint-disable\n    @typescript-eslint/no-namespace,\n    @typescript-eslint/no-unused-vars,\n    @typescript-eslint/no-duplicate-enum-values,\n */\n\n/*\n * NOTE: 内部モジュールに `CDP` namespace を使用してしまうと, 外部モジュールでは宣言できなくなる.\n * https://github.com/Microsoft/TypeScript/issues/9611\n */\nnamespace CDP_DECLARE {\n\n    /**\n     * @en Constant definition about range of the result code.\n     * @ja リザルトコードの範囲に関する定数定義\n     */\n    export const enum RESULT_CODE_RANGE {\n        /**\n         * @en The assignable range for the client's local result cord by which expansion is possible.\n         * @ja クライアントが拡張可能なローカルリザルトコードのアサイン可能領域\n         */\n        MAX = 1000,\n        /**\n         * @en Reserved range of framework.\n         * @ja フレームワークの予約領域\n         */\n        RESERVED = 1000,\n    }\n\n    /**\n     * @en The assignment range guideline definition used in the module.\n     * @ja モジュール内で使用するアサイン領域ガイドライン定数定義\n     */\n    export const enum LOCAL_CODE_RANGE_GUIDE {\n        /**\n         * @en The assignment range guideline per 1 module.\n         * @ja 1モジュール当たりに割り当てるアサイン領域ガイドライン\n         */\n        MODULE = 100,\n        /**\n         * @en The assignment range guideline per 1 function.\n         * @ja 1機能当たりに割り当てるアサイン領域ガイドライン\n         */\n        FUNCTION = 20,\n    }\n\n    /**\n     * @en Offset value enumeration for {@link RESULT_CODE}. <br>\n     *     The client can expand a definition in other module.\n     * @ja {@link RESULT_CODE} のオフセット値 <br>\n     *     エラーコード対応するモジュール内で 定義を拡張する.\n     *\n     * @example <br>\n     *\n     * ```ts\n     *  const enum LOCAL_CODE_BASE {\n     *      COMMON      = 0,\n     *      SOMEMODULE  = 1 * LOCAL_CODE_RANGE_GUIDE.FUNCTION,\n     *      SOMEMODULE2 = 2 * LOCAL_CODE_RANGE_GUIDE.FUNCTION,\n     *  }\n     *\n     *  export enum RESULT_CODE {\n     *      SOMEMODULE_DECLARE           = RESULT_CODE_BASE.DECLARE, // for avoid TS2432.\n     *      ERROR_SOMEMODULE_UNEXPECTED  = DECLARE_ERROR_CODE(RESULT_CODE_BASE.SOMEMODULE, LOCAL_CODE_BASE.SOMEMODULE + 1, \"error unexpected.\"),\n     *      ERROR_SOMEMODULE_INVALID_ARG = DECLARE_ERROR_CODE(RESULT_CODE_BASE.SOMEMODULE, LOCAL_CODE_BASE.SOMEMODULE + 2, \"invalid arguments.\"),\n     *  }\n     *  ASSIGN_RESULT_CODE(RESULT_CODE);\n     * ```\n     */\n    export const enum RESULT_CODE_BASE {\n        DECLARE = 9007199254740991, // Number.MAX_SAFE_INTEGER\n        COMMON  = 0,\n        CDP     = 1 * LOCAL_CODE_RANGE_GUIDE.MODULE, // cdp reserved. abs(0 ～ 1000)\n//      MODULE_A = 1 * RESULT_CODE_RANGE.MAX,    // ex) moduleA: abs(1001 ～ 1999)\n//      MODULE_B = 2 * RESULT_CODE_RANGE.MAX,    // ex) moduleB: abs(2001 ～ 2999)\n//      MODULE_C = 3 * RESULT_CODE_RANGE.MAX,    // ex) moduleC: abs(3001 ～ 3999)\n    }\n\n    /**\n     * @en Known CDP module offest definition.\n     * @ja 管轄している CDP モジュールのオフセット定義\n     *\n     * @example <br>\n     *\n     * ```ts\n     * const enum LOCAL_CODE_BASE {\n     *    AJAX = CDP_KNOWN_MODULE.AJAX * LOCAL_CODE_RANGE_GUIDE.FUNCTION,\n     * }\n     *\n     * export enum RESULT_CODE {\n     *   AJAX_DECLARE        = RESULT_CODE_BASE.DECLARE,\n     *   ERROR_AJAX_RESPONSE = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.AJAX + 1, 'network error.'),\n     *   ERROR_AJAX_TIMEOUT  = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.AJAX + 2, 'request timeout.'),\n     * }\n     * ```\n     */\n    export const enum CDP_KNOWN_MODULE {\n        /** `@cdp/ajax` */\n        AJAX = 1,\n        /** `@cdp/i18n` */\n        I18N = 2,\n        /** `@cdp/data-sync`, `@cdp/model`, `@cdp/collection`, `@cdp/view`, `@cdp/router` */\n        MVC  = 3,\n        /** `@cdp/app` */\n        APP  = 4,\n        /** offset for unknown module */\n        OFFSET,\n    }\n\n    /**\n     * @en Common result code for the application.\n     * @ja アプリケーション全体で使用する共通エラーコード定義\n     */\n    export enum RESULT_CODE {\n        /** `en` general success code             <br> `ja` 汎用成功コード                       */\n        SUCCESS = 0,\n        /** `en` general cancel code              <br> `ja` 汎用キャンセルコード                 */\n        ABORT = 1,\n        /** `en` general pending code             <br> `ja` 汎用オペレーション未実行エラーコード */\n        PENDING = 2,\n        /** `en` general success but noop code    <br> `ja` 汎用実行不要コード                   */\n        NOOP = 3,\n        /** `en` general error code               <br> `ja` 汎用エラーコード                     */\n        FAIL = -1,\n        /** `en` general fatal error code         <br> `ja` 汎用致命的エラーコード               */\n        FATAL = -2,\n        /** `en` general not supported error code <br> `ja` 汎用オペレーションエラーコード       */\n        NOT_SUPPORTED = -3,\n    }\n\n    /**\n     * @en Assign declared {@link RESULT_CODE} to root enumeration.\n     *     (It's enable to merge enum in the module system environment.)\n     * @ja 拡張した {@link RESULT_CODE} を ルート enum にアサイン\n     *     モジュールシステム環境においても、enum をマージを可能にする\n     */\n    export function ASSIGN_RESULT_CODE(extend: Record<string, unknown>): void {\n        Object.assign(RESULT_CODE, extend);\n    }\n\n    /** @internal */\n    const _code2message: Record<string, string> = {\n        '0': 'operation succeeded.',\n        '1': 'operation aborted.',\n        '2': 'operation pending.',\n        '3': 'no operation.',\n        '-1': 'operation failed.',\n        '-2': 'unexpected error occured.',\n        '-3': 'operation not supported.',\n    };\n\n    /**\n     * @en Access to error message map.\n     * @ja エラーメッセージマップの取得\n     */\n    export function ERROR_MESSAGE_MAP(): Record<string, string> {\n        return _code2message;\n    }\n\n    /**\n     * @en Generate success code.\n     * @ja 成功コードを生成\n     *\n     * @param base\n     *  - `en` set base offset as {@link RESULT_CODE_BASE}\n     *  - `ja` オフセット値を {@link RESULT_CODE_BASE} として指定\n     * @param code\n     *  - `en` set local code for declaration. ex) '1'\n     *  - `ja` 宣言用のローカルコード値を指定  例) '1'\n     * @param message\n     *  - `en` set error message for help string.\n     *  - `ja` ヘルプストリング用エラーメッセージを指定\n     */\n    export function DECLARE_SUCCESS_CODE(base: RESULT_CODE_BASE, code: number, message?: string): number {\n        return declareResultCode(base, code, message, true);\n    }\n\n    /**\n     * @en Generate error code.\n     * @ja エラーコード生成\n     *\n     * @param base\n     *  - `en` set base offset as {@link RESULT_CODE_BASE}\n     *  - `ja` オフセット値を {@link RESULT_CODE_BASE} として指定\n     * @param code\n     *  - `en` set local code for declaration. ex) '1'\n     *  - `ja` 宣言用のローカルコード値を指定  例) '1'\n     * @param message\n     *  - `en` set error message for help string.\n     *  - `ja` ヘルプストリング用エラーメッセージを指定\n     */\n    export function DECLARE_ERROR_CODE(base: RESULT_CODE_BASE, code: number, message?: string): number {\n        return declareResultCode(base, code, message, false);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// private section:\n\n    /** @internal register for {@link RESULT_CODE} */\n    function declareResultCode(base: RESULT_CODE_BASE, code: number, message: string | undefined, succeeded: boolean): number | never {\n        if (code < 0 || RESULT_CODE_RANGE.MAX <= code) {\n            throw new RangeError(`declareResultCode(), invalid local-code range. [code: ${code}]`);\n        }\n        const signed = succeeded ? 1 : -1;\n        const resultCode = signed * (base as number + code);\n        _code2message[resultCode] = message ? message : (`[CODE: ${resultCode}]`);\n        return resultCode;\n    }\n}\n","import RESULT_CODE              = CDP_DECLARE.RESULT_CODE;\nimport RESULT_CODE_BASE         = CDP_DECLARE.RESULT_CODE_BASE;\nimport RESULT_CODE_RANGE        = CDP_DECLARE.RESULT_CODE_RANGE;\nimport LOCAL_CODE_RANGE_GUIDE   = CDP_DECLARE.LOCAL_CODE_RANGE_GUIDE;\nimport DECLARE_SUCCESS_CODE     = CDP_DECLARE.DECLARE_SUCCESS_CODE;\nimport DECLARE_ERROR_CODE       = CDP_DECLARE.DECLARE_ERROR_CODE;\nimport ASSIGN_RESULT_CODE       = CDP_DECLARE.ASSIGN_RESULT_CODE;\nimport ERROR_MESSAGE_MAP        = CDP_DECLARE.ERROR_MESSAGE_MAP;\n\n/** @internal */\nconst enum Description {\n    UNKNOWN_ERROR_NAME = 'UNKNOWN',\n}\n\nexport {\n    RESULT_CODE,\n    RESULT_CODE_BASE,\n    RESULT_CODE_RANGE,\n    LOCAL_CODE_RANGE_GUIDE,\n    DECLARE_SUCCESS_CODE,\n    DECLARE_ERROR_CODE,\n    ASSIGN_RESULT_CODE,\n};\n\n/**\n * @en Judge fail or not.\n * @ja 失敗判定\n *\n * @param code {@link RESULT_CODE}\n * @returns true: fail result / false: success result\n */\nexport function FAILED(code: number): boolean {\n    return code < 0;\n}\n\n/**\n * @en Judge success or not.\n * @ja 成功判定\n *\n * @param code {@link RESULT_CODE}\n * @returns true: success result / false: fail result\n */\nexport function SUCCEEDED(code: number): boolean {\n    return !FAILED(code);\n}\n\n/**\n * @en Convert to {@link RESULT_CODE} `name` string from {@link RESULT_CODE}.\n * @ja {@link RESULT_CODE} を {@link RESULT_CODE} 文字列に変換\n *\n * @param code {@link RESULT_CODE}\n * @param tag  custom tag if needed.\n * @returns name string ex) \"[tag][NOT_SUPPORTED]\"\n */\nexport function toNameString(code: number, tag?: string): string {\n    const prefix = tag ? `[${tag}]` : '';\n    if (RESULT_CODE[code]) {\n        return `${prefix}[${RESULT_CODE[code]}]`;\n    } else {\n        return `${prefix}[${Description.UNKNOWN_ERROR_NAME}]`;\n    }\n}\n\n/**\n * @en Convert to help string from {@link RESULT_CODE}.\n * @ja {@link RESULT_CODE} をヘルプストリングに変換\n *\n * @param code {@link RESULT_CODE}\n * @returns registered help string\n */\nexport function toHelpString(code: number): string {\n    const map = ERROR_MESSAGE_MAP();\n    if (map[code]) {\n        return map[code];\n    } else {\n        return `unregistered result code. [code: ${code}]`;\n    }\n}\n","import {\n    className,\n    isNullish,\n    isString,\n    isCancelLikeError,\n} from '@cdp/core-utils';\nimport {\n    RESULT_CODE,\n    SUCCEEDED,\n    FAILED,\n    toNameString,\n    toHelpString,\n} from './result-code';\n\nconst {\n    /** @internal */ isFinite: isNumber\n} = Number;\n\n/** @internal */\nconst enum Tag {\n    ERROR  = 'Error',\n    RESULT = 'Result',\n}\n\n/** @internal */\nconst desc = (value: unknown): PropertyDescriptor => {\n    return {\n        configurable: false,\n        writable: false,\n        enumerable: true,\n        value,\n    };\n};\n\n/**\n * @en A result holder class. <br>\n *     Derived native `Error` class.\n * @ja 処理結果伝達クラス <br>\n *     ネイティブ `Error` の派生クラス\n */\nexport class Result extends Error {\n\n    /**\n     * constructor\n     *\n     * @param code\n     *  - `en` result code\n     *  - `ja` 結果コード\n     * @param message\n     *  - `en` result info message\n     *  - `ja` 結果情報メッセージ\n     * @param options\n     *  - `en` error construction options\n     *  - `ja` エラー構築オプション\n     */\n    constructor(code?: number, message?: string, options?: ErrorOptions) {\n        code = isNullish(code) ? RESULT_CODE.SUCCESS : isNumber(code) ? Math.trunc(code) : RESULT_CODE.FAIL;\n        super(message ?? toHelpString(code), options);\n        const cause = options?.cause;\n        let time = isError(cause) ? (cause as Result).time : undefined;\n        isNumber(time!) || (time = Date.now());\n        Object.defineProperties(this, { code: desc(code), time: desc(time), cause: desc(cause) });\n    }\n\n    /**\n     * @en {@link RESULT_CODE} value.\n     * @ja {@link RESULT_CODE} の値\n     */\n    readonly code!: number;\n\n    /**\n     * @en Generated time information.\n     * @ja 生成された時刻情報\n     */\n    readonly time!: number;\n\n    /**\n     * @en Stock low-level error information.\n     * @ja 下位のエラー情報を格納\n     */\n    readonly cause?: unknown;\n\n    /**\n     * @en Judge succeeded or not.\n     * @ja 成功判定\n     */\n    get isSucceeded(): boolean {\n        return SUCCEEDED(this.code);\n    }\n\n    /**\n     * @en Judge failed or not.\n     * @ja 失敗判定\n     */\n    get isFailed(): boolean {\n        return FAILED(this.code);\n    }\n\n    /**\n     * @en Judge canceled or not.\n     * @ja キャンセルエラー判定\n     */\n    get isCanceled(): boolean {\n        return this.code === RESULT_CODE.ABORT;\n    }\n\n    /**\n     * @en Get formatted {@link RESULT_CODE} name string.\n     * @ja フォーマットされた {@link RESULT_CODE} 名文字列を取得\n     */\n    get codeName(): string {\n        return toNameString(this.code, this.name);\n    }\n\n    /**\n     * @en Get {@link RESULT_CODE} help string.\n     * @ja {@link RESULT_CODE} のヘルプストリングを取得\n     */\n    get help(): string {\n        return toHelpString(this.code);\n    }\n\n    /** @internal */\n    private get [Symbol.toStringTag](): Tag.RESULT {\n        return Tag.RESULT;\n    }\n}\n\nResult.prototype.name = Tag.RESULT;\n\n/** @interna lReturns `true` if `x` is `Error`, `false` otherwise. */\nfunction isError(x: unknown): x is Error {\n    return x instanceof Error || className(x) === Tag.ERROR;\n}\n\n/** Returns `true` if `x` is `Result`, `false` otherwise. */\nexport function isResult(x: unknown): x is Result {\n    return x instanceof Result || className(x) === Tag.RESULT;\n}\n\n/**\n * @en Convert to {@link Result} object.\n * @ja {@link Result} オブジェクトに変換\n */\nexport function toResult(o: unknown): Result {\n    if (o instanceof Result) {\n        /* eslint-disable-next-line prefer-const */\n        let { code, cause, time } = o;\n        code = isNullish(code) ? RESULT_CODE.SUCCESS : isNumber(code) ? Math.trunc(code) : RESULT_CODE.FAIL;\n        isNumber(time) || (time = Date.now());\n        // Do nothing if already defined\n        Reflect.defineProperty(o, 'code',  desc(code));\n        Reflect.defineProperty(o, 'time',  desc(time));\n        Reflect.defineProperty(o, 'cause', desc(cause));\n        return o;\n    } else {\n        const e = Object(o) as Result;\n        const message = isString(e.message) ? e.message : isString(o) ? o : undefined;\n        const code = isCancelLikeError(message) ? RESULT_CODE.ABORT : isNumber(e.code) ? e.code : o as number;\n        const cause = isError(e.cause) ? e.cause : isError(o) ? o : isString(o) ? new Error(o) : o;\n        return new Result(code, message, { cause });\n    }\n}\n\n/**\n * @en Create {@link Result} helper.\n * @ja {@link Result} オブジェクト構築ヘルパー\n *\n * @param code\n *  - `en` result code\n *  - `ja` 結果コード\n * @param message\n *  - `en` result info message\n *  - `ja` 結果情報メッセージ\n * @param cause\n *  - `en` low-level error information\n *  - `ja` 下位のエラー情報\n */\nexport function makeResult(code: number, message?: string, cause?: unknown): Result {\n    return new Result(code, message, { cause });\n}\n\n/**\n * @en Create canceled {@link Result} helper.\n * @ja キャンセル情報格納 {@link Result} オブジェクト構築ヘルパー\n *\n * @param message\n *  - `en` result info message\n *  - `ja` 結果情報メッセージ\n * @param cause\n *  - `en` low-level error information\n *  - `ja` 下位のエラー情報\n */\nexport function makeCanceledResult(message?: string, cause?: unknown): Result {\n    return new Result(RESULT_CODE.ABORT, message, { cause });\n}\n","import {\n    Keys,\n    Types,\n    KeyToType,\n    assignValue,\n    deepEqual,\n    isEmptyObject,\n    fromTypedData,\n    dropUndefined,\n    restoreNullish,\n} from '@cdp/core-utils';\nimport { Subscription, EventBroker } from '@cdp/events';\nimport {\n    Cancelable,\n    checkCanceled as cc,\n} from '@cdp/promise';\nimport {\n    StorageData,\n    StorageDataTypeList,\n    StorageInputDataTypeList,\n    IStorageOptions,\n    IStorageDataOptions,\n    IStorageDataReturnType,\n    IStorageEventCallback,\n    IStorage,\n} from './interfaces';\n\n/** MemoryStorage I/O options */\nexport type MemoryStorageOptions<K extends Keys<StorageDataTypeList> = Keys<StorageDataTypeList>> = IStorageDataOptions<StorageDataTypeList, K>;\n/** MemoryStorage return value */\nexport type MemoryStorageResult<K extends Keys<StorageDataTypeList>> = KeyToType<StorageDataTypeList, K>;\n/** MemoryStorage data type */\nexport type MemoryStorageDataTypes = Types<StorageDataTypeList>;\n/** MemoryStorage return type */\nexport type MemoryStorageReturnType<D extends MemoryStorageDataTypes> = IStorageDataReturnType<StorageDataTypeList, D>;\n/** MemoryStorage input data type */\nexport type MemoryStorageInputDataTypes = StorageInputDataTypeList<StorageDataTypeList>;\n/** MemoryStorage event callback */\nexport type MemoryStorageEventCallback = IStorageEventCallback<StorageDataTypeList>;\n\n/** @internal */\ninterface MemoryStorageEvent {\n    '@': [string | null, MemoryStorageDataTypes | null, MemoryStorageDataTypes | null];\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Memory storage class. This class doesn't support permaneciation data.\n * @ja メモリーストレージクラス. 本クラスはデータの永続化をサポートしない\n */\nexport class MemoryStorage implements IStorage {\n\n    /** @internal */\n    private readonly _broker = new EventBroker<MemoryStorageEvent>();\n    /** @internal */\n    private _storage: StorageData = {};\n\n///////////////////////////////////////////////////////////////////////\n// implements: IStorage\n\n    /**\n     * @en {@link IStorage} kind signature.\n     * @ja {@link IStorage} の種別を表す識別子\n     */\n    get kind(): string {\n        return 'memory';\n    }\n\n    /**\n     * @en Returns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.\n     * @ja キーに対応する値を取得. 存在しない場合は null を返却\n     *\n     * @param key\n     *  - `en` access key\n     *  - `ja` アクセスキー\n     * @param options\n     *  - `en` I/O options\n     *  - `ja` I/O オプション\n     * @returns\n     *  - `en` Returns the value which corresponds to a key with type change designated in `dataType`.\n     *  - `ja` `dataType` で指定された型変換を行って, キーに対応する値を返却\n     */\n    getItem<D extends MemoryStorageDataTypes = MemoryStorageDataTypes>(\n        key: string,\n        options?: MemoryStorageOptions<never>\n    ): Promise<MemoryStorageReturnType<D>>;\n\n    /**\n     * @en Returns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.\n     * @ja キーに対応する値を取得. 存在しない場合は null を返却\n     *\n     * @param key\n     *  - `en` access key\n     *  - `ja` アクセスキー\n     * @param options\n     *  - `en` I/O options\n     *  - `ja` I/O オプション\n     * @returns\n     *  - `en` Returns the value which corresponds to a key with type change designated in `dataType`.\n     *  - `ja` `dataType` で指定された型変換を行って, キーに対応する値を返却\n     */\n    getItem<K extends Keys<StorageDataTypeList>>(\n        key: string,\n        options?: MemoryStorageOptions<K>\n    ): Promise<MemoryStorageResult<K> | null>;\n\n    async getItem(key: string, options?: MemoryStorageOptions): Promise<MemoryStorageDataTypes | null> {\n        options = options ?? {};\n        await cc(options.cancel);\n\n        // `undefined` → `null`\n        const value = dropUndefined(this._storage[key]);\n        switch (options.dataType) {\n            case 'string':\n                return fromTypedData(value)!;\n            case 'number':\n                return Number(restoreNullish(value));\n            case 'boolean':\n                return Boolean(restoreNullish(value));\n            case 'object':\n                return Object(restoreNullish(value));\n            default:\n                return restoreNullish(value) as null;\n        }\n    }\n\n    /**\n     * @en Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.\n     * @ja キーを指定して値を設定. 存在しない場合は新規に作成\n     *\n     * @param key\n     *  - `en` access key\n     *  - `ja` アクセスキー\n     * @param options\n     *  - `en` I/O options\n     *  - `ja` I/O オプション\n     */\n    async setItem<V extends MemoryStorageInputDataTypes>(key: string, value: V, options?: MemoryStorageOptions<never>): Promise<void> {\n        options = options ?? {};\n        await cc(options.cancel);\n        const newVal = dropUndefined(value, true);         // `null` or `undefined` → 'null' or 'undefined'\n        const oldVal = dropUndefined(this._storage[key]);  // `undefined` → `null`\n        if (!deepEqual(oldVal, newVal)) {\n            assignValue(this._storage, key, newVal);\n            !options.silent && this._broker.trigger('@', key, newVal, oldVal);\n        }\n    }\n\n    /**\n     * @en Removes the key/value pair with the given key from the list associated with the object, if a key/value pair with the given key exists.\n     * @ja 指定されたキーに対応する値が存在すれば削除\n     *\n     * @param options\n     *  - `en` storage options\n     *  - `ja` ストレージオプション\n     */\n    async removeItem(key: string, options?: IStorageOptions): Promise<void> {\n        options = options ?? {};\n        await cc(options.cancel);\n        const oldVal = this._storage[key];\n        if (undefined !== oldVal) {\n            delete this._storage[key];\n            !options.silent && this._broker.trigger('@', key, null, oldVal);\n        }\n    }\n\n    /**\n     * @en Empties the list associated with the object of all key/value pairs, if there are any.\n     * @ja すべてのキーに対応する値を削除\n     *\n     * @param options\n     *  - `en` storage options\n     *  - `ja` ストレージオプション\n     */\n    async clear(options?: IStorageOptions): Promise<void> {\n        options = options ?? {};\n        await cc(options.cancel);\n        if (!isEmptyObject(this._storage)) {\n            this._storage = {};\n            !options.silent && this._broker.trigger('@', null, null, null);\n        }\n    }\n\n    /**\n     * @en Returns all entry keys.\n     * @ja すべてのキー一覧を返却\n     *\n     * @param options\n     *  - `en` cancel options\n     *  - `ja` キャンセルオプション\n     */\n    async keys(options?: Cancelable): Promise<string[]> {\n        await cc(options?.cancel);\n        return Object.keys(this._storage);\n    }\n\n    /**\n     * @en Subscrive event(s).\n     * @ja イベント購読設定\n     *\n     * @param listener\n     *  - `en` callback function.\n     *  - `ja` コールバック関数\n     */\n    on(listener: MemoryStorageEventCallback): Subscription {\n        return this._broker.on('@', listener);\n    }\n\n    /**\n     * @en Unsubscribe event(s).\n     * @ja イベント購読解除\n     *\n     * @param listener\n     *  - `en` callback function.\n     *         When not set this parameter, listeners are released.\n     *  - `ja` コールバック関数\n     *         指定しない場合はすべてを解除\n     */\n    off(listener?: MemoryStorageEventCallback): void {\n        this._broker.off('@', listener);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// operations:\n\n    /**\n     * @en Return a storage-store object.\n     * @ja ストレージストアオブジェクトを返却\n     */\n    get context(): StorageData {\n        return this._storage;\n    }\n}\n\n// default storage\nexport const memoryStorage = new MemoryStorage();\n","import { escapeHTML } from '@cdp/core-utils';\nimport {\n    TemplateDelimiters,\n    TemplateWriter,\n    TemplateEscaper,\n} from './interfaces';\n\n/** (string | Token[]) */\nexport type TokenList = unknown;\n\n/**\n * @en {@link TemplateEngine} token structure.\n * @ja {@link TemplateEngine} token 型\n *\n * @internal\n */\nexport type Token = [string, string, number, number, TokenList?, number?, boolean?];\n\n/**\n * @en {@link Token} address id.\n * @ja {@link Token} アドレス識別子\n */\nexport const enum TokenAddress {\n    TYPE = 0,\n    VALUE,\n    START,\n    END,\n    TOKEN_LIST,\n    TAG_INDEX,\n    HAS_NO_SPACE,\n}\n\n/**\n * @en Internal delimiters definition for {@link TemplateEngine}. ex) ['{{','}}'] or '{{ }}'\n * @ja {@link TemplateEngine} の内部で使用する区切り文字 ex) ['{{','}}'] or '{{ }}'\n */\nexport type Delimiters = string | TemplateDelimiters;\n\n/** @internal */\nexport const globalSettings = {\n    tags: ['{{', '}}'],\n    escape: escapeHTML,\n} as {\n    tags: TemplateDelimiters;\n    escape: TemplateEscaper;\n    writer: TemplateWriter;\n};\n","import {\n    PlainObject,\n    ensureObject,\n    getGlobalNamespace,\n} from '@cdp/core-utils';\nimport { TemplateDelimiters } from './interfaces';\n\n/**\n * @en Cache location information.\n * @ja キャッシュロケーション情報\n *\n * @internal\n */\nexport const enum CacheLocation {\n    NAMESPACE = 'CDP_DECLARE',\n    ROOT      = 'TEMPLATE_CACHE',\n}\n\n/**\n * @en Build cache key.\n * @ja キャッシュキーの生成\n *\n * @internal\n */\nexport function buildCacheKey(template: string, tags: TemplateDelimiters): string {\n    return `${template}:${tags.join(':')}`;\n}\n\n/**\n * @en Clears all cached templates in cache pool.\n * @ja すべてのテンプレートキャッシュを破棄\n *\n * @internal\n */\nexport function clearCache(): void {\n    const namespace = getGlobalNamespace(CacheLocation.NAMESPACE);\n    namespace[CacheLocation.ROOT] = {};\n}\n\n/** @internal global cache pool */\nexport const cache = ensureObject<PlainObject>(null, CacheLocation.NAMESPACE, CacheLocation.ROOT);\n","import { isArray, isPrimitive } from '@cdp/core-utils';\nexport {\n    UnknownFunction,\n    UnknownObject,\n    PlainObject,\n    isString,\n    isArray,\n    isFunction,\n    has,\n    escapeHTML,\n} from '@cdp/core-utils';\n\n/**\n * More correct typeof string handling array\n * which normally returns typeof 'object'\n */\nexport function typeString(src: unknown): string {\n    return isArray(src) ? 'array' : typeof src;\n}\n\n/**\n * Escape for template's expression charactors.\n */\nexport function escapeTemplateExp(src: string): string {\n    // eslint-disable-next-line\n    return src.replace(/[-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n}\n\n/**\n * Safe way of detecting whether or not the given thing is a primitive and\n * whether it has the given property\n */\nexport function primitiveHasOwnProperty(src: unknown, propName: string): boolean {\n    return isPrimitive(src) && Object.prototype.hasOwnProperty.call(src, propName);\n}\n\n/**\n * Check whitespace charactor exists.\n */\nexport function isWhitespace(src: string): boolean {\n    return !/\\S/.test(src);\n}\n","import { TemplateScanner } from './interfaces';\n\n/**\n * A simple string scanner that is used by the template parser to find\n * tokens in template strings.\n */\nexport class Scanner implements TemplateScanner {\n    private _source: string;\n    private _tail: string;\n    private _pos: number;\n\n    /**\n     * constructor\n     */\n    constructor(src: string) {\n        this._source = this._tail = src;\n        this._pos = 0;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /**\n     * Returns current scanning position.\n     */\n    get pos(): number {\n        return this._pos;\n    }\n\n    /**\n     * Returns string  source.\n     */\n    get source(): string {\n        return this._source;\n    }\n\n    /**\n     * Returns `true` if the tail is empty (end of string).\n     */\n    get eos(): boolean {\n        return '' === this._tail;\n    }\n\n    /**\n     * Tries to match the given regular expression at the current position.\n     * Returns the matched text if it can match, the empty string otherwise.\n     */\n    scan(regexp: RegExp): string {\n        const match = regexp.exec(this._tail);\n\n        if (!match || 0 !== match.index) {\n            return '';\n        }\n\n        const string = match[0];\n\n        this._tail = this._tail.substring(string.length);\n        this._pos += string.length;\n\n        return string;\n    }\n\n    /**\n     * Skips all text until the given regular expression can be matched. Returns\n     * the skipped string, which is the entire tail if no match can be made.\n     */\n    scanUntil(regexp: RegExp): string {\n        const index = this._tail.search(regexp);\n        let match: string;\n\n        switch (index) {\n            case -1:\n                match = this._tail;\n                this._tail = '';\n                break;\n            case 0:\n                match = '';\n                break;\n            default:\n                match = this._tail.substring(0, index);\n                this._tail = this._tail.substring(index);\n        }\n\n        this._pos += match.length;\n\n        return match;\n    }\n}\n","import { TemplateContext } from './interfaces';\nimport {\n    UnknownFunction,\n    UnknownObject,\n    PlainObject,\n    isFunction,\n    has,\n    primitiveHasOwnProperty,\n} from './utils';\n\n/**\n * Represents a rendering context by wrapping a view object and\n * maintaining a reference to the parent context.\n */\nexport class Context implements TemplateContext {\n    private readonly _view: PlainObject;\n    private readonly _parent?: Context;\n    private readonly _cache: PlainObject;\n\n    /** constructor */\n    constructor(view: PlainObject, parentContext?: Context) {\n        this._view   = view;\n        this._cache  = { '.': this._view };\n        this._parent = parentContext;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /**\n     * View parameter getter.\n     */\n    get view(): PlainObject {\n        return this._view;\n    }\n\n    /**\n     * Creates a new context using the given view with this context\n     * as the parent.\n     */\n    push(view: PlainObject): Context {\n        return new Context(view, this);\n    }\n\n    /**\n     * Returns the value of the given name in this context, traversing\n     * up the context hierarchy if the value is absent in this context's view.\n     */\n    lookup(name: string): unknown {\n        const cache = this._cache;\n\n        let value: unknown;\n        if (Object.prototype.hasOwnProperty.call(cache, name)) {\n            value = cache[name];\n        } else {\n            let context: Context | undefined = this; // eslint-disable-line @typescript-eslint/no-this-alias\n            let intermediateValue: UnknownObject | undefined | null;\n            let names: string[];\n            let index: number;\n            let lookupHit = false;\n\n            while (context) {\n                if (0 < name.indexOf('.')) {\n                    intermediateValue = context._view;\n                    names = name.split('.');\n                    index = 0;\n\n                    /**\n                     * Using the dot notion path in `name`, we descend through the\n                     * nested objects.\n                     *\n                     * To be certain that the lookup has been successful, we have to\n                     * check if the last object in the path actually has the property\n                     * we are looking for. We store the result in `lookupHit`.\n                     *\n                     * This is specially necessary for when the value has been set to\n                     * `undefined` and we want to avoid looking up parent contexts.\n                     *\n                     * In the case where dot notation is used, we consider the lookup\n                     * to be successful even if the last \"object\" in the path is\n                     * not actually an object but a primitive (e.g., a string, or an\n                     * integer), because it is sometimes useful to access a property\n                     * of an autoboxed primitive, such as the length of a string.\n                     **/\n                    while (null != intermediateValue && index < names.length) {\n                        if (index === names.length - 1) {\n                            lookupHit = (\n                                has(intermediateValue, names[index]) ||\n                                primitiveHasOwnProperty(intermediateValue, names[index])\n                            );\n                        }\n                        intermediateValue = intermediateValue[names[index++]] as UnknownObject;\n                    }\n                } else {\n                    intermediateValue = context._view[name];\n\n                    /**\n                     * Only checking against `hasProperty`, which always returns `false` if\n                     * `context.view` is not an object. Deliberately omitting the check\n                     * against `primitiveHasOwnProperty` if dot notation is not used.\n                     *\n                     * Consider this example:\n                     * ```\n                     * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n                     * ```\n                     *\n                     * If we were to check also against `primitiveHasOwnProperty`, as we do\n                     * in the dot notation case, then render call would return:\n                     *\n                     * \"The length of a football field is 9.\"\n                     *\n                     * rather than the expected:\n                     *\n                     * \"The length of a football field is 100 yards.\"\n                     **/\n                    lookupHit = has(context._view, name);\n                }\n\n                if (lookupHit) {\n                    value = intermediateValue;\n                    break;\n                }\n\n                context = context._parent;\n            }\n\n            cache[name] = value as object;\n        }\n\n        if (isFunction(value)) {\n            value = (value as UnknownFunction).call(this._view);\n        }\n\n        return value;\n    }\n}\n","import {\n    Token,\n    TokenAddress as $,\n    Delimiters,\n    globalSettings,\n} from './internal';\nimport {\n    isString,\n    isArray,\n    isWhitespace,\n    escapeTemplateExp,\n} from './utils';\nimport { Scanner } from './scanner';\n\n/** @internal */\nconst _regexp = {\n    white: /\\s*/,\n    space: /\\s+/,\n    equals: /\\s*=/,\n    curly: /\\s*\\}/,\n    tag: /#|\\^|\\/|>|\\{|&|=|!/,\n};\n\n/**\n * @internal\n * Combines the values of consecutive text tokens in the given `tokens` array to a single token.\n */\nfunction squashTokens(tokens: Token[]): Token[] {\n    const squashedTokens: Token[] = [];\n\n    let lastToken!: Token;\n    for (const token of tokens) {\n        if (token) {\n            if ('text' === token[$.TYPE] && lastToken && 'text' === lastToken[$.TYPE]) {\n                lastToken[$.VALUE] += token[$.VALUE];\n                lastToken[$.END] = token[$.END];\n            } else {\n                squashedTokens.push(token);\n                lastToken = token;\n            }\n        }\n    }\n\n    return squashedTokens;\n}\n\n/**\n * @internal\n * Forms the given array of `tokens` into a nested tree structure where\n * tokens that represent a section have two additional items: 1) an array of\n * all tokens that appear in that section and 2) the index in the original\n * template that represents the end of that section.\n */\nfunction nestTokens(tokens: Token[]): Token[] {\n    const nestedTokens: Token[] = [];\n    let collector = nestedTokens;\n    const sections: Token[] = [];\n\n    let section!: Token;\n    for (const token of tokens) {\n        switch (token[$.TYPE]) {\n            case '#':\n            case '^':\n                collector.push(token);\n                sections.push(token);\n                collector = token[$.TOKEN_LIST] = [];\n                break;\n            case '/':\n                section = sections.pop()!;\n                section[$.TAG_INDEX] = token[$.START];\n                collector = sections.length > 0 ? sections[sections.length - 1][$.TOKEN_LIST] as Token[] : nestedTokens;\n                break;\n            default:\n                collector.push(token);\n                break;\n        }\n    }\n    return nestedTokens;\n}\n\n/**\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\n * argument is given here it must be an array with two string values: the\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n * course, the default is to use mustaches (i.e. mustache.tags).\n *\n * A token is an array with at least 4 elements. The first element is the\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n * all text that appears outside a symbol this element is \"text\".\n *\n * The second element of a token is its \"value\". For mustache tags this is\n * whatever else was inside the tag besides the opening symbol. For text tokens\n * this is the text itself.\n *\n * The third and fourth elements of the token are the start and end indices,\n * respectively, of the token in the original template.\n *\n * Tokens that are the root node of a subtree contain two more elements: 1) an\n * array of tokens in the subtree and 2) the index in the original template at\n * which the closing tag for that section begins.\n *\n * Tokens for partials also contain two more elements: 1) a string value of\n * indendation prior to that tag and 2) the index of that tag on that line -\n * eg a value of 2 indicates the partial is the third tag on this line.\n *\n * @param template template string\n * @param tags delimiters ex) ['{{','}}'] or '{{ }}'\n */\nexport function parseTemplate(template: string, tags?: Delimiters): Token[] {\n    if (!template) {\n        return [];\n    }\n\n    let lineHasNonSpace     = false;\n    const sections: Token[] = [];       // Stack to hold section tokens\n    const tokens: Token[]   = [];       // Buffer to hold the tokens\n    const spaces: number[]  = [];       // Indices of whitespace tokens on the current line\n    let hasTag              = false;    // Is there a {{tag}} on the current line?\n    let nonSpace            = false;    // Is there a non-space char on the current line?\n    let indentation         = '';       // Tracks indentation for tags that use it\n    let tagIndex            = 0;        // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    const stripSpace = (): void => {\n        if (hasTag && !nonSpace) {\n            while (spaces.length) {\n                delete tokens[spaces.pop()!];   // eslint-disable-line @typescript-eslint/no-array-delete\n            }\n        } else {\n            spaces.length = 0;\n        }\n        hasTag = false;\n        nonSpace = false;\n    };\n\n    const compileTags = (tagsToCompile: string | string[]): { openingTag: RegExp; closingTag: RegExp; closingCurly: RegExp; } => {\n        const enum Tag {\n            OPEN = 0,\n            CLOSE,\n        }\n        if (isString(tagsToCompile)) {\n            tagsToCompile = tagsToCompile.split(_regexp.space, 2);\n        }\n\n        if (!isArray(tagsToCompile) || 2 !== tagsToCompile.length) {\n            throw new Error(`Invalid tags: ${JSON.stringify(tagsToCompile)}`);\n        }\n        return {\n            openingTag:   new RegExp(`${escapeTemplateExp(tagsToCompile[Tag.OPEN])}\\\\s*`),\n            closingTag:   new RegExp(`\\\\s*${escapeTemplateExp(tagsToCompile[Tag.CLOSE])}`),\n            closingCurly: new RegExp(`\\\\s*${escapeTemplateExp(`}${tagsToCompile[Tag.CLOSE]}`)}`),\n        };\n    };\n\n    const { tag: reTag, white: reWhite, equals: reEquals, curly: reCurly } = _regexp;\n    let _regxpTags = compileTags(tags ?? globalSettings.tags);\n\n    const scanner = new Scanner(template);\n\n    let openSection: Token | undefined;\n    while (!scanner.eos) {\n        const { openingTag: reOpeningTag, closingTag: reClosingTag, closingCurly: reClosingCurly } = _regxpTags;\n        let token: Token;\n        let start = scanner.pos;\n        // Match any text between tags.\n        let value = scanner.scanUntil(reOpeningTag);\n        if (value) {\n            for (let i = 0, valueLength = value.length; i < valueLength; ++i) {\n                const chr = value.charAt(i);\n\n                if (isWhitespace(chr)) {\n                    spaces.push(tokens.length);\n                    indentation += chr;\n                } else {\n                    nonSpace = true;\n                    lineHasNonSpace = true;\n                    indentation += ' ';\n                }\n\n                tokens.push(['text', chr, start, start + 1]);\n                start += 1;\n\n                // Check for whitespace on the current line.\n                if ('\\n' === chr) {\n                    stripSpace();\n                    indentation = '';\n                    tagIndex = 0;\n                    lineHasNonSpace = false;\n                }\n            }\n        }\n\n        // Match the opening tag.\n        if (!scanner.scan(reOpeningTag)) {\n            break;\n        }\n\n        hasTag = true;\n\n        // Get the tag type.\n        let type = scanner.scan(reTag) || 'name';\n        scanner.scan(reWhite);\n\n        // Get the tag value.\n        if ('=' === type) {\n            value = scanner.scanUntil(reEquals);\n            scanner.scan(reEquals);\n            scanner.scanUntil(reClosingTag);\n        } else if ('{' === type) {\n            value = scanner.scanUntil(reClosingCurly);\n            scanner.scan(reCurly);\n            scanner.scanUntil(reClosingTag);\n            type = '&';\n        } else {\n            value = scanner.scanUntil(reClosingTag);\n        }\n\n        // Match the closing tag.\n        if (!scanner.scan(reClosingTag)) {\n            throw new Error(`Unclosed tag at ${scanner.pos}`);\n        }\n\n        if ('>' === type) {\n            token = [type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace];\n        } else {\n            token = [type, value, start, scanner.pos];\n        }\n        tagIndex++;\n        tokens.push(token);\n\n        if ('#' === type || '^' === type) {\n            sections.push(token);\n        } else if ('/' === type) {\n            // Check section nesting.\n            openSection = sections.pop();\n            if (!openSection) {\n                throw new Error(`Unopened section \"${value}\" at ${start}`);\n            }\n            if (openSection[1] !== value) {\n                throw new Error(`Unclosed section \"${openSection[$.VALUE]}\" at ${start}`);\n            }\n        } else if ('name' === type || '{' === type || '&' === type) {\n            nonSpace = true;\n        } else if ('=' === type) {\n            // Set the tags for the next time around.\n            _regxpTags = compileTags(value);\n        }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection) {\n        throw new Error(`Unclosed section \"${openSection[$.VALUE]}\" at ${scanner.pos}`);\n    }\n\n    return nestTokens(squashTokens(tokens));\n}\n","import {\n    TemplateDelimiters,\n    TemplateWriter,\n    TemplateViewParam,\n    TemplatePartialParam,\n} from './interfaces';\nimport {\n    Token,\n    TokenAddress as $,\n    globalSettings,\n} from './internal';\nimport { cache, buildCacheKey } from './cache';\nimport {\n    PlainObject,\n    isArray,\n    isFunction,\n} from './utils';\nimport { parseTemplate } from './parse';\nimport { Context } from './context';\n\n/**\n * A Writer knows how to take a stream of tokens and render them to a\n * string, given a context. It also maintains a cache of templates to\n * avoid the need to parse the same template twice.\n */\nexport class Writer implements TemplateWriter {\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /**\n     * Parses and caches the given `template` according to the given `tags` or\n     * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n     * that is generated from the parse.\n     */\n    parse(template: string, tags?: TemplateDelimiters): { tokens: Token[]; cacheKey: string; } {\n        const cacheKey = buildCacheKey(template, tags ?? globalSettings.tags);\n        let tokens = cache[cacheKey] as Token[];\n        if (null == tokens) {\n            tokens = cache[cacheKey] = parseTemplate(template, tags);\n        }\n        return { tokens, cacheKey };\n    }\n\n    /**\n     * High-level method that is used to render the given `template` with\n     * the given `view`.\n     *\n     * The optional `partials` argument may be an object that contains the\n     * names and templates of partials that are used in the template. It may\n     * also be a function that is used to load partial templates on the fly\n     * that takes a single argument: the name of the partial.\n     *\n     * If the optional `tags` argument is given here it must be an array with two\n     * string values: the opening and closing tags used in the template (e.g.\n     * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n     */\n    render(template: string, view: TemplateViewParam, partials?: TemplatePartialParam, tags?: TemplateDelimiters): string {\n        const { tokens } = this.parse(template, tags);\n        return this.renderTokens(tokens, view, partials, template, tags);\n    }\n\n    /**\n     * Low-level method that renders the given array of `tokens` using\n     * the given `context` and `partials`.\n     *\n     * Note: The `originalTemplate` is only ever used to extract the portion\n     * of the original template that was contained in a higher-order section.\n     * If the template doesn't use higher-order sections, this argument may\n     * be omitted.\n     */\n    renderTokens(tokens: Token[], view: TemplateViewParam, partials?: TemplatePartialParam, originalTemplate?: string, tags?: TemplateDelimiters): string {\n        const context = (view instanceof Context) ? view : new Context(view as PlainObject);\n        let buffer = '';\n\n        for (const token of tokens) {\n            let value: string | void | undefined;\n            switch (token[$.TYPE]) {\n                case '#':\n                    value = this.renderSection(token, context, partials, originalTemplate);\n                    break;\n                case '^':\n                    value = this.renderInverted(token, context, partials, originalTemplate);\n                    break;\n                case '>':\n                    value = this.renderPartial(token, context, partials, tags);\n                    break;\n                case '&':\n                    value = this.unescapedValue(token, context);\n                    break;\n                case 'name':\n                    value = this.escapedValue(token, context);\n                    break;\n                case 'text':\n                    value = this.rawValue(token);\n                    break;\n                default:\n                    break;\n            }\n\n            if (null != value) {\n                buffer += value;\n            }\n        }\n\n        return buffer;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// private methods:\n\n    /** @internal */\n    private renderSection(token: Token, context: Context, partials?: TemplatePartialParam, originalTemplate?: string): string | void {\n        const self = this;\n        let buffer = '';\n        let value = context.lookup(token[$.VALUE]);\n\n        // This function is used to render an arbitrary template\n        // in the current context by higher-order sections.\n        const subRender = (template: string): string => {\n            return self.render(template, context, partials);\n        };\n\n        if (!value) {\n            return;\n        }\n\n        if (isArray(value)) {\n            for (const v of value) {\n                buffer += this.renderTokens(token[$.TOKEN_LIST] as Token[], context.push(v), partials, originalTemplate);\n            }\n        } else if ('object' === typeof value || 'string' === typeof value || 'number' === typeof value) {\n            buffer += this.renderTokens(token[$.TOKEN_LIST] as Token[], context.push(value as PlainObject), partials, originalTemplate);\n        } else if (isFunction(value)) {\n            if ('string' !== typeof originalTemplate) {\n                throw new Error('Cannot use higher-order sections without the original template');\n            }\n            // Extract the portion of the original template that the section contains.\n            value = value.call(context.view, originalTemplate.slice(token[$.END], token[$.TAG_INDEX]), subRender);\n            if (null != value) {\n                buffer += value as number;\n            }\n        } else {\n            buffer += this.renderTokens(token[$.TOKEN_LIST] as Token[], context, partials, originalTemplate);\n        }\n        return buffer;\n    }\n\n    /** @internal */\n    private renderInverted(token: Token, context: Context, partials?: TemplatePartialParam, originalTemplate?: string): string | void {\n        const value = context.lookup(token[$.VALUE]);\n        if (!value || (isArray(value) && 0 === value.length)) {\n            return this.renderTokens(token[$.TOKEN_LIST] as Token[], context, partials, originalTemplate);\n        }\n    }\n\n    /** @internal */\n    private indentPartial(partial: string, indentation: string, lineHasNonSpace: boolean): string {\n        const filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n        const partialByNl = partial.split('\\n');\n        for (let i = 0; i < partialByNl.length; i++) {\n            if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n                partialByNl[i] = filteredIndentation + partialByNl[i];\n            }\n        }\n        return partialByNl.join('\\n');\n    }\n\n    /** @internal */\n    private renderPartial(token: Token, context: Context, partials: TemplatePartialParam | undefined, tags: TemplateDelimiters | undefined): string | void {\n        if (!partials) {\n            return;\n        }\n\n        const value = (isFunction(partials) ? partials(token[$.VALUE]) : partials[token[$.VALUE]]) as string | undefined;\n        if (null != value) {\n            const lineHasNonSpace = token[$.HAS_NO_SPACE];\n            const tagIndex        = token[$.TAG_INDEX];\n            const indentation     = token[$.TOKEN_LIST];\n            let indentedValue = value;\n            if (0 === tagIndex && indentation) {\n                indentedValue = this.indentPartial(value, indentation as string, lineHasNonSpace!);\n            }\n            const { tokens } = this.parse(indentedValue, tags);\n            return this.renderTokens(tokens, context, partials, indentedValue);\n        }\n    }\n\n    /** @internal */\n    private unescapedValue(token: Token, context: Context): string | void {\n        const value = context.lookup(token[$.VALUE]);\n        if (null != value) {\n            return value as string;\n        }\n    }\n\n    /** @internal */\n    private escapedValue(token: Token, context: Context): string | void {\n        const value = context.lookup(token[$.VALUE]);\n        if (null != value) {\n            return globalSettings.escape(value as string);\n        }\n    }\n\n    /** @internal */\n    private rawValue(token: Token): string {\n        return token[$.VALUE];\n    }\n}\n","import {\n    JST,\n    TemplateDelimiters,\n    ITemplateEngine,\n    TemplateScanner,\n    TemplateContext,\n    TemplateWriter,\n    TemplateEscaper,\n} from './interfaces';\nimport { globalSettings } from './internal';\nimport { CacheLocation, clearCache } from './cache';\nimport {\n    PlainObject,\n    isString,\n    typeString,\n} from './utils';\nimport { Scanner } from './scanner';\nimport { Context } from './context';\nimport { Writer } from './writer';\n\n/** {@link TemplateEngine} common settings */\nglobalSettings.writer = new Writer();\n\n/**\n * @en {@link TemplateEngine} global settng options\n * @ja {@link TemplateEngine} グローバル設定オプション\n */\nexport interface TemplateGlobalSettings {\n    writer?: TemplateWriter;\n    tags?: TemplateDelimiters;\n    escape?: TemplateEscaper;\n}\n\n/**\n * @en {@link TemplateEngine} compile options\n * @ja {@link TemplateEngine} コンパイルオプション\n */\nexport interface TemplateCompileOptions {\n    tags?: TemplateDelimiters;\n}\n\n/**\n * @en TemplateEngine utility class.\n * @ja TemplateEngine ユーティリティクラス\n */\nexport class TemplateEngine implements ITemplateEngine {\n\n///////////////////////////////////////////////////////////////////////\n// public static methods:\n\n    /**\n     * @en Get {@link JST} from template source.\n     * @ja テンプレート文字列から {@link JST} を取得\n     *\n     * @param template\n     *  - `en` template source string\n     *  - `ja` テンプレート文字列\n     * @param options\n     *  - `en` compile options\n     *  - `ja` コンパイルオプション\n     */\n    public static compile(template: string, options?: TemplateCompileOptions): JST {\n        if (!isString(template)) {\n            throw new TypeError(`Invalid template! the first argument should be a \"string\" but \"${typeString(template)}\" was given for TemplateEngine.compile(template, options)`);\n        }\n\n        const { tags } = options ?? globalSettings;\n        const { writer } = globalSettings;\n\n        const jst = (view?: PlainObject, partials?: PlainObject): string => {\n            return writer.render(template, view ?? {}, partials, tags);\n        };\n\n        const { tokens, cacheKey } = writer.parse(template, tags);\n        jst.tokens        = tokens;\n        jst.cacheKey      = cacheKey;\n        jst.cacheLocation = [CacheLocation.NAMESPACE, CacheLocation.ROOT];\n\n        return jst;\n    }\n\n    /**\n     * @en Clears all cached templates in the default {@link TemplateWriter}.\n     * @ja 既定の {@link TemplateWriter} のすべてのキャッシュを削除\n     */\n    public static clearCache(): void {\n        clearCache();\n    }\n\n    /**\n     * @en Change {@link TemplateEngine} global settings.\n     * @ja {@link TemplateEngine} グローバル設定の更新\n     *\n     * @param settings\n     *  - `en` new settings\n     *  - `ja` 新しい設定値\n     * @returns\n     *  - `en` old settings\n     *  - `ja` 古い設定値\n     */\n    public static setGlobalSettings(setiings: TemplateGlobalSettings): TemplateGlobalSettings {\n        const oldSettings = { ...globalSettings };\n        const { writer, tags, escape } = setiings;\n        writer && (globalSettings.writer = writer);\n        tags   && (globalSettings.tags   = tags);\n        escape && (globalSettings.escape = escape);\n        return oldSettings;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public static methods: for debug\n\n    /** @internal Create {@link TemplateScanner} instance */\n    public static createScanner(src: string): TemplateScanner {\n        return new Scanner(src);\n    }\n\n    /** @internal Create {@link TemplateContext} instance */\n    public static createContext(view: PlainObject, parentContext?: Context): TemplateContext {\n        return new Context(view, parentContext);\n    }\n\n    /** @internal Create {@link TemplateWriter} instance */\n    public static createWriter(): TemplateWriter {\n        return new Writer();\n    }\n}\n","import { CancelTokenSource } from './cancel-token';\nimport { wait } from './utils';\n\n/**\n * @en The class manages lumping multiple `Promise` objects. <br>\n *     It's possible to make them cancel more than one `Promise` which handles different {@link CancelToken} by lumping.\n * @ja 複数 `Promise` オブジェクトを一括管理するクラス <br>\n *     異なる {@link CancelToken} を扱う複数の `Promise` を一括でキャンセルさせることが可能\n */\nexport class PromiseManager {\n    private readonly _pool = new Map<Promise<unknown>, ((reason: unknown) => unknown) | undefined>();\n\n    /**\n     * @en Add a `Promise` object under the management.\n     * @ja `Promise` オブジェクトを管理下に追加\n     *\n     * @param promise\n     *  - `en` any `Promise` instance is available.\n     *  - `ja` 任意の `Promise` インスタンス\n     * @param cancelSource\n     *  - `en` {@link CancelTokenSource} instance made by {@link CancelToken.source | CancelToken.source}().\n     *  - `ja` {@link CancelToken.source | CancelToken.source}() で生成される {@link CancelTokenSource} インスタンス\n     * @returns\n     *  - `en` return the same instance of input `promise` instance.\n     *  - `ja` 入力した `promise` と同一インスタンスを返却\n     */\n    public add<T>(promise: Promise<T>, cancelSource?: CancelTokenSource): Promise<T> {\n        this._pool.set(promise, cancelSource?.cancel); // eslint-disable-line @typescript-eslint/unbound-method\n\n        const always = (): void => {\n            this._pool.delete(promise);\n            if (cancelSource) {\n                cancelSource.close();\n            }\n        };\n\n        promise\n            .then(always, always);\n\n        return promise;\n    }\n\n    /**\n     * @en Released all instances under the management.\n     * @ja 管理対象を破棄\n     */\n    public release(): void {\n        this._pool.clear();\n    }\n\n    /**\n     * @en Return `promise` array from under the management.\n     * @ja 管理対象の Promise を配列で取得\n     */\n    public promises(): Promise<unknown>[] {\n        return [...this._pool.keys()];\n    }\n\n    /**\n     * @en Call `Promise.all()` for under the management. <br>\n     *     Wait for all `fulfilled`.\n     * @ja 管理対象に対して `Promise.all()` <br>\n     *     すべてが `fulfilled` になるまで待機\n     */\n    public all(): Promise<unknown[]> {\n        return Promise.all(this.promises());\n    }\n\n    /**\n     * @en Call `Promise.race()` for under the management. <br>\n     *     Wait for any `settled`.\n     * @ja 管理対象に対して `Promise.race()` <br>\n     *     いずれかが `settled` になるまで待機\n     */\n    public race(): Promise<unknown> {\n        return Promise.race(this.promises());\n    }\n\n    /**\n     * @en Call {@link wait}() for under the management. <br>\n     *     Wait for all `settled`. (simplified version)\n     * @ja 管理対象に対して {@link wait}() <br>\n     *     すべてが `settled` になるまで待機 (簡易バージョン)\n     */\n    public wait(): Promise<unknown[]> {\n        return wait(this.promises());\n    }\n\n    /**\n     * @en Call `Promise.allSettled()` for under the management. <br>\n     *     Wait for all `settled`.\n     * @ja 管理対象に対して `Promise.allSettled()` <br>\n     *     すべてが `settled` になるまで待機\n     */\n    public allSettled(): Promise<PromiseSettledResult<unknown>[]> {\n        return Promise.allSettled(this.promises());\n    }\n\n    /**\n     * @en Call `Promise.any()` for under the management. <br>\n     *     Wait for any `fulfilled`.\n     * @ja 管理対象に対して `Promise.any()` <br>\n     *     いずれかが `fulfilled` になるまで待機\n     */\n    public any(): Promise<unknown> {\n        return Promise.any(this.promises());\n    }\n\n    /**\n     * @en Invoke `cancel` message for under the management promises.\n     * @ja 管理対象の `Promise` に対してキャンセルを発行\n     *\n     * @param reason\n     *  - `en` arguments for `cancelSource`\n     *  - `ja` `cancelSource` に渡される引数\n     * @returns\n     *  - `en` `Promise` instance which wait by until cancellation completion.\n     *  - `ja` キャンセル完了まで待機する `Promise` インスタンス\n     */\n    public abort<T>(reason?: T): Promise<unknown[]> {\n        for (const canceler of this._pool.values()) {\n            if (canceler) {\n                canceler(\n                    reason ?? new Error('abort')\n                );\n            }\n        }\n        return wait(this.promises());\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    post,\n    deepEqual,\n    deepCopy,\n    dropUndefined,\n} from '@cdp/core-utils';\nimport { EventPublisher } from '@cdp/events';\nimport {\n    StorageData,\n    IStorage,\n    IStorageOptions,\n    IStorageFormatOptions,\n    RegistrySchemaBase,\n    RegistryEvent,\n    RegistryReadOptions,\n    RegistryWriteOptions,\n    RegistrySaveOptions,\n} from './interfaces';\n\n/**\n * @en Registry management class for synchronous Read/Write accessible from any {@link IStorage} object.\n * @ja 任意の {@link IStorage} オブジェクトから同期 Read/Write アクセス可能なレジストリ管理クラス\n *\n * @example <br>\n *\n * ```ts\n * // 1. define registry schema\n * interface Schema extends RegistrySchemaBase {\n *    'common/mode': 'normal' | 'specified';\n *    'common/value': number;\n *    'trade/local': { unit: '円' | '$'; rate: number; };\n *    'trade/check': boolean;\n *    'extra/user': string;\n * }\n *\n * // 2. prepare IStorage instance\n * // ex\n * import { webStorage } from '@cdp/runtime';\n *\n * // 3. instantiate this class\n * const reg = new Registry<Schema>(webStorage, '@test');\n *\n * // 4. read example\n * const val = reg.read('common/mode'); // 'normal' | 'specified' | null\n *\n * // 5. write example\n * reg.write('common/mode', 'specified');\n * // reg.write('common/mode', 'hoge'); // compile error\n * ```\n */\nexport class Registry<T extends RegistrySchemaBase = any> extends EventPublisher<RegistryEvent<T>> {\n\n    /** @internal */\n    private readonly _storage: IStorage;\n    /** @internal */\n    private readonly _rootKey: string;\n    /** @internal */\n    private readonly _defaultOptions: IStorageFormatOptions;\n    /** @internal */\n    private _store: StorageData = {};\n\n    /**\n     * constructor\n     *\n     * @param storage\n     *  - `en` Root key for {@link IStorage}.\n     *  - `ja` {@link IStorage} に使用するルートキー\n     * @param rootKey\n     *  - `en` Root key for {@link IStorage}.\n     *  - `ja` {@link IStorage} に使用するルートキー\n     * @param formatSpace\n     *  - `en` for JSON format space.\n     *  - `ja` JSON フォーマットスペースを指定\n     */\n    constructor(storage: IStorage<any>, rootKey: string, formatSpace?: number) {\n        super();\n        this._storage = storage;\n        this._rootKey = rootKey;\n        this._defaultOptions = { jsonSpace: formatSpace };\n    }\n\n    /**\n     * @en Access to root key.\n     * @ja ルートキーを取得\n     */\n    get rootKey(): string {\n        return this._rootKey;\n    }\n\n    /**\n     * @en Access to {@link IStorage} object.\n     * @ja {@link IStorage} オブジェクトを取得\n     */\n    get storage(): IStorage<any> {\n        return this._storage;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /**\n     * @en Read persistence data from {@link IStorage}. The data loaded already will be cleared.\n     * @ja {@link IStorage} から永続化したデータを読み込み. すでにキャッシュされているデータは破棄される\n     */\n    public async load(options?: IStorageOptions): Promise<void> {\n        options = options ?? {};\n        this._store = (await this._storage.getItem(this._rootKey, options)) || {};\n        if (!options.silent) {\n            void post(() => this.publish('change', '*'));\n        }\n    }\n\n    /**\n     * @en Persist data to {@link IStorage}.\n     * @ja {@link IStorage} にデータを永続化\n     */\n    public async save(options?: RegistrySaveOptions): Promise<void> {\n        const opts: RegistrySaveOptions = { ...this._defaultOptions, ...options };\n        if (!opts.silent) {\n            this.publish('will-save');\n        }\n        await this._storage.setItem(this._rootKey, this._store, opts);\n    }\n\n    /**\n     * @en Read registry value.\n     * @ja レジストリ値の読み取り\n     *\n     * @param key\n     *  - `en` target registry key.\n     *  - `ja` 対象のレジストリキーを指定\n     * @param options\n     *  - `en` read options.\n     *  - `ja` 読み取りオプションを指定\n     */\n    public read<K extends keyof T>(key: K, options?: RegistryReadOptions): T[K] | null {\n        const { field } = options ?? {};\n        const structure = String(key).split('/');\n        const lastKey = structure.pop()!;\n\n        let name: string | undefined;\n        let reg = this.targetRoot(field);\n\n        while (name = structure.shift()) { // eslint-disable-line no-cond-assign\n            if (!(name in reg)) {\n                return null;\n            }\n            reg = reg[name] as StorageData;\n        }\n\n        // return deep copy\n        return (null != reg[lastKey]) ? deepCopy(reg[lastKey]) as any : null;\n    }\n\n    /**\n     * @en Write registry value.\n     * @ja レジストリ値の書き込み\n     *\n     * @param key\n     *  - `en` target registry key.\n     *  - `ja` 対象のレジストリキーを指定\n     * @param value\n     *  - `en` update value. if `null` set to delete.\n     *  - `ja` 更新する値. `null` は削除\n     * @param options\n     *  - `en` write options.\n     *  - `ja` 書き込みオプションを指定\n     */\n    public write<K extends keyof T>(key: K, value: T[K] | null, options?: RegistryWriteOptions): void {\n        const { field, noSave, silent } = options ?? {};\n        const remove = (null == value);\n        const structure = String(key).split('/');\n        const lastKey = structure.pop()!;\n\n        let name: string | undefined;\n        let reg = this.targetRoot(field);\n\n        while (name = structure.shift()) { // eslint-disable-line no-cond-assign\n            if (name in reg) {\n                reg = reg[name] as StorageData;\n            } else if (remove) {\n                return; // すでに親キーがないため何もしない\n            } else {\n                reg = reg[name] = {};\n            }\n        }\n\n        const newVal = remove ? null : value;\n        const oldVal = dropUndefined(reg[lastKey]);\n        if (deepEqual(oldVal, newVal)) {\n            return; // 更新なし\n        } else if (remove) {\n            delete reg[lastKey];\n        } else {\n            reg[lastKey] = deepCopy(newVal) as any;\n        }\n\n        if (!noSave) {\n            // no fire notification\n            void this._storage.setItem(this._rootKey, this._store, { ...this._defaultOptions, ...options });\n        }\n\n        if (!silent) {\n            void post(() => this.publish('change', key, newVal, oldVal as any));\n        }\n    }\n\n    /**\n     * @en Delete registry key.\n     * @ja レジストリキーの削除\n     *\n     * @param key\n     *  - `en` target registry key.\n     *  - `ja` 対象のレジストリキーを指定\n     * @param options\n     *  - `en` read options.\n     *  - `ja` 書き込みオプションを指定\n     */\n    public delete<K extends keyof T>(key: K, options?: RegistryWriteOptions): void {\n        this.write(key, null, options);\n    }\n\n    /**\n     * @en Clear all registry.\n     * @ja レジストリの全削除\n     *\n     * @param options\n     *  - `en` read options.\n     *  - `ja` 書き込みオプションを指定\n     */\n    public clear(options?: RegistryWriteOptions): void {\n        options = options ?? {};\n        this._store = {};\n        void this._storage.removeItem(this._rootKey, options);\n        if (!options.silent) {\n            this.publish('change', null, null, null);\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// private methods:\n\n    /** @internal get root object */\n    private targetRoot(field?: string): StorageData {\n        if (field) {\n            // ensure [field] object.\n            this._store[field] = this._store[field] || {};\n            return this._store[field] as StorageData;\n        } else {\n            return this._store;\n        }\n    }\n}\n","import type { UnknownObject } from '@cdp/core-utils';\nimport { Subscription, EventBroker } from '@cdp/events';\nimport { _internal } from './internal';\n\n/**\n * @en Event observation state definition.\n * @ja イベント購読状態定義\n */\nexport const enum ObservableState {\n    /** observable ready */\n    ACTIVE   = 'active',\n    /** NOT observed, but property changes are recorded. */\n    SUSEPNDED = 'suspended',\n    /** NOT observed, and not recording property changes. */\n    DISABLED = 'disabled',\n}\n\n/**\n * @en Observable common interface.\n * @ja Observable 共通インターフェイス\n */\nexport interface IObservable {\n    /**\n     * @en Subscrive event(s).\n     * @ja イベント購読設定\n     */\n    on(...args: unknown[]): Subscription;\n\n    /**\n     * @en Unsubscribe event(s).\n     * @ja イベント購読解除\n     */\n    off(...args: unknown[]): void;\n\n    /**\n     * @en Suspend or disable the event observation state.\n     * @ja イベント購読状態のサスペンド\n     *\n     * @param noRecord\n     *  - `en` `true`: not recording property changes and clear changes. / `false`: property changes are recorded and fired when {@link resume}() callded. (default)\n     *  - `ja` `true`: プロパティ変更も記録せず, 現在の記録も破棄 / `false`: プロパティ変更は記録され, {@link resume}() 時に発火する (既定)\n     */\n    suspend(noRecord?: boolean): this;\n\n    /**\n     * @en Resume the event observation state.\n     * @ja イベント購読状態のリジューム\n     */\n    resume(): this;\n\n    /**\n     * @en observation state\n     * @ja 購読可能状態\n     */\n    getObservableState(): ObservableState;\n}\n\n/**\n * @en Interface able to access to {@link EventBroker} with {@link IObservable}.\n * @ja {@link IObservable} の持つ内部 {@link EventBroker} にアクセス可能なインターフェイス\n */\nexport interface IObservableEventBrokerAccess<T extends object = any> extends IObservable { // eslint-disable-line @typescript-eslint/no-explicit-any\n    /**\n     * @en Get {@link EventBroker} instance.\n     * @ja {@link EventBroker} インスタンスの取得\n     */\n    getBroker(): EventBroker<T>;\n}\n\n/**\n * @en Check the value-type is {@link IObservable}.\n * @ja {@link IObservable} 型であるか判定\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` 評価する値\n */\nexport function isObservable(x: unknown): x is IObservable {\n    return Boolean(x && (x as UnknownObject)[_internal]);\n}\n"],"mappings":"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","ignoreList":[]}