{"version":3,"sources":["cdp:///@cdp/lib-core/core-utils/config.ts","cdp:///@cdp/lib-core/core-utils/types.ts","cdp:///@cdp/lib-core/core-utils/verify.ts","cdp:///@cdp/lib-core/core-utils/deep-circuit.ts","cdp:///@cdp/lib-core/core-utils/mixins.ts","cdp:///@cdp/lib-core/core-utils/object.ts","cdp:///@cdp/lib-core/core-utils/safe.ts","cdp:///@cdp/lib-core/core-utils/timer.ts","cdp:///@cdp/lib-core/core-utils/misc.ts","cdp:///@cdp/lib-core/core-utils/array.ts","cdp:///@cdp/lib-core/core-utils/date.ts","cdp:///@cdp/lib-core/events/publisher.ts","cdp:///@cdp/lib-core/events/broker.ts","cdp:///@cdp/lib-core/events/receiver.ts","cdp:///@cdp/lib-core/events/source.ts","cdp:///@cdp/lib-core/promise/internal.ts","cdp:///@cdp/lib-core/promise/cancel-token.ts","cdp:///@cdp/lib-core/promise/cancelable-promise.ts","cdp:///@cdp/lib-core/promise/utils.ts","cdp:///@cdp/lib-core/promise/deferred.ts","cdp:///@cdp/lib-core/observable/internal.ts","cdp:///@cdp/lib-core/observable/object.ts","cdp:///@cdp/lib-core/observable/array.ts","cdp:///@cdp/lib-core/result/result-code-defs.ts","cdp:///@cdp/lib-core/result/result-code.ts","cdp:///@cdp/lib-core/result/result.ts","cdp:///@cdp/lib-core/core-storage/memory-storage.ts","cdp:///@cdp/lib-core/core-template/internal.ts","cdp:///@cdp/lib-core/core-template/cache.ts","cdp:///@cdp/lib-core/core-template/utils.ts","cdp:///@cdp/lib-core/core-template/scanner.ts","cdp:///@cdp/lib-core/core-template/context.ts","cdp:///@cdp/lib-core/core-template/parse.ts","cdp:///@cdp/lib-core/core-template/writer.ts","cdp:///@cdp/lib-core/core-template/class.ts","cdp:///@cdp/lib-core/promise/promise-manager.ts","cdp:///@cdp/lib-core/core-storage/registry.ts","cdp:///@cdp/lib-core/observable/common.ts"],"names":["getGlobal","globalThis","Function","ensureObject","parent","names","root","name","getGlobalNamespace","namespace","getConfig","configName","exists","x","isNil","isString","isNumber","isSymbol","isPrimitive","isArray","Array","isObject","Boolean","isPlainObject","Object","getPrototypeOf","ownInstanceOf","isEmptyObject","isFunction","isIterable","Symbol","iterator","_typedArrayNames","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","isTypedArray","className","ctor","prototype","toStringTagName","toStringTag","constructor","toString","call","slice","sameClass","lhs","rhs","$cdp","_verifier","notNil","message","TypeError","typeOf","type","array","iterable","instanceOf","notOwnInstanceOf","hasProperty","prop","String","hasOwnProperty","verify","method","args","arrayEqual","len","length","i","deepEqual","bufferEqual","size","byteLength","pos","f64L","f64R","is","L","DataView","R","getUint32","getUint16","getUint8","valueL","valueOf","valueR","isRegExpL","RegExp","isRegExpR","isArrayL","isArrayR","isBufferL","ArrayBuffer","isBufferR","isBufferViewL","isView","isBufferViewR","buffer","isIterableL","isIterableR","keysL","Set","keys","keysR","key","has","add","cloneArrayBuffer","arrayBuffer","result","set","needUpdate","oldValue","newValue","exceptUndefined","undefined","merge","target","source","cloneRegExp","regexp","flags","lastIndex","cloneTypedArray","typedArray","byteOffset","cloneDataView","dataView","mergeArray","mergeSet","item","Map","mergeMap","k","v","get","obj","deepMerge","sources","deepCopy","src","_objPrototype","_instanceOf","hasInstance","_override","_isInherited","_constructors","_classBase","_classSources","_protoExtendsOnly","reflectProperties","defineProperty","getOwnPropertyDescriptor","copyProperties","getOwnPropertyNames","filter","test","forEach","getOwnPropertySymbols","setInstanceOf","behaviour","isPrototypeOf","applied","defineProperties","value","writable","enumerable","mixins","base","_hasSourceConstructor","_MixinBase","super","constructors","this","srcClass","handler","apply","thisobj","arglist","Proxy","map","isMixedWith","reduce","p","c","static","instance","ctors","desc","orgInstanceOf","inst","propName","invert","accessible","callable","safe","create","stub","_root","setTimeout","clearTimeout","setInterval","clearInterval","post","executor","Promise","resolve","then","createEscaper","escaper","match","join","regexTest","regexReplace","replace","mapHtmlEscape","escapeHTML","unescapeHTML","fromTypedData","data","JSON","stringify","dropUndefined","nilSerialize","restoreNil","_localId","randomInt","min","max","Math","floor","random","_regexCancelLikeString","isChancelLikeError","error","capitalize","lowercaseRest","remainingChars","toLowerCase","charAt","toUpperCase","decapitalize","camelize","lower","trim","unique","difference","others","arrays","acc","ary","el","includes","async","callback","thisArg","all","a","_computeDateFuncMap","year","date","setUTCFullYear","getUTCFullYear","month","setUTCMonth","getUTCMonth","day","setUTCDate","getUTCDate","hour","setUTCHours","getUTCHours","setUTCMinutes","getUTCMinutes","sec","setUTCSeconds","getUTCSeconds","msec","setUTCMilliseconds","getUTCMilliseconds","_mapListeners","WeakMap","listeners","validChannel","channel","validListener","listener","triggerEvent","original","list","eventArgs","handled","e","reject","EventPublisher","publish","hasListener","channels","on","ch","freeze","enable","unsubscribe","delete","once","context","managed","off","clear","EventBroker","trigger","_context","register","subscriptions","s","push","listenerMap","unregister","values","EventReceiver","listenTo","listenToOnce","stopListening","EventSource","EventSourceBase","_cancel","_close","invalidSubscription","_tokens","getContext","CancelToken","linkedTokens","cancel","close","token","onCancel","onClose","linkedTokenSet","t","status","broker","reason","seal","bind","cancelable","requested","closed","NativePromise","nativeThen","_create","CancelablePromise","species","cancelToken","thenArgs","dispose","Error","setPrototypeOf","onfulfilled","onrejected","catch","finally","onfinally","extendPromise","wait","promises","safePromises","promise","checkCanceled","noAutomaticNativeExtend","Deferred","publications","assign","EventBrokerProxy","_broker","_internal","_notify","_stockChange","_notifyChanges","verifyObservable","_proxyHandler","receiver","Reflect","state","ObservableObject","internal","changed","changeMap","property","props","suspend","noRecord","resume","getObservableState","getBroker","observable","notify","properties","keyValue","keyValuePairs","curValue","eventBroker","attributes","byMethod","oldLength","newLength","stock","scrap","isValidArrayIndex","Number","deleteProperty","index","n","trunc","ObservableArray","arguments","records","indexes","argLength","sort","comparator","old","from","splice","start","deleteCount","items","oldLen","shift","unshift","callbackfn","rci","findRelatedChangeIndex","checkType","rct","r","prevRecord","CDP_DECLARE","RESULT_CODE","ASSIGN_RESULT_CODE","extend","_code2message","declareResultCode","code","succeeded","RangeError","signed","resultCode","ERROR_MESSAGE_MAP","DECLARE_SUCCESS_CODE","DECLARE_ERROR_CODE","FAILED","SUCCEEDED","toNameString","tag","prefix","toHelpString","isFinite","configurable","Result","cause","SUCCESS","FAIL","time","isError","Date","now","isSucceeded","isFailed","isCanceled","ABORT","codeName","help","MemoryStorage","_storage","kind","options","cc","dataType","newVal","oldVal","silent","memoryStorage","globalSettings","tags","escape","cache","escapeTemplateExp","Scanner","_source","_tail","_pos","eos","scan","exec","string","substring","scanUntil","search","Context","view","parentContext","_view","_cache","_parent","lookup","intermediateValue","lookupHit","indexOf","split","_regexp","white","space","equals","curly","Writer","parse","template","cacheKey","buildCacheKey","tokens","parseTemplate","lineHasNonSpace","sections","spaces","hasTag","nonSpace","indentation","tagIndex","stripSpace","pop","compileTags","tagsToCompile","openingTag","closingTag","closingCurly","reTag","reWhite","reEquals","reCurly","_regxpTags","scanner","openSection","reOpeningTag","reClosingTag","reClosingCurly","valueLength","chr","nestTokens","nestedTokens","collector","section","squashTokens","squashedTokens","lastToken","render","partials","renderTokens","originalTemplate","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","self","subRender","indentPartial","partial","filteredIndentation","partialByNl","indentedValue","writer","PromiseManager","_pool","cancelSource","always","release","race","allSettled","any","abort","canceler","Registry","storage","rootKey","formatSpace","_store","_rootKey","_defaultOptions","jsonSpace","getItem","opts","setItem","read","field","structure","lastKey","reg","targetRoot","write","noSave","remove","removeItem","TemplateEngine","typeString","jst","cacheLocation","clearCache","setiings","oldSettings","at","idx","classify","combination","count","retval","val","entries","n1","row","j","n2","concat","computeDate","unit","getTime","func","dasherize","debounce","immediate","handle","later","debounced","callNow","diff","drop","dropValues","every","bits","find","findIndex","groupBy","sumKeys","groupKey","_groupKey","_sumKeys","hash","res","_key","keyList","h","resKey","indices","excludes","exList","ex","intersection","isBigInt","isBoolean","isObservable","isResult","luid","zeroPad","id","padStart","makeCanceledResult","makeResult","noop","omit","omitKeys","memo","permutation","parts","pick","pickKeys","initialValue","hasInit","fallback","o","sameType","sample","last","rand","temp","setMixClassAttribute","attr","shuffle","destructive","swap","sleep","elapse","some","throttle","previous","leading","throttled","arg","remaining","trailing","toResult","toTypedData","underscored","union","flat","without"],"mappings":"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","sourcesContent":["/**\n * @en Safe `global` accessor.\n * @ja `global` ã¢ã¯ã»ããµ\n * \n * @returns\n *  - `en` `global` object of the runtime environment\n *  - `ja` ç°å¢ã«å¿ãã `global` ãªãã¸ã§ã¯ã\n */\nexport function getGlobal(): typeof globalThis {\n    // eslint-disable-next-line no-new-func, @typescript-eslint/no-implied-eval\n    return ('object' === typeof globalThis) ? globalThis : Function('return this')();\n}\n\n/**\n * @en Ensure named object as parent's property.\n * @ja è¦ªãªãã¸ã§ã¯ããæå®ãã¦, ååã«æå®ãããªãã¸ã§ã¯ãã®å­å¨ãä¿è¨¼\n *\n * @param parent\n *  - `en` parent object. If null given, `globalThis` is assigned.\n *  - `ja` è¦ªãªãã¸ã§ã¯ã. null ã®å ´åã¯ `globalThis` ãä½¿ç¨ããã\n * @param names\n *  - `en` object name chain for ensure instance.\n *  - `ja` ä¿è¨¼ãããªãã¸ã§ã¯ãã®åå\n */\nexport function ensureObject<T extends object = object>(parent: object | null, ...names: string[]): T {\n    let root = parent || getGlobal();\n    for (const name of names) {\n        root[name] = root[name] || {};\n        root = root[name];\n    }\n    return root as T;\n}\n\n/**\n * @en Global namespace accessor.\n * @ja ã°ã­ã¼ãã«ãã¼ã ã¹ãã¼ã¹ã¢ã¯ã»ããµ\n */\nexport function getGlobalNamespace<T extends object = object>(namespace: string): T {\n    return ensureObject<T>(null, namespace);\n}\n\n/**\n * @en Global config accessor.\n * @ja ã°ã­ã¼ãã«ã³ã³ãã£ã°ã¢ã¯ã»ããµ\n *\n * @returns default: `CDP.Config`\n */\nexport function getConfig<T extends object = object>(namespace = 'CDP', configName = 'Config'): T {\n    return ensureObject<T>(getGlobalNamespace(namespace), configName);\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n    @typescript-eslint/ban-types,\n */\n\n/**\n * @en Primitive type of JavaScript.\n * @ja JavaScript ã®ããªããã£ãå\n */\nexport type Primitive = string | number | boolean | symbol | bigint | null | undefined;\n\n/**\n * @en The general null type.\n * @ja ç©ºãç¤ºãåå®ç¾©\n */\nexport type Nil = void | null | undefined;\n\n/**\n * @en The type of object or [[Nil]].\n * @ja [[Nil]] ã«ãªããããªãã¸ã§ã¯ãåå®ç¾©\n */\nexport type Nillable<T extends object> = T | Nil;\n\n/**\n * @en Avoid the `Function`types.\n * @ja æ±ç¨é¢æ°å\n */\nexport type UnknownFunction = (...args: unknown[]) => unknown;\n\n/**\n * @en Avoid the `Object` and `{}` types, as they mean \"any non-nullish value\".\n * @ja æ±ç¨ãªãã¸ã§ã¯ãå. `Object` ããã³ `{}` ã¿ã¤ãã¯ãnullã§ãªãå¤ããæå³ããããä»£ä¾¡ã¨ãã¦ä½¿ç¨\n */\nexport type UnknownObject = Record<string, unknown>;\n\n/**\n * @en Non-nullish value.\n * @ja é Null å¤\n */\nexport type NonNil = {};\n\n/**\n * @en JavaScript type set interface.\n * @ja JavaScript ã®åã®éå\n */\ninterface TypeList {\n    string: string;\n    number: number;\n    boolean: boolean;\n    symbol: symbol;\n    bigint: bigint;\n    undefined: void | undefined;\n    object: object | null;\n    function(...args: unknown[]): unknown;\n}\n\n/**\n * @en The key list of [[TypeList]].\n * @ja [[TypeList]] ã­ã¼ä¸è¦§\n */\nexport type TypeKeys = keyof TypeList;\n\n/**\n * @en Type base definition.\n * @ja åã®è¦å®å®ç¾©\n */\nexport interface Type<T extends object> extends Function {\n    readonly prototype: T;\n}\n\n/**\n * @en Type of constructor.\n * @ja ã³ã³ã¹ãã©ã¯ã¿å\n */\nexport interface Constructor<T extends object> extends Type<T> {\n    new(...args: any[]): T;\n}\n\n/**\n * @en Type of class.\n * @ja ã¯ã©ã¹å\n */\nexport type Class<T extends object = object> = Constructor<T>;\n\n/**\n * @en Ensure for function parameters to tuple.\n * @ja é¢æ°ãã©ã¡ã¼ã¿ã¨ãã¦ tuple ãä¿è¨¼\n */\nexport type Arguments<T> = T extends any[] ? T : [T];\n\n/**\n * @en Rmove `readonly` attributes from input type.\n * @ja `readonly` å±æ§ãè§£é¤\n */\nexport type Writable<T> = { -readonly [K in keyof T]: T[K] };\n\n/**\n * @en Extract functional property names.\n * @ja é¢æ°ãã­ããã£åã®æ½åº\n */\nexport type FunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T] & string;\n\n/**\n * @en Extract functional properties.\n * @ja é¢æ°ãã­ããã£ã®æ½åº\n */\nexport type FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;\n\n/**\n * @en Extract non-functional property names.\n * @ja éé¢æ°ãã­ããã£åã®æ½åº\n */\nexport type NonFunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T] & string;\n\n/**\n * @en Extract non-functional properties.\n * @ja éé¢æ°ãã­ããã£ã®æ½åº\n */\nexport type NonFunctionProperties<T> = Pick<T, NonFunctionPropertyNames<T>>;\n\n/**\n * @en Extract non-functional types.\n * @ja éé¢æ°åã®æ½åº\n */\nexport type NonFunction<T> = T extends Function ? never : T;\n\n/**\n * @en Extract object key list. (ensure only 'string')\n * @ja ãªãã¸ã§ã¯ãã®ã­ã¼ä¸è¦§ãæ½åº ('string' åã®ã¿ãä¿è¨¼)\n */\nexport type Keys<T extends object> = keyof Omit<T, number | symbol>;\n\n/**\n * @en Extract object type list.\n * @ja ãªãã¸ã§ã¯ãã®åä¸è¦§ãæ½åº\n */\nexport type Types<T extends object> = T[keyof T];\n\n/**\n * @en Convert object key to type.\n * @ja ãªãã¸ã§ã¯ãã­ã¼ããåã¸å¤æ\n */\nexport type KeyToType<O extends object, K extends keyof O> = K extends keyof O ? O[K] : never;\n\n/**\n * @en Convert object type to key.\n * @ja ãªãã¸ã§ã¯ãåããã­ã¼ã¸å¤æ\n */\nexport type TypeToKey<O extends object, T extends Types<O>> = { [K in keyof O]: O[K] extends T ? K : never }[keyof O];\n\n/**\n * @en The [[PlainObject]] type is a JavaScript object containing zero or more key-value pairs. <br>\n *     'Plain' means it from other kinds of JavaScript objects. ex: null, user-defined arrays, and host objects such as `document`.\n * @ja 0 ä»¥ä¸ã® key-value ãã¢ãæã¤ [[PlainObject]] å®ç¾© <br>\n *     'Plain' ã¨ã¯ä»ã®ç¨®é¡ã® JavaScript ãªãã¸ã§ã¯ããå«ã¾ãªããªãã¸ã§ã¯ããæå³ãã. ä¾:  null, ã¦ã¼ã¶ã¼å®ç¾©éå, ã¾ãã¯ `document` ã®ãããªçµã¿è¾¼ã¿ãªãã¸ã§ã¯ã\n */\nexport type PlainObject<T = {} | null | undefined> = Record<string, T>;\n\n/**\n * @en Object can be guaranteed definition. Be careful not to abuse it because it does not force the cast.\n *   - Unlike [[PlainObject]], it can accept Class (built-in object), Array, Function.\n *   - Unlike `object`, you can access unknown properties.\n *   - Unlike `{} / Object`, it can repel [[Primitive]].\n * @ja Object ãä¿è¨¼å¯è½ãªå®ç¾©. ã­ã£ã¹ããå¼·å¶ããªãããä¹±ç¨ããªãããã«æ³¨æãå¿è¦.\n *   - [[PlainObject]] ã¨éããClass (çµã¿è¾¼ã¿ãªãã¸ã§ã¯ã), Array, Function ãåãä»ãããã¨ãã§ãã.\n *   - `object` ã¨éããæªç¥ã®ãã­ããã£ã«ã¢ã¯ã»ã¹ãããã¨ãã§ãã.\n *   - `{} / Object` ã¨éãã[[Primitive]] ãã¯ãããã¨ãã§ãã.\n */\nexport type AnyObject = Record<string, any>;\n\n/**\n * @en The data type list by which style compulsion is possible.\n * @ja åå¼·å¶å¯è½ãªãã¼ã¿åä¸è¦§\n */\nexport type TypedData = string | number | boolean | null | object;\n\n/**\n * @en The data type list of TypedArray.\n * @ja TypedArray ä¸è¦§\n */\nexport type TypedArray = Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array;\n\n/**\n * @en TypedArray constructor.\n * @ja TypedArray ã³ã³ã¹ãã©ã¯ã¿å®ç¾©\n */\nexport interface TypedArrayConstructor {\n    readonly prototype: TypedArray;\n    new(seed: number | ArrayLike<number> | ArrayBufferLike): TypedArray;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): TypedArray;\n\n    /**\n     * @en The size in bytes of each element in the array.\n     * @ja è¦ç´ ã®ãã¤ããµã¤ãº\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * @en Returns a new array from a set of elements.\n     * @ja è¦ç´ ãè¨­å®ãæ°è¦éåãè¿å´\n     *\n     * @param items\n     *  - `en` A set of elements to include in the new array object.\n     *  - `ja` æ°ãã«è¨­å®ããè¦ç´ \n     */\n    of(...items: number[]): TypedArray;\n\n    /**\n     * @en Creates an array from an array-like or iterable object.\n     * @ja array-like / iteratable ãªãã¸ã§ã¯ãããæ°è¦éåãä½æ\n     *\n     * @param arrayLike\n     *  - `en` An array-like or iterable object to convert to an array.\n     *  - `ja` array-like ãããã¯ iteratable ãªãã¸ã§ã¯ã\n     */\n    from(arrayLike: ArrayLike<number>): TypedArray;\n\n    /**\n     * @en Creates an array from an array-like or iterable object.\n     * @ja array-like / iteratable ãªãã¸ã§ã¯ãããæ°è¦éåãä½æ\n     *\n     * @param arrayLike\n     *  - `en` An array-like or iterable object to convert to an array.\n     *  - `ja` array-like ãããã¯ iteratable ãªãã¸ã§ã¯ã\n     * @param mapfn\n     *  - `en` A mapping function to call on every element of the array.\n     *  - `ja` å¨è¦ç´ ã«é©ç¨ãããã­ã­ã·é¢æ°\n     * @param thisArg\n     *  - `en` Value of 'this' used to invoke the mapfn.\n     *  - `ja` mapfn ã«ä½¿ç¨ãã 'this'\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: unknown): TypedArray;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Check the value exists.\n * @ja å¤ãå­å¨ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function exists<T>(x: T | Nil): x is T {\n    return null != x;\n}\n\n/**\n * @en Check the value-type is [[Nil]].\n * @ja [[Nil]] åã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isNil(x: unknown): x is Nil {\n    return null == x;\n}\n\n/**\n * @en Check the value-type is String.\n * @ja String åã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isString(x: unknown): x is string {\n    return 'string' === typeof x;\n}\n\n/**\n * @en Check the value-type is Number.\n * @ja Number åã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isNumber(x: unknown): x is number {\n    return 'number' === typeof x;\n}\n\n/**\n * @en Check the value-type is Boolean.\n * @ja Boolean åã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isBoolean(x: unknown): x is boolean {\n    return 'boolean' === typeof x;\n}\n\n/**\n * @en Check the value-type is Symble.\n * @ja Symbol åã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isSymbol(x: unknown): x is symbol {\n    return 'symbol' === typeof x;\n}\n\n/**\n * @en Check the value-type is BigInt.\n * @ja BigInt åã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isBigInt(x: unknown): x is bigint {\n    return 'bigint' === typeof x;\n}\n\n/**\n * @en Check the value-type is primitive type.\n * @ja ããªããã£ãåã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isPrimitive(x: unknown): x is Primitive {\n    return !x || ('function' !== typeof x) && ('object' !== typeof x);\n}\n\n/**\n * @en Check the value-type is Array.\n * @ja Array åã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport const isArray = Array.isArray; // eslint-disable-line @typescript-eslint/unbound-method\n\n/**\n * @en Check the value-type is Object.\n * @ja Object åã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isObject(x: unknown): x is object {\n    return Boolean(x) && 'object' === typeof x;\n}\n\n/**\n * @en Check the value-type is [[PlainObject]].\n * @ja [[PlainObject]] åã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isPlainObject(x: unknown): x is PlainObject {\n    if (!isObject(x)) {\n        return false;\n    }\n\n    // create from `Object.create( null )` is plain\n    if (!Object.getPrototypeOf(x)) {\n        return true;\n    }\n\n    return ownInstanceOf(Object, x);\n}\n\n/**\n * @en Check the value-type is empty object.\n * @ja ç©ºãªãã¸ã§ã¯ãã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isEmptyObject(x: unknown): x is object {\n    if (!isPlainObject(x)) {\n        return false;\n    }\n    for (const name in x) { // eslint-disable-line @typescript-eslint/no-unused-vars\n        return false;\n    }\n    return true;\n}\n\n/**\n * @en Check the value-type is Function.\n * @ja Function åã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isFunction(x: unknown): x is TypeList['function'] {\n    return 'function' === typeof x;\n}\n\n/**\n * @en Check the value-type is input.\n * @ja æå®ããåã§ãããå¤å®\n *\n * @param type\n *  - `en` evaluated type\n *  - `ja` è©ä¾¡ããå\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function typeOf<K extends TypeKeys>(type: K, x: unknown): x is TypeList[K] {\n    return typeof x === type;\n}\n\n/**\n * @en Check the value has iterator.\n * @ja iterator ãææãã¦ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isIterable<T>(x: Nillable<Iterable<T>>): x is Iterable<T>;\nexport function isIterable(x: unknown): x is Iterable<unknown>;\nexport function isIterable(x: unknown): any {\n    return Symbol.iterator in Object(x);\n}\n\n/** @internal */\nconst _typedArrayNames = {\n    'Int8Array': true,\n    'Uint8Array': true,\n    'Uint8ClampedArray': true,\n    'Int16Array': true,\n    'Uint16Array': true,\n    'Int32Array': true,\n    'Uint32Array': true,\n    'Float32Array': true,\n    'Float64Array': true,\n};\n\n/**\n * @en Check the value is one of [[TypedArray]].\n * @ja æå®ããã¤ã³ã¹ã¿ã³ã¹ã [[TypedArray]] ã®ä¸ç¨®ã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isTypedArray(x: unknown): x is TypedArray {\n    return !!_typedArrayNames[className(x)];\n}\n\n/**\n * @en Check the value instance of input.\n * @ja æå®ããã¤ã³ã¹ã¿ã³ã¹ã§ãããå¤å®\n *\n * @param ctor\n *  - `en` evaluated constructor\n *  - `ja` è©ä¾¡ããã³ã³ã¹ãã©ã¯ã¿\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function instanceOf<T extends object>(ctor: Nillable<Type<T>>, x: unknown): x is T {\n    return ('function' === typeof ctor) && (x instanceof ctor);\n}\n\n/**\n * @en Check the value instance of input constructor (except sub class).\n * @ja æå®ã³ã³ã¹ãã©ã¯ã¿ã®ã¤ã³ã¹ã¿ã³ã¹ã§ãããå¤å® (æ´¾çã¯ã©ã¹ã¯å«ããªã)\n *\n * @param ctor\n *  - `en` evaluated constructor\n *  - `ja` è©ä¾¡ããã³ã³ã¹ãã©ã¯ã¿\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function ownInstanceOf<T extends object>(ctor: Nillable<Type<T>>, x: unknown): x is T {\n    return (null != x) && ('function' === typeof ctor) && (Object.getPrototypeOf(x) === Object(ctor.prototype));\n}\n\n/**\n * @en Get the value's class name.\n * @ja ã¯ã©ã¹åãåå¾\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function className(x: any): string { // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n    if (x != null) {\n        const toStringTagName = x[Symbol.toStringTag];\n        if (isString(toStringTagName)) {\n            return toStringTagName;\n        } else if (isFunction(x) && x.prototype && null != x.name) {\n            return x.name;\n        } else {\n            const ctor = x.constructor;\n            if (isFunction(ctor) && ctor === (Object(ctor.prototype) as object).constructor) {\n                return ctor.name;\n            }\n        }\n    }\n    return (Object.prototype.toString.call(x) as string).slice(8, -1);\n}\n\n/**\n * @en Check input values are same value-type.\n * @ja å¥åãåä¸åã§ãããå¤å®\n *\n * @param lhs\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n * @param rhs\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function sameType(lhs: unknown, rhs: unknown): boolean {\n    return typeof lhs === typeof rhs;\n}\n\n/**\n * @en Check input values are same class.\n * @ja å¥åãåä¸ã¯ã©ã¹ã§ãããå¤å®\n *\n * @param lhs\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n * @param rhs\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function sameClass(lhs: unknown, rhs: unknown): boolean {\n    if (null == lhs && null == rhs) {\n        return className(lhs) === className(rhs);\n    } else {\n        return (null != lhs) && (null != rhs) && (Object.getPrototypeOf(lhs) === Object.getPrototypeOf(rhs));\n    }\n}\n\n/**\n * @en Common Symble for framework.\n * @ja ãã¬ã¼ã ã¯ã¼ã¯ãå±éã§ä½¿ç¨ãã Symble\n */\nexport const $cdp = Symbol('@cdp');\n","/* eslint-disable\n    @typescript-eslint/ban-types,\n */\n\nimport {\n    UnknownFunction,\n    TypeKeys,\n    isArray,\n    exists,\n    className,\n} from './types';\n\n/**\n * @en Type verifier interface definition. <br>\n *     If invalid value received, the method throws `TypeError`.\n * @ja åæ¤è¨¼ã®ã¤ã³ã¿ã¼ãã§ã¤ã¹å®ç¾© <br>\n *     éåããå ´åã¯ `TypeError` ãçºç\n *\n *\n */\ninterface Verifier {\n    /**\n     * @en Verification for the input value is not [[Nil]].\n     * @ja [[Nil]] ã§ãªããã¨ãæ¤è¨¼\n     *\n     * @param notNil.x\n     *  - `en` evaluated value\n     *  - `ja` è©ä¾¡ããå¤\n     * @param notNil.message\n     *  - `en` custom error message\n     *  - `ja` ã«ã¹ã¿ã ã¨ã©ã¼ã¡ãã»ã¼ã¸\n     */\n    notNil: (x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input is [[TypeKeys]].\n     * @ja æå®ãã [[TypeKeys]] ã§ãããæ¤è¨¼\n     *\n     * @param typeOf.type\n     *  - `en` one of [[TypeKeys]]\n     *  - `ja` [[TypeKeys]] ãæå®\n     * @param typeOf.x\n     *  - `en` evaluated value\n     *  - `ja` è©ä¾¡ããå¤\n     * @param typeOf.message\n     *  - `en` custom error message\n     *  - `ja` ã«ã¹ã¿ã ã¨ã©ã¼ã¡ãã»ã¼ã¸\n     */\n    typeOf: (type: TypeKeys, x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input value is `Array`.\n     * @ja `Array` ã§ãããæ¤è¨¼\n     *\n     * @param array.x\n     *  - `en` evaluated value\n     *  - `ja` è©ä¾¡ããå¤\n     * @param array.message\n     *  - `en` custom error message\n     *  - `ja` ã«ã¹ã¿ã ã¨ã©ã¼ã¡ãã»ã¼ã¸\n     */\n    array: (x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input value is `Iterable`.\n     * @ja `Iterable` ã§ãããæ¤è¨¼\n     *\n     * @param iterable.x\n     *  - `en` evaluated value\n     *  - `ja` è©ä¾¡ããå¤\n     * @param iterable.message\n     *  - `en` custom error message\n     *  - `ja` ã«ã¹ã¿ã ã¨ã©ã¼ã¡ãã»ã¼ã¸\n     */\n    iterable: (x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input instance is equal comparative target constructor.\n     * @ja æå®ã³ã³ã¹ãã©ã¯ã¿ã®ã¤ã³ã¹ã¿ã³ã¹ã§ãããæ¤è¨¼\n     *\n     * @param instanceOf.ctor\n     *  - `en` comparative target constructor\n     *  - `ja` æ¯è¼å¯¾è±¡ã®ã³ã³ã¹ãã©ã¯ã¿\n     * @param instanceOf.x\n     *  - `en` evaluated value\n     *  - `ja` è©ä¾¡ããå¤\n     * @param instanceOf.message\n     *  - `en` custom error message\n     *  - `ja` ã«ã¹ã¿ã ã¨ã©ã¼ã¡ãã»ã¼ã¸\n     */\n    instanceOf: (ctor: Function, x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input instance has `strictly` comparative target constructor.\n     * @ja æå®ã³ã³ã¹ãã©ã¯ã¿ã®å³å¯ä¸è´ããã¤ã³ã¹ã¿ã³ã¹ã§ãããæ¤è¨¼\n     *\n     * @param ownInstanceOf.ctor\n     *  - `en` comparative target constructor\n     *  - `ja` æ¯è¼å¯¾è±¡ã®ã³ã³ã¹ãã©ã¯ã¿\n     * @param ownInstanceOf.x\n     *  - `en` evaluated value\n     *  - `ja` è©ä¾¡ããå¤\n     * @param ownInstanceOf.message\n     *  - `en` custom error message\n     *  - `ja` ã«ã¹ã¿ã ã¨ã©ã¼ã¡ãã»ã¼ã¸\n     */\n    ownInstanceOf: (ctor: Function, x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input instance has not `strictly` equal comparative target constructor.\n     * @ja æå®ã³ã³ã¹ãã©ã¯ã¿ãæã¤ã¤ã³ã¹ã¿ã³ã¹ã§ãªããã¨ãæ¤è¨¼\n     *\n     * @param notOwnInstanceOf.ctor\n     *  - `en` comparative target constructor\n     *  - `ja` æ¯è¼å¯¾è±¡ã®ã³ã³ã¹ãã©ã¯ã¿\n     * @param notOwnInstanceOf.x\n     *  - `en` evaluated value\n     *  - `ja` è©ä¾¡ããå¤\n     * @param notOwnInstanceOf.message\n     *  - `en` custom error message\n     *  - `ja` ã«ã¹ã¿ã ã¨ã©ã¼ã¡ãã»ã¼ã¸\n     */\n    notOwnInstanceOf: (ctor: Function, x: unknown, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input value has specified property.\n     * @ja æå®ãã­ããã£ãæã£ã¦ãããæ¤è¨¼\n     *\n     * @param hasProperty.prop\n     *  - `en` specified property\n     *  - `ja` å¯¾è±¡ã®ãã­ããã£\n     * @param hasProperty.x\n     *  - `en` evaluated value\n     *  - `ja` è©ä¾¡ããå¤\n     * @param hasProperty.message\n     *  - `en` custom error message\n     *  - `ja` ã«ã¹ã¿ã ã¨ã©ã¼ã¡ãã»ã¼ã¸\n     */\n    hasProperty: (x: unknown, prop: PropertyKey, message?: string | null) => void | never;\n\n    /**\n     * @en Verification for the input value has own specified property.\n     * @ja æå®ãã­ããã£ãå¥åå¤èªèº«æã£ã¦ãããæ¤è¨¼\n     *\n     * @param hasOwnProperty.prop\n     *  - `en` specified property\n     *  - `ja` å¯¾è±¡ã®ãã­ããã£\n     * @param hasOwnProperty.x\n     *  - `en` evaluated value\n     *  - `ja` è©ä¾¡ããå¤\n     * @param hasOwnProperty.message\n     *  - `en` custom error message\n     *  - `ja` ã«ã¹ã¿ã ã¨ã©ã¼ã¡ãã»ã¼ã¸\n     */\n    hasOwnProperty: (x: unknown, prop: PropertyKey, message?: string | null) => void | never;\n}\n\n/**\n * @en List of method for type verify.\n * @ja åæ¤è¨¼ãæä¾ããã¡ã½ããä¸è¦§\n */\nexport type VerifyMethod = keyof Verifier;\n\n/**\n * @en Concrete type verifier object.\n * @ja åæ¤è¨¼å®è£ãªãã¸ã§ã¯ã\n *\n * @internal\n */\nconst _verifier: Verifier = {\n    notNil: (x: unknown, message?: string | null): void | never => {\n        if (null == x) {\n            exists(message) || (message = `${className(x)} is not a valid value.`);\n            throw new TypeError(message);\n        }\n    },\n\n    typeOf: (type: TypeKeys, x: unknown, message?: string | null): void | never => {\n        if (typeof x !== type) {\n            exists(message) || (message = `Type of ${className(x)} is not ${type}.`);\n            throw new TypeError(message);\n        }\n    },\n\n    array: (x: unknown, message?: string | null): void | never => {\n        if (!isArray(x)) {\n            exists(message) || (message = `${className(x)} is not an Array.`);\n            throw new TypeError(message);\n        }\n    },\n\n    iterable: (x: unknown, message?: string | null): void | never => {\n        if (!(Symbol.iterator in Object(x))) {\n            exists(message) || (message = `${className(x)} is not an iterable object.`);\n            throw new TypeError(message);\n        }\n    },\n\n    instanceOf: (ctor: Function, x: unknown, message?: string | null): void | never => {\n        if (!(x instanceof ctor)) {\n            exists(message) || (message = `${className(x)} is not an instance of ${ctor.name}.`);\n            throw new TypeError(message);\n        }\n    },\n\n    ownInstanceOf: (ctor: Function, x: unknown, message?: string | null): void | never => {\n        if (null == x || Object.getPrototypeOf(x) !== Object(ctor.prototype)) {\n            exists(message) || (message = `The object is not own instance of ${ctor.name}.`);\n            throw new TypeError(message);\n        }\n    },\n\n    notOwnInstanceOf: (ctor: Function, x: unknown, message?: string | null): void | never => {\n        if (null != x && Object.getPrototypeOf(x) === Object(ctor.prototype)) {\n            exists(message) || (message = `The object is own instance of ${ctor.name}.`);\n            throw new TypeError(message);\n        }\n    },\n\n    hasProperty: (x: unknown, prop: PropertyKey, message?: string | null): void | never => {\n        if (null == x || !(prop in (x as object))) {\n            exists(message) || (message = `The object does not have property ${String(prop)}.`);\n            throw new TypeError(message);\n        }\n    },\n\n    hasOwnProperty: (x: unknown, prop: PropertyKey, message?: string | null): void | never => {\n        if (null == x || !Object.prototype.hasOwnProperty.call(x, prop)) {\n            exists(message) || (message = `The object does not have own property ${String(prop)}.`);\n            throw new TypeError(message);\n        }\n    },\n};\n\n/**\n * @en Verify method.\n * @ja æ¤è¨¼ã¡ã½ãã\n *\n * @param method\n *  - `en` method name which using\n *  - `ja` ä½¿ç¨ããã¡ã½ããå\n * @param args\n *  - `en` arguments which corresponds to the method name\n *  - `ja` ã¡ã½ããåã«å¯¾å¿ããå¼æ°\n */\nexport function verify<TMethod extends VerifyMethod>(method: TMethod, ...args: Parameters<Verifier[TMethod]>): void | never {\n    (_verifier[method] as UnknownFunction)(...args);\n}\n\nexport { verify as default };\n","import {\n    TypedArray,\n    TypedArrayConstructor,\n    isFunction,\n    isArray,\n    isObject,\n    isIterable,\n    isTypedArray,\n    sameClass,\n} from './types';\n\n/** @internal helper for deepEqual() */\nfunction arrayEqual(lhs: unknown[], rhs: unknown[]): boolean {\n    const len = lhs.length;\n    if (len !== rhs.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (!deepEqual(lhs[i], rhs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @internal helper for deepEqual() */\nfunction bufferEqual(lhs: SharedArrayBuffer | ArrayBuffer, rhs: SharedArrayBuffer | ArrayBuffer): boolean {\n    const size = lhs.byteLength;\n    if (size !== rhs.byteLength) {\n        return false;\n    }\n    let pos = 0;\n    if (size - pos >= 8) {\n        const len = size >>> 3;\n        const f64L = new Float64Array(lhs, 0, len);\n        const f64R = new Float64Array(rhs, 0, len);\n        for (let i = 0; i < len; i++) {\n            if (!Object.is(f64L[i], f64R[i])) {\n                return false;\n            }\n        }\n        pos = len << 3;\n    }\n    if (pos === size) {\n        return true;\n    }\n    const L = new DataView(lhs);\n    const R = new DataView(rhs);\n    if (size - pos >= 4) {\n        if (!Object.is(L.getUint32(pos), R.getUint32(pos))) {\n            return false;\n        }\n        pos += 4;\n    }\n    if (size - pos >= 2) {\n        if (!Object.is(L.getUint16(pos), R.getUint16(pos))) {\n            return false;\n        }\n        pos += 2;\n    }\n    if (size > pos) {\n        if (!Object.is(L.getUint8(pos), R.getUint8(pos))) {\n            return false;\n        }\n        pos += 1;\n    }\n    return pos === size;\n}\n\n/**\n * @en Performs a deep comparison between two values to determine if they are equivalent.\n * @ja 2å¤ã®è©³ç´°æ¯è¼ãã, ç­ãããã©ããå¤å®\n */\nexport function deepEqual(lhs: unknown, rhs: unknown): boolean {\n    if (lhs === rhs) {\n        return true;\n    }\n    if (isFunction(lhs) && isFunction(rhs)) {\n        return lhs.length === rhs.length && lhs.name === rhs.name;\n    }\n    if (!isObject(lhs) || !isObject(rhs)) {\n        return false;\n    }\n    { // Primitive Wrapper Objects / Date\n        const valueL = lhs.valueOf();\n        const valueR = rhs.valueOf();\n        if (lhs !== valueL || rhs !== valueR) {\n            return valueL === valueR;\n        }\n    }\n    { // RegExp\n        const isRegExpL = lhs instanceof RegExp;\n        const isRegExpR = rhs instanceof RegExp;\n        if (isRegExpL || isRegExpR) {\n            return isRegExpL === isRegExpR && String(lhs) === String(rhs);\n        }\n    }\n    { // Array\n        const isArrayL = isArray(lhs);\n        const isArrayR = isArray(rhs);\n        if (isArrayL || isArrayR) {\n            return isArrayL === isArrayR && arrayEqual(lhs as unknown[], rhs as unknown[]);\n        }\n    }\n    { // ArrayBuffer\n        const isBufferL = lhs instanceof ArrayBuffer;\n        const isBufferR = rhs instanceof ArrayBuffer;\n        if (isBufferL || isBufferR) {\n            return isBufferL === isBufferR && bufferEqual(lhs as ArrayBuffer, rhs as ArrayBuffer);\n        }\n    }\n    { // ArrayBufferView\n        const isBufferViewL = ArrayBuffer.isView(lhs);\n        const isBufferViewR = ArrayBuffer.isView(rhs);\n        if (isBufferViewL || isBufferViewR) {\n            return isBufferViewL === isBufferViewR && sameClass(lhs, rhs)\n                && bufferEqual((lhs as ArrayBufferView).buffer, (rhs as ArrayBufferView).buffer);\n        }\n    }\n    { // other Iterable\n        const isIterableL = isIterable(lhs);\n        const isIterableR = isIterable(rhs);\n        if (isIterableL || isIterableR) {\n            return isIterableL === isIterableR && arrayEqual([...(lhs as unknown[])], [...(rhs as unknown[])]);\n        }\n    }\n    if (sameClass(lhs, rhs)) {\n        const keysL = new Set(Object.keys(lhs));\n        const keysR = new Set(Object.keys(rhs));\n        if (keysL.size !== keysR.size) {\n            return false;\n        }\n        for (const key of keysL) {\n            if (!keysR.has(key)) {\n                return false;\n            }\n        }\n        for (const key of keysL) {\n            if (!deepEqual(lhs[key], rhs[key])) {\n                return false;\n            }\n        }\n    } else {\n        for (const key in lhs) {\n            if (!(key in rhs)) {\n                return false;\n            }\n        }\n        const keys = new Set<string>();\n        for (const key in rhs) {\n            if (!(key in lhs)) {\n                return false;\n            }\n            keys.add(key);\n        }\n        for (const key of keys) {\n            if (!deepEqual(lhs[key], rhs[key])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal clone RegExp */\nfunction cloneRegExp(regexp: RegExp): RegExp {\n    const result = new RegExp(regexp.source, regexp.flags);\n    result.lastIndex = regexp.lastIndex;\n    return result;\n}\n\n/** @internal clone ArrayBuffer */\nfunction cloneArrayBuffer(arrayBuffer: ArrayBuffer): ArrayBuffer {\n    const result = new ArrayBuffer(arrayBuffer.byteLength);\n    new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n    return result;\n}\n\n/** @internal clone DataView */\nfunction cloneDataView(dataView: DataView): DataView {\n    const buffer = cloneArrayBuffer(dataView.buffer);\n    return new DataView(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/** @internal clone TypedArray */\nfunction cloneTypedArray<T extends TypedArray>(typedArray: T): T {\n    const buffer = cloneArrayBuffer(typedArray.buffer);\n    return new (typedArray.constructor as TypedArrayConstructor)(buffer, typedArray.byteOffset, typedArray.length) as T;\n}\n\n/** @internal check necessary to update */\nfunction needUpdate(oldValue: unknown, newValue: unknown, exceptUndefined: boolean): boolean {\n    if (oldValue !== newValue) {\n        return true;\n    } else {\n        return (exceptUndefined && undefined === oldValue);\n    }\n}\n\n/** @internal merge Array */\nfunction mergeArray(target: unknown[], source: unknown[]): unknown[] {\n    for (let i = 0, len = source.length; i < len; i++) {\n        const oldValue = target[i];\n        const newValue = merge(oldValue, source[i]);\n        !needUpdate(oldValue, newValue, false) || (target[i] = newValue);\n    }\n    return target;\n}\n\n/** @internal merge Set */\nfunction mergeSet(target: Set<unknown>, source: Set<unknown>): Set<unknown> {\n    for (const item of source) {\n        target.has(item) || target.add(merge(undefined, item));\n    }\n    return target;\n}\n\n/** @internal merge Map */\nfunction mergeMap(target: Map<unknown, unknown>, source: Map<unknown, unknown>): Map<unknown, unknown> {\n    for (const [k, v] of source) {\n        const oldValue = target.get(k);\n        const newValue = merge(oldValue, v);\n        !needUpdate(oldValue, newValue, false) || target.set(k, newValue);\n    }\n    return target;\n}\n\n/** @internal helper for deepMerge() */\nfunction merge(target: unknown, source: unknown): unknown {\n    if (undefined === source || target === source) {\n        return target;\n    }\n    if (!isObject(source)) {\n        return source;\n    }\n    // Primitive Wrapper Objects / Date\n    if (source.valueOf() !== source) {\n        return deepEqual(target, source) ? target : new (source.constructor as ObjectConstructor)(source.valueOf());\n    }\n    // RegExp\n    if (source instanceof RegExp) {\n        return deepEqual(target, source) ? target : cloneRegExp(source);\n    }\n    // ArrayBuffer\n    if (source instanceof ArrayBuffer) {\n        return deepEqual(target, source) ? target : cloneArrayBuffer(source);\n    }\n    // ArrayBufferView\n    if (ArrayBuffer.isView(source)) {\n        return deepEqual(target, source) ? target : isTypedArray(source) ? cloneTypedArray(source) : cloneDataView(source as DataView);\n    }\n    // Array\n    if (Array.isArray(source)) {\n        return mergeArray(isArray(target) ? target : [], source);\n    }\n    // Set\n    if (source instanceof Set) {\n        return mergeSet(target instanceof Set ? target : new Set(), source);\n    }\n    // Map\n    if (source instanceof Map) {\n        return mergeMap(target instanceof Map ? target : new Map(), source);\n    }\n\n    const obj = isObject(target) ? target : {};\n    if (sameClass(target, source)) {\n        for (const key of Object.keys(source)) {\n            if ('__proto__' !== key) {\n                const oldValue = obj[key];\n                const newValue = merge(oldValue, source[key]);\n                !needUpdate(oldValue, newValue, true) || (obj[key] = newValue);\n            }\n        }\n    } else {\n        for (const key in source) {\n            if ('__proto__' !== key) {\n                const oldValue = obj[key];\n                const newValue = merge(oldValue, source[key]);\n                !needUpdate(oldValue, newValue, true) || (obj[key] = newValue);\n            }\n        }\n    }\n    return obj;\n}\n\n/**\n * @en Recursively merges own and inherited enumerable string keyed properties of source objects into the destination object.\n * @ja ãªãã¸ã§ã¯ãã®åå¸°çãã¼ã¸ãå®è¡\n */\nexport function deepMerge<T, S1, S2, S3, S4, S5, S6, S7, S8, S9>(\n    target: T,\n    ...sources: [S1, S2?, S3?, S4?, S5?, S6?, S7?, S8?, S9?, ...unknown[]]\n): T & S1 & S2 & S3 & S4 & S5 & S6 & S7 & S8 & S9;\nexport function deepMerge<X>(target: unknown, ...sources: unknown[]): X;\nexport function deepMerge(target: unknown, ...sources: unknown[]): unknown {\n    let result = target;\n    for (const source of sources) {\n        result = merge(result, source);\n    }\n    return result;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Create deep copy instance of source object.\n * @ja ãã£ã¼ãã³ãã¼ãªãã¸ã§ã¯ãã®çæ\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/structuredClone\n */\nexport function deepCopy<T>(src: T): T {\n    return deepMerge(undefined, src);\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    UnknownFunction,\n    Nil,\n    Type,\n    Class,\n    Constructor,\n} from './types';\n\n/**\n * @en Mixin class's base interface.\n * @ja Mixin ã¯ã©ã¹ã®åºåºã¤ã³ã¿ã¼ãã§ã¤ã¹å®ç¾©\n */\nexport declare class MixinClass {\n    /**\n     * @en call mixin source class's `super()`. <br>\n     *     This method should be called from constructor.\n     * @ja Mixin ã¯ã©ã¹ã®åºåºã¤ã³ã¿ã¼ãã§ã¤ã¹å®ç¾© <br>\n     *     ã³ã³ã¹ãã©ã¯ã¿ããå¼ã¶ãã¨ãæ³å®\n     *\n     * @param srcClass\n     *  - `en` construction target class name. ex) from S1 available\n     *  - `ja` ã³ã³ã¹ãã©ã¯ãããã¯ã©ã¹åãæå® ex) S1 ããæå®å¯è½\n     * @param args\n     *  - `en` construction parameters\n     *  - `ja` ã³ã³ã¹ãã©ã¯ãã«ä½¿ç¨ããå¼æ°\n     */\n    protected super<T extends Class>(srcClass: T, ...args: ConstructorParameters<T>): this;\n\n    /**\n     * @en Check the input class is mixined (excluding own class).\n     * @ja æå®ã¯ã©ã¹ã Mixin ããã¦ãããç¢ºèª (èªèº«ã®ã¯ã©ã¹ã¯å«ã¾ããªã)\n     *\n     * @param mixedClass\n     *  - `en` set target class constructor\n     *  - `ja` å¯¾è±¡ã¯ã©ã¹ã®ã³ã³ã¹ãã©ã¯ã¿ãæå®\n     */\n    public isMixedWith<T extends object>(mixedClass: Constructor<T>): boolean;\n}\n\n/**\n * @en Mixed sub class constructor definitions.\n * @ja åæãããµãã¯ã©ã¹ã®ã³ã³ã¹ãã©ã¯ã¿å®ç¾©\n */\nexport interface MixinConstructor<B extends Class, U extends object> extends Type<U> {\n    /**\n     * @en constructor\n     * @ja ã³ã³ã¹ãã©ã¯ã¿\n     *\n     * @param args\n     *  - `en` base class arguments\n     *  - `ja` åºåºã¯ã©ã¹ã«æå®ããå¼æ°\n     * @returns\n     *  - `en` union type of classes when calling [[mixins]]()\n     *  - `ja` [[mixins]]() ã«æ¸¡ããã¯ã©ã¹ã®éå\n     */\n    new(...args: ConstructorParameters<B>): U;\n}\n\n/**\n * @en Definition of [[setMixClassAttribute]] function's arguments.\n * @ja [[setMixClassAttribute]] ã®åãããå¼æ°å®ç¾©\n */\nexport interface MixClassAttribute {\n    /**\n     * @en Suppress providing constructor-trap for the mixin source class. In this case, `isMixedWith`, `instanceof` also becomes invalid. (for improving performance)\n     * @ja Mixin Source ã¯ã©ã¹ã«å¯¾ãã¦, ã³ã³ã¹ãã©ã¯ã¿ãã©ãããææ­¢. ãããæå®ããå ´å, `isMixedWith`, `instanceof` ãç¡å¹ã«ãªã. (ããã©ã¼ãã³ã¹æ¹å)\n     */\n    protoExtendsOnly: void;\n\n    /**\n     * @en Setup [Symbol.hasInstance] property. <br>\n     *     The class designated as a source of [[mixins]]() has [Symbol.hasInstance] property implicitly. <br>\n     *     It's used to avoid becoming the behavior `instanceof` doesn't intend when the class is extended from the mixined class the other place.\n     * @ja [Symbol.hasInstance] ãã­ããã£è¨­å®<br>\n     *     [[mixins]]() ã®ã½ã¼ã¹ã«æå®ãããã¯ã©ã¹ã¯ [Symbol.hasInstance] ãæé»çã«åãããã<br>\n     *     ãã®ã¯ã©ã¹ãä»ã§ç¶æ¿ããã¦ããå ´å `instanceof` ãæå³ããªãæ¯ãèãã¨ãªãã®ãé¿ããããã«ä½¿ç¨ãã.\n     */\n    instanceOf: ((inst: object) => boolean) | Nil;\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal */ const _objPrototype     = Object.prototype;\n/** @internal */ const _instanceOf       = Function.prototype[Symbol.hasInstance];\n/** @internal */ const _override         = Symbol('override');\n/** @internal */ const _isInherited      = Symbol('is-inherited');\n/** @internal */ const _constructors     = Symbol('constructors');\n/** @internal */ const _classBase        = Symbol('class-base');\n/** @internal */ const _classSources     = Symbol('class-sources');\n/** @internal */ const _protoExtendsOnly = Symbol('proto-extends-only');\n\n/** @internal copy properties core */\nfunction reflectProperties(target: object, source: object, key: string | symbol): void {\n    if (null == target[key]) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key) as PropertyDecorator);\n    }\n}\n\n/** @internal object properties copy method */\nfunction copyProperties(target: object, source: object): void {\n    source && Object.getOwnPropertyNames(source)\n        .filter(key => !/(prototype|name|constructor)/.test(key))\n        .forEach(key => {\n            reflectProperties(target, source, key);\n        });\n    source && Object.getOwnPropertySymbols(source)\n        .forEach(key => {\n            reflectProperties(target, source, key);\n        });\n}\n\n/** @internal helper for setMixClassAttribute(target, 'instanceOf') */\nfunction setInstanceOf<T extends object>(target: Constructor<T>, method: ((inst: object) => boolean) | Nil): void {\n    const behaviour = method || (null === method ? undefined : ((i: object) => Object.prototype.isPrototypeOf.call(target.prototype, i)));\n    const applied = behaviour && Object.getOwnPropertyDescriptor(target, _override);\n    if (!applied) {\n        Object.defineProperties(target, {\n            [Symbol.hasInstance]: {\n                value: behaviour,\n                writable: true,\n                enumerable: false,\n            },\n            [_override]: {\n                value: behaviour ? true : undefined,\n                writable: true,\n            },\n        });\n    }\n}\n\n/**\n * @en Set the Mixin class attribute.\n * @ja Mixin ã¯ã©ã¹ã«å¯¾ãã¦å±æ§ãè¨­å®\n *\n * @example <br>\n *\n * ```ts\n * // 'protoExtendOnly'\n * class Base { constructor(a, b) {} };\n * class MixA { };\n * setMixClassAttribute(MixA, 'protoExtendsOnly');  // for improving construction performance\n * class MixB { constructor(c, d) {} };\n *\n * class MixinClass extends mixins(Base, MixA, MixB) {\n *     constructor(a, b, c, d){\n *         // calling `Base` constructor\n *         super(a, b);\n *\n *         // calling Mixin class's constructor\n *         this.super(MixA);        // no affect\n *         this.super(MixB, c, d);\n *     }\n * }\n *\n * const mixed = new MixinClass();\n * console.log(mixed instanceof MixA);    // false\n * console.log(mixed.isMixedWith(MixA));  // false\n *\n * // 'instanceOf'\n * class Base {};\n * class Source {};\n * class MixinClass extends mixins(Base, Source) {};\n *\n * class Other extends Source {};\n *\n * const other = new Other();\n * const mixed = new MixinClass();\n * console.log(other instanceof Source);        // true\n * console.log(other instanceof Other);         // true\n * console.log(mixed instanceof MixinClass);    // true\n * console.log(mixed instanceof Base);          // true\n * console.log(mixed instanceof Source);        // true\n * console.log(mixed instanceof Other);         // true ???\n *\n * setMixClassAttribute(Other, 'instanceOf'); // or setMixClassAttribute(Other, 'instanceOf', null);\n * console.log(other instanceof Source);        // true\n * console.log(other instanceof Other);         // true\n * console.log(mixed instanceof Other);         // false !\n *\n * // [Best Practice] If you declare the derived-class from mixin, you should call the function for avoiding `instanceof` limitation.\n * class DerivedClass extends MixinClass {}\n * setMixClassAttribute(DerivedClass, 'instanceOf');\n * ```\n *\n * @param target\n *  - `en` set target constructor\n *  - `ja` è¨­å®å¯¾è±¡ã®ã³ã³ã¹ãã©ã¯ã¿\n * @param attr\n *  - `en`:\n *    - `protoExtendsOnly`: Suppress providing constructor-trap for the mixin source class. (for improving performance)\n *    - `instanceOf`      : function by using [Symbol.hasInstance] <br>\n *                          Default behaviour is `{ return target.prototype.isPrototypeOf(instance) }`\n *                          If set `null`, delete [Symbol.hasInstance] property.\n *  - `ja`:\n *    - `protoExtendsOnly`: Mixin Source ã¯ã©ã¹ã«å¯¾ãã¦, ã³ã³ã¹ãã©ã¯ã¿ãã©ãããææ­¢ (ããã©ã¼ãã³ã¹æ¹å)\n *    - `instanceOf`      : [Symbol.hasInstance] ãä½¿ç¨ããé¢æ°ãæå® <br>\n *                          æ¢å®ã§ã¯ `{ return target.prototype.isPrototypeOf(instance) }` ãä½¿ç¨ããã\n *                         `null` æå®ãããã¨ [Symbol.hasInstance] ãã­ããã£ãåé¤ãã\n */\nexport function setMixClassAttribute<T extends object, U extends keyof MixClassAttribute>(\n    target: Constructor<T>,\n    attr: U,\n    method?: MixClassAttribute[U]\n): void {\n    switch (attr) {\n        case 'protoExtendsOnly':\n            target[_protoExtendsOnly] = true;\n            break;\n        case 'instanceOf':\n            setInstanceOf(target, method);\n            break;\n        default:\n            break;\n    }\n}\n\n/**\n * @en Mixin function for multiple inheritance. <br>\n *     Resolving type support for maximum 10 classes.\n * @ja å¤éç¶æ¿ã®ããã® Mixin <br>\n *     æå¤§ 10 ã¯ã©ã¹ã®åè§£æ±ºããµãã¼ã\n *\n * @example <br>\n *\n * ```ts\n * class Base { constructor(a, b) {} };\n * class MixA { constructor(a, b) {} };\n * class MixB { constructor(c, d) {} };\n *\n * class MixinClass extends mixins(Base, MixA, MixB) {\n *     constructor(a, b, c, d){\n *         // calling `Base` constructor\n *         super(a, b);\n *\n *         // calling Mixin class's constructor\n *         this.super(MixA, a, b);\n *         this.super(MixB, c, d);\n *     }\n * }\n * ```\n *\n * @param base\n *  - `en` primary base class. super(args) is this class's one.\n *  - `ja` åºåºã¯ã©ã¹ã³ã³ã¹ãã©ã¯ã¿. ååãã­ããã£, ã¡ã½ããã¯æåªåããã. super(args) ã¯ãã®ã¯ã©ã¹ã®ãã®ãæå®å¯è½.\n * @param sources\n *  - `en` multiple extends class\n *  - `ja` æ¡å¼µã¯ã©ã¹ã³ã³ã¹ãã©ã¯ã¿\n * @returns\n *  - `en` mixined class constructor\n *  - `ja` åæãããã¯ã©ã¹ã³ã³ã¹ãã©ã¯ã¿\n */\nexport function mixins<\n    B extends Class,\n    S1 extends object,\n    S2 extends object,\n    S3 extends object,\n    S4 extends object,\n    S5 extends object,\n    S6 extends object,\n    S7 extends object,\n    S8 extends object,\n    S9 extends object>(\n    base: B,\n    ...sources: [\n        Constructor<S1>,\n        Constructor<S2>?,\n        Constructor<S3>?,\n        Constructor<S4>?,\n        Constructor<S5>?,\n        Constructor<S6>?,\n        Constructor<S7>?,\n        Constructor<S8>?,\n        Constructor<S9>?,\n        ...any[]\n    ]): MixinConstructor<B, MixinClass & InstanceType<B> & S1 & S2 & S3 & S4 & S5 & S6 & S7 & S8 & S9> {\n\n    let _hasSourceConstructor = false;\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    class _MixinBase extends (base as unknown as Constructor<MixinClass>) {\n\n        private readonly [_constructors]: Map<Constructor<object>, UnknownFunction | null>;\n        private readonly [_classBase]: Constructor<object>;\n\n        constructor(...args: unknown[]) {\n            // eslint-disable-next-line constructor-super\n            super(...args);\n\n            const constructors = new Map<Constructor<object>, UnknownFunction>();\n            this[_constructors] = constructors;\n            this[_classBase] = base;\n\n            if (_hasSourceConstructor) {\n                for (const srcClass of sources) {\n                    if (!srcClass[_protoExtendsOnly]) {\n                        const handler = {\n                            apply: (target: unknown, thisobj: unknown, arglist: unknown[]) => {\n                                const obj = new srcClass(...arglist);\n                                copyProperties(this, obj);\n                            }\n                        };\n                        // proxy for 'construct' and cache constructor\n                        constructors.set(srcClass, new Proxy(srcClass, handler as ProxyHandler<object>));\n                    }\n                }\n            }\n        }\n\n        protected super<T extends Class>(srcClass: T, ...args: ConstructorParameters<T>): this {\n            const map = this[_constructors];\n            const ctor = map.get(srcClass);\n            if (ctor) {\n                ctor.call(this, ...args);\n                map.set(srcClass, null);    // prevent calling twice\n            }\n            return this;\n        }\n\n        public isMixedWith<T extends object>(srcClass: Constructor<T>): boolean {\n            if (this.constructor === srcClass) {\n                return false;\n            } else if (this[_classBase] === srcClass) {\n                return true;\n            } else {\n                return this[_classSources].reduce((p, c) => p || (srcClass === c), false);\n            }\n        }\n\n        public static [Symbol.hasInstance](instance: unknown): boolean {\n            return Object.prototype.isPrototypeOf.call(_MixinBase.prototype, instance);\n        }\n\n        public [_isInherited]<T extends object>(srcClass: Constructor<T>): boolean {\n            const ctors = this[_constructors];\n            if (ctors.has(srcClass)) {\n                return true;\n            }\n            for (const ctor of ctors.keys()) {\n                if (Object.prototype.isPrototypeOf.call(srcClass, ctor)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private get [_classSources](): Constructor<object>[] {\n            return [...this[_constructors].keys()];\n        }\n    }\n\n    for (const srcClass of sources) {\n        // provide custom instanceof\n        const desc = Object.getOwnPropertyDescriptor(srcClass, Symbol.hasInstance);\n        if (!desc || desc.writable) {\n            const orgInstanceOf = desc ? srcClass[Symbol.hasInstance] : _instanceOf;\n            setInstanceOf(srcClass, (inst: object) => {\n                return orgInstanceOf.call(srcClass, inst) || ((null != inst && inst[_isInherited]) ? inst[_isInherited](srcClass) : false);\n            });\n        }\n        // provide prototype\n        copyProperties(_MixinBase.prototype, srcClass.prototype);\n        let parent = Object.getPrototypeOf(srcClass.prototype);\n        while (_objPrototype !== parent) {\n            copyProperties(_MixinBase.prototype, parent);\n            parent = Object.getPrototypeOf(parent);\n        }\n        // check constructor\n        if (!_hasSourceConstructor) {\n            _hasSourceConstructor = !srcClass[_protoExtendsOnly];\n        }\n    }\n\n    return _MixinBase as any;\n}\n","import { deepEqual } from './deep-circuit';\nimport {\n    Nil,\n    Writable,\n    isArray,\n    isObject,\n    isFunction,\n} from './types';\nimport { verify } from './verify';\n\n/**\n * @en Check whether input source has a property.\n * @ja å¥ååããã­ããã£ãæã£ã¦ãããå¤å®\n *\n * @param src\n */\nexport function has(src: unknown, propName: string): boolean {\n    return null != src && isObject(src) && (propName in src);\n}\n\n/**\n * @en Get shallow copy of `target` which has only `pickKeys`.\n * @ja `pickKeys` ã§æå®ããããã­ããã£ã®ã¿ãæã¤ `target` ã® Shallow Copy ãåå¾\n *\n * @param target\n *  - `en` copy source object\n *  - `ja` ã³ãã¼åãªãã¸ã§ã¯ã\n * @param pickKeys\n *  - `en` copy target keys\n *  - `ja` ã³ãã¼å¯¾è±¡ã®ã­ã¼ä¸è¦§\n */\nexport function pick<T extends object, K extends keyof T>(target: T, ...pickKeys: K[]): Writable<Pick<T, K>> {\n    verify('typeOf', 'object', target);\n    return pickKeys.reduce((obj, key) => {\n        key in target && (obj[key] = target[key]);\n        return obj;\n    }, {} as Writable<Pick<T, K>>);\n}\n\n/**\n * @en Get shallow copy of `target` without `omitKeys`.\n * @ja `omitKeys` ã§æå®ããããã­ããã£ä»¥å¤ã®ã­ã¼ãæã¤ `target` ã® Shallow Copy ãåå¾\n *\n * @param target\n *  - `en` copy source object\n *  - `ja` ã³ãã¼åãªãã¸ã§ã¯ã\n * @param omitKeys\n *  - `en` omit target keys\n *  - `ja` åé¤å¯¾è±¡ã®ã­ã¼ä¸è¦§\n */\nexport function omit<T extends object, K extends keyof T>(target: T, ...omitKeys: K[]): Writable<Omit<T, K>> {\n    verify('typeOf', 'object', target);\n    const obj = {} as Writable<Omit<T, K>>;\n    for (const key of Object.keys(target)) {\n        !omitKeys.includes(key as K) && (obj[key] = target[key]);\n    }\n    return obj;\n}\n\n/**\n * @en Invert the keys and values of an object. The values must be serializable.\n * @ja ãªãã¸ã§ã¯ãã®ã­ã¼ã¨å¤ãéè»¢ãã. ãã¹ã¦ã®å¤ãã¦ãã¼ã¯ã§ãããã¨ãåæ\n *\n * @param target\n *  - `en` target object\n *  - `ja` å¯¾è±¡ãªãã¸ã§ã¯ã\n */\nexport function invert<T extends object = object>(target: object): T {\n    const result = {};\n    for (const key of Object.keys(target)) {\n        result[target[key]] = key;\n    }\n    return result as T;\n}\n\n/**\n * @en Get shallow copy of difference between `base` and `src`.\n * @ja `base` ã¨ `src` ã®å·®åãã­ããã£ããã¤ãªãã¸ã§ã¯ãã® Shallow Copy ãåå¾\n *\n * @param base\n *  - `en` base object\n *  - `ja` åºæºã¨ãªããªãã¸ã§ã¯ã\n * @param src\n *  - `en` source object\n *  - `ja` ã³ãã¼åãªãã¸ã§ã¯ã\n */\nexport function diff<T extends object>(base: T, src: Partial<T>): Partial<T> {\n    verify('typeOf', 'object', base);\n    verify('typeOf', 'object', src);\n\n    const retval: Partial<T> = {};\n\n    for (const key of Object.keys(src)) {\n        if (!deepEqual(base[key], src[key])) {\n            retval[key] = src[key];\n        }\n    }\n\n    return retval;\n}\n\n/**\n * @en Get shallow copy of `base` without `dropValue`.\n * @ja `dropValue` ã§æå®ããããã­ããã£å¤ä»¥å¤ã®ã­ã¼ãæã¤ `target` ã® Shallow Copy ãåå¾\n *\n * @param base\n *  - `en` base object\n *  - `ja` åºæºã¨ãªããªãã¸ã§ã¯ã\n * @param dropValues\n *  - `en` target value. default: `undefined`.\n *  - `ja` å¯¾è±¡ã®å¤. æ¢å®å¤: `undefined`\n */\nexport function drop<T extends object>(base: T, ...dropValues: unknown[]): Partial<T> {\n    verify('typeOf', 'object', base);\n\n    const values = [...dropValues];\n    if (!values.length) {\n        values.push(undefined);\n    }\n\n    const retval: Partial<T> = { ...base };\n\n    for (const key of Object.keys(base)) {\n        for (const val of values) {\n            if (deepEqual(val, retval[key])) {\n                delete retval[key];\n                break;\n            }\n        }\n    }\n\n    return retval;\n}\n\n/**\n * @en If the value of the named property is a function then invoke it; otherwise, return it.\n * @ja object ã® property ãã¡ã½ãããªããã®å®è¡çµæã, ãã­ããã£ãªããã®å¤ãè¿å´\n *\n * @param target\n * - `en` Object to maybe invoke function `property` on.\n * - `ja` è©ä¾¡ãããªãã¸ã§ã¯ã\n * @param property\n * - `en` The function by name to invoke on `object`.\n * - `ja` è©ä¾¡ãããã­ããã£å\n * @param fallback\n * - `en` The value to be returned in case `property` doesn't exist or is undefined.\n * - `ja` å­å¨ããªãã£ãå ´åã® fallback å¤\n */\nexport function result<T = any>(target: object | Nil, property: string | string[], fallback?: T): T { // eslint-disable-line @typescript-eslint/no-explicit-any\n    const props = isArray(property) ? property : [property];\n    if (!props.length) {\n        return isFunction(fallback) ? fallback.call(target) : fallback;\n    }\n\n    const resolve = (o: unknown, p: unknown): unknown => {\n        return isFunction(p) ? p.call(o) : p;\n    };\n\n    let obj = target;\n    for (const name of props) {\n        const prop = null == obj ? undefined : obj[name];\n        if (undefined === prop) {\n            return resolve(obj, fallback) as T;\n        }\n        obj = resolve(obj, prop) as object;\n    }\n    return obj as unknown as T;\n}\n","/** @internal */\nfunction callable(): unknown {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return accessible;\n}\n\n/** @internal */\nconst accessible: unknown = new Proxy(callable, {\n    get: (target, name) => {\n        const prop = target[name];\n        if (null != prop) {\n            return prop;\n        } else {\n            return accessible;\n        }\n    },\n});\n\n/** @internal */\nfunction create(): unknown {\n    const stub = new Proxy({}, {\n        get: (target, name) => {\n            const prop = target[name];\n            if (null != prop) {\n                return prop;\n            } else {\n                return accessible;\n            }\n        },\n    });\n\n    Object.defineProperty(stub, 'stub', {\n        value: true,\n        writable: false,\n    });\n\n    return stub;\n}\n\n/**\n * @en Get safe accessible object.\n * @ja å®å¨ã«ã¢ã¯ã»ã¹å¯è½ãªãªãã¸ã§ã¯ãã®åå¾\n *\n * @example <br>\n *\n * ```ts\n * const safeWindow = safe(globalThis.window);\n * console.log(null != safeWindow.document);    // true\n * const div = safeWindow.document.createElement('div');\n * console.log(null != div);    // true\n * ```\n *\n * @param target\n *  - `en` A reference of an object with a possibility which exists.\n *  - `ja` å­å¨ããããªãã¸ã§ã¯ãã®åç§\n * @returns\n *  - `en` Reality or stub instance.\n *  - `ja` å®ä½ã¾ãã¯ã¹ã¿ãã¤ã³ã¹ã¿ã³ã¹\n */\nexport function safe<T>(target: T): T {\n    return target || create() as T;\n}\n","import { UnknownFunction } from './types';\nimport { getGlobal } from './config';\nimport { safe } from './safe';\n\n/**\n * @en Type of handle for timer functions.\n * @ja ã¿ã¤ãã¼é¢æ°ã«ä½¿ç¨ãããã³ãã«å\n */\nexport interface TimerHandle { } // eslint-disable-line @typescript-eslint/no-empty-interface\n\n/**\n * @en Type of timer start functions.\n * @ja ã¿ã¤ãã¼éå§é¢æ°ã®å\n */\nexport type TimerStartFunction = (handler: UnknownFunction, timeout?: number, ...args: unknown[]) => TimerHandle;\n\n/**\n * @en Type of timer stop functions.\n * @ja ã¿ã¤ãã¼åæ­¢é¢æ°ã®å\n */\nexport type TimerStopFunction = (handle: TimerHandle) => void;\n\n/** @internal */\ninterface TimerContext {\n    setTimeout: TimerStartFunction;\n    clearTimeout: TimerStopFunction;\n    setInterval: TimerStartFunction;\n    clearInterval: TimerStopFunction;\n}\n\n/** @internal */ const _root = getGlobal() as unknown as TimerContext;\nconst setTimeout: TimerStartFunction   = safe(_root.setTimeout);\nconst clearTimeout: TimerStopFunction  = safe(_root.clearTimeout);\nconst setInterval: TimerStartFunction  = safe(_root.setInterval);\nconst clearInterval: TimerStopFunction = safe(_root.clearInterval);\n\nexport {\n    setTimeout,\n    clearTimeout,\n    setInterval,\n    clearInterval,\n};\n","import {\n    UnknownFunction,\n    Primitive,\n    TypedData,\n    isString,\n    isObject,\n} from './types';\nimport { invert } from './object';\nimport {\n    TimerHandle,\n    setTimeout,\n    clearTimeout,\n} from './timer';\n\n/**\n * @en Ensure asynchronous execution.\n * @ja éåæå®è¡ãä¿è¨¼\n *\n * @example <br>\n *\n * ```ts\n * void post(() => exec(arg));\n * ```\n *\n * @param executor\n *  - `en` implement as function scope.\n *  - `ja` é¢æ°ã¹ã³ã¼ãã¨ãã¦å®è£\n*/\nexport function post<T>(executor: () => T): Promise<T> {\n    return Promise.resolve().then(executor);\n}\n\n/**\n * @en Generic No-Operation.\n * @ja æ±ç¨ No-Operation\n */\nexport function noop(...args: unknown[]): any { // eslint-disable-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any\n    // noop\n}\n\n/**\n * @en Wait for the designation elapse.\n * @ja æå®æéå¦çãå¾æ©\n *\n * @param elapse\n *  - `en` wait elapse [msec].\n *  - `ja` å¾æ©æé [msec]\n */\nexport function sleep(elapse: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, elapse));\n}\n\n/**\n * @en Returns a function, that, when invoked, will only be triggered at most once during a given time.\n * @ja é¢æ°ã®å®è¡ã wait [msec] ã«1åã«å¶é\n *\n * @example <br>\n *\n * ```ts\n * const throttled = throttle(upatePosition, 100);\n * $(window).scroll(throttled);\n * ```\n *\n * @param executor\n *  - `en` seed function.\n *  - `ja` å¯¾è±¡ã®é¢æ°\n * @param elapse\n *  - `en` wait elapse [msec].\n *  - `ja` å¾æ©æé [msec]\n * @param options\n */\nexport function throttle<T extends UnknownFunction>(executor: T, elapse: number, options?: { leading?: boolean; trailing?: boolean; }): T & { cancel(): void; } {\n    const opts = options || {};\n    let handle: TimerHandle | undefined;\n    let args: unknown[] | undefined;\n    let context: unknown, result: unknown;\n    let previous = 0;\n\n    const later = function (): void {\n        previous = false === opts.leading ? 0 : Date.now();\n        handle = undefined;\n        result = executor.apply(context, args);\n        if (!handle) {\n            context = args = undefined;\n        }\n    };\n\n    const throttled = function (this: unknown, ...arg: unknown[]): unknown {\n        const now = Date.now();\n        if (!previous && false === opts.leading) {\n            previous = now;\n        }\n        const remaining = elapse - (now - previous);\n        // eslint-disable-next-line no-invalid-this\n        context = this;\n        args = [...arg];\n        if (remaining <= 0 || remaining > elapse) {\n            if (handle) {\n                clearTimeout(handle);\n                handle = undefined;\n            }\n            previous = now;\n            result = executor.apply(context, args);\n            if (!handle) {\n                context = args = undefined;\n            }\n        } else if (!handle && false !== opts.trailing) {\n            handle = setTimeout(later, remaining);\n        }\n        return result;\n    };\n\n    throttled.cancel = function (): void {\n        clearTimeout(handle as TimerHandle);\n        previous = 0;\n        handle = context = args = undefined;\n    };\n\n    return throttled as (T & { cancel(): void; });\n}\n\n/**\n * @en Returns a function, that, as long as it continues to be invoked, will not be triggered.\n * @ja å¼ã³åºããã¦ãã wait [msec] çµéããã¾ã§å®è¡ããªãé¢æ°ãè¿å´\n *\n * @param executor\n *  - `en` seed function.\n *  - `ja` å¯¾è±¡ã®é¢æ°\n * @param wait\n *  - `en` wait elapse [msec].\n *  - `ja` å¾æ©æé [msec]\n * @param immediate\n *  - `en` If `true` is passed, trigger the function on the leading edge, instead of the trailing.\n *  - `ja` `true` ã®å ´å, ååã®ã³ã¼ã«ã¯å³æå®è¡\n */\nexport function debounce<T extends UnknownFunction>(executor: T, wait: number, immediate?: boolean): T & { cancel(): void; } {\n    /* eslint-disable no-invalid-this */\n    let handle: TimerHandle | undefined;\n    let result: undefined;\n\n    const later = function (context: undefined, args: undefined[]): void {\n        handle = undefined;\n        if (args) {\n            result = executor.apply(context, args);\n        }\n    };\n\n    const debounced = function (this: undefined, ...args: undefined[]): undefined {\n        if (handle) {\n            clearTimeout(handle);\n        }\n        if (immediate) {\n            const callNow = !handle;\n            handle = setTimeout(later, wait);\n            if (callNow) {\n                result = executor.apply(this, args);\n            }\n        } else {\n            handle = setTimeout(later, wait, this, [...args]);\n        }\n        return result;\n    };\n\n    debounced.cancel = function (): void {\n        clearTimeout(handle as TimerHandle);\n        handle = undefined;\n    };\n\n    return debounced as (T & { cancel(): void; });\n    /* eslint-enable no-invalid-this */\n}\n\n/**\n * @en Returns a function that will be executed at most one time, no matter how often you call it.\n * @ja 1åº¦ããå®è¡ãããªãé¢æ°ãè¿å´. 2åç®ä»¥éã¯æåã®ã³ã¼ã«ã®ã­ã£ãã·ã¥ãè¿å´\n *\n * @param executor\n *  - `en` seed function.\n *  - `ja` å¯¾è±¡ã®é¢æ°\n */\nexport function once<T extends UnknownFunction>(executor: T): T {\n    /* eslint-disable no-invalid-this, @typescript-eslint/no-non-null-assertion */\n    let memo: unknown;\n    return function (this: unknown, ...args: unknown[]): unknown {\n        if (executor) {\n            memo = executor.call(this, ...args);\n            executor = null!;\n        }\n        return memo;\n    } as T;\n    /* eslint-enable no-invalid-this, @typescript-eslint/no-non-null-assertion */\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Create escape function from map.\n * @ja æå­ç½®æé¢æ°ãä½æ\n *\n * @param map\n *  - `en` key: target char, value: replace char\n *  - `ja` key: ç½®æå¯¾è±¡, value: ç½®ææå­\n * @returns\n *  - `en` espace function\n *  - `ja` ã¨ã¹ã±ã¼ãé¢æ°\n */\nexport function createEscaper(map: object): (src: Primitive) => string {\n    const escaper = (match: string): string => {\n        return map[match];\n    };\n\n    const source = `(?:${Object.keys(map).join('|')})`;\n    const regexTest = RegExp(source);\n    const regexReplace = RegExp(source, 'g');\n\n    return (src: Primitive): string => {\n        src = (null == src || 'symbol' === typeof src) ? '' : String(src);\n        return regexTest.test(src) ? src.replace(regexReplace, escaper) : src;\n    };\n}\n\n/** @internal */\nconst mapHtmlEscape = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '`': '&#x60;'\n};\n\n/**\n * @en Escape HTML string.\n * @ja HTML ã§ä½¿ç¨ããæå­ãå¶å¾¡æå­ã«ç½®æ\n *\n * @brief <br>\n *\n * ```ts\n * const mapHtmlEscape = {\n *     '<' : '&lt;',\n *     '>' : '&gt;',\n *     '&' : '&amp;',\n *     'â³': '&quot;',\n *     `'` : '&#39;',\n *     '`' : '&#x60;'\n * };\n * ```\n */\nexport const escapeHTML = createEscaper(mapHtmlEscape);\n\n/**\n * @en Unescape HTML string.\n * @ja HTML ã§ä½¿ç¨ããå¶å¾¡æå­ãå¾©å\n */\nexport const unescapeHTML = createEscaper(invert(mapHtmlEscape));\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert to the style compulsion value from input string.\n * @ja å¥åæå­åãåå¼·å¶ããå¤ã«å¤æ\n *\n * @param data\n *  - `en` input string\n *  - `ja` å¤æå¯¾è±¡ã®æå­å\n */\nexport function toTypedData(data: string | undefined): TypedData | undefined {\n    if ('true' === data) {\n        // boolean: true\n        return true;\n    } else if ('false' === data) {\n        // boolean: false\n        return false;\n    } else if ('null' === data) {\n        // null\n        return null;\n    } else if (data === String(Number(data))) {\n        // number: æ°å¤å¤æ â æå­åå¤æã§åã«æ»ãã¨ã\n        return Number(data);\n    } else if (data && /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/.test(data)) {\n        // object\n        return JSON.parse(data);\n    } else {\n        // string / undefined\n        return data;\n    }\n}\n\n/**\n * @en Convert to string from [[TypedData]].\n * @ja [[TypedData]] ãæå­åã«å¤æ\n *\n * @param data\n *  - `en` input string\n *  - `ja` å¤æå¯¾è±¡ã®æå­å\n */\nexport function fromTypedData(data: TypedData | undefined): string | undefined {\n    if (undefined === data || isString(data)) {\n        return data;\n    } else if (isObject(data)) {\n        return JSON.stringify(data);\n    } else {\n        return String(data);\n    }\n}\n\n/**\n * @en Convert to `Web API` stocked type. <br>\n *     Ensure not to return `undefined` value.\n * @ja `Web API` æ ¼ç´å½¢å¼ã«å¤æ <br>\n *     `undefined` ãè¿å´ããªããã¨ãä¿è¨¼\n */\nexport function dropUndefined<T>(value: T | null | undefined, nilSerialize = false): T | 'null' | 'undefined' | null {\n    return null != value ? value : (nilSerialize ? String(value) : null) as T | 'null' | 'undefined' | null;\n}\n\n/**\n * @en Deserialize from `Web API` stocked type. <br>\n *     Convert from 'null' or 'undefined' string to original type.\n * @ja 'null' or 'undefined' ããã¨ã®åã«æ»ã\n */\nexport function restoreNil<T>(value: T | 'null' | 'undefined'): T | null | undefined {\n    if ('null' === value) {\n        return null;\n    } else if ('undefined' === value) {\n        return undefined;\n    } else {\n        return value;\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal */ let _localId = 0;\n\n/**\n * @en Get local unique id. <br>\n *     \"local unique\" means guarantees unique during in script life cycle only.\n * @ja ã­ã¼ã«ã«ã¦ãã¼ã¯ ID ã®åå¾ <br>\n *     ã¹ã¯ãªããã©ã¤ããµã¤ã¯ã«ä¸­ã®åä¸æ§ãä¿è¨¼ãã.\n *\n * @param prefix\n *  - `en` ID prefix\n *  - `ja` ID ã«ä»ä¸ãã Prefix\n * @param zeroPad\n *  - `en` 0 padding order\n *  - `ja` 0 è©°ãããæ¡æ°ãæå®\n */\nexport function luid(prefix = '', zeroPad?: number): string {\n    const id = (++_localId).toString(16);\n    return (null != zeroPad) ? `${prefix}${id.padStart(zeroPad, '0')}` : `${prefix}${id}`;\n}\n\n/**\n * @en Returns a random integer between `0` and `max`, inclusive.\n * @ja `0` - `max` ã®ã©ã³ãã ã®æ´æ°å¤ãçæ\n *\n * @param max\n *  - `en` The maximum random number.\n *  - `ja` æ´æ°ã®æå¤§å¤\n */\nexport function randomInt(max: number): number;\n\n/**\n * @en Returns a random integer between `min` and `max`, inclusive.\n * @ja `min` - `max` ã®ã©ã³ãã ã®æ´æ°å¤ãçæ\n *\n * @param min\n *  - `en` The maximum random number.\n *  - `ja` æ´æ°ã®æå¤§å¤\n * @param max\n *  - `en` The maximum random number.\n *  - `ja` æ´æ°ã®æå¤§å¤\n */\nexport function randomInt(min: number, max: number): number; // eslint-disable-line @typescript-eslint/unified-signatures\n\nexport function randomInt(min: number, max?: number): number {\n    if (null == max) {\n        max = min;\n        min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal */ const _regexCancelLikeString = /(abort|cancel)/im;\n\n/**\n * @en Presume whether it's a canceled error.\n * @ja ã­ã£ã³ã»ã«ãããã¨ã©ã¼ã§ãããæ¨å®\n *\n * @param error\n *  - `en` an error object handled in `catch` block.\n *  - `ja` `catch` ç¯ãªã©ã§è£è¶³ããã¨ã©ã¼ãæå®\n */\nexport function isChancelLikeError(error: unknown): boolean {\n    if (null == error) {\n        return false;\n    } else if (isString(error)) {\n        return _regexCancelLikeString.test(error);\n    } else if (isObject(error)) {\n        return _regexCancelLikeString.test((error as Error).message);\n    } else {\n        return false;\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Converts first letter of the string to uppercase.\n * @ja æåã®æå­ãå¤§æå­ã«å¤æ\n *\n *\n * @example <br>\n *\n * ```ts\n * capitalize(\"foo Bar\");\n * // => \"Foo Bar\"\n *\n * capitalize(\"FOO Bar\", true);\n * // => \"Foo bar\"\n * ```\n *\n * @param src\n *  - `en` source string\n *  - `ja` å¤æåæå­å\n * @param lowercaseRest\n *  - `en` If `true` is passed, the rest of the string will be converted to lower case\n *  - `ja` `true` ãæå®ããå ´å, 2æå­ç®ä»¥éãå°æå­å\n */\nexport function capitalize(src: string, lowercaseRest = false): string {\n    const remainingChars = !lowercaseRest ? src.slice(1) : src.slice(1).toLowerCase();\n    return src.charAt(0).toUpperCase() + remainingChars;\n}\n\n/**\n * @en Converts first letter of the string to lowercase.\n * @ja æåã®æå­ãå°æå­å\n *\n * @example <br>\n *\n * ```ts\n * decapitalize(\"Foo Bar\");\n * // => \"foo Bar\"\n * ```\n *\n * @param src\n *  - `en` source string\n *  - `ja` å¤æåæå­å\n */\nexport function decapitalize(src: string): string {\n    return src.charAt(0).toLowerCase() + src.slice(1);\n}\n\n/**\n * @en Converts underscored or dasherized string to a camelized one. <br>\n *     Begins with a lower case letter unless it starts with an underscore, dash or an upper case letter.\n * @ja `_`, `-` åºåãæå­åãã­ã£ã¡ã«ã±ã¼ã¹å <br>\n *     `-` ã¾ãã¯å¤§æå­ã¹ã¿ã¼ãã§ããã°, å¤§æå­ã¹ã¿ã¼ããæ¢å®å¤\n *\n * @example <br>\n *\n * ```ts\n * camelize(\"moz-transform\");\n * // => \"mozTransform\"\n *\n * camelize(\"-moz-transform\");\n * // => \"MozTransform\"\n *\n * camelize(\"_moz_transform\");\n * // => \"MozTransform\"\n *\n * camelize(\"Moz-transform\");\n * // => \"MozTransform\"\n *\n * camelize(\"-moz-transform\", true);\n * // => \"mozTransform\"\n * ```\n *\n * @param src\n *  - `en` source string\n *  - `ja` å¤æåæå­å\n * @param lower\n *  - `en` If `true` is passed, force converts to lower camel case in starts with the special case.\n *  - `ja` å¼·å¶çã«å°æå­ã¹ã¿ã¼ãããå ´åã«ã¯ `true` ãæå®\n */\nexport function camelize(src: string, lower = false): string {\n    src = src.trim().replace(/[-_\\s]+(.)?/g, (match, c) => {\n        return c ? c.toUpperCase() : '';\n    });\n\n    if (true === lower) {\n        return decapitalize(src);\n    } else {\n        return src;\n    }\n}\n\n/**\n * @en Converts string to camelized class name. First letter is always upper case.\n * @ja åé ­å¤§æå­ã®ã­ã£ã¡ã«ã±ã¼ã¹ã«å¤æ\n *\n * @example <br>\n *\n * ```ts\n * classify(\"some_class_name\");\n * // => \"SomeClassName\"\n * ```\n *\n * @param src\n *  - `en` source string\n *  - `ja` å¤æåæå­å\n */\nexport function classify(src: string): string {\n    return capitalize(camelize(src.replace(/[\\W_]/g, ' ')).replace(/\\s/g, ''));\n}\n\n/**\n * @en Converts a camelized or dasherized string into an underscored one.\n * @ja ã­ã£ã¡ã«ã±ã¼ã¹ or `-` ã¤ãªãæå­åã `_` ã¤ãªãã«å¤æ\n *\n * @example <br>\n *\n * ```ts\n * underscored(\"MozTransform\");\n * // => \"moz_transform\"\n * ```\n *\n * @param src\n *  - `en` source string\n *  - `ja` å¤æåæå­å\n */\nexport function underscored(src: string): string {\n    return src.trim().replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();\n}\n\n/**\n * @en Converts a underscored or camelized string into an dasherized one.\n * @ja ã­ã£ã¡ã«ã±ã¼ã¹ or `_` ã¤ãªãæå­åã `-` ã¤ãªãã«å¤æ\n *\n * @example <br>\n *\n * ```ts\n * dasherize(\"MozTransform\");\n * // => \"-moz-transform\"\n * ```\n *\n * @param src\n *  - `en` source string\n *  - `ja` å¤æåæå­å\n */\nexport function dasherize(src: string): string {\n    return src.trim().replace(/([A-Z])/g, '-$1').replace(/[_\\s]+/g, '-').toLowerCase();\n}\n","/* eslint-disable\n    no-invalid-this,\n */\n\nimport { randomInt } from './misc';\n\nconst {\n    /** @internal */ random\n} = Math;\n\n/**\n * @en Execute shuffle of an array elements.\n * @ja éåè¦ç´ ã®ã·ã£ããã«\n *\n * @param array\n *  - `en` source array\n *  - `ja` å¥åéå\n * @param destructive\n *  - `en` true: destructive / false: non-destructive (default)\n *  - `ja` true: ç ´å£ç / false: éç ´å£ç (æ¢å®)\n */\nexport function shuffle<T>(array: T[], destructive = false): T[] {\n    const source = destructive ? array : array.slice();\n    const len = source.length;\n    for (let i = len > 0 ? len >>> 0 : 0; i > 1;) {\n        const j = i * random() >>> 0;\n        const swap = source[--i];\n        source[i] = source[j];\n        source[j] = swap;\n    }\n    return source;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Execute stable sort by merge-sort algorithm.\n * @ja `merge-sort` ã«ããå®å®ã½ã¼ã\n *\n * @param array\n *  - `en` source array\n *  - `ja` å¥åéå\n * @param comparator\n *  - `en` sort comparator function\n *  - `ja` ã½ã¼ãé¢æ°ãæå®\n * @param destructive\n *  - `en` true: destructive / false: non-destructive (default)\n *  - `ja` true: ç ´å£ç / false: éç ´å£ç (æ¢å®)\n */\nexport function sort<T>(array: T[], comparator: (lhs: T, rhs: T) => number, destructive = false): T[] {\n    const source = destructive ? array : array.slice();\n    if (source.length < 2) {\n        return source;\n    }\n    const lhs = sort(source.splice(0, source.length >>> 1), comparator, true);\n    const rhs = sort(source.splice(0), comparator, true);\n    while (lhs.length && rhs.length) {\n        source.push(comparator(lhs[0], rhs[0]) <= 0 ? lhs.shift() as T : rhs.shift() as T);\n    }\n    return source.concat(lhs, rhs);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Make unique array.\n * @ja éè¤è¦ç´ ã®ãªãéåã®ä½æ\n *\n * @param array\n *  - `en` source array\n *  - `ja` å¥åéå\n */\nexport function unique<T>(array: T[]): T[] {\n    return [...new Set(array)];\n}\n\n/**\n * @en Make union array.\n * @ja éåã®åéåãè¿å´\n *\n * @param arrays\n *  - `en` source arrays\n *  - `ja` å¥åéåç¾¤\n */\nexport function union<T>(...arrays: T[][]): T[] {\n    return unique(arrays.flat());\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Get the model at the given index. If negative value is given, the target will be found from the last index.\n * @ja ã¤ã³ããã¯ã¹æå®ã«ããã¢ãã«ã¸ã®ã¢ã¯ã»ã¹. è² å¤ã®å ´åã¯æ«å°¾æ¤ç´¢ãå®è¡\n *\n * @param array\n *  - `en` source array\n *  - `ja` å¥åéå\n * @param index\n *  - `en` A zero-based integer indicating which element to retrieve. <br> If negative index is counted from the end of the matched set.\n *  - `ja` 0 base ã®ã¤ã³ããã¯ã¹ãæå® <br> è² å¤ãæå®ãããå ´å, æ«å°¾ããã®ã¤ã³ããã¯ã¹ã¨ãã¦è§£éããã\n */\nexport function at<T>(array: T[], index: number): T | never {\n    const idx = Math.trunc(index);\n    const el = idx < 0 ? array[idx + array.length] : array[idx];\n    if (null == el) {\n        throw new RangeError(`invalid array index. [length: ${array.length}, given: ${index}]`);\n    }\n    return el;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Make index array.\n * @ja ã¤ã³ããã¯ã¹éåã®ä½æ\n *\n * @param array\n *  - `en` source array\n *  - `ja` å¥åéå\n * @param excludes\n *  - `en` exclude index in return value.\n *  - `ja` æ»ãå¤éåã«å«ããªãã¤ã³ããã¯ã¹ãæå®\n */\nexport function indices<T>(array: T[], ...excludes: number[]): number[] {\n    const retval = [...array.keys()];\n\n    const len = array.length;\n    const exList = [...new Set(excludes)].sort((lhs, rhs) => lhs < rhs ? 1 : -1);\n    for (const ex of exList) {\n        if (0 <= ex && ex < len) {\n            retval.splice(ex, 1);\n        }\n    }\n\n    return retval;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en [[groupBy]]() options definition.\n * @ja [[groupBy]]() ã«æå®ãããªãã·ã§ã³å®ç¾©\n */\nexport interface GroupByOptions<\n    T extends object,\n    TKEYS extends keyof T,\n    TSUMKEYS extends keyof T,\n    TGROUPKEY extends string\n> {\n    /**\n     * @en `GROUP BY` keys.\n     * @ja `GROUP BY` ã«æå®ããã­ã¼\n     */\n    keys: Extract<TKEYS, string>[];\n\n    /**\n     * @en Aggregatable keys.\n     * @ja éè¨å¯è½ãªã­ã¼ä¸è¦§\n     */\n    sumKeys?: Extract<TSUMKEYS, string>[];\n\n    /**\n     * @en Grouped item access key. default: 'items',\n     * @ja ã°ã«ã¼ãã³ã°ãããè¦ç´ ã¸ã®ã¢ã¯ã»ã¹ã­ã¼. æ¢å®: 'items'\n     */\n    groupKey?: TGROUPKEY;\n}\n\n/**\n * @en Return type of [[groupBy]]().\n * @ja [[groupBy]]() ãè¿å´ããå\n */\nexport type GroupByReturnValue<\n    T extends object,\n    TKEYS extends keyof T,\n    TSUMKEYS extends keyof T = never,\n    TGROUPKEY extends string = 'items'\n> = Readonly<Record<TKEYS, unknown> & Record<TSUMKEYS, unknown> & Record<TGROUPKEY, T[]>>;\n\n/**\n * @en Execute `GROUP BY` for array elements.\n * @ja éåã®è¦ç´ ã® `GROUP BY` éåãæ½åº\n *\n * @param array\n *  - `en` source array\n *  - `ja` å¥åéå\n * @param options\n *  - `en` `GROUP BY` options\n *  - `ja` `GROUP BY` ãªãã·ã§ã³\n */\nexport function groupBy<\n    T extends object,\n    TKEYS extends keyof T,\n    TSUMKEYS extends keyof T = never,\n    TGROUPKEY extends string = 'items'\n>(array: T[], options: GroupByOptions<T, TKEYS, TSUMKEYS, TGROUPKEY>): GroupByReturnValue<T, TKEYS, TSUMKEYS, TGROUPKEY>[] {\n    const { keys, sumKeys, groupKey } = options;\n    const _groupKey = groupKey || 'items';\n    const _sumKeys: string[] = sumKeys || [];\n    _sumKeys.push(_groupKey);\n\n    const hash = array.reduce((res: T, data: T) => {\n        // create groupBy internal key\n        const _key = keys.reduce((s, k) => s + String(data[k]), '');\n\n        // init keys\n        if (!(_key in res)) {\n            const keyList = keys.reduce((h, k: string) => {\n                h[k] = data[k];\n                return h;\n            }, {});\n\n            res[_key] = _sumKeys.reduce((h, k: string) => {\n                h[k] = 0;\n                return h;\n            }, keyList);\n        }\n\n        const resKey = res[_key];\n\n        // sum properties\n        for (const k of _sumKeys) {\n            if (_groupKey === k) {\n                resKey[k] = resKey[k] || [];\n                resKey[k].push(data);\n            } else {\n                resKey[k] += data[k];\n            }\n        }\n\n        return res;\n    }, {});\n\n    return Object.values(hash);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Computes the list of values that are the intersection of all the arrays. Each value in the result is present in each of the arrays.\n * @ja éåã®ç©éåãè¿å´. è¿å´ãããéåã®è¦ç´ ã¯ãã¹ã¦ã®å¥åãããéåã«å«ã¾ãã\n *\n * @example <br>\n *\n * ```ts\n * console.log(intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]));\n * // => [1, 2]\n * ```\n *\n * @param arrays\n *  - `en` source array\n *  - `ja` å¥åéå\n */\nexport function intersection<T>(...arrays: T[][]): T[] {\n    return arrays.reduce((acc, ary) => acc.filter(el => ary.includes(el)));\n}\n\n/**\n * @en Returns the values from array that are not present in the other arrays.\n * @ja éåããã»ãã®éåã«å«ã¾ããªããã®ãè¿å´\n *\n * @example <br>\n *\n * ```ts\n * console.log(difference([1, 2, 3, 4, 5], [5, 2, 10]));\n * // => [1, 3, 4]\n * ```\n *\n * @param array\n *  - `en` source array\n *  - `ja` å¥åéå\n * @param others\n *  - `en` exclude element in return value.\n *  - `ja` æ»ãå¤éåã«å«ããªãè¦ç´ ãæå®\n */\nexport function difference<T>(array: T[], ...others: T[][]): T[] {\n    const arrays = [array, ...others] as T[][];\n    return arrays.reduce((acc, ary) => acc.filter(el => !ary.includes(el)));\n}\n\n/**\n * @en Returns a copy of the array with all instances of the values removed.\n * @ja éåããæå®è¦ç´ ãåãé¤ãããã®ãè¿å´\n *\n * @example <br>\n *\n * ```ts\n * console.log(without([1, 2, 1, 0, 3, 1, 4], 0, 1));\n * // => [2, 3, 4]\n * ```\n *\n * @param array\n *  - `en` source array\n *  - `ja` å¥åéå\n * @param values\n *  - `en` exclude element in return value.\n *  - `ja` æ»ãå¤éåã«å«ããªãè¦ç´ ãæå®\n */\nexport function without<T>(array: T[], ...values: T[]): T[] {\n    return difference(array, values);\n}\n\n/**\n * @en Produce a random sample from the list.\n * @ja ã©ã³ãã ã«ãµã³ãã«å¤ãè¿å´\n *\n * @example <br>\n *\n * ```ts\n * console.log(sample([1, 2, 3, 4, 5, 6], 3));\n * // => [1, 6, 2]\n * ```\n *\n * @param array\n *  - `en` source array\n *  - `ja` å¥åéå\n * @param count\n *  - `en` number of sampling count.\n *  - `ja` è¿å´ãããµã³ãã«æ°ãæå®\n */\nexport function sample<T>(array: T[], count: number): T[];\n\n/**\n * @en Produce a random sample from the list.\n * @ja ã©ã³ãã ã«ãµã³ãã«å¤ãè¿å´\n *\n * @example <br>\n *\n * ```ts\n * console.log(sample([1, 2, 3, 4, 5, 6]));\n * // => 4\n * ```\n *\n * @param array\n *  - `en` source array\n *  - `ja` å¥åéå\n */\nexport function sample<T>(array: T[]): T;\n\nexport function sample<T>(array: T[], count?: number): T | T[] {\n    if (null == count) {\n        return array[randomInt(array.length - 1)];\n    }\n    const sample = array.slice();\n    const length = sample.length;\n    count = Math.max(Math.min(count, length), 0);\n    const last = length - 1;\n    for (let index = 0; index < count; index++) {\n        const rand = randomInt(index, last);\n        const temp = sample[index];\n        sample[index] = sample[rand];\n        sample[rand] = temp;\n    }\n    return sample.slice(0, count);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Returns a result of permutation from the list.\n * @ja éåããé åçµæãè¿å´\n *\n * @example <br>\n *\n * ```ts\n * const arr = permutation(['a', 'b', 'c'], 2);\n * console.log(JSON.stringify(arr));\n * // => [['a','b'],['a','c'],['b','a'],['b','c'],['c','a'],['c','b']]\n * ```\n *\n * @param array\n *  - `en` source array\n *  - `ja` å¥åéå\n * @param count\n *  - `en` number of pick up.\n *  - `ja` é¸ææ°\n */\nexport function permutation<T>(array: T[], count: number): T[][] {\n    const retval: T[][] = [];\n    if (array.length < count) {\n        return [];\n    }\n    if (1 === count) {\n        for (const [i, val] of array.entries()) {\n            retval[i] = [val];\n        }\n    } else {\n        for (let i = 0, n1 = array.length; i < n1; i++) {\n            const parts = array.slice(0);\n            parts.splice(i, 1);\n            const row = permutation(parts, count - 1);\n            for (let j = 0, n2 = row.length; j < n2; j++) {\n                retval.push([array[i]].concat(row[j]));\n            }\n        }\n    }\n    return retval;\n}\n\n/**\n * @en Returns a result of combination from the list.\n * @ja éåããçµã¿åããçµæãè¿å´\n *\n * @example <br>\n *\n * ```ts\n * const arr = combination(['a', 'b', 'c'], 2);\n * console.log(JSON.stringify(arr));\n * // => [['a','b'],['a','c'],['b','c']]\n * ```\n *\n * @param array\n *  - `en` source array\n *  - `ja` å¥åéå\n * @param count\n *  - `en` number of pick up.\n *  - `ja` é¸ææ°\n */\nexport function combination<T>(array: T[], count: number): T[][] {\n    const retval: T[][] = [];\n    if (array.length < count) {\n        return [];\n    }\n    if (1 === count) {\n        for (const [i, val] of array.entries()) {\n            retval[i] = [val];\n        }\n    } else {\n        for (let i = 0, n1 = array.length; i < n1 - count + 1; i++) {\n            const row = combination(array.slice(i + 1), count - 1);\n            for (let j = 0, n2 = row.length; j < n2; j++) {\n                retval.push([array[i]].concat(row[j]));\n            }\n        }\n    }\n    return retval;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Substitution method of `Array.prototype.map()` which also accepts asynchronous callback.\n * @ja éåæã³ã¼ã«ããã¯ãæå®å¯è½ãª `Array.prototype.map()` ã®ä»£æ¿ã¡ã½ãã\n * \n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` å¥åéå\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` ã¤ãã¬ã¼ã·ã§ã³é©ç¨é¢æ°\n * @param thisArg\n *  - `en` Value to use as *this* when executing the `callback`.\n *  - `ja` `callback` å®è¡ã³ã³ãã­ã¹ã\n * @returns\n *  - `en` Returns a Promise with the resultant *Array* as value.\n *  - `ja` ã¤ãã¬ã¼ã·ã§ã³çµæéåãæ ¼ç´ãã Promise ãªãã¸ã§ã¯ã\n */\nexport async function map<T, U>(this: unknown, array: T[], callback: (value: T, index: number, array: T[]) => U | Promise<U>, thisArg?: unknown): Promise<U[]> {\n    return Promise.all(\n        array.map(async (v, i, a) => {\n            return await callback.call(thisArg || this, v, i, a);\n        })\n    );\n}\n\n/**\n * @en Substitution method of `Array.prototype.filter()` which also accepts asynchronous callback.\n * @ja éåæã³ã¼ã«ããã¯ãæå®å¯è½ãª `Array.prototype.filter()` ã®ä»£æ¿ã¡ã½ãã\n *\n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` å¥åéå\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` ã¤ãã¬ã¼ã·ã§ã³é©ç¨é¢æ°\n * @param thisArg\n *  - `en` Value to use as *this* when executing the `callback`.\n *  - `ja` `callback` å®è¡ã³ã³ãã­ã¹ã\n * @returns\n *  - `en` Returns a Promise with the resultant *Array* as value.\n *  - `ja` ã¤ãã¬ã¼ã·ã§ã³çµæéåãæ ¼ç´ãã Promise ãªãã¸ã§ã¯ã\n */\nexport async function filter<T>(this: unknown, array: T[], callback: (value: T, index: number, array: T[]) => boolean | Promise<boolean>, thisArg?: unknown): Promise<T[]> {\n    const bits: boolean[] = await map(array, (v, i, a) => callback.call(thisArg || this, v, i, a));\n    return array.filter(() => bits.shift());\n}\n\n/**\n * @en Substitution method of `Array.prototype.find()` which also accepts asynchronous callback.\n * @ja éåæã³ã¼ã«ããã¯ãæå®å¯è½ãª `Array.prototype.find()` ã®ä»£æ¿ã¡ã½ãã\n *\n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` å¥åéå\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` ã¤ãã¬ã¼ã·ã§ã³é©ç¨é¢æ°\n * @param thisArg\n *  - `en` Value to use as *this* when executing the `callback`.\n *  - `ja` `callback` å®è¡ã³ã³ãã­ã¹ã\n * @returns\n *  - `en` Returns a Promise with the resultant value.\n *  - `ja` ã¤ãã¬ã¼ã·ã§ã³çµæãæ ¼ç´ãã Promise ãªãã¸ã§ã¯ã\n */\nexport async function find<T>(this: unknown, array: T[], callback: (value: T, index: number, array: T[]) => boolean | Promise<boolean>, thisArg?: unknown): Promise<T | undefined> {\n    for (const [i, v] of array.entries()) {\n        if (await callback.call(thisArg || this, v, i, array)) {\n            return v;\n        }\n    }\n    return undefined;\n}\n\n/**\n * @en Substitution method of `Array.prototype.findIndex()` which also accepts asynchronous callback.\n * @ja éåæã³ã¼ã«ããã¯ãæå®å¯è½ãª `Array.prototype.findIndex()` ã®ä»£æ¿ã¡ã½ãã\n *\n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` å¥åéå\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` ã¤ãã¬ã¼ã·ã§ã³é©ç¨é¢æ°\n * @param thisArg\n *  - `en` Value to use as *this* when executing the `callback`.\n *  - `ja` `callback` å®è¡ã³ã³ãã­ã¹ã\n * @returns\n *  - `en` Returns a Promise with the resultant index value.\n *  - `ja` ã¤ã³ããã¯ã¹ãæ ¼ç´ãã Promise ãªãã¸ã§ã¯ã\n */\nexport async function findIndex<T>(this: unknown, array: T[], callback: (value: T, index: number, array: T[]) => boolean | Promise<boolean>, thisArg?: unknown): Promise<number> {\n    for (const [i, v] of array.entries()) {\n        if (await callback.call(thisArg || this, v, i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/**\n * @en Substitution method of `Array.prototype.some()` which also accepts asynchronous callback.\n * @ja éåæã³ã¼ã«ããã¯ãæå®å¯è½ãª `Array.prototype.some()` ã®ä»£æ¿ã¡ã½ãã\n *\n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` å¥åéå\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` ã¤ãã¬ã¼ã·ã§ã³é©ç¨é¢æ°\n * @param thisArg\n *  - `en` Value to use as *this* when executing the `callback`.\n *  - `ja` `callback` å®è¡ã³ã³ãã­ã¹ã\n * @returns\n *  - `en` Returns a Promise with the resultant boolean value.\n *  - `ja` çå½å¤ãæ ¼ç´ãã Promise ãªãã¸ã§ã¯ã\n */\nexport async function some<T>(this: unknown, array: T[], callback: (value: T, index: number, array: T[]) => unknown | Promise<unknown>, thisArg?: unknown): Promise<boolean> {\n    for (const [i, v] of array.entries()) {\n        if (await callback.call(thisArg || this, v, i, array)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * @en Substitution method of `Array.prototype.every()` which also accepts asynchronous callback.\n * @ja éåæã³ã¼ã«ããã¯ãæå®å¯è½ãª `Array.prototype.every()` ã®ä»£æ¿ã¡ã½ãã\n *\n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` å¥åéå\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` ã¤ãã¬ã¼ã·ã§ã³é©ç¨é¢æ°\n * @param thisArg\n *  - `en` Value to use as *this* when executing the `callback`.\n *  - `ja` `callback` å®è¡ã³ã³ãã­ã¹ã\n * @returns\n *  - `en` Returns a Promise with the resultant boolean value.\n *  - `ja` çå½å¤ãæ ¼ç´ãã Promise ãªãã¸ã§ã¯ã\n */\nexport async function every<T>(this: unknown, array: T[], callback: (value: T, index: number, array: T[]) => unknown | Promise<unknown>, thisArg?: unknown): Promise<boolean> {\n    for (const [i, v] of array.entries()) {\n        if (!await callback.call(thisArg || this, v, i, array)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * @en Substitution method of `Array.prototype.reduce()` which also accepts asynchronous callback.\n * @ja éåæã³ã¼ã«ããã¯ãæå®å¯è½ãª `Array.prototype.reduce()` ã®ä»£æ¿ã¡ã½ãã\n *\n * @param array\n *  - `en` Array to iterate over.\n *  - `ja` å¥åéå\n * @param callback\n *  - `en` Function to apply each item in `array`.\n *  - `ja` ã¤ãã¬ã¼ã·ã§ã³é©ç¨é¢æ°\n * @param initialValue\n *  - `en` Used as first argument to the first call of `callback`.\n *  - `ja` `callback` ã«æ¸¡ãããåæå¤\n * @returns\n *  - `en` Returns a Promise with the resultant *Array* as value.\n *  - `ja` ã¤ãã¬ã¼ã·ã§ã³çµæéåãæ ¼ç´ãã Promise ãªãã¸ã§ã¯ã\n */\nexport async function reduce<T, U>(\n    array: T[],\n    callback: (accumulator: U, currentValue: T, currentIndex: number, array: T[]) => U | Promise<U>,\n    initialValue?: U\n): Promise<U> {\n    if (array.length <= 0 && undefined === initialValue) {\n        throw TypeError('Reduce of empty array with no initial value');\n    }\n\n    const hasInit = (undefined !== initialValue);\n    let acc = (hasInit ? initialValue : array[0]) as U;\n\n    for (const [i, v] of array.entries()) {\n        if (!(!hasInit && 0 === i)) {\n            acc = await callback(acc, v, i, array);\n        }\n    }\n\n    return acc;\n}\n","/**\n * @en Date unit definitions.\n * @ja æ¥æãªãã¸ã§ã¯ãã®åä½å®ç¾©\n */\nexport type DateUnit = 'year' | 'month' | 'day' | 'hour' | 'min' | 'sec' | 'msec';\n\n/** @internal */\nconst _computeDateFuncMap = {\n    year: (date: Date, base: Date, add: number) => {\n        date.setUTCFullYear(base.getUTCFullYear() + add);\n        return date;\n    },\n    month: (date: Date, base: Date, add: number) => {\n        date.setUTCMonth(base.getUTCMonth() + add);\n        return date;\n    },\n    day: (date: Date, base: Date, add: number) => {\n        date.setUTCDate(base.getUTCDate() + add);\n        return date;\n    },\n    hour: (date: Date, base: Date, add: number) => {\n        date.setUTCHours(base.getUTCHours() + add);\n        return date;\n    },\n    min: (date: Date, base: Date, add: number) => {\n        date.setUTCMinutes(base.getUTCMinutes() + add);\n        return date;\n    },\n    sec: (date: Date, base: Date, add: number) => {\n        date.setUTCSeconds(base.getUTCSeconds() + add);\n        return date;\n    },\n    msec: (date: Date, base: Date, add: number) => {\n        date.setUTCMilliseconds(base.getUTCMilliseconds() + add);\n        return date;\n    },\n};\n\n/**\n * @en Calculate from the date which becomes a cardinal point before a N date time or after a N date time (by [[DateUnit]]).\n * @ja åºç¹ã¨ãªãæ¥ä»ãããNæ¥å¾ãNæ¥åãç®åº\n *\n * @param base\n *  - `en` base date time.\n *  - `ja` åºæºæ¥\n * @param add\n *  - `en` relative date time.\n *  - `ja` å ç®æ¥. ãã¤ãã¹æå®ã§næ¥åãè¨­å®å¯è½\n * @param unit [[DateUnit]]\n */\nexport function computeDate(base: Date, add: number, unit: DateUnit = 'day'): Date {\n    const date = new Date(base.getTime());\n    const func = _computeDateFuncMap[unit];\n    if (func) {\n        return func(date, base, add);\n    } else {\n        throw new TypeError(`invalid unit: ${unit}`);\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    Arguments,\n    isString,\n    isArray,\n    isSymbol,\n    className,\n    verify,\n} from '@cdp/core-utils';\nimport {\n    EventAll,\n    Subscription,\n    Subscribable,\n} from './interfaces';\n\n/** @internal Lisner æ ¼ç´å½¢å¼ */\ntype ListenersMap<T> = Map<keyof T, Set<(...args: T[keyof T][]) => unknown>>;\n\n/** @internal Lisner ã®å¼±åç§ */\nconst _mapListeners = new WeakMap<EventPublisher<any>, ListenersMap<any>>();\n\n/** @internal LisnerMap ã®åå¾ */\nfunction listeners<T extends object>(instance: EventPublisher<T>): ListenersMap<T> {\n    if (!_mapListeners.has(instance)) {\n        throw new TypeError('This is not a valid EventPublisher.');\n    }\n    return _mapListeners.get(instance) as ListenersMap<T>;\n}\n\n/** @internal Channel ã®åæ¤è¨¼ */\nfunction validChannel(channel: unknown): void | never {\n    if (isString(channel) || isSymbol(channel)) {\n        return;\n    }\n    throw new TypeError(`Type of ${className(channel)} is not a valid channel.`);\n}\n\n/** @internal Listener ã®åæ¤è¨¼ */\nfunction validListener(listener?: (...args: unknown[]) => unknown): any | never {\n    if (null != listener) {\n        verify('typeOf', 'function', listener);\n    }\n    return listener;\n}\n\n/** @internal event çºè¡ */\nfunction triggerEvent<Event, Channel extends keyof Event>(\n    map: ListenersMap<Event>,\n    channel: Channel,\n    original: string | undefined,\n    ...args: Arguments<Partial<Event[Channel]>>\n): void {\n    const list = map.get(channel);\n    if (!list) {\n        return;\n    }\n    for (const listener of list) {\n        try {\n            const eventArgs = original ? [original, ...args] : args;\n            const handled = listener(...eventArgs);\n            // if received 'true', stop delegation.\n            if (true === handled) {\n                break;\n            }\n        } catch (e) {\n            void Promise.reject(e);\n        }\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Eventing framework class with ensuring type-safe for TypeScript. <br>\n *     The client of this class can implement original Pub-Sub (Observer) design pattern.\n * @ja åå®å¨ãä¿éããã¤ãã³ãç»é²ã»çºè¡ã¯ã©ã¹ <br>\n *     ã¯ã©ã¤ã¢ã³ãã¯æ¬ã¯ã©ã¹ãæ´¾çãã¦ç¬èªã® Pub-Sub (Observer) ãã¿ã¼ã³ãå®è£å¯è½\n *\n * @example <br>\n *\n * ```ts\n * import { EventPublisher } from '@cdp/events';\n *\n * // declare event interface\n * interface SampleEvent {\n *   hoge: [number, string];        // callback function's args type tuple\n *   foo: [void];                   // no args\n *   hoo: void;                     // no args (same the upon)\n *   bar: [Error];                  // any class is available.\n *   baz: Error | Number;           // if only one argument, `[]` is not required.\n * }\n *\n * // declare client class\n * class SamplePublisher extends EventPublisher<SampleEvent> {\n *   :\n *   someMethod(): void {\n *     this.publish('hoge', 100, 'test');       // OK. standard usage.\n *     this.publish('hoge', 100, true);         // NG. argument of type 'true' is not assignable\n *                                              //     to parameter of type 'string | undefined'.\n *     this.publish('hoge', 100);               // OK. all args to be optional automatically.\n *     this.publish('foo');                     // OK. standard usage.\n *     this.publish('foo', 100);                // NG. argument of type '100' is not assignable\n *                                              //     to parameter of type 'void | undefined'.\n *   }\n * }\n *\n * const sample = new SamplePublisher();\n *\n * sample.on('hoge', (a: number, b: string) => { ... });    // OK. standard usage.\n * sample.on('hoge', (a: number, b: boolean) => { ... });   // NG. types of parameters 'b'\n *                                                          //     and 'args_1' are incompatible.\n * sample.on('hoge', (a) => { ... });                       // OK. all args\n *                                                          //     to be optional automatically.\n * sample.on('hoge', (a, b, c) => { ... });                 // NG. expected 1-2 arguments,\n *                                                          //     but got 3.\n * ```\n */\nexport abstract class EventPublisher<Event extends object> implements Subscribable<Event> {\n\n    /** constructor */\n    constructor() {\n        verify('instanceOf', EventPublisher, this);\n        _mapListeners.set(this, new Map());\n    }\n\n    /**\n     * @en Notify event to clients.\n     * @ja event çºè¡\n     *\n     * @param channel\n     *  - `en` event channel key. (string | symbol)\n     *  - `ja` ã¤ãã³ããã£ãã«ã­ã¼ (string | symbol)\n     * @param args\n     *  - `en` arguments for callback function of the `channel` corresponding.\n     *  - `ja` `channel` ã«å¯¾å¿ããã³ã¼ã«ããã¯é¢æ°ã«æ¸¡ãå¼æ°\n     */\n    protected publish<Channel extends keyof Event>(channel: Channel, ...args: Arguments<Partial<Event[Channel]>>): void {\n        const map = listeners(this);\n        validChannel(channel);\n        triggerEvent(map, channel, undefined, ...args);\n        // trigger for all handler\n        if ('*' !== channel) {\n            triggerEvent(map as unknown as ListenersMap<EventAll>, '*', channel as string, ...args);\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: Subscribable<Event>\n\n    /**\n     * @en Check whether this object has clients.\n     * @ja ã¯ã©ã¤ã¢ã³ããå­å¨ãããå¤å®\n     *\n     * @param channel\n     *  - `en` event channel key. (string | symbol)\n     *  - `ja` ã¤ãã³ããã£ãã«ã­ã¼ (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` ã«å¯¾å¿ããã³ã¼ã«ããã¯é¢æ°\n     */\n    hasListener<Channel extends keyof Event>(channel?: Channel, listener?: (...args: Arguments<Event[Channel]>) => unknown): boolean {\n        const map = listeners(this);\n        if (null == channel) {\n            return map.size > 0;\n        }\n        validChannel(channel);\n        if (null == listener) {\n            return map.has(channel);\n        }\n        validListener(listener);\n        const list = map.get(channel);\n        return list ? list.has(listener) : false;\n    }\n\n    /**\n     * @en Returns registered channel keys.\n     * @ja ç»é²ããã¦ãããã£ãã«ã­ã¼ãè¿å´\n     */\n    channels(): (keyof Event)[] {\n        return [...listeners(this).keys()];\n    }\n\n    /**\n     * @en Subscrive event(s).\n     * @ja ã¤ãã³ãè³¼èª­è¨­å®\n     *\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *  - `ja` å¯¾è±¡ã®ã¤ãã³ããã£ãã«ã­ã¼ (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` ã«å¯¾å¿ããã³ã¼ã«ããã¯é¢æ°\n     */\n    on<Channel extends keyof Event>(channel: Channel | Channel[], listener: (...args: Arguments<Event[Channel]>) => unknown): Subscription {\n        const map = listeners(this);\n        validListener(listener);\n\n        const channels = isArray(channel) ? channel : [channel];\n        for (const ch of channels) {\n            validChannel(ch);\n            map.has(ch) ? map.get(ch)!.add(listener) : map.set(ch, new Set([listener])); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        }\n\n        return Object.freeze({\n            get enable() {\n                for (const ch of channels) {\n                    const list = map.get(ch);\n                    if (!list || !list.has(listener)) {\n                        this.unsubscribe();\n                        return false;\n                    }\n                }\n                return true;\n            },\n            unsubscribe() {\n                for (const ch of channels) {\n                    const list = map.get(ch);\n                    if (list) {\n                        list.delete(listener);\n                        list.size > 0 || map.delete(ch);\n                    }\n                }\n            },\n        });\n    }\n\n    /**\n     * @en Subscrive event(s) but it causes the bound callback to only fire once before being removed.\n     * @ja ä¸åº¦ã ããã³ããªã³ã°å¯è½ãªã¤ãã³ãè³¼èª­è¨­å®\n     *\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *  - `ja` å¯¾è±¡ã®ã¤ãã³ããã£ãã«ã­ã¼ (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` ã«å¯¾å¿ããã³ã¼ã«ããã¯é¢æ°\n     */\n    once<Channel extends keyof Event>(channel: Channel | Channel[], listener: (...args: Arguments<Event[Channel]>) => unknown): Subscription {\n        const context = this.on(channel, listener);\n        const managed = this.on(channel, () => {\n            context.unsubscribe();\n            managed.unsubscribe();\n        });\n        return context;\n    }\n\n    /**\n     * @en Unsubscribe event(s).\n     * @ja ã¤ãã³ãè³¼èª­è§£é¤\n     *\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *         When not set this parameter, everything is released.\n     *  - `ja` å¯¾è±¡ã®ã¤ãã³ããã£ãã«ã­ã¼ (string | symbol)\n     *         æå®ããªãå ´åã¯ãã¹ã¦è§£é¤\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *         When not set this parameter, all same `channel` listeners are released.\n     *  - `ja` `channel` ã«å¯¾å¿ããã³ã¼ã«ããã¯é¢æ°\n     *         æå®ããªãå ´åã¯åä¸ `channel` ãã¹ã¦ãè§£é¤\n     */\n    off<Channel extends keyof Event>(channel?: Channel | Channel[], listener?: (...args: Arguments<Event[Channel]>) => unknown): this {\n        const map = listeners(this);\n        if (null == channel) {\n            map.clear();\n            return this;\n        }\n\n        const channels = isArray(channel) ? channel : [channel];\n        const callback = validListener(listener);\n        for (const ch of channels) {\n            validChannel(ch);\n            if (null == callback) {\n                map.delete(ch);\n                continue;\n            } else {\n                const list = map.get(ch);\n                if (list) {\n                    list.delete(callback);\n                    list.size > 0 || map.delete(ch);\n                }\n            }\n        }\n\n        return this;\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport { Arguments } from '@cdp/core-utils';\nimport { Subscribable } from './interfaces';\nimport { EventPublisher } from './publisher';\n\n/** re-export */\nexport type EventArguments<T> = Arguments<T>;\n\n/**\n * @en Eventing framework object able to call `publish()` method from outside.\n * @ja å¤é¨ããã® `publish()` ãå¯è½ã«ããã¤ãã³ãç»é²ã»çºè¡ã¯ã©ã¹\n *\n * @example <br>\n *\n * ```ts\n * import { EventBroker } from '@cdp/events';\n *\n * // declare event interface\n * interface SampleEvent {\n *   hoge: [number, string];        // callback function's args type tuple\n * }\n *\n * const broker = new EventBroker<SampleEvent>();\n * broker.trigger('hoge', 100, 'test');     // OK. standard usage.\n * broker.trigger('hoge', 100, true);       // NG. argument of type 'true' is not assignable\n *                                          //     to parameter of type 'string | undefined'.\n * ```\n */\nexport interface EventBroker<Event extends object> extends Subscribable<Event> {\n    /**\n     * @en Notify event to clients.\n     * @ja event çºè¡\n     *\n     * @param channel\n     *  - `en` event channel key. (string | symbol)\n     *  - `ja` ã¤ãã³ããã£ãã«ã­ã¼ (string | symbol)\n     * @param args\n     *  - `en` arguments for callback function of the `channel` corresponding.\n     *  - `ja` `channel` ã«å¯¾å¿ããã³ã¼ã«ããã¯é¢æ°ã«æ¸¡ãå¼æ°\n     */\n    trigger<Channel extends keyof Event>(channel: Channel, ...args: Arguments<Partial<Event[Channel]>>): void;\n}\n\n/**\n * @en Constructor of [[EventBroker]]\n * @ja [[EventBroker]] ã®ã³ã³ã¹ãã©ã¯ã¿å®ä½\n */\nexport const EventBroker: {\n    readonly prototype: EventBroker<any>;\n    new <T extends object>(): EventBroker<T>;\n} = EventPublisher as any;\n\nEventBroker.prototype.trigger = (EventPublisher.prototype as any).publish;\n","import {\n    UnknownFunction,\n    Arguments,\n    isArray,\n} from '@cdp/core-utils';\nimport {\n    Subscribable,\n    Subscription,\n    EventSchema,\n} from './interfaces';\n\n/** @internal */ const _context = Symbol('context');\n/** @internal */ type SubscriptionMap = Map<UnknownFunction, Subscription>;\n/** @internal */ type ListerMap       = Map<string, SubscriptionMap>;\n/** @internal */ type SubscriptionSet = Set<Subscription>;\n/** @internal */ type SubscribableMap = WeakMap<Subscribable, ListerMap>;\n\n/** @internal Lisner æ ¼ç´å½¢å¼ */\ninterface Context {\n    map: SubscribableMap;\n    set: SubscriptionSet;\n}\n\n/** @internal register listener context */\nfunction register(context: Context, target: Subscribable, channel: string | string[], listener: UnknownFunction): Subscription {\n    const subscriptions: Subscription[] = [];\n\n    const channels = isArray(channel) ? channel : [channel];\n    for (const ch of channels) {\n        const s = target.on(ch, listener);\n        context.set.add(s);\n        subscriptions.push(s);\n\n        const listenerMap = context.map.get(target) || new Map<string, Map<UnknownFunction, Subscription>>();\n        const map = listenerMap.get(ch) || new Map<UnknownFunction, Subscription>();\n        map.set(listener, s);\n\n        if (!listenerMap.has(ch)) {\n            listenerMap.set(ch, map);\n        }\n        if (!context.map.has(target)) {\n            context.map.set(target, listenerMap);\n        }\n    }\n\n    return Object.freeze({\n        get enable() {\n            for (const s of subscriptions) {\n                if (s.enable) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        unsubscribe() {\n            for (const s of subscriptions) {\n                s.unsubscribe();\n            }\n        },\n    });\n}\n\n/** @internal unregister listener context */\nfunction unregister(context: Context, target?: Subscribable, channel?: string | string[], listener?: UnknownFunction): void {\n    if (null != target) {\n        target.off(channel, listener);\n\n        const listenerMap = context.map.get(target);\n        if (!listenerMap) {\n            return;\n        }\n        if (null != channel) {\n            const channels = isArray(channel) ? channel : [channel];\n            for (const ch of channels) {\n                const map = listenerMap.get(ch);\n                if (!map) {\n                    return;\n                } else if (listener) {\n                    const s = map.get(listener);\n                    if (s) {\n                        s.unsubscribe();\n                        context.set.delete(s);\n                    }\n                    map.delete(listener);\n                } else {\n                    for (const s of map.values()) {\n                        s.unsubscribe();\n                        context.set.delete(s);\n                    }\n                }\n            }\n        } else {\n            for (const map of listenerMap.values()) {\n                for (const s of map.values()) {\n                    s.unsubscribe();\n                    context.set.delete(s);\n                }\n            }\n        }\n    } else {\n        for (const s of context.set) {\n            s.unsubscribe();\n        }\n        context.map = new WeakMap();\n        context.set.clear();\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en The class to which the safe event register/unregister method is offered for the object which is a short life cycle than subscription target. <br>\n *     The advantage of using this form, instead of `on()`, is that `listenTo()` allows the object to keep track of the events,\n *     and they can be removed all at once later call `stopListening()`.\n * @ja è³¼èª­å¯¾è±¡ãããã©ã¤ããµã¤ã¯ã«ãç­ããªãã¸ã§ã¯ãã«å¯¾ãã¦, å®å¨ãªã¤ãã³ãç»é²/è§£é¤ã¡ã½ãããæä¾ããã¯ã©ã¹ <br>\n *     `on()` ã®ä»£ããã« `listenTo()` ãä½¿ç¨ãããã¨ã§, å¾ã« `stopListening()` ã1åº¦å¼ã¶ã ãã§ãã¹ã¦ã®ãªã¹ãã¼ãè§£é¤ã§ããå©ç¹ããã.\n *\n * @example <br>\n *\n * ```ts\n * import { EventReceiver, EventBroker } from '@cdp/events';\n *\n * // declare event interface\n * interface SampleEvent {\n *   hoge: [number, string];        // callback function's args type tuple\n *   foo: [void];                   // no args\n *   hoo: void;                     // no args (same the upon)\n *   bar: [Error];                  // any class is available.\n *   baz: Error | Number;           // if only one argument, `[]` is not required.\n * }\n *\n * // declare client class\n * class SampleReceiver extends EventReceiver {\n *   constructor(broker: EventBroker<SampleEvent>) {\n *     super();\n *     this.listenTo(broker, 'hoge', (num: number, str: string) => { ... });\n *     this.listenTo(broker, 'bar', (e: Error) => { ... });\n *     this.listenTo(broker, ['foo', 'hoo'], () => { ... });\n *   }\n *\n *   release(): void {\n *     this.stopListening();\n *   }\n * }\n * ```\n *\n * or\n *\n * ```ts\n * const broker   = new EventBroker<SampleEvent>();\n * const receiver = new EventReceiver();\n *\n * receiver.listenTo(broker, 'hoge', (num: number, str: string) => { ... });\n * receiver.listenTo(broker, 'bar', (e: Error) => { ... });\n * receiver.listenTo(broker, ['foo', 'hoo'], () => { ... });\n *\n * receiver.stopListening();\n * ```\n */\nexport class EventReceiver {\n    /** @internal */\n    private readonly [_context]: Context;\n\n    /** constructor */\n    constructor() {\n        this[_context] = { map: new WeakMap(), set: new Set() };\n    }\n\n    /**\n     * @en Tell an object to listen to a particular event on an other object.\n     * @ja å¯¾è±¡ãªãã¸ã§ã¯ãã®ã¤ãã³ãè³¼èª­è¨­å®\n     *\n     * @param target\n     *  - `en` event listening target object.\n     *  - `ja` ã¤ãã³ãè³¼èª­å¯¾è±¡ã®ãªãã¸ã§ã¯ã\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *  - `ja` å¯¾è±¡ã®ã¤ãã³ããã£ãã«ã­ã¼ (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` ã«å¯¾å¿ããã³ã¼ã«ããã¯é¢æ°\n     */\n    public listenTo<T extends Subscribable, Event extends EventSchema<T> = EventSchema<T>, Channel extends keyof Event = keyof Event>(\n        target: T,\n        channel: Channel | Channel[],\n        listener: (...args: Arguments<Event[Channel]>) => unknown\n    ): Subscription {\n        return register(this[_context], target, channel as string, listener);\n    }\n\n    /**\n     * @en Just like listenTo, but causes the bound callback to fire only once before being removed.\n     * @ja å¯¾è±¡ãªãã¸ã§ã¯ãã®ä¸åº¦ã ããã³ããªã³ã°å¯è½ãªã¤ãã³ãè³¼èª­è¨­å®\n     *\n     * @param target\n     *  - `en` event listening target object.\n     *  - `ja` ã¤ãã³ãè³¼èª­å¯¾è±¡ã®ãªãã¸ã§ã¯ã\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *  - `ja` å¯¾è±¡ã®ã¤ãã³ããã£ãã«ã­ã¼ (string | symbol)\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *  - `ja` `channel` ã«å¯¾å¿ããã³ã¼ã«ããã¯é¢æ°\n     */\n    public listenToOnce<T extends Subscribable, Event extends EventSchema<T> = EventSchema<T>, Channel extends keyof Event = keyof Event>(\n        target: T,\n        channel: Channel | Channel[],\n        listener: (...args: Arguments<Event[Channel]>) => unknown\n    ): Subscription {\n        const context = register(this[_context], target, channel as string, listener);\n        const managed = target.on(channel, () => {\n            unregister(this[_context], target, channel as string, listener);\n            managed.unsubscribe();\n        });\n        return context;\n    }\n\n    /**\n     * @en Tell an object to stop listening to events.\n     * @ja ã¤ãã³ãè³¼èª­è§£é¤\n     *\n     * @param target\n     *  - `en` event listening target object.\n     *         When not set this parameter, everything is released.\n     *  - `ja` ã¤ãã³ãè³¼èª­å¯¾è±¡ã®ãªãã¸ã§ã¯ã\n     *         æå®ããªãå ´åã¯ãã¹ã¦ã®ãªã¹ãã¼ãè§£é¤\n     * @param channel\n     *  - `en` target event channel key. (string | symbol)\n     *         When not set this parameter, everything is released listeners from `target`.\n     *  - `ja` å¯¾è±¡ã®ã¤ãã³ããã£ãã«ã­ã¼ (string | symbol)\n     *         æå®ããªãå ´åã¯å¯¾è±¡ `target` ã®ãªã¹ãã¼ããã¹ã¦è§£é¤\n     * @param listener\n     *  - `en` callback function of the `channel` corresponding.\n     *         When not set this parameter, all same `channel` listeners are released.\n     *  - `ja` `channel` ã«å¯¾å¿ããã³ã¼ã«ããã¯é¢æ°\n     *         æå®ããªãå ´åã¯åä¸ `channel` ãã¹ã¦ãè§£é¤\n     */\n    public stopListening<T extends Subscribable, Event extends EventSchema<T> = EventSchema<T>, Channel extends keyof Event = keyof Event>(\n        target?: T,\n        channel?: Channel | Channel[],\n        listener?: (...args: Arguments<Event[Channel]>) => unknown\n    ): this {\n        unregister(this[_context], target, channel as string, listener);\n        return this;\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport { mixins } from '@cdp/core-utils';\nimport { EventBroker } from './broker';\nimport { EventReceiver } from './receiver';\n\n/**\n * @en The class which have I/F of [[EventBroker]] and [[EventReceiver]]. <br>\n *     `Events` class of `Backbone.js` equivalence.\n * @ja [[EventBroker]] ã¨ [[EventReceiver]] ã® I/F ããããæã¤ã¯ã©ã¹ <br>\n *     `Backbone.js` ã® `Events` ã¯ã©ã¹ç¸å½\n *\n * @example <br>\n *\n * ```ts\n * import { EventSource } from '@cdp/events';\n *\n * // declare event interface\n * interface TargetEvent {\n *   hoge: [number, string];        // callback function's args type tuple\n *   foo: [void];                   // no args\n *   hoo: void;                     // no args (same the upon)\n *   bar: [Error];                  // any class is available.\n *   baz: Error | Number;           // if only one argument, `[]` is not required.\n * }\n *\n * interface SampleEvent {\n *   fuga: [number, string];        // callback function's args type tuple\n * }\n *\n * // declare client class\n * class SampleSource extends EventSource<SampleEvent> {\n *   constructor(target: EventSource<TargetEvent>) {\n *     super();\n *     this.listenTo(broker, 'hoge', (num: number, str: string) => { ... });\n *     this.listenTo(broker, 'bar', (e: Error) => { ... });\n *     this.listenTo(broker, ['foo', 'hoo'], () => { ... });\n *   }\n *\n *   release(): void {\n *     this.stopListening();\n *   }\n * }\n *\n * const sample = new SampleSource();\n *\n * sample.on('fuga', (a: number, b: string) => { ... });    // OK. standard usage.\n * sample.trigger('fuga', 100, 'test');                     // OK. standard usage.\n * ```\n */\ntype EventSourceBase<T extends object> = EventBroker<T> & EventReceiver;\n\n/** @internal [[EventSource]] class */\nclass EventSource extends mixins(EventBroker, EventReceiver) {\n    constructor() {\n        super();\n        this.super(EventReceiver);\n    }\n}\n\n/**\n * @en Constructor of [[EventSource]]\n * @ja [[EventSource]] ã®ã³ã³ã¹ãã©ã¯ã¿å®ä½\n */\nconst EventSourceBase: {\n    readonly prototype: EventSourceBase<any>;\n    new <T extends object>(): EventSourceBase<T>;\n} = EventSource as any;\n\nexport { EventSourceBase as EventSource };\n","import { EventBroker, Subscription } from '@cdp/events';\n\n/** @internal */ export const _cancel = Symbol('cancel');\n/** @internal */ export const _close  = Symbol('close');\n\n/**\n * @en CancelToken state definitions.\n * @ja CancelToken ã®ç¶æå®ç¾©\n *\n * @internal\n */\nexport const enum CancelTokenState {\n    /** ã­ã£ã³ã»ã«åä»å¯è½ */\n    OPEN        = 0x0,\n    /** ã­ã£ã³ã»ã«åä»æ¸ã¿ */\n    REQUESTED   = 0x1,\n    /** ã­ã£ã³ã»ã«åä»ä¸å¯ */\n    CLOSED      = 0x2,\n}\n\n/**\n * @en Cancel event definitions.\n * @ja ã­ã£ã³ã»ã«ã¤ãã³ãå®ç¾©\n *\n * @internal\n */\nexport interface CancelEvent<T> {\n    cancel: [T];\n}\n\n/**\n * @en Internal CancelToken interface.\n * @ja CancelToken ã®åé¨ã¤ã³ã¿ã¼ãã§ã¤ã¹å®ç¾©\n *\n * @internal\n */\nexport interface CancelTokenContext<T = unknown> {\n    readonly broker: EventBroker<CancelEvent<T>>;\n    readonly subscriptions: Set<Subscription>;\n    reason: T | undefined;\n    status: CancelTokenState;\n}\n\n/**\n * @en Invalid subscription object declaration.\n * @ja ç¡å¹ãª Subscription ãªãã¸ã§ã¯ã\n *\n * @internal\n */\nexport const invalidSubscription = Object.freeze({\n    enable: false,\n    unsubscribe() { /* noop */ }\n}) as Subscription;\n","import { verify } from '@cdp/core-utils';\nimport { EventBroker, Subscription } from '@cdp/events';\nimport {\n    _cancel,\n    _close,\n    CancelTokenState,\n    CancelTokenContext,\n    invalidSubscription,\n} from './internal';\n\n/**\n * @en Cancellation source interface.\n * @ja ã­ã£ã³ã»ã«ç®¡çã¤ã³ã¿ã¼ãã§ã¤ã¹\n */\nexport interface CancelTokenSource<T = unknown> {\n    /**\n     * @en [[CancelToken]] getter.\n     * @ja [[CancelToken]] åå¾\n     */\n    readonly token: CancelToken<T>;\n\n    /**\n     * @en Execute cancel.\n     * @ja ã­ã£ã³ã»ã«å®è¡\n     *\n     * @param reason\n     *  - `en` cancellation reason. this arg is transmitted in promise chain.\n     *  - `ja` ã­ã£ã³ã»ã«ã®çç±ãæå®. `Promise` ãã§ã¤ã³ã«ä¼éããã.\n     */\n    cancel(reason: T): void;\n\n    /**\n     * @en Break up cancellation reception.\n     * @ja ã­ã£ã³ã»ã«åä»ãçµäº\n     */\n    close(): void;\n}\n\n/** @internal */ const _tokens = new WeakMap<CancelToken, CancelTokenContext>();\n\n/** @internal */\nfunction getContext<T = unknown>(instance: CancelToken<T>): CancelTokenContext<T> {\n    if (!_tokens.has(instance)) {\n        throw new TypeError('The object is not a valid CancelToken.');\n    }\n    return _tokens.get(instance) as CancelTokenContext<T>;\n}\n\n/**\n * @en The token object to which unification processing for asynchronous processing cancellation is offered. <br>\n *     Origin is `CancellationToken` of `.NET Framework`.\n * @ja éåæå¦çã­ã£ã³ã»ã«ã®ããã®çµ±ä¸å¦çãæä¾ãããã¼ã¯ã³ãªãã¸ã§ã¯ã <br>\n *     ãªãªã¸ãã«ã¯ `.NET Framework` ã® `CancellationToken`\n *\n * @see https://docs.microsoft.com/en-us/dotnet/standard/threading/cancellation-in-managed-threads\n *\n * @example <br>\n *\n * ```ts\n * import { CancelToken } from '@cdp/promise';\n * ```\n *\n * - Basic Usage\n *\n * ```ts\n * const token = new CancelToken((cancel, close) => {\n *   button1.onclick = ev => cancel(new Error('Cancel'));\n *   button2.onclick = ev => close();\n * });\n * ```\n *\n * or\n *\n * ```ts\n * const { cancel, close, token } = CancelToken.source();\n * button1.onclick = ev => cancel(new Error('Cancel'));\n * button2.onclick = ev => close();\n * ```\n *\n * - Use with Promise\n *\n * ```ts\n * const { cancel, close, token } = CancelToken.source();\n * const promise = new Promise((ok, ng) => { ... }, token);\n * promise\n *   .then(...)\n *   .then(...)\n *   .then(...)\n *   .catch(reason => {\n *     // check reason\n *   });\n * ```\n *\n * - Register & Unregister callback(s)\n *\n * ```ts\n * const { cancel, close, token } = CancelToken.source();\n * const subscription = token.register(reason => {\n *   console.log(reason.message);\n * });\n * if (someCase) {\n *   subscription.unsubscribe();\n * }\n * ```\n */\nexport class CancelToken<T = unknown> {\n\n    /**\n     * @en Create [[CancelTokenSource]] instance.\n     * @ja [[CancelTokenSource]] ã¤ã³ã¹ã¿ã³ã¹ã®åå¾\n     *\n     * @param linkedTokens\n     *  - `en` relating already made [[CancelToken]] instance.\n     *        You can attach to the token that to be a cancellation target.\n     *  - `ja` ãã§ã«ä½æããã [[CancelToken]] é¢é£ä»ããå ´åã«æå®\n     *        æ¸¡ããã token ã¯ã­ã£ã³ã»ã«å¯¾è±¡ã¨ãã¦ç´ã¥ãããã\n     */\n    public static source<T = unknown>(...linkedTokens: CancelToken[]): CancelTokenSource<T> {\n        let cancel!: (reason: T) => void;\n        let close!: () => void;\n        const token = new CancelToken<T>((onCancel, onClose) => {\n            cancel = onCancel;\n            close = onClose;\n        }, ...linkedTokens);\n        return Object.freeze({ token, cancel, close });\n    }\n\n    /**\n     * constructor\n     *\n     * @param executor\n     *  - `en` executer that has `cancel` and `close` callback.\n     *  - `ja` ã­ã£ã³ã»ã«/ã¯ã­ã¼ãº å®è¡ã³ã¼ã«ããã¯ãæå®\n     * @param linkedTokens\n     *  - `en` relating already made [[CancelToken]] instance.\n     *        You can attach to the token that to be a cancellation target.\n     *  - `ja` ãã§ã«ä½æããã [[CancelToken]] é¢é£ä»ããå ´åã«æå®\n     *        æ¸¡ããã token ã¯ã­ã£ã³ã»ã«å¯¾è±¡ã¨ãã¦ç´ã¥ãããã\n     */\n    constructor(\n        executor: (cancel: (reason: T) => void, close: () => void) => void,\n        ...linkedTokens: CancelToken[]\n    ) {\n        verify('instanceOf', CancelToken, this);\n        verify('typeOf', 'function', executor);\n\n        const linkedTokenSet = new Set(linkedTokens.filter(t => _tokens.has(t)));\n        let status = CancelTokenState.OPEN;\n        for (const t of linkedTokenSet) {\n            status |= getContext(t).status;\n        }\n\n        const context: CancelTokenContext<T> = {\n            broker: new EventBroker(),\n            subscriptions: new Set(),\n            reason: undefined,\n            status,\n        };\n        _tokens.set(this, Object.seal(context));\n\n        const cancel = this[_cancel];\n        const close = this[_close];\n        if (status === CancelTokenState.OPEN) {\n            for (const t of linkedTokenSet) {\n                context.subscriptions.add(t.register(cancel.bind(this)));\n                this.register(cancel.bind(t));\n            }\n        }\n\n        executor(cancel.bind(this), close.bind(this));\n    }\n\n    /**\n     * @en Cancellation reason accessor.\n     * @ja ã­ã£ã³ã»ã«ã®åå åå¾\n     */\n    get reason(): T | undefined {\n        return getContext(this).reason;\n    }\n\n    /**\n     * @en Enable cancellation state accessor.\n     * @ja ã­ã£ã³ã»ã«å¯è½ãå¤å®\n     */\n    get cancelable(): boolean {\n        return getContext(this).status === CancelTokenState.OPEN;\n    }\n\n    /**\n     * @en Cancellation requested state accessor.\n     * @ja ã­ã£ã³ã»ã«ãåãä»ãã¦ãããå¤å®\n     */\n    get requested(): boolean {\n        return !!(getContext(this).status & CancelTokenState.REQUESTED);\n    }\n\n    /**\n     * @en Cancellation closed state accessor.\n     * @ja ã­ã£ã³ã»ã«åä»ãçµäºãã¦ãããå¤å®\n     */\n    get closed(): boolean {\n        return !!(getContext(this).status & CancelTokenState.CLOSED);\n    }\n\n    /**\n     * @en `toString` tag override.\n     * @ja `toString` ã¿ã°ã®ãªã¼ãã¼ã©ã¤ã\n     */\n    protected get [Symbol.toStringTag](): 'CancelToken' { return 'CancelToken'; }\n\n    /**\n     * @en Register custom cancellation callback.\n     * @ja ã­ã£ã³ã»ã«æã®ã«ã¹ã¿ã å¦çã®ç»é²\n     *\n     * @param onCancel\n     *  - `en` cancel operation callback\n     *  - `ja` ã­ã£ã³ã»ã«ã³ã¼ã«ããã¯\n     * @returns\n     *  - `en` `Subscription` instance.\n     *        You can revoke cancellation to call `unsubscribe` method.\n     *  - `ja` `Subscription` ã¤ã³ã¹ã¿ã³ã¹\n     *        `unsubscribe` ã¡ã½ãããå¼ã¶ãã¨ã§ã­ã£ã³ã»ã«ãç¡å¹ã«ãããã¨ãå¯è½\n     */\n    public register(onCancel: (reason: T) => unknown): Subscription {\n        const context = getContext(this);\n        if (!this.cancelable) {\n            return invalidSubscription;\n        }\n        return context.broker.on('cancel', onCancel);\n    }\n\n    /** @internal */\n    private [_cancel](reason: T): void {\n        const context = getContext(this);\n        verify('notNil', reason);\n        if (!this.cancelable) {\n            return;\n        }\n        context.reason = reason;\n        context.status |= CancelTokenState.REQUESTED;\n        for (const s of context.subscriptions) {\n            s.unsubscribe();\n        }\n        context.broker.trigger('cancel', reason);\n        void Promise.resolve().then(() => this[_close]());\n    }\n\n    /** @internal */\n    private [_close](): void {\n        const context = getContext(this);\n        if (this.closed) {\n            return;\n        }\n        context.status |= CancelTokenState.CLOSED;\n        for (const s of context.subscriptions) {\n            s.unsubscribe();\n        }\n        context.subscriptions.clear();\n        context.broker.off();\n    }\n}\n","/* eslint-disable\n    no-global-assign,\n    @typescript-eslint/unbound-method,\n */\n\nimport {\n    isFunction,\n    verify,\n    getConfig,\n} from '@cdp/core-utils';\nimport { Subscription } from '@cdp/events';\nimport { CancelToken } from './cancel-token';\n\ndeclare global {\n\n    interface PromiseConstructor {\n        new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: unknown) => void) => void, cancelToken?: CancelToken | null): Promise<T>;\n        resolve<T>(value?: T | PromiseLike<T>, cancelToken?: CancelToken | null): Promise<T>;\n    }\n\n}\n\n/** @internal `Native Promise` constructor */\nconst NativePromise = Promise;\n/** @internal `Native then` method */\nconst nativeThen = NativePromise.prototype.then;\n/** @internal */ const _create = Symbol('create');\n/** @internal */ const _tokens = new WeakMap<Promise<unknown>, CancelToken>();\n\n/**\n * @en Extended `Promise` class which enabled cancellation. <br>\n *     `Native Promise` constructor is overridden by framework default behaviour.\n * @ja ã­ã£ã³ã»ã«ãå¯è½ã«ãã `Promise` æ¡å¼µã¯ã©ã¹ <br>\n *     æ¢å®ã§ `Native Promise` ããªã¼ãã¼ã©ã¤ããã.\n */\nclass CancelablePromise<T> extends Promise<T> {\n\n    /**\n     * @en Overriding of the default constructor used for generation of an object.\n     * @ja ãªãã¸ã§ã¯ãã®çæã«ä½¿ãããããã©ã«ãã³ã³ã¹ãã©ã¯ã¿ã®ãªã¼ãã¼ã©ã¤ã\n     *\n     * @internal\n     */\n    static get [Symbol.species](): PromiseConstructor { return NativePromise; }\n\n    /**\n     * @en Creates a new resolved promise for the provided value.\n     * @ja æ°è¦ã«è§£æ±ºæ¸ã¿ promise ã¤ã³ã¹ã¿ã³ã¹ãä½æ\n     *\n     * @internal\n     *\n     * @param value\n     *  - `en` the value transmitted in promise chain.\n     *  - `ja` `Promise` ã«ä¼éããå¤\n     * @param cancelToken\n     *  - `en` [[CancelToken]] instance create from [[CancelToken]].`source()`.\n     *  - `ja` [[CancelToken]].`source()` ããä½æãã [[CancelToken]] ã¤ã³ã¹ã¿ã³ã¹ãæå®\n     */\n    static resolve<T>(value?: T | PromiseLike<T>, cancelToken?: CancelToken | null): CancelablePromise<T> {\n        return this[_create](super.resolve(value), cancelToken);\n    }\n\n    /** @internal private construction */\n    private static [_create]<T, TResult1 = T, TResult2 = never>(\n        src: Promise<T>,\n        token?: CancelToken | null,\n        thenArgs?: [\n            ((value: T) => TResult1 | PromiseLike<TResult1>) | null | undefined,\n            ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null | undefined\n        ] | null\n    ): CancelablePromise<TResult1 | TResult2> {\n        verify('instanceOf', NativePromise, src);\n\n        let p: Promise<T | TResult1 | TResult2>;\n        if (!(token instanceof CancelToken)) {\n            p = src;\n        } else if (thenArgs && (!isFunction(thenArgs[0]) || isFunction(thenArgs[1]))) {\n            p = src;\n        } else if (token.cancelable) {\n            let s: Subscription;\n            p = new NativePromise((resolve, reject) => {\n                s = token.register(reject);\n                nativeThen.call(src, resolve, reject);\n            });\n            const dispose = (): void => {\n                s.unsubscribe();\n                _tokens.delete(p);\n            };\n            p.then(dispose, dispose);\n        } else if (token.requested) {\n            p = super.reject(token.reason);\n        } else if (token.closed) {\n            p = src;\n        } else {\n            throw new Error('Unexpected Exception');\n        }\n\n        if (thenArgs) {\n            p = nativeThen.apply(p, thenArgs);\n        }\n        if (token && token.cancelable) {\n            _tokens.set(p, token);\n        }\n\n        p instanceof this || Object.setPrototypeOf(p, this.prototype);\n\n        return p as CancelablePromise<TResult1 | TResult2>;\n    }\n\n    /**\n     * constructor\n     *\n     * @param executor\n     *  - `en` A callback used to initialize the promise. This callback is passed two arguments `resolve` and `reject`.\n     *  - `ja` promise ã®åæåã«ä½¿ç¨ããã³ã¼ã«ããã¯ãæå®. `resolve` ã¨ `reject` ã®2ã¤ã®å¼æ°ãæã¤\n     * @param cancelToken\n     *  - `en` [[CancelToken]] instance create from [[CancelToken]].`source()`.\n     *  - `ja` [[CancelToken]].`source()` ããä½æãã [[CancelToken]] ã¤ã³ã¹ã¿ã³ã¹ãæå®\n     */\n    constructor(\n        executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: unknown) => void) => void,\n        cancelToken?: CancelToken | null\n    ) {\n        super(executor);\n        return CancelablePromise[_create](this, cancelToken);\n    }\n\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     *\n     * @internal\n     *\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(\n        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n        onrejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null\n    ): Promise<TResult1 | TResult2> {\n        return CancelablePromise[_create](this, _tokens.get(this), [onfulfilled, onrejected]);\n    }\n\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     *\n     * @internal\n     *\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult2 = never>(onrejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null): Promise<T | TResult2> {\n        return this.then(undefined, onrejected);\n    }\n\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). <br>\n     * The resolved value cannot be modified from the callback.\n     *\n     * @internal\n     *\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n        return CancelablePromise[_create](super.finally(onfinally), _tokens.get(this));\n    }\n\n}\n\n/**\n * @en Switch the global `Promise` constructor `Native Promise` or [[CancelablePromise]]. <br>\n *     `Native Promise` constructor is overridden by framework default behaviour.\n * @ja ã°ã­ã¼ãã« `Promise` ã³ã³ã¹ãã©ã¯ã¿ã `Native Promise` ã¾ãã¯ [[CancelablePromise]] ã«åãæ¿ã <br>\n *     æ¢å®ã§ `Native Promise` ããªã¼ãã¼ã©ã¤ããã.\n *\n * @param enable\n *  - `en` `true`: use [[CancelablePromise]] /  `false`: use `Native Promise`\n *  - `ja` `true`: [[CancelablePromise]] ãä½¿ç¨ / `false`: `Native Promise` ãä½¿ç¨\n */\nexport function extendPromise(enable: boolean): PromiseConstructor {\n    if (enable) {\n        Promise = CancelablePromise;\n    } else {\n        Promise = NativePromise;\n    }\n    return Promise;\n}\n\n/** @internal global config options */\ninterface GlobalConfig {\n    noAutomaticNativeExtend: boolean;\n}\n\n// default: automatic native promise override.\nextendPromise(!getConfig<GlobalConfig>().noAutomaticNativeExtend);\n\nexport {\n    CancelablePromise,\n    CancelablePromise as Promise,\n};\n","import { CancelToken } from './cancel-token';\n\n/**\n * @en Cancelable base option definition.\n * @ja ã­ã£ã³ã»ã«å¯è½ãªåºåºãªãã·ã§ã³\n */\nexport interface Cancelable {\n    cancel?: CancelToken;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Wait for promises done. <br>\n *     While control will be returned immediately when `Promise.all()` fails, but this mehtod waits for including failure.\n * @ja `Promise` ãªãã¸ã§ã¯ãã®çµäºã¾ã§å¾æ© <br>\n *     `Promise.all()` ã¯å¤±æããã¨ããã«å¶å¾¡ãè¿ãã®ã«å¯¾ããå¤±æãå«ãã¦å¾ã¤ `Promise` ãªãã¸ã§ã¯ããè¿å´\n *\n * @param promises\n *  - `en` Promise instance array\n *  - `ja` Promise ã¤ã³ã¹ã¿ã³ã¹ã®éåãæå®\n */\nexport function wait(promises: Promise<unknown>[]): Promise<unknown[]> {\n    const safePromises = promises.map((promise) => promise.catch((e) => e));\n    return Promise.all(safePromises);\n}\n\n/**\n * @en Cancellation checker method. <br>\n *     It's practicable by `async function`.\n * @ja ã­ã£ã³ã»ã«ãã§ãã«ã¼ <br>\n *     `async function` ã§ä½¿ç¨å¯è½\n *\n * @example <br>\n *\n * ```ts\n *  async function someFunc(token: CancelToken): Promise<{}> {\n *    await checkCanceled(token);\n *    return {};\n *  }\n * ```\n *\n * @param token\n *  - `en` [[CancelToken]] reference. (enable `undefined`)\n *  - `ja` [[CancelToken]] ãæå® (undefined å¯)\n */\nexport function checkCanceled(token: CancelToken | undefined): Promise<void> {\n    return Promise.resolve(undefined, token);\n}\n","import { CancelToken } from './cancel-token';\nimport { CancelablePromise } from './cancelable-promise';\n\n/**\n * @en `Deferred` object class that can operate `reject` and` resolve` from the outside.\n * @ja `reject`, ` resolve` ãå¤é¨ããæä½å¯è½ãª `Deferred` ãªãã¸ã§ã¯ãã¯ã©ã¹\n * \n * @example <br>\n *\n * ```ts\n * const df = new Deferred();\n * df.resolve();\n * df.reject('reason');\n * \n * await df;\n * ```\n */\nexport class Deferred<T = void> extends CancelablePromise<T> {\n    readonly resolve!: (arg: T | PromiseLike<T>) => void;\n    readonly reject!: (reason?: unknown) => void;\n\n    /**\n     * constructor\n     *\n     * @param cancelToken\n     *  - `en` [[CancelToken]] instance create from [[CancelToken]].`source()`.\n     *  - `ja` [[CancelToken]].`source()` ããä½æãã [[CancelToken]] ã¤ã³ã¹ã¿ã³ã¹ãæå®\n     */\n    constructor(cancelToken?: CancelToken | null) {\n        const publications = {};\n        super((resolve, reject) => {\n            Object.assign(publications, { resolve, reject });\n        }, cancelToken);\n        Object.assign(this, publications); // eslint-disable-line @typescript-eslint/no-floating-promises\n    }\n\n    /** @internal */\n    get [Symbol.toStringTag](): 'Deferred' { return 'Deferred'; }\n}\n","import {\n    isString,\n    isSymbol,\n    className,\n} from '@cdp/core-utils';\nimport { EventBroker } from '@cdp/events';\n\n/** @internal EventBrokerProxy */\nexport class EventBrokerProxy<Event extends object> {\n    private _broker?: EventBroker<Event>;\n    public get(): EventBroker<Event> {\n        return this._broker || (this._broker = new EventBroker());\n    }\n}\n\n/** @internal */ export const _internal      = Symbol('internal');\n/** @internal */ export const _notify        = Symbol('notify');\n/** @internal */ export const _stockChange   = Symbol('stock-change');\n/** @internal */ export const _notifyChanges = Symbol('notify-changes');\n\n/** @internal */\nexport function verifyObservable(x: unknown): void | never {\n    if (!x || !(x as object)[_internal]) {\n        throw new TypeError(`The object passed is not an IObservable.`);\n    }\n}\n\n/** @internal */\nexport function verifyValidKey(key: unknown): void | never {\n    if (isString(key) || isSymbol(key)) {\n        return;\n    }\n    throw new TypeError(`Type of ${className(key)} is not a valid key.`);\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    NonFunctionProperties,\n    NonFunctionPropertyNames,\n    isString,\n    isArray,\n    verify,\n    post,\n    deepMerge,\n    deepEqual,\n} from '@cdp/core-utils';\nimport { Subscription, EventBroker } from '@cdp/events';\nimport {\n    EventBrokerProxy,\n    _internal,\n    _notify,\n    _stockChange,\n    _notifyChanges,\n    verifyObservable,\n} from './internal';\nimport { ObservableState, IObservable } from './common';\n\n/** @internal */\ninterface InternalProps {\n    state: ObservableState;\n    changed: boolean;\n    readonly changeMap: Map<PropertyKey, any>;\n    readonly broker: EventBrokerProxy<any>;\n}\n\n/** @internal */\nconst _proxyHandler: ProxyHandler<ObservableObject> = {\n    set(target, p, value, receiver) {\n        if (!isString(p)) {\n            return Reflect.set(target, p, value, receiver);\n        }\n        const oldValue = target[p];\n        if (ObservableState.DISABLED !== target[_internal].state && value !== oldValue) {\n            target[_stockChange](p, oldValue);\n        }\n        return Reflect.set(target, p, value, receiver);\n    },\n};\nObject.freeze(_proxyHandler);\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Observable key type definition.\n * @ja è³¼èª­å¯è½ãªã­ã¼ã®åå®ç¾©\n */\nexport type ObservableKeys<T extends ObservableObject> = NonFunctionPropertyNames<T>;\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en The object class which change can be observed.\n * @ja ãªãã¸ã§ã¯ãã®å¤æ´ãç£è¦ã§ãããªãã¸ã§ã¯ãã¯ã©ã¹\n *\n * @example <br>\n *\n * - Basic Usage\n *\n * ```ts\n * class Example extends ObservableObject {\n *   public a: number = 0;\n *   public b: number = 0;\n *   public get sum(): number {\n *       return this.a + this.b;\n *   }\n * }\n *\n * const observable = new Example();\n *\n * function onNumChange(newValue: number, oldValue: number, key: string) {\n *   console.log(`${key} changed from ${oldValue} to ${newValue}.`);\n * }\n * observable.on(['a', 'b'], onNumChange);\n *\n * // update\n * observable.a = 100;\n * observable.b = 200;\n *\n * // console out from `async` event loop.\n * // => 'a changed from 0 to 100.'\n * // => 'b changed from 0 to 200.'\n *\n * :\n *\n * function onSumChange(newValue: number, oldValue: number) {\n *   console.log(`sum changed from ${oldValue} to ${newVaue}.`);\n * }\n * observable.on('sum', onSumChange);\n *\n * // update\n * observable.a = 100; // nothing reaction because of no change properties.\n * observable.a = 200;\n *\n * // console out from `async` event loop.\n * // => 'sum changed from 300 to 400.'\n * ```\n */\nexport abstract class ObservableObject implements IObservable {\n    /** @internal */\n    private readonly [_internal]: InternalProps;\n\n    /**\n     * constructor\n     *\n     * @param state\n     *  - `en` initial state. default: [[ObservableState.ACTIVE]]\n     *  - `ja` åæç¶æ æ¢å®: [[ObservableState.ACTIVE]]\n     */\n    constructor(state = ObservableState.ACTIVE) {\n        verify('instanceOf', ObservableObject, this);\n        const internal: InternalProps = {\n            state,\n            changed: false,\n            changeMap: new Map(),\n            broker: new EventBrokerProxy<this>(),\n        };\n        Object.defineProperty(this, _internal, { value: Object.seal(internal) });\n        return new Proxy(this, _proxyHandler);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IObservable\n\n    /**\n     * @en Subscrive property changes.\n     * @ja ãã­ããã£å¤æ´è³¼èª­è¨­å® (å¨ãã­ããã£ç£è¦)\n     *\n     * @param property\n     *  - `en` wild cord signature.\n     *  - `ja` ã¯ã¤ã«ãã«ã¼ã\n     * @param listener\n     *  - `en` callback function of the property change.\n     *  - `ja` ãã­ããã£å¤æ´éç¥ã³ã¼ã«ããã¯é¢æ°\n     */\n    on(property: '@', listener: (context: ObservableObject) => unknown): Subscription;\n\n    /**\n     * @en Subscrive property change(s).\n     * @ja ãã­ããã£å¤æ´è³¼èª­è¨­å®\n     *\n     * @param property\n     *  - `en` target property.\n     *  - `ja` å¯¾è±¡ã®ãã­ããã£\n     * @param listener\n     *  - `en` callback function of the property change.\n     *  - `ja` ãã­ããã£å¤æ´éç¥ã³ã¼ã«ããã¯é¢æ°\n     */\n    on<K extends ObservableKeys<this>>(property: K | K[], listener: (newValue: this[K], oldValue: this[K], key: K) => unknown): Subscription;\n\n    on<K extends ObservableKeys<this>>(property: K | K[], listener: (newValue: this[K], oldValue: this[K], key: K) => unknown): Subscription {\n        verifyObservable(this);\n        const { changeMap, broker } = this[_internal];\n        const result = broker.get().on(property, listener);\n        if (0 < changeMap.size) {\n            const props = isArray(property) ? property : [property];\n            for (const prop of props) {\n                changeMap.has(prop) || changeMap.set(prop, this[prop]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @en Unsubscribe property changes)\n     * @ja ãã­ããã£å¤æ´è³¼èª­è§£é¤ (å¨ãã­ããã£ç£è¦)\n     *\n     * @param property\n     *  - `en` wild cord signature.\n     *  - `ja` ã¯ã¤ã«ãã«ã¼ã\n     * @param listener\n     *  - `en` callback function of the property change.\n     *  - `ja` ãã­ããã£å¤æ´éç¥ã³ã¼ã«ããã¯é¢æ°\n     */\n    off(property: '@', listener?: (context: ObservableObject) => any): void;\n\n    /**\n     * @en Unsubscribe property change(s).\n     * @ja ãã­ããã£å¤æ´è³¼èª­è§£é¤\n     *\n     * @param property\n     *  - `en` target property.\n     *         When not set this parameter, everything is released.\n     *  - `ja` å¯¾è±¡ã®ãã­ããã£\n     *         æå®ããªãå ´åã¯ãã¹ã¦è§£é¤\n     * @param listener\n     *  - `en` callback function of the property change.\n     *         When not set this parameter, all same `channel` listeners are released.\n     *  - `ja` ãã­ããã£å¤æ´éç¥ã³ã¼ã«ããã¯é¢æ°\n     *         æå®ããªãå ´åã¯åä¸ `channel` ãã¹ã¦ãè§£é¤\n     */\n    off<K extends ObservableKeys<this>>(property?: K | K[], listener?: (newValue: this[K], oldValue: this[K], key: K) => unknown): void;\n\n    off<K extends ObservableKeys<this>>(property?: K | K[], listener?: (newValue: this[K], oldValue: this[K], key: K) => unknown): void {\n        verifyObservable(this);\n        this[_internal].broker.get().off(property, listener);\n    }\n\n    /**\n     * @en Suspend or disable the event observation state.\n     * @ja ã¤ãã³ãè³¼èª­ç¶æã®ãµã¹ãã³ã\n     *\n     * @param noRecord\n     *  - `en` `true`: not recording property changes and clear changes. / `false`: property changes are recorded and fired when [[resume]]() callded. (default)\n     *  - `ja` `true`: ãã­ããã£å¤æ´ãè¨é²ãã, ç¾å¨ã®è¨é²ãç ´æ£ / `false`: ãã­ããã£å¤æ´ã¯è¨é²ãã, [[resume]]() æã«çºç«ãã (æ¢å®)\n     */\n    suspend(noRecord = false): this {\n        verifyObservable(this);\n        this[_internal].state = noRecord ? ObservableState.DISABLED : ObservableState.SUSEPNDED;\n        if (noRecord) {\n            this[_internal].changeMap.clear();\n        }\n        return this;\n    }\n\n    /**\n     * @en Resume the event observation state.\n     * @ja ã¤ãã³ãè³¼èª­ç¶æã®ãªã¸ã¥ã¼ã \n     */\n    resume(): this {\n        verifyObservable(this);\n        const internal = this[_internal];\n        if (ObservableState.ACTIVE !== internal.state) {\n            internal.state = ObservableState.ACTIVE;\n            void post(() => this[_notifyChanges]());\n        }\n        return this;\n    }\n\n    /**\n     * @en observation state\n     * @ja è³¼èª­å¯è½ç¶æ\n     */\n    getObservableState(): ObservableState {\n        verifyObservable(this);\n        return this[_internal].state;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IObservableEventBrokerAccess\n\n    /** @internal */\n    getBroker(): EventBroker<NonFunctionProperties<this>> {\n        const { broker } = this[_internal];\n        return broker.get();\n    }\n\n///////////////////////////////////////////////////////////////////////\n// static methods:\n\n    /**\n     * @en Create [[ObservableObject]] from any object.\n     * @ja ä»»æã®ãªãã¸ã§ã¯ããã [[ObservableObject]] ãçæ\n     *\n     * @example <br>\n     *\n     * ```ts\n     * const observable = ObservableObject.from({ a: 1, b: 1 });\n     * function onNumChange(newValue: number, oldValue: number, key: string) {\n     *   console.log(`${key} changed from ${oldValue} to ${newValue}.`);\n     * }\n     * observable.on(['a', 'b'], onNumChange);\n     *\n     * // update\n     * observable.a = 100;\n     * observable.b = 200;\n     *\n     * // console out from `async` event loop.\n     * // => 'a changed from 1 to 100.'\n     * // => 'b changed from 1 to 200.'\n     * ```\n     */\n    public static from<T extends object>(src: T): ObservableObject & T {\n        const observable = deepMerge(new class extends ObservableObject { }(ObservableState.DISABLED), src);\n        observable.resume();\n        return observable as any;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// protected mehtods:\n\n    /**\n     * @en Force notify property change(s) in spite of active state.\n     * @ja ã¢ã¯ãã£ãç¶æã«ãããããå¼·å¶çã«ãã­ããã£å¤æ´éç¥ãçºè¡\n     */\n    protected notify(...properties: string[]): void {\n        verifyObservable(this);\n        if (0 === properties.length) {\n            return;\n        }\n        const { changeMap } = this[_internal];\n        const keyValue = new Map<PropertyKey, [any, any]>();\n        for (const key of properties) {\n            const newValue = this[key];\n            const oldValue = changeMap.has(key) ? changeMap.get(key) : newValue;\n            keyValue.set(key, [newValue, oldValue]);\n        }\n        0 < keyValue.size && this[_notify](keyValue);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// private mehtods:\n\n    /** @internal */\n    private [_stockChange](p: string, oldValue: any): void {\n        const { state, changeMap, broker } = this[_internal];\n        this[_internal].changed = true;\n        if (0 === changeMap.size) {\n            changeMap.set(p, oldValue);\n            for (const k of broker.get().channels()) {\n                changeMap.has(k) || changeMap.set(k, this[k]);\n            }\n            if (ObservableState.ACTIVE === state) {\n                void post(() => this[_notifyChanges]());\n            }\n        } else {\n            changeMap.has(p) || changeMap.set(p, oldValue);\n        }\n    }\n\n    /** @internal */\n    private [_notifyChanges](): void {\n        const { state, changeMap } = this[_internal];\n        if (ObservableState.ACTIVE !== state) {\n            return;\n        }\n        const keyValuePairs = new Map<PropertyKey, [any, any]>();\n        for (const [key, oldValue] of changeMap) {\n            const curValue = this[key];\n            if (!deepEqual(oldValue, curValue)) {\n                keyValuePairs.set(key, [curValue, oldValue]);\n            }\n        }\n        this[_notify](keyValuePairs);\n    }\n\n    /** @internal */\n    private [_notify](keyValue: Map<PropertyKey, [any, any]>): void {\n        const { changed, changeMap, broker } = this[_internal];\n        changeMap.clear();\n        this[_internal].changed = false;\n        const eventBroker = broker.get();\n        for (const [key, values] of keyValue) {\n            (eventBroker as any).trigger(key, ...values, key);\n        }\n        if (changed) {\n            eventBroker.trigger('@', this);\n        }\n    }\n}\n","/* eslint-disable\n    prefer-rest-params,\n */\n\nimport {\n    UnknownFunction,\n    Writable,\n    isNumber,\n    verify,\n    post,\n} from '@cdp/core-utils';\nimport { Subscription, EventBroker } from '@cdp/events';\nimport {\n    EventBrokerProxy,\n    _internal,\n    _notify,\n    _stockChange,\n    _notifyChanges,\n    verifyObservable,\n} from './internal';\nimport { ObservableState, IObservable } from './common';\n\n/**\n * @en Array change type information. <br>\n *     The value is suitable for the number of fluctuation of the element.\n * @ja éåå¤æ´éç¥ã®ã¿ã¤ã <br>\n *     å¤ã¯è¦ç´ ã®å¢æ¸æ°ã«ç¸å½\n *\n */\nexport const enum ArrayChangeType {\n    REMOVE = -1,\n    UPDATE = 0,\n    INSERT = 1,\n}\n\n/**\n * @en Array change record information.\n * @ja éåå¤æ´æå ±\n */\nexport interface ArrayChangeRecord<T> {\n    /**\n     * @en The change type information.\n     * @ja éåå¤æ´æå ±ã®è­å¥å­\n     */\n    readonly type: ArrayChangeType;\n\n    /**\n     * @en The change type information. <br>\n     *     â» [Attention] The index will be different from the actual location when array size changed because that determines element operation unit.\n     * @ja å¤æ´ãçºçããéååã®ä½ç½®ã® index <br>\n     *     â» [æ³¨æ] ãªãã¬ã¼ã·ã§ã³åä½ã® index ã¨ãªã, è¦ç´ ãå¢æ¸ããå ´åã¯å®éã®ä½ç½®ã¨ç°ãªããã¨ããã\n     */\n    readonly index: number;\n\n    /**\n     * @en New element's value.\n     * @ja è¦ç´ ã®æ°ããå¤\n     */\n    readonly newValue?: T;\n\n    /**\n     * @en Old element's value.\n     * @ja è¦ç´ ã®å¤ãå¤\n     */\n    readonly oldValue?: T;\n}\ntype MutableChangeRecord<T> = Writable<ArrayChangeRecord<T>>;\n\n//__________________________________________________________________________________________________//\n\n/** @internal */\ninterface IArrayChangeEvent<T> {\n    '@': [ArrayChangeRecord<T>[]];\n}\n\n/** @internal */\ninterface InternalProps<T = unknown> {\n    state: ObservableState;\n    byMethod: boolean;\n    records: MutableChangeRecord<T>[];\n    readonly indexes: Set<number>;\n    readonly broker: EventBrokerProxy<IArrayChangeEvent<T>>;\n}\n\n/** @internal */\nconst _proxyHandler: ProxyHandler<ObservableArray> = {\n    defineProperty(target, p, attributes) {\n        const internal = target[_internal];\n        if (ObservableState.DISABLED === internal.state || internal.byMethod || !Object.prototype.hasOwnProperty.call(attributes, 'value')) {\n            return Reflect.defineProperty(target, p, attributes);\n        }\n        const oldValue = target[p];\n        const newValue = attributes.value;\n        // eslint-disable-next-line eqeqeq\n        if ('length' === p && newValue != oldValue) { // Do NOT use strict inequality (!==)\n            const oldLength = oldValue >>> 0;\n            const newLength = newValue >>> 0;\n            const stock = (): void => {\n                const scrap = newLength < oldLength && target.slice(newLength);\n                if (scrap) { // newLength < oldLength\n                    for (let i = oldLength; --i >= newLength;) {\n                        target[_stockChange](ArrayChangeType.REMOVE, i, undefined, scrap[i - newLength]);\n                    }\n                } else {            // oldLength < newLength\n                    for (let i = oldLength; i < newLength; i++) {\n                        target[_stockChange](ArrayChangeType.INSERT, i /*, undefined, undefined */);\n                    }\n                }\n            };\n            const result = Reflect.defineProperty(target, p, attributes);\n            result && stock();\n            return result;\n        } else if (newValue !== oldValue && isValidArrayIndex(p)) {\n            const i = p as unknown as number >>> 0;\n            const type: ArrayChangeType = Number(i >= target.length); // INSERT or UPDATE\n            const result = Reflect.defineProperty(target, p, attributes);\n            result && target[_stockChange](type, i, newValue, oldValue);\n            return result;\n        } else {\n            return Reflect.defineProperty(target, p, attributes);\n        }\n    },\n    deleteProperty(target, p) {\n        const internal = target[_internal];\n        if (ObservableState.DISABLED === internal.state || internal.byMethod || !Object.prototype.hasOwnProperty.call(target, p)) {\n            return Reflect.deleteProperty(target, p);\n        }\n        const oldValue = target[p];\n        const result = Reflect.deleteProperty(target, p);\n        result && isValidArrayIndex(p) && target[_stockChange](ArrayChangeType.UPDATE, p as unknown as number >>> 0, undefined, oldValue);\n        return result;\n    },\n};\nObject.freeze(_proxyHandler);\n\n/** @internal valid array index helper */\nfunction isValidArrayIndex<T>(index: T): boolean {\n    const s = String(index);\n    const n = Math.trunc(s as unknown as number);\n    return String(n) === s && 0 <= n && n < 0xFFFFFFFF;\n}\n\n/** @internal helper for index management */\nfunction findRelatedChangeIndex<T>(records: MutableChangeRecord<T>[], type: ArrayChangeType, index: number): number {\n    const checkType = type === ArrayChangeType.INSERT\n        ? (t: ArrayChangeType) => t === ArrayChangeType.REMOVE\n        : (t: ArrayChangeType) => t !== ArrayChangeType.REMOVE\n        ;\n\n    for (let i = records.length; --i >= 0;) {\n        const value = records[i];\n        if (value.index === index && checkType(value.type)) {\n            return i;\n        } else if (value.index < index && Boolean(value.type)) { // REMOVE or INSERT\n            index -= value.type;\n        }\n    }\n    return -1;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en The array class which change can be observed.\n * @ja å¤æ´ç£è¦å¯è½ãªéåã¯ã©ã¹\n *\n * @example <br>\n *\n * - Basic Usage\n *\n * ```ts\n * const obsArray = ObservableArray.from(['a', 'b', 'c']);\n *\n * function onChangeArray(records: ArrayChangeRecord[]) {\n *   console.log(records);\n *   //  [\n *   //    { type: 1, index: 3, newValue: 'x', oldValue: undefined },\n *   //    { type: 1, index: 4, newValue: 'y', oldValue: undefined },\n *   //    { type: 1, index: 5, newValue: 'z', oldValue: undefined }\n *   //  ]\n * }\n * obsArray.on(onChangeArray);\n *\n * function addXYZ() {\n *   obsArray.push('x', 'y', 'z');\n * }\n * ```\n */\nexport class ObservableArray<T = unknown> extends Array<T> implements IObservable {\n    /** @internal */\n    private readonly [_internal]: InternalProps<T>;\n\n    /** @final constructor */\n    private constructor() {\n        super(...arguments);\n        verify('instanceOf', ObservableArray, this);\n        const internal: InternalProps<T> = {\n            state: ObservableState.ACTIVE,\n            byMethod: false,\n            records: [],\n            indexes: new Set(),\n            broker: new EventBrokerProxy<IArrayChangeEvent<T>>(),\n        };\n        Object.defineProperty(this, _internal, { value: Object.seal(internal) });\n        const argLength = arguments.length;\n        if (1 === argLength && isNumber(arguments[0])) {\n            const len = arguments[0] >>> 0;\n            for (let i = 0; i < len; i++) {\n                this[_stockChange](ArrayChangeType.INSERT, i /*, undefined */);\n            }\n        } else if (0 < argLength) {\n            for (let i = 0; i < argLength; i++) {\n                this[_stockChange](ArrayChangeType.INSERT, i, arguments[i]);\n            }\n        }\n        return new Proxy(this, _proxyHandler) as ObservableArray<T>;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IObservable\n\n    /**\n     * @en Subscrive array change(s).\n     * @ja éåå¤æ´è³¼èª­è¨­å®\n     *\n     * @param listener\n     *  - `en` callback function of the array change.\n     *  - `ja` éåå¤æ´éç¥ã³ã¼ã«ããã¯é¢æ°\n     */\n    on(listener: (records: ArrayChangeRecord<T>[]) => unknown): Subscription {\n        verifyObservable(this);\n        return this[_internal].broker.get().on('@', listener);\n    }\n\n    /**\n     * @en Unsubscribe array change(s).\n     * @ja éåå¤æ´è³¼èª­è§£é¤\n     *\n     * @param listener\n     *  - `en` callback function of the array change.\n     *         When not set this parameter, all same `channel` listeners are released.\n     *  - `ja` éåå¤æ´éç¥ã³ã¼ã«ããã¯é¢æ°\n     *         æå®ããªãå ´åã¯åä¸ `channel` ãã¹ã¦ãè§£é¤\n     */\n    off(listener?: (records: ArrayChangeRecord<T>[]) => unknown): void {\n        verifyObservable(this);\n        this[_internal].broker.get().off('@', listener);\n    }\n\n    /**\n     * @en Suspend or disable the event observation state.\n     * @ja ã¤ãã³ãè³¼èª­ç¶æã®ãµã¹ãã³ã\n     *\n     * @param noRecord\n     *  - `en` `true`: not recording property changes and clear changes. / `false`: property changes are recorded and fired when [[resume]]() callded. (default)\n     *  - `ja` `true`: ãã­ããã£å¤æ´ãè¨é²ãã, ç¾å¨ã®è¨é²ãç ´æ£ / `false`: ãã­ããã£å¤æ´ã¯è¨é²ãã, [[resume]]() æã«çºç«ãã (æ¢å®)\n     */\n    suspend(noRecord = false): this {\n        verifyObservable(this);\n        this[_internal].state = noRecord ? ObservableState.DISABLED : ObservableState.SUSEPNDED;\n        if (noRecord) {\n            this[_internal].records = [];\n        }\n        return this;\n    }\n\n    /**\n     * @en Resume of the event subscription state.\n     * @ja ã¤ãã³ãè³¼èª­ç¶æã®ãªã¸ã¥ã¼ã \n     */\n    resume(): this {\n        verifyObservable(this);\n        const internal = this[_internal];\n        if (ObservableState.ACTIVE !== internal.state) {\n            internal.state = ObservableState.ACTIVE;\n            void post(() => this[_notifyChanges]());\n        }\n        return this;\n    }\n\n    /**\n     * @en observation state\n     * @ja è³¼èª­å¯è½ç¶æ\n     */\n    getObservableState(): ObservableState {\n        verifyObservable(this);\n        return this[_internal].state;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// override: Array methods\n\n    /**\n     * Sorts an array.\n     * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.\n     */\n    sort(comparator?: (lhs: T, rhs: T) => number): this {\n        verifyObservable(this);\n        const internal = this[_internal];\n        const old = Array.from(this);\n        internal.byMethod = true;\n        const result = super.sort(comparator);\n        internal.byMethod = false;\n        if (ObservableState.DISABLED !== internal.state) {\n            const len = old.length;\n            for (let i = 0; i < len; i++) {\n                const oldValue = old[i];\n                const newValue = this[i];\n                if (newValue !== oldValue) {\n                    this[_stockChange](ArrayChangeType.UPDATE, i, newValue, oldValue);\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     */\n    splice(start: number, deleteCount?: number): ObservableArray<T>;\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @param items Elements to insert into the array in place of the deleted elements.\n     */\n    splice(start: number, deleteCount: number, ...items: T[]): ObservableArray<T>;\n    splice(start: number, deleteCount?: number, ...items: T[]): ObservableArray<T> {\n        verifyObservable(this);\n        const internal = this[_internal];\n        const oldLen = this.length;\n        internal.byMethod = true;\n        const result = (super.splice as UnknownFunction)(...arguments) as ObservableArray<T>;\n        internal.byMethod = false;\n        if (ObservableState.DISABLED !== internal.state) {\n            start = Math.trunc(start);\n            const from = start < 0 ? Math.max(oldLen + start, 0) : Math.min(start, oldLen);\n            for (let i = result.length; --i >= 0;) {\n                this[_stockChange](ArrayChangeType.REMOVE, from + i, undefined, result[i]);\n            }\n            const len = items.length;\n            for (let i = 0; i < len; i++) {\n                this[_stockChange](ArrayChangeType.INSERT, from + i, items[i]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Removes the first element from an array and returns it.\n     */\n    shift(): T | undefined {\n        verifyObservable(this);\n        const internal = this[_internal];\n        const oldLen = this.length;\n        internal.byMethod = true;\n        const result = super.shift();\n        internal.byMethod = false;\n        if (ObservableState.DISABLED !== internal.state && this.length < oldLen) {\n            this[_stockChange](ArrayChangeType.REMOVE, 0, undefined, result);\n        }\n        return result;\n    }\n\n    /**\n     * Inserts new elements at the start of an array.\n     * @param items  Elements to insert at the start of the Array.\n     */\n    unshift(...items: T[]): number {\n        verifyObservable(this);\n        const internal = this[_internal];\n        internal.byMethod = true;\n        const result = super.unshift(...items);\n        internal.byMethod = false;\n        if (ObservableState.DISABLED !== internal.state) {\n            const len = items.length;\n            for (let i = 0; i < len; i++) {\n                this[_stockChange](ArrayChangeType.INSERT, i, items[i]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: unknown): ObservableArray<U> {\n        /*\n         * [NOTE] original implement is very very high-cost.\n         *        so it's converted native Array once, and restored.\n         *\n         * return (super.map as UnknownFunction)(...arguments);\n         */\n        return ObservableArray.from([...this].map(callbackfn, thisArg));\n    }\n\n///////////////////////////////////////////////////////////////////////\n// implements: IObservableEventBrokerAccess\n\n    /** @internal */\n    getBroker(): EventBroker<IArrayChangeEvent<T>> {\n        const { broker } = this[_internal];\n        return broker.get();\n    }\n\n///////////////////////////////////////////////////////////////////////\n// private mehtods:\n\n    /** @internal */\n    private [_stockChange](type: ArrayChangeType, index: number, newValue?: T, oldValue?: T): void {\n        const { state, indexes, records } = this[_internal];\n        const rci = indexes.has(index) ? findRelatedChangeIndex(records, type, index) : -1;\n        const len = records.length;\n        if (rci >= 0) {\n            const rct = records[rci].type;\n            if (!rct /* UPDATE */) {\n                const prevRecord = records.splice(rci, 1)[0];\n                // UPDATE => UPDATE : UPDATE\n                // UPDATE => REMOVE : INSERT\n                this[_stockChange](type, index, newValue, prevRecord.oldValue);\n            } else {\n                for (let r, i = len; --i > rci;) {\n                    r = records[i];\n                    (r.index >= index) && (r.index -= rct);\n                }\n                const prevRecord = records.splice(rci, 1)[0];\n                if (type !== ArrayChangeType.REMOVE) {\n                    // INSERT => UPDATE : INSERT\n                    // REMOVE => INSERT : UPDATE\n                    this[_stockChange](Number(!type), index, newValue, prevRecord.oldValue);\n                }\n            }\n            return;\n        }\n        indexes.add(index);\n        records[len] = { type, index, newValue, oldValue };\n        if (ObservableState.ACTIVE === state && 0 === len) {\n            void post(() => this[_notifyChanges]());\n        }\n    }\n\n    /** @internal */\n    private [_notifyChanges](): void {\n        const { state, records } = this[_internal];\n        if (ObservableState.ACTIVE !== state || 0 === records.length) {\n            return;\n        }\n        for (const r of records) {\n            Object.freeze(r);\n        }\n        this[_notify](Object.freeze(records) as ArrayChangeRecord<T>[]);\n        this[_internal].records = [];\n    }\n\n    /** @internal */\n    private [_notify](records: ArrayChangeRecord<T>[]): void {\n        const internal = this[_internal];\n        internal.indexes.clear();\n        internal.broker.get().trigger('@', records);\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * Override return type of prototype methods\n */\nexport interface ObservableArray<T> {\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    concat(...items: T[][]): ObservableArray<T>;\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    concat(...items: (T | T[])[]): ObservableArray<T>;\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): this;\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array.\n     */\n    slice(start?: number, end?: number): ObservableArray<T>;\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(callbackfn: (value: T, index: number, array: T[]) => value is S, thisArg?: unknown): ObservableArray<S>;\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(callbackfn: (value: T, index: number, array: T[]) => unknown, thisArg?: unknown): ObservableArray<T>;\n}\n\n/**\n * Override return type of static methods\n */\nexport declare namespace ObservableArray { // eslint-disable-line @typescript-eslint/no-namespace\n    /**\n     * Creates an array from an array-like object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    function from<T>(arrayLike: ArrayLike<T> | Iterable<T>): ObservableArray<T>;\n    /**\n     * Creates an array from an array-like object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    function from<T, U>(arrayLike: ArrayLike<T> | Iterable<T>, mapfn: (this: void, v: T, k: number) => U, thisArg?: undefined): ObservableArray<U>;\n    function from<X, T, U>(arrayLike: ArrayLike<T> | Iterable<T>, mapfn: (this: X, v: T, k: number) => U, thisArg: X): ObservableArray<U>;\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    function of<T>(...items: T[]): ObservableArray<T>;\n}\n","/* eslint-disable\n    no-inner-declarations,\n    @typescript-eslint/no-namespace,\n    @typescript-eslint/no-unused-vars,\n */\n\n/*\n * NOTE: åé¨ã¢ã¸ã¥ã¼ã«ã« `CDP` namespace ãä½¿ç¨ãã¦ãã¾ãã¨, å¤é¨ã¢ã¸ã¥ã¼ã«ã§ã¯å®£è¨ã§ããªããªã.\n * https://github.com/Microsoft/TypeScript/issues/9611\n */\nnamespace CDP_DECLARE {\n\n    /**\n     * @en Constant definition about range of the result code.\n     * @ja ãªã¶ã«ãã³ã¼ãã®ç¯å²ã«é¢ããå®æ°å®ç¾©\n     */\n    export const enum RESULT_CODE_RANGE {\n        /**\n         * @en The assignable range for the client's local result cord by which expansion is possible.\n         * @ja ã¯ã©ã¤ã¢ã³ããæ¡å¼µå¯è½ãªã­ã¼ã«ã«ãªã¶ã«ãã³ã¼ãã®ã¢ãµã¤ã³å¯è½é å\n         */\n        MAX = 1000,\n        /**\n         * @en Reserved range of framework.\n         * @ja ãã¬ã¼ã ã¯ã¼ã¯ã®äºç´é å\n         */\n        RESERVED = 1000,\n    }\n\n    /**\n     * @en The assignment range guideline definition used in the module.\n     * @ja ã¢ã¸ã¥ã¼ã«åã§ä½¿ç¨ããã¢ãµã¤ã³é åã¬ã¤ãã©ã¤ã³å®æ°å®ç¾©\n     */\n    export const enum LOCAL_CODE_RANGE_GUIDE {\n        /**\n         * @en The assignment range guideline per 1 module.\n         * @ja 1ã¢ã¸ã¥ã¼ã«å½ããã«å²ãå½ã¦ãã¢ãµã¤ã³é åã¬ã¤ãã©ã¤ã³\n         */\n        MODULE = 100,\n        /**\n         * @en The assignment range guideline per 1 function.\n         * @ja 1æ©è½å½ããã«å²ãå½ã¦ãã¢ãµã¤ã³é åã¬ã¤ãã©ã¤ã³\n         */\n        FUNCTION = 20,\n    }\n\n    /**\n     * @en Offset value enumeration for [[RESULT_CODE]]. <br>\n     *     The client can expand a definition in other module.\n     * @ja [[RESULT_CODE]] ã®ãªãã»ããå¤ <br>\n     *     ã¨ã©ã¼ã³ã¼ãå¯¾å¿ããã¢ã¸ã¥ã¼ã«åã§ å®ç¾©ãæ¡å¼µãã.\n     *\n     * @example <br>\n     *\n     * ```ts\n     *  const enum LOCAL_CODE_BASE {\n     *      COMMON      = 0,\n     *      SOMEMODULE  = 1 * LOCAL_CODE_RANGE_GUIDE.FUNCTION,\n     *      SOMEMODULE2 = 2 * LOCAL_CODE_RANGE_GUIDE.FUNCTION,\n     *  }\n     *\n     *  export enum RESULT_CODE {\n     *      SOMEMODULE_DECLARE           = RESULT_CODE_BASE.DECLARE, // for avoid TS2432.\n     *      ERROR_SOMEMODULE_UNEXPECTED  = DECLARE_ERROR_CODE(RESULT_CODE_BASE.SOMEMODULE, LOCAL_CODE_BASE.SOMEMODULE + 1, \"error unexpected.\"),\n     *      ERROR_SOMEMODULE_INVALID_ARG = DECLARE_ERROR_CODE(RESULT_CODE_BASE.SOMEMODULE, LOCAL_CODE_BASE.SOMEMODULE + 2, \"invalid arguments.\"),\n     *  }\n     *  ASSIGN_RESULT_CODE(RESULT_CODE);\n     * ```\n     */\n    export const enum RESULT_CODE_BASE {\n        DECLARE = 9007199254740991, // Number.MAX_SAFE_INTEGER\n        COMMON  = 0,\n        CDP     = 1 * LOCAL_CODE_RANGE_GUIDE.MODULE, // cdp reserved. abs(0 ï½ 1000)\n//      MODULE_A = 1 * RESULT_CODE_RANGE.MAX,    // ex) moduleA: abs(1001 ï½ 1999)\n//      MODULE_B = 2 * RESULT_CODE_RANGE.MAX,    // ex) moduleB: abs(2001 ï½ 2999)\n//      MODULE_C = 3 * RESULT_CODE_RANGE.MAX,    // ex) moduleC: abs(3001 ï½ 3999)\n    }\n\n    /**\n     * @en Known CDP module offest definition.\n     * @ja ç®¡è½ãã¦ãã CDP ã¢ã¸ã¥ã¼ã«ã®ãªãã»ããå®ç¾©\n     *\n     * @example <br>\n     *\n     * ```ts\n     * const enum LOCAL_CODE_BASE {\n     *    AJAX = CDP_KNOWN_MODULE.AJAX * LOCAL_CODE_RANGE_GUIDE.FUNCTION,\n     * }\n     *\n     * export enum RESULT_CODE {\n     *   AJAX_DECLARE        = RESULT_CODE_BASE.DECLARE,\n     *   ERROR_AJAX_RESPONSE = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.AJAX + 1, 'network error.'),\n     *   ERROR_AJAX_TIMEOUT  = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.AJAX + 2, 'request timeout.'),\n     * }\n     * ```\n     */\n    export const enum CDP_KNOWN_MODULE {\n        /** `@cdp/ajax` */\n        AJAX = 1,\n        /** `@cdp/i18n` */\n        I18N = 2,\n        /** `@cdp/data-sync`, `@cdp/model` */\n        MVC  = 3,\n        /** offset for unknown module */\n        OFFSET,\n    }\n\n    /**\n     * @en Common result code for the application.\n     * @ja ã¢ããªã±ã¼ã·ã§ã³å¨ä½ã§ä½¿ç¨ããå±éã¨ã©ã¼ã³ã¼ãå®ç¾©\n     */\n    export enum RESULT_CODE {\n        /** `en` general success code             <br> `ja` æ±ç¨æåã³ã¼ã                       */\n        SUCCESS = 0,\n        /** `en` general cancel code              <br> `ja` æ±ç¨ã­ã£ã³ã»ã«ã³ã¼ã                 */\n        ABORT = 1,\n        /** `en` general pending code             <br> `ja` æ±ç¨ãªãã¬ã¼ã·ã§ã³æªå®è¡ã¨ã©ã¼ã³ã¼ã */\n        PENDING = 2,\n        /** `en` general success but noop code    <br> `ja` æ±ç¨å®è¡ä¸è¦ã³ã¼ã                   */\n        NOOP = 3,\n        /** `en` general error code               <br> `ja` æ±ç¨ã¨ã©ã¼ã³ã¼ã                     */\n        FAIL = -1,\n        /** `en` general fatal error code         <br> `ja` æ±ç¨è´å½çã¨ã©ã¼ã³ã¼ã               */\n        FATAL = -2,\n        /** `en` general not supported error code <br> `ja` æ±ç¨ãªãã¬ã¼ã·ã§ã³ã¨ã©ã¼ã³ã¼ã       */\n        NOT_SUPPORTED = -3,\n    }\n\n    /**\n     * @en Assign declared [[RESULT_CODE]] to root enumeration.\n     *     (It's enable to merge enum in the module system environment.)\n     * @ja æ¡å¼µãã [[RESULT_CODE]] ã ã«ã¼ã enum ã«ã¢ãµã¤ã³\n     *     ã¢ã¸ã¥ã¼ã«ã·ã¹ãã ç°å¢ã«ããã¦ããenum ããã¼ã¸ãå¯è½ã«ãã\n     */\n    export function ASSIGN_RESULT_CODE(extend: Record<string, unknown>): void {\n        Object.assign(RESULT_CODE, extend);\n    }\n\n    /** @internal */\n    const _code2message: { [code: string]: string; } = {\n        '0': 'operation succeeded.',\n        '1': 'operation aborted.',\n        '2': 'operation pending.',\n        '3': 'no operation.',\n        '-1': 'operation failed.',\n        '-2': 'unexpected error occured.',\n        '-3': 'operation not supported.',\n    };\n\n    /**\n     * @en Access to error message map.\n     * @ja ã¨ã©ã¼ã¡ãã»ã¼ã¸ãããã®åå¾\n     */\n    export function ERROR_MESSAGE_MAP(): { [code: string]: string; } {\n        return _code2message;\n    }\n\n    /**\n     * @en Generate success code.\n     * @ja æåã³ã¼ããçæ\n     *\n     * @param base\n     *  - `en` set base offset as [[RESULT_CODE_BASE]]\n     *  - `ja` ãªãã»ããå¤ã [[RESULT_CODE_BASE]] ã¨ãã¦æå®\n     * @param code\n     *  - `en` set local code for declaration. ex) '1'\n     *  - `ja` å®£è¨ç¨ã®ã­ã¼ã«ã«ã³ã¼ãå¤ãæå®  ä¾) '1'\n     * @param message\n     *  - `en` set error message for help string.\n     *  - `ja` ãã«ãã¹ããªã³ã°ç¨ã¨ã©ã¼ã¡ãã»ã¼ã¸ãæå®\n     */\n    export function DECLARE_SUCCESS_CODE(base: RESULT_CODE_BASE, code: number, message?: string): number {\n        return declareResultCode(base, code, message, true);\n    }\n\n    /**\n     * @en Generate error code.\n     * @ja ã¨ã©ã¼ã³ã¼ãçæ\n     *\n     * @param base\n     *  - `en` set base offset as [[RESULT_CODE_BASE]]\n     *  - `ja` ãªãã»ããå¤ã [[RESULT_CODE_BASE]] ã¨ãã¦æå®\n     * @param code\n     *  - `en` set local code for declaration. ex) '1'\n     *  - `ja` å®£è¨ç¨ã®ã­ã¼ã«ã«ã³ã¼ãå¤ãæå®  ä¾) '1'\n     * @param message\n     *  - `en` set error message for help string.\n     *  - `ja` ãã«ãã¹ããªã³ã°ç¨ã¨ã©ã¼ã¡ãã»ã¼ã¸ãæå®\n     */\n    export function DECLARE_ERROR_CODE(base: RESULT_CODE_BASE, code: number, message?: string): number {\n        return declareResultCode(base, code, message, false);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// private section:\n\n    /** @internal register for [[RESULT_CODE]] */\n    function declareResultCode(base: RESULT_CODE_BASE, code: number, message: string | undefined, succeeded: boolean): number | never {\n        if (code < 0 || RESULT_CODE_RANGE.MAX <= code) {\n            throw new RangeError(`declareResultCode(), invalid local-code range. [code: ${code}]`);\n        }\n        const signed = succeeded ? 1 : -1;\n        const resultCode = signed * (base as number + code);\n        _code2message[resultCode] = message ? message : (`[CODE: ${resultCode}]`);\n        return resultCode;\n    }\n}\n","import RESULT_CODE              = CDP_DECLARE.RESULT_CODE;\nimport RESULT_CODE_BASE         = CDP_DECLARE.RESULT_CODE_BASE;\nimport RESULT_CODE_RANGE        = CDP_DECLARE.RESULT_CODE_RANGE;\nimport LOCAL_CODE_RANGE_GUIDE   = CDP_DECLARE.LOCAL_CODE_RANGE_GUIDE;\nimport DECLARE_SUCCESS_CODE     = CDP_DECLARE.DECLARE_SUCCESS_CODE;\nimport DECLARE_ERROR_CODE       = CDP_DECLARE.DECLARE_ERROR_CODE;\nimport ASSIGN_RESULT_CODE       = CDP_DECLARE.ASSIGN_RESULT_CODE;\nimport ERROR_MESSAGE_MAP        = CDP_DECLARE.ERROR_MESSAGE_MAP;\n\n/** @internal */\nconst enum Description {\n    UNKNOWN_ERROR_NAME ='UNKNOWN',\n}\n\nexport {\n    RESULT_CODE,\n    RESULT_CODE_BASE,\n    RESULT_CODE_RANGE,\n    LOCAL_CODE_RANGE_GUIDE,\n    DECLARE_SUCCESS_CODE,\n    DECLARE_ERROR_CODE,\n    ASSIGN_RESULT_CODE,\n};\n\n/**\n * @en Judge fail or not.\n * @ja å¤±æå¤å®\n *\n * @param code [[RESULT_CODE]]\n * @returns true: fail result / false: success result\n */\nexport function FAILED(code: number): boolean {\n    return code < 0;\n}\n\n/**\n * @en Judge success or not.\n * @ja æåå¤å®\n *\n * @param code [[RESULT_CODE]]\n * @returns true: success result / false: fail result\n */\nexport function SUCCEEDED(code: number): boolean {\n    return !FAILED(code);\n}\n\n/**\n * @en Convert to [[RESULT_CODE]] `name` string from [[RESULT_CODE]].\n * @ja [[RESULT_CODE]] ã [[RESULT_CODE]] æå­åã«å¤æ\n *\n * @param code [[RESULT_CODE]]\n * @param tag  custom tag if needed.\n * @returns name string ex) \"[tag][NOT_SUPPORTED]\"\n */\nexport function toNameString(code: number, tag?: string): string {\n    const prefix = tag ? `[${tag}]` : '';\n    if (RESULT_CODE[code]) {\n        return `${prefix}[${RESULT_CODE[code]}]`;\n    } else {\n        return `${prefix}[${Description.UNKNOWN_ERROR_NAME}]`;\n    }\n}\n\n/**\n * @en Convert to help string from [[RESULT_CODE]].\n * @ja [[RESULT_CODE]] ããã«ãã¹ããªã³ã°ã«å¤æ\n *\n * @param code [[RESULT_CODE]]\n * @returns registered help string\n */\nexport function toHelpString(code: number): string {\n    const map = ERROR_MESSAGE_MAP();\n    if (map[code]) {\n        return map[code];\n    } else {\n        return `unregistered result code. [code: ${code}]`;\n    }\n}\n","import {\n    className,\n    isNil,\n    isString,\n    isChancelLikeError,\n} from '@cdp/core-utils';\nimport {\n    RESULT_CODE,\n    SUCCEEDED,\n    FAILED,\n    toNameString,\n    toHelpString,\n} from './result-code';\n\nconst {\n    /** @internal */ isFinite: isNumber\n} = Number;\n\n/** @internal */\nconst enum Tag {\n    ERROR  = 'Error',\n    RESULT = 'Result',\n}\n\n/** @internal */\nconst desc = (value: unknown): PropertyDescriptor => {\n    return {\n        configurable: false,\n        writable: false,\n        enumerable: true,\n        value,\n    };\n};\n\n/**\n * @en A result holder class. <br>\n *     Derived native `Error` class.\n * @ja å¦ççµæä¼éã¯ã©ã¹ <br>\n *     ãã¤ãã£ã `Error` ã®æ´¾çã¯ã©ã¹\n */\nexport class Result extends Error {\n\n    /**\n     * constructor\n     *\n     * @param code\n     *  - `en` result code\n     *  - `ja` çµæã³ã¼ã\n     * @param message\n     *  - `en` result info message\n     *  - `ja` çµææå ±ã¡ãã»ã¼ã¸\n     * @param cause\n     *  - `en` low-level error information\n     *  - `ja` ä¸ä½ã®ã¨ã©ã¼æå ±\n     */\n    constructor(code?: number, message?: string, cause?: unknown) {\n        code = isNil(code) ? RESULT_CODE.SUCCESS : isNumber(code) ? Math.trunc(code) : RESULT_CODE.FAIL;\n        super(message || toHelpString(code));\n        let time = isError(cause) ? (cause as Result).time : undefined;\n        isNumber(time as number) || (time = Date.now());\n        Object.defineProperties(this, { code: desc(code), cause: desc(cause), time: desc(time) });\n    }\n\n    /**\n     * @en [[RESULT_CODE]] value.\n     * @ja [[RESULT_CODE]] ã®å¤\n     */\n    readonly code!: number;\n\n    /**\n     * @en Stock low-level error information.\n     * @ja ä¸ä½ã®ã¨ã©ã¼æå ±ãæ ¼ç´\n     */\n    readonly cause: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n    /**\n     * @en Generated time information.\n     * @ja çæãããæå»æå ±\n     */\n    readonly time!: number;\n\n    /**\n     * @en Judge succeeded or not.\n     * @ja æåå¤å®\n     */\n    get isSucceeded(): boolean {\n        return SUCCEEDED(this.code);\n    }\n\n    /**\n     * @en Judge failed or not.\n     * @ja å¤±æå¤å®\n     */\n    get isFailed(): boolean {\n        return FAILED(this.code);\n    }\n\n    /**\n     * @en Judge canceled or not.\n     * @ja ã­ã£ã³ã»ã«ã¨ã©ã¼å¤å®\n     */\n    get isCanceled(): boolean {\n        return this.code === RESULT_CODE.ABORT;\n    }\n\n    /**\n     * @en Get formatted [[RESULT_CODE]] name string.\n     * @ja ãã©ã¼ãããããã [[RESULT_CODE]] åæå­åãåå¾\n     */\n    get codeName(): string {\n        return toNameString(this.code, this.name);\n    }\n\n    /**\n     * @en Get [[RESULT_CODE]] help string.\n     * @ja [[RESULT_CODE]] ã®ãã«ãã¹ããªã³ã°ãåå¾\n     */\n    get help(): string {\n        return toHelpString(this.code);\n    }\n\n    /** @internal */\n    private get [Symbol.toStringTag](): Tag.RESULT {\n        return Tag.RESULT;\n    }\n}\n\nResult.prototype.name = Tag.RESULT;\n\n/** @interna lReturns `true` if `x` is `Error`, `false` otherwise. */\nfunction isError(x: unknown): x is Error {\n    return x instanceof Error || className(x) === Tag.ERROR;\n}\n\n/** Returns `true` if `x` is `Result`, `false` otherwise. */\nexport function isResult(x: unknown): x is Result {\n    return x instanceof Result || className(x) === Tag.RESULT;\n}\n\n/**\n * @en Convert to [[Result]] object.\n * @ja [[Result]] ãªãã¸ã§ã¯ãã«å¤æ\n */\nexport function toResult(o: unknown): Result {\n    if (o instanceof Result) {\n        /* eslint-disable-next-line prefer-const */\n        let { code, cause, time } = o;\n        code = isNil(code) ? RESULT_CODE.SUCCESS : isNumber(code) ? Math.trunc(code) : RESULT_CODE.FAIL;\n        isNumber(time) || (time = Date.now());\n        // Do nothing if already defined\n        Reflect.defineProperty(o, 'code',  desc(code));\n        Reflect.defineProperty(o, 'cause', desc(cause));\n        Reflect.defineProperty(o, 'time',  desc(time));\n        return o;\n    } else {\n        const e = Object(o) as Result;\n        const message = isString(e.message) ? e.message : isString(o) ? o : undefined;\n        const code = isChancelLikeError(message) ? RESULT_CODE.ABORT : isNumber(e.code) ? e.code : o as number;\n        const cause = isError(e.cause) ? e.cause : isError(o) ? o : isString(o) ? new Error(o) : o;\n        return new Result(code, message, cause);\n    }\n}\n\n/**\n * @en Create [[Result]] helper.\n * @ja [[Result]] ãªãã¸ã§ã¯ãæ§ç¯ãã«ãã¼\n *\n * @param code\n *  - `en` result code\n *  - `ja` çµæã³ã¼ã\n * @param message\n *  - `en` result info message\n *  - `ja` çµææå ±ã¡ãã»ã¼ã¸\n * @param cause\n *  - `en` low-level error information\n *  - `ja` ä¸ä½ã®ã¨ã©ã¼æå ±\n */\nexport function makeResult(code: number, message?: string, cause?: unknown): Result {\n    return new Result(code, message, cause);\n}\n\n/**\n * @en Create canceled [[Result]] helper.\n * @ja ã­ã£ã³ã»ã«æå ±æ ¼ç´ [[Result]] ãªãã¸ã§ã¯ãæ§ç¯ãã«ãã¼\n *\n * @param message\n *  - `en` result info message\n *  - `ja` çµææå ±ã¡ãã»ã¼ã¸\n * @param cause\n *  - `en` low-level error information\n *  - `ja` ä¸ä½ã®ã¨ã©ã¼æå ±\n */\nexport function makeCanceledResult(message?: string, cause?: unknown): Result {\n    return new Result(RESULT_CODE.ABORT, message, cause);\n}\n","import {\n    Keys,\n    Types,\n    KeyToType,\n    deepEqual,\n    isEmptyObject,\n    fromTypedData,\n    dropUndefined,\n    restoreNil,\n} from '@cdp/core-utils';\nimport { Subscription, EventBroker } from '@cdp/events';\nimport {\n    Cancelable,\n    checkCanceled as cc,\n} from '@cdp/promise';\nimport {\n    StorageData,\n    StorageDataTypes,\n    StorageDataTypeList,\n    StorageInputDataTypeList,\n    IStorageOptions,\n    IStorageDataOptions,\n    IStorageDataReturnType,\n    IStorageEventCallback,\n    IStorage,\n} from './interfaces';\n\n/** MemoryStorage I/O options */\nexport type MemoryStorageOptions<K extends Keys<StorageDataTypeList> = Keys<StorageDataTypeList>> = IStorageDataOptions<StorageDataTypeList, K>;\n/** MemoryStorage return value */\nexport type MemoryStorageResult<K extends Keys<StorageDataTypeList>> = KeyToType<StorageDataTypeList, K>;\n/** MemoryStorage data type */\nexport type MemoryStorageDataTypes = Types<StorageDataTypeList>;\n/** MemoryStorage return type */\nexport type MemoryStorageReturnType<D extends MemoryStorageDataTypes> = IStorageDataReturnType<StorageDataTypeList, D>;\n/** MemoryStorage input data type */\nexport type MemoryStorageInputDataTypes = StorageInputDataTypeList<StorageDataTypeList>;\n/** MemoryStorage event callback */\nexport type MemoryStorageEventCallback = IStorageEventCallback<StorageDataTypeList>;\n\n/** @internal */\ninterface MemoryStorageEvent {\n    '@': [string | null, MemoryStorageDataTypes | null, MemoryStorageDataTypes | null];\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Memory storage class. This class doesn't support permaneciation data.\n * @ja ã¡ã¢ãªã¼ã¹ãã¬ã¼ã¸ã¯ã©ã¹. æ¬ã¯ã©ã¹ã¯ãã¼ã¿ã®æ°¸ç¶åããµãã¼ãããªã\n */\nexport class MemoryStorage implements IStorage {\n\n    /** @internal */\n    private readonly _broker = new EventBroker<MemoryStorageEvent>();\n    /** @internal */\n    private _storage: StorageData = {};\n\n///////////////////////////////////////////////////////////////////////\n// implements: IStorage\n\n    /**\n     * @en [[IStorage]] kind signature.\n     * @ja [[IStorage]] ã®ç¨®å¥ãè¡¨ãè­å¥å­\n     */\n    get kind(): string {\n        return 'memory';\n    }\n\n    /**\n     * @en Returns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.\n     * @ja ã­ã¼ã«å¯¾å¿ããå¤ãåå¾. å­å¨ããªãå ´åã¯ null ãè¿å´\n     *\n     * @param key\n     *  - `en` access key\n     *  - `ja` ã¢ã¯ã»ã¹ã­ã¼\n     * @param options\n     *  - `en` I/O options\n     *  - `ja` I/O ãªãã·ã§ã³\n     * @returns\n     *  - `en` Returns the value which corresponds to a key with type change designated in `dataType`.\n     *  - `ja` `dataType` ã§æå®ãããåå¤æãè¡ã£ã¦, ã­ã¼ã«å¯¾å¿ããå¤ãè¿å´\n     */\n    getItem<D extends MemoryStorageDataTypes = MemoryStorageDataTypes>(\n        key: string,\n        options?: MemoryStorageOptions<never>\n    ): Promise<MemoryStorageReturnType<D>>;\n\n    /**\n     * @en Returns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.\n     * @ja ã­ã¼ã«å¯¾å¿ããå¤ãåå¾. å­å¨ããªãå ´åã¯ null ãè¿å´\n     *\n     * @param key\n     *  - `en` access key\n     *  - `ja` ã¢ã¯ã»ã¹ã­ã¼\n     * @param options\n     *  - `en` I/O options\n     *  - `ja` I/O ãªãã·ã§ã³\n     * @returns\n     *  - `en` Returns the value which corresponds to a key with type change designated in `dataType`.\n     *  - `ja` `dataType` ã§æå®ãããåå¤æãè¡ã£ã¦, ã­ã¼ã«å¯¾å¿ããå¤ãè¿å´\n     */\n    getItem<K extends Keys<StorageDataTypeList>>(\n        key: string,\n        options?: MemoryStorageOptions<K>\n    ): Promise<MemoryStorageResult<K> | null>;\n\n    async getItem(key: string, options?: MemoryStorageOptions): Promise<MemoryStorageDataTypes | null> {\n        options = options || {};\n        await cc(options.cancel);\n\n        // `undefined` â `null`\n        const value = dropUndefined(this._storage[key]);\n        switch (options.dataType) {\n            case 'string':\n                return fromTypedData(value) as string;\n            case 'number':\n                return Number(restoreNil(value));\n            case 'boolean':\n                return Boolean(restoreNil(value));\n            case 'object':\n                return Object(restoreNil(value));\n            default:\n                return restoreNil(value) as null;\n        }\n    }\n\n    /**\n     * @en Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.\n     * @ja ã­ã¼ãæå®ãã¦å¤ãè¨­å®. å­å¨ããªãå ´åã¯æ°è¦ã«ä½æ\n     *\n     * @param key\n     *  - `en` access key\n     *  - `ja` ã¢ã¯ã»ã¹ã­ã¼\n     * @param options\n     *  - `en` I/O options\n     *  - `ja` I/O ãªãã·ã§ã³\n     */\n    async setItem<V extends MemoryStorageInputDataTypes>(key: string, value: V, options?: MemoryStorageOptions<never>): Promise<void> {\n        options = options || {};\n        await cc(options.cancel);\n        const newVal = dropUndefined(value, true);         // `null` or `undefined` â 'null' or 'undefined'\n        const oldVal = dropUndefined(this._storage[key]);  // `undefined` â `null`\n        if (!deepEqual(oldVal, newVal)) {\n            this._storage[key] = newVal as StorageDataTypes;\n            !options.silent && this._broker.trigger('@', key, newVal, oldVal);\n        }\n    }\n\n    /**\n     * @en Removes the key/value pair with the given key from the list associated with the object, if a key/value pair with the given key exists.\n     * @ja æå®ãããã­ã¼ã«å¯¾å¿ããå¤ãå­å¨ããã°åé¤\n     *\n     * @param options\n     *  - `en` storage options\n     *  - `ja` ã¹ãã¬ã¼ã¸ãªãã·ã§ã³\n     */\n    async removeItem(key: string, options?: IStorageOptions): Promise<void> {\n        options = options || {};\n        await cc(options.cancel);\n        const oldVal = this._storage[key];\n        if (undefined !== oldVal) {\n            delete this._storage[key];\n            !options.silent && this._broker.trigger('@', key, null, oldVal);\n        }\n    }\n\n    /**\n     * @en Empties the list associated with the object of all key/value pairs, if there are any.\n     * @ja ãã¹ã¦ã®ã­ã¼ã«å¯¾å¿ããå¤ãåé¤\n     *\n     * @param options\n     *  - `en` storage options\n     *  - `ja` ã¹ãã¬ã¼ã¸ãªãã·ã§ã³\n     */\n    async clear(options?: IStorageOptions): Promise<void> {\n        options = options || {};\n        await cc(options.cancel);\n        if (!isEmptyObject(this._storage)) {\n            this._storage = {};\n            !options.silent && this._broker.trigger('@', null, null, null);\n        }\n    }\n\n    /**\n     * @en Returns all entry keys.\n     * @ja ãã¹ã¦ã®ã­ã¼ä¸è¦§ãè¿å´\n     *\n     * @param options\n     *  - `en` cancel options\n     *  - `ja` ã­ã£ã³ã»ã«ãªãã·ã§ã³\n     */\n    async keys(options?: Cancelable): Promise<string[]> {\n        await cc(options && options.cancel);\n        return Object.keys(this._storage);\n    }\n\n    /**\n     * @en Subscrive event(s).\n     * @ja ã¤ãã³ãè³¼èª­è¨­å®\n     *\n     * @param listener\n     *  - `en` callback function.\n     *  - `ja` ã³ã¼ã«ããã¯é¢æ°\n     */\n    on(listener: MemoryStorageEventCallback): Subscription {\n        return this._broker.on('@', listener);\n    }\n\n    /**\n     * @en Unsubscribe event(s).\n     * @ja ã¤ãã³ãè³¼èª­è§£é¤\n     *\n     * @param listener\n     *  - `en` callback function.\n     *         When not set this parameter, listeners are released.\n     *  - `ja` ã³ã¼ã«ããã¯é¢æ°\n     *         æå®ããªãå ´åã¯ãã¹ã¦ãè§£é¤\n     */\n    off(listener?: MemoryStorageEventCallback): void {\n        this._broker.off('@', listener);\n    }\n\n///////////////////////////////////////////////////////////////////////\n// operations:\n\n    /**\n     * @en Return a storage-store object.\n     * @ja ã¹ãã¬ã¼ã¸ã¹ãã¢ãªãã¸ã§ã¯ããè¿å´\n     */\n    get context(): StorageData {\n        return this._storage;\n    }\n}\n\n// default storage\nexport const memoryStorage = new MemoryStorage();\n","import { escapeHTML } from '@cdp/core-utils';\nimport {\n    TemplateDelimiters,\n    TemplateWriter,\n    TemplateEscaper,\n} from './interfaces';\n\n/** (string | Token[]) */\nexport type TokenList = unknown;\n\n/**\n * @en [[TemplateEngine]] token structure.\n * @ja [[TemplateEngine]] token å\n *\n * @internal\n */\nexport type Token = [string, string, number, number, TokenList?, number?, boolean?];\n\n/**\n * @en [[Token]] address id.\n * @ja [[Token]] ã¢ãã¬ã¹è­å¥å­\n */\nexport const enum TokenAddress {\n    TYPE = 0,\n    VALUE,\n    START,\n    END,\n    TOKEN_LIST,\n    TAG_INDEX,\n    HAS_NO_SPACE,\n}\n\n/**\n * @en Internal delimiters definition for [[TemplateEngine]]. ex) ['{{','}}'] or '{{ }}'\n * @ja [[TemplateEngine]] ã®åé¨ã§ä½¿ç¨ããåºåãæå­ ex) ['{{','}}'] or '{{ }}'\n */\nexport type Delimiters = string | TemplateDelimiters;\n\n/** @internal */\nexport const globalSettings = {\n    tags: ['{{', '}}'],\n    escape: escapeHTML,\n} as {\n    tags: TemplateDelimiters;\n    escape: TemplateEscaper;\n    writer: TemplateWriter;\n};\n","import {\n    PlainObject,\n    ensureObject,\n    getGlobalNamespace,\n} from '@cdp/core-utils';\nimport { TemplateDelimiters } from './interfaces';\n\n/**\n * @en Cache location information.\n * @ja ã­ã£ãã·ã¥ã­ã±ã¼ã·ã§ã³æå ±\n *\n * @internal\n */\nexport const enum CacheLocation {\n    NAMESPACE = 'CDP_DECLARE',\n    ROOT      = 'TEMPLATE_CACHE',\n}\n\n/**\n * @en Build cache key.\n * @ja ã­ã£ãã·ã¥ã­ã¼ã®çæ\n *\n * @internal\n */\nexport function buildCacheKey(template: string, tags: TemplateDelimiters): string {\n    return `${template}:${tags.join(':')}`;\n}\n\n/**\n * @en Clears all cached templates in cache pool.\n * @ja ãã¹ã¦ã®ãã³ãã¬ã¼ãã­ã£ãã·ã¥ãç ´æ£\n *\n * @internal\n */\nexport function clearCache(): void {\n    const namespace = getGlobalNamespace(CacheLocation.NAMESPACE);\n    namespace[CacheLocation.ROOT] = {};\n}\n\n/** @internal global cache pool */\nexport const cache = ensureObject<PlainObject>(null, CacheLocation.NAMESPACE, CacheLocation.ROOT);\n","import { isArray, isPrimitive } from '@cdp/core-utils';\nexport {\n    PlainObject,\n    isString,\n    isArray,\n    isFunction,\n    has,\n    escapeHTML,\n} from '@cdp/core-utils';\n\n/**\n * More correct typeof string handling array\n * which normally returns typeof 'object'\n */\nexport function typeString(src: unknown): string {\n    return isArray(src) ? 'array' : typeof src;\n}\n\n/**\n * Escape for template's expression charactors.\n */\nexport function escapeTemplateExp(src: string): string {\n    // eslint-disable-next-line\n    return src.replace(/[-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n}\n\n/**\n * Safe way of detecting whether or not the given thing is a primitive and\n * whether it has the given property\n */\nexport function primitiveHasOwnProperty(src: unknown, propName: string): boolean {\n    return isPrimitive(src) && Object.prototype.hasOwnProperty.call(src, propName);\n}\n\n/**\n * Check whitespace charactor exists.\n */\nexport function isWhitespace(src: string): boolean {\n    return !/\\S/.test(src);\n}\n","import { TemplateScanner } from './interfaces';\n\n/**\n * A simple string scanner that is used by the template parser to find\n * tokens in template strings.\n */\nexport class Scanner implements TemplateScanner {\n    private _source: string;\n    private _tail: string;\n    private _pos: number;\n\n    /**\n     * constructor\n     */\n    constructor(src: string) {\n        this._source = this._tail = src;\n        this._pos = 0;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /**\n     * Returns current scanning position.\n     */\n    get pos(): number {\n        return this._pos;\n    }\n\n    /**\n     * Returns string  source.\n     */\n    get source(): string {\n        return this._source;\n    }\n\n    /**\n     * Returns `true` if the tail is empty (end of string).\n     */\n    get eos(): boolean {\n        return '' === this._tail;\n    }\n\n    /**\n     * Tries to match the given regular expression at the current position.\n     * Returns the matched text if it can match, the empty string otherwise.\n     */\n    scan(regexp: RegExp): string {\n        const match = regexp.exec(this._tail);\n\n        if (!match || 0 !== match.index) {\n            return '';\n        }\n\n        const string = match[0];\n\n        this._tail = this._tail.substring(string.length);\n        this._pos += string.length;\n\n        return string;\n    }\n\n    /**\n     * Skips all text until the given regular expression can be matched. Returns\n     * the skipped string, which is the entire tail if no match can be made.\n     */\n    scanUntil(regexp: RegExp): string {\n        const index = this._tail.search(regexp);\n        let match: string;\n\n        switch (index) {\n            case -1:\n                match = this._tail;\n                this._tail = '';\n                break;\n            case 0:\n                match = '';\n                break;\n            default:\n                match = this._tail.substring(0, index);\n                this._tail = this._tail.substring(index);\n        }\n\n        this._pos += match.length;\n\n        return match;\n    }\n}\n","import { TemplateContext } from './interfaces';\nimport {\n    PlainObject,\n    isFunction,\n    has,\n    primitiveHasOwnProperty,\n} from './utils';\n\n/**\n * Represents a rendering context by wrapping a view object and\n * maintaining a reference to the parent context.\n */\nexport class Context implements TemplateContext {\n    private readonly _view: PlainObject;\n    private readonly _parent?: Context;\n    private readonly _cache: PlainObject;\n\n    /** constructor */\n    constructor(view: PlainObject, parentContext?: Context) {\n        this._view   = view;\n        this._cache  = { '.': this._view };\n        this._parent = parentContext;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /**\n     * View parameter getter.\n     */\n    get view(): PlainObject {\n        return this._view;\n    }\n\n    /**\n     * Creates a new context using the given view with this context\n     * as the parent.\n     */\n    push(view: PlainObject): Context {\n        return new Context(view, this);\n    }\n\n    /**\n     * Returns the value of the given name in this context, traversing\n     * up the context hierarchy if the value is absent in this context's view.\n     */\n    lookup(name: string): unknown {\n        const cache = this._cache;\n\n        let value: unknown;\n        if (Object.prototype.hasOwnProperty.call(cache, name)) {\n            value = cache[name];\n        } else {\n            let context: Context | undefined = this; // eslint-disable-line @typescript-eslint/no-this-alias\n            let intermediateValue: object | undefined | null;\n            let names: string[];\n            let index: number;\n            let lookupHit = false;\n\n            while (context) {\n                if (0 < name.indexOf('.')) {\n                    intermediateValue = context._view;\n                    names = name.split('.');\n                    index = 0;\n\n                    /**\n                     * Using the dot notion path in `name`, we descend through the\n                     * nested objects.\n                     *\n                     * To be certain that the lookup has been successful, we have to\n                     * check if the last object in the path actually has the property\n                     * we are looking for. We store the result in `lookupHit`.\n                     *\n                     * This is specially necessary for when the value has been set to\n                     * `undefined` and we want to avoid looking up parent contexts.\n                     *\n                     * In the case where dot notation is used, we consider the lookup\n                     * to be successful even if the last \"object\" in the path is\n                     * not actually an object but a primitive (e.g., a string, or an\n                     * integer), because it is sometimes useful to access a property\n                     * of an autoboxed primitive, such as the length of a string.\n                     **/\n                    while (null != intermediateValue && index < names.length) {\n                        if (index === names.length - 1) {\n                            lookupHit = (\n                                has(intermediateValue, names[index]) ||\n                                primitiveHasOwnProperty(intermediateValue, names[index])\n                            );\n                        }\n                        intermediateValue = intermediateValue[names[index++]];\n                    }\n                } else {\n                    intermediateValue = context._view[name];\n\n                    /**\n                     * Only checking against `hasProperty`, which always returns `false` if\n                     * `context.view` is not an object. Deliberately omitting the check\n                     * against `primitiveHasOwnProperty` if dot notation is not used.\n                     *\n                     * Consider this example:\n                     * ```\n                     * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n                     * ```\n                     *\n                     * If we were to check also against `primitiveHasOwnProperty`, as we do\n                     * in the dot notation case, then render call would return:\n                     *\n                     * \"The length of a football field is 9.\"\n                     *\n                     * rather than the expected:\n                     *\n                     * \"The length of a football field is 100 yards.\"\n                     **/\n                    lookupHit = has(context._view, name);\n                }\n\n                if (lookupHit) {\n                    value = intermediateValue;\n                    break;\n                }\n\n                context = context._parent;\n            }\n\n            cache[name] = value as object;\n        }\n\n        if (isFunction(value)) {\n            value = value.call(this._view);\n        }\n\n        return value;\n    }\n}\n","import {\n    Token,\n    TokenAddress as $,\n    Delimiters,\n    globalSettings,\n} from './internal';\nimport {\n    isString,\n    isArray,\n    isWhitespace,\n    escapeTemplateExp,\n} from './utils';\nimport { Scanner } from './scanner';\n\n/** @internal */\nconst _regexp = {\n    white: /\\s*/,\n    space: /\\s+/,\n    equals: /\\s*=/,\n    curly: /\\s*\\}/,\n    tag: /#|\\^|\\/|>|\\{|&|=|!/,\n};\n\n/**\n * @internal\n * Combines the values of consecutive text tokens in the given `tokens` array to a single token.\n */\nfunction squashTokens(tokens: Token[]): Token[] {\n    const squashedTokens: Token[] = [];\n\n    let lastToken!: Token;\n    for (const token of tokens) {\n        if (token) {\n            if ('text' === token[$.TYPE] && lastToken && 'text' === lastToken[$.TYPE]) {\n                lastToken[$.VALUE] += token[$.VALUE];\n                lastToken[$.END] = token[$.END];\n            } else {\n                squashedTokens.push(token);\n                lastToken = token;\n            }\n        }\n    }\n\n    return squashedTokens;\n}\n\n/**\n * @internal\n * Forms the given array of `tokens` into a nested tree structure where\n * tokens that represent a section have two additional items: 1) an array of\n * all tokens that appear in that section and 2) the index in the original\n * template that represents the end of that section.\n */\nfunction nestTokens(tokens: Token[]): Token[] {\n    const nestedTokens: Token[] = [];\n    let collector = nestedTokens;\n    const sections: Token[] = [];\n\n    let section!: Token;\n    for (const token of tokens) {\n        switch (token[$.TYPE]) {\n            case '#':\n            case '^':\n                collector.push(token);\n                sections.push(token);\n                collector = token[$.TOKEN_LIST] = [];\n                break;\n            case '/':\n                section = sections.pop() as Token;\n                section[$.TAG_INDEX] = token[$.START];\n                collector = sections.length > 0 ? sections[sections.length - 1][$.TOKEN_LIST] as Token[] : nestedTokens;\n                break;\n            default:\n                collector.push(token);\n                break;\n        }\n    }\n    return nestedTokens;\n}\n\n/**\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\n * argument is given here it must be an array with two string values: the\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n * course, the default is to use mustaches (i.e. mustache.tags).\n *\n * A token is an array with at least 4 elements. The first element is the\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n * all text that appears outside a symbol this element is \"text\".\n *\n * The second element of a token is its \"value\". For mustache tags this is\n * whatever else was inside the tag besides the opening symbol. For text tokens\n * this is the text itself.\n *\n * The third and fourth elements of the token are the start and end indices,\n * respectively, of the token in the original template.\n *\n * Tokens that are the root node of a subtree contain two more elements: 1) an\n * array of tokens in the subtree and 2) the index in the original template at\n * which the closing tag for that section begins.\n *\n * Tokens for partials also contain two more elements: 1) a string value of\n * indendation prior to that tag and 2) the index of that tag on that line -\n * eg a value of 2 indicates the partial is the third tag on this line.\n *\n * @param template template string\n * @param tags delimiters ex) ['{{','}}'] or '{{ }}'\n */\nexport function parseTemplate(template: string, tags?: Delimiters): Token[] {\n    if (!template) {\n        return [];\n    }\n\n    let lineHasNonSpace     = false;\n    const sections: Token[] = [];       // Stack to hold section tokens\n    const tokens: Token[]   = [];       // Buffer to hold the tokens\n    const spaces: number[]  = [];       // Indices of whitespace tokens on the current line\n    let hasTag              = false;    // Is there a {{tag}} on the current line?\n    let nonSpace            = false;    // Is there a non-space char on the current line?\n    let indentation         = '';       // Tracks indentation for tags that use it\n    let tagIndex            = 0;        // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    const stripSpace = (): void => {\n        if (hasTag && !nonSpace) {\n            while (spaces.length) {\n                delete tokens[spaces.pop() as number];\n            }\n        } else {\n            spaces.length = 0;\n        }\n        hasTag = false;\n        nonSpace = false;\n    };\n\n    const compileTags = (tagsToCompile: string | string[]): { openingTag: RegExp; closingTag: RegExp; closingCurly: RegExp; } => {\n        const enum Tag {\n            OPEN = 0,\n            CLOSE,\n        }\n        if (isString(tagsToCompile)) {\n            tagsToCompile = tagsToCompile.split(_regexp.space, 2);\n        }\n\n        if (!isArray(tagsToCompile) || 2 !== tagsToCompile.length) {\n            throw new Error(`Invalid tags: ${JSON.stringify(tagsToCompile)}`);\n        }\n        return {\n            openingTag:   new RegExp(`${escapeTemplateExp(tagsToCompile[Tag.OPEN])}\\\\s*`),\n            closingTag:   new RegExp(`\\\\s*${escapeTemplateExp(tagsToCompile[Tag.CLOSE])}`),\n            closingCurly: new RegExp(`\\\\s*${escapeTemplateExp(`}${tagsToCompile[Tag.CLOSE]}`)}`),\n        };\n    };\n\n    const { tag: reTag, white: reWhite, equals: reEquals, curly: reCurly } = _regexp;\n    let _regxpTags = compileTags(tags || globalSettings.tags);\n\n    const scanner = new Scanner(template);\n\n    let openSection: Token | undefined;\n    while (!scanner.eos) {\n        const { openingTag: reOpeningTag, closingTag: reClosingTag, closingCurly: reClosingCurly } = _regxpTags;\n        let token: Token;\n        let start = scanner.pos;\n        // Match any text between tags.\n        let value = scanner.scanUntil(reOpeningTag);\n        if (value) {\n            for (let i = 0, valueLength = value.length; i < valueLength; ++i) {\n                const chr = value.charAt(i);\n\n                if (isWhitespace(chr)) {\n                    spaces.push(tokens.length);\n                    indentation += chr;\n                } else {\n                    nonSpace = true;\n                    lineHasNonSpace = true;\n                    indentation += ' ';\n                }\n\n                tokens.push(['text', chr, start, start + 1]);\n                start += 1;\n\n                // Check for whitespace on the current line.\n                if ('\\n' === chr) {\n                    stripSpace();\n                    indentation = '';\n                    tagIndex = 0;\n                    lineHasNonSpace = false;\n                }\n            }\n        }\n\n        // Match the opening tag.\n        if (!scanner.scan(reOpeningTag)) {\n            break;\n        }\n\n        hasTag = true;\n\n        // Get the tag type.\n        let type = scanner.scan(reTag) || 'name';\n        scanner.scan(reWhite);\n\n        // Get the tag value.\n        if ('=' === type) {\n            value = scanner.scanUntil(reEquals);\n            scanner.scan(reEquals);\n            scanner.scanUntil(reClosingTag);\n        } else if ('{' === type) {\n            value = scanner.scanUntil(reClosingCurly);\n            scanner.scan(reCurly);\n            scanner.scanUntil(reClosingTag);\n            type = '&';\n        } else {\n            value = scanner.scanUntil(reClosingTag);\n        }\n\n        // Match the closing tag.\n        if (!scanner.scan(reClosingTag)) {\n            throw new Error(`Unclosed tag at ${scanner.pos}`);\n        }\n\n        if ('>' === type) {\n            token = [type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace];\n        } else {\n            token = [type, value, start, scanner.pos];\n        }\n        tagIndex++;\n        tokens.push(token);\n\n        if ('#' === type || '^' === type) {\n            sections.push(token);\n        } else if ('/' === type) {\n            // Check section nesting.\n            openSection = sections.pop();\n            if (!openSection) {\n                throw new Error(`Unopened section \"${value}\" at ${start}`);\n            }\n            if (openSection[1] !== value) {\n                throw new Error(`Unclosed section \"${openSection[$.VALUE]}\" at ${start}`);\n            }\n        } else if ('name' === type || '{' === type || '&' === type) {\n            nonSpace = true;\n        } else if ('=' === type) {\n            // Set the tags for the next time around.\n            _regxpTags = compileTags(value);\n        }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection) {\n        throw new Error(`Unclosed section \"${openSection[$.VALUE]}\" at ${scanner.pos}`);\n    }\n\n    return nestTokens(squashTokens(tokens));\n}\n","import {\n    TemplateDelimiters,\n    TemplateWriter,\n    TemplateViewParam,\n    TemplatePartialParam,\n} from './interfaces';\nimport {\n    Token,\n    TokenAddress as $,\n    globalSettings,\n} from './internal';\nimport { cache, buildCacheKey } from './cache';\nimport {\n    PlainObject,\n    isArray,\n    isFunction,\n} from './utils';\nimport { parseTemplate } from './parse';\nimport { Context } from './context';\n\n/**\n * A Writer knows how to take a stream of tokens and render them to a\n * string, given a context. It also maintains a cache of templates to\n * avoid the need to parse the same template twice.\n */\nexport class Writer implements TemplateWriter {\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /**\n     * Parses and caches the given `template` according to the given `tags` or\n     * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n     * that is generated from the parse.\n     */\n    parse(template: string, tags?: TemplateDelimiters): { tokens: Token[]; cacheKey: string; } {\n        const cacheKey = buildCacheKey(template, tags || globalSettings.tags);\n        let tokens = cache[cacheKey] as Token[];\n        if (null == tokens) {\n            tokens = cache[cacheKey] = parseTemplate(template, tags);\n        }\n        return { tokens, cacheKey };\n    }\n\n    /**\n     * High-level method that is used to render the given `template` with\n     * the given `view`.\n     *\n     * The optional `partials` argument may be an object that contains the\n     * names and templates of partials that are used in the template. It may\n     * also be a function that is used to load partial templates on the fly\n     * that takes a single argument: the name of the partial.\n     *\n     * If the optional `tags` argument is given here it must be an array with two\n     * string values: the opening and closing tags used in the template (e.g.\n     * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n     */\n    render(template: string, view: TemplateViewParam, partials?: TemplatePartialParam, tags?: TemplateDelimiters): string {\n        const { tokens } = this.parse(template, tags);\n        return this.renderTokens(tokens, view, partials, template, tags);\n    }\n\n    /**\n     * Low-level method that renders the given array of `tokens` using\n     * the given `context` and `partials`.\n     *\n     * Note: The `originalTemplate` is only ever used to extract the portion\n     * of the original template that was contained in a higher-order section.\n     * If the template doesn't use higher-order sections, this argument may\n     * be omitted.\n     */\n    renderTokens(tokens: Token[], view: TemplateViewParam, partials?: TemplatePartialParam, originalTemplate?: string, tags?: TemplateDelimiters): string {\n        const context = (view instanceof Context) ? view : new Context(view as PlainObject);\n        let buffer = '';\n\n        for (const token of tokens) {\n            let value: string | void;\n            switch (token[$.TYPE]) {\n                case '#':\n                    value = this.renderSection(token, context, partials, originalTemplate);\n                    break;\n                case '^':\n                    value = this.renderInverted(token, context, partials, originalTemplate);\n                    break;\n                case '>':\n                    value = this.renderPartial(token, context, partials, tags);\n                    break;\n                case '&':\n                    value = this.unescapedValue(token, context);\n                    break;\n                case 'name':\n                    value = this.escapedValue(token, context);\n                    break;\n                case 'text':\n                    value = this.rawValue(token);\n                    break;\n                default:\n                    break;\n            }\n\n            if (null != value) {\n                buffer += value;\n            }\n        }\n\n        return buffer;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// private methods:\n\n    /** @internal */\n    private renderSection(token: Token, context: Context, partials?: TemplatePartialParam, originalTemplate?: string): string | void {\n        const self = this;\n        let buffer = '';\n        let value = context.lookup(token[$.VALUE]);\n\n        // This function is used to render an arbitrary template\n        // in the current context by higher-order sections.\n        const subRender = (template: string): string => {\n            return self.render(template, context, partials);\n        };\n\n        if (!value) {\n            return;\n        }\n\n        if (isArray(value)) {\n            for (const v of value) {\n                buffer += this.renderTokens(token[$.TOKEN_LIST] as Token[], context.push(v), partials, originalTemplate);\n            }\n        } else if ('object' === typeof value || 'string' === typeof value || 'number' === typeof value) {\n            buffer += this.renderTokens(token[$.TOKEN_LIST] as Token[], context.push(value as PlainObject), partials, originalTemplate);\n        } else if (isFunction(value)) {\n            if ('string' !== typeof originalTemplate) {\n                throw new Error('Cannot use higher-order sections without the original template');\n            }\n            // Extract the portion of the original template that the section contains.\n            value = value.call(context.view, originalTemplate.slice(token[$.END], token[$.TAG_INDEX]), subRender);\n            if (null != value) {\n                buffer += value;\n            }\n        } else {\n            buffer += this.renderTokens(token[$.TOKEN_LIST] as Token[], context, partials, originalTemplate);\n        }\n        return buffer;\n    }\n\n    /** @internal */\n    private renderInverted(token: Token, context: Context, partials?: TemplatePartialParam, originalTemplate?: string): string | void {\n        const value = context.lookup(token[$.VALUE]);\n        if (!value || (isArray(value) && 0 === value.length)) {\n            return this.renderTokens(token[$.TOKEN_LIST] as Token[], context, partials, originalTemplate);\n        }\n    }\n\n    /** @internal */\n    private indentPartial(partial: string, indentation: string, lineHasNonSpace: boolean): string {\n        const filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n        const partialByNl = partial.split('\\n');\n        for (let i = 0; i < partialByNl.length; i++) {\n            if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n                partialByNl[i] = filteredIndentation + partialByNl[i];\n            }\n        }\n        return partialByNl.join('\\n');\n    }\n\n    /** @internal */\n    private renderPartial(token: Token, context: Context, partials: TemplatePartialParam | undefined, tags: TemplateDelimiters | undefined): string | void {\n        if (!partials) {\n            return;\n        }\n\n        const value = (isFunction(partials) ? partials(token[$.VALUE]) : partials[token[$.VALUE]]) as string | undefined;\n        if (null != value) {\n            const lineHasNonSpace = token[$.HAS_NO_SPACE];\n            const tagIndex        = token[$.TAG_INDEX];\n            const indentation     = token[$.TOKEN_LIST];\n            let indentedValue = value;\n            if (0 === tagIndex && indentation) {\n                indentedValue = this.indentPartial(value, indentation as string, lineHasNonSpace as boolean);\n            }\n            const { tokens } = this.parse(indentedValue, tags);\n            return this.renderTokens(tokens, context, partials, indentedValue);\n        }\n    }\n\n    /** @internal */\n    private unescapedValue(token: Token, context: Context): string | void {\n        const value = context.lookup(token[$.VALUE]);\n        if (null != value) {\n            return value as string;\n        }\n    }\n\n    /** @internal */\n    private escapedValue(token: Token, context: Context): string | void {\n        const value = context.lookup(token[$.VALUE]);\n        if (null != value) {\n            return globalSettings.escape(value as string);\n        }\n    }\n\n    /** @internal */\n    private rawValue(token: Token): string {\n        return token[$.VALUE];\n    }\n}\n","import {\n    JST,\n    TemplateDelimiters,\n    ITemplateEngine,\n    TemplateScanner,\n    TemplateContext,\n    TemplateWriter,\n    TemplateEscaper,\n} from './interfaces';\nimport { globalSettings } from './internal';\nimport { CacheLocation, clearCache } from './cache';\nimport {\n    PlainObject,\n    isString,\n    typeString,\n} from './utils';\nimport { Scanner } from './scanner';\nimport { Context } from './context';\nimport { Writer } from './writer';\n\n/** [[TemplateEngine]] common settings */\nglobalSettings.writer = new Writer();\n\n/**\n * @en [[TemplateEngine]] global settng options\n * @ja [[TemplateEngine]] ã°ã­ã¼ãã«è¨­å®ãªãã·ã§ã³\n */\nexport interface TemplateGlobalSettings {\n    writer?: TemplateWriter;\n    tags?: TemplateDelimiters;\n    escape?: TemplateEscaper;\n}\n\n/**\n * @en [[TemplateEngine]] compile options\n * @ja [[TemplateEngine]] ã³ã³ãã¤ã«ãªãã·ã§ã³\n */\nexport interface TemplateCompileOptions {\n    tags?: TemplateDelimiters;\n}\n\n/**\n * @en TemplateEngine utility class.\n * @ja TemplateEngine ã¦ã¼ãã£ãªãã£ã¯ã©ã¹\n */\nexport class TemplateEngine implements ITemplateEngine {\n\n///////////////////////////////////////////////////////////////////////\n// public static methods:\n\n    /**\n     * @en Get [[JST]] from template source.\n     * @ja ãã³ãã¬ã¼ãæå­åãã [[JST]] ãåå¾\n     *\n     * @param template\n     *  - `en` template source string\n     *  - `ja` ãã³ãã¬ã¼ãæå­å\n     * @param options\n     *  - `en` compile options\n     *  - `ja` ã³ã³ãã¤ã«ãªãã·ã§ã³\n     */\n    public static compile(template: string, options?: TemplateCompileOptions): JST {\n        if (!isString(template)) {\n            throw new TypeError(`Invalid template! the first argument should be a \"string\" but \"${typeString(template)}\" was given for TemplateEngine.compile(template, options)`);\n        }\n\n        const { tags } = options || globalSettings;\n        const { writer } = globalSettings;\n\n        const jst = (view?: PlainObject, partials?: PlainObject): string => {\n            return writer.render(template, view || {}, partials, tags);\n        };\n\n        const { tokens, cacheKey } = writer.parse(template, tags);\n        jst.tokens        = tokens;\n        jst.cacheKey      = cacheKey;\n        jst.cacheLocation = [CacheLocation.NAMESPACE, CacheLocation.ROOT];\n\n        return jst;\n    }\n\n    /**\n     * @en Clears all cached templates in the default [[TemplateWriter]].\n     * @ja æ¢å®ã® [[TemplateWriter]] ã®ãã¹ã¦ã®ã­ã£ãã·ã¥ãåé¤\n     */\n    public static clearCache(): void {\n        clearCache();\n    }\n\n    /**\n     * @en Change [[TemplateEngine]] global settings.\n     * @ja [[TemplateEngine]] ã°ã­ã¼ãã«è¨­å®ã®æ´æ°\n     *\n     * @param settings\n     *  - `en` new settings\n     *  - `ja` æ°ããè¨­å®å¤\n     * @returns\n     *  - `en` old settings\n     *  - `ja` å¤ãè¨­å®å¤\n     */\n    public static setGlobalSettings(setiings: TemplateGlobalSettings): TemplateGlobalSettings {\n        const oldSettings = { ...globalSettings };\n        const { writer, tags, escape } = setiings;\n        writer && (globalSettings.writer = writer);\n        tags   && (globalSettings.tags   = tags);\n        escape && (globalSettings.escape = escape);\n        return oldSettings;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public static methods: for debug\n\n    /** @internal Create [[TemplateScanner]] instance */\n    public static createScanner(src: string): TemplateScanner {\n        return new Scanner(src);\n    }\n\n    /** @internal Create [[TemplateContext]] instance */\n    public static createContext(view: PlainObject, parentContext?: Context): TemplateContext {\n        return new Context(view, parentContext);\n    }\n\n    /** @internal Create [[TemplateWriter]] instance */\n    public static createWriter(): TemplateWriter {\n        return new Writer();\n    }\n}\n","import { CancelTokenSource } from './cancel-token';\nimport { wait } from './utils';\n\n/**\n * @en The class manages lumping multiple `Promise` objects. <br>\n *     It's possible to make them cancel more than one `Promise` which handles different [[CancelToken]] by lumping.\n * @ja è¤æ° `Promise` ãªãã¸ã§ã¯ããä¸æ¬ç®¡çããã¯ã©ã¹ <br>\n *     ç°ãªã [[CancelToken]] ãæ±ãè¤æ°ã® `Promise` ãä¸æ¬ã§ã­ã£ã³ã»ã«ããããã¨ãå¯è½\n */\nexport class PromiseManager {\n    // eslint-disable-next-line func-call-spacing\n    private readonly _pool = new Map<Promise<unknown>, ((reason: unknown) => unknown) | undefined>();\n\n    /**\n     * @en Add a `Promise` object under the management.\n     * @ja `Promise` ãªãã¸ã§ã¯ããç®¡çä¸ã«è¿½å \n     *\n     * @param promise\n     *  - `en` any `Promise` instance is available.\n     *  - `ja` ä»»æã® `Promise` ã¤ã³ã¹ã¿ã³ã¹\n     * @param cancelSource\n     *  - `en` [[CancelTokenSource]] instance made by `CancelToken.source()`.\n     *  - `ja` `CancelToken.source()` ã§çæããã [[CancelTokenSource]] ã¤ã³ã¹ã¿ã³ã¹\n     * @returns\n     *  - `en` return the same instance of input `promise` instance.\n     *  - `ja` å¥åãã `promise` ã¨åä¸ã¤ã³ã¹ã¿ã³ã¹ãè¿å´\n     */\n    public add<T>(promise: Promise<T>, cancelSource?: CancelTokenSource): Promise<T> {\n        this._pool.set(promise, cancelSource && cancelSource.cancel); // eslint-disable-line @typescript-eslint/unbound-method\n\n        const always = (): void => {\n            this._pool.delete(promise);\n            if (cancelSource) {\n                cancelSource.close();\n            }\n        };\n\n        promise\n            .then(always, always);\n\n        return promise;\n    }\n\n    /**\n     * @en Released all instances under the management.\n     * @ja ç®¡çå¯¾è±¡ãç ´æ£\n     */\n    public release(): void {\n        this._pool.clear();\n    }\n\n    /**\n     * @en Return `promise` array from under the management.\n     * @ja ç®¡çå¯¾è±¡ã® Promise ãéåã§åå¾\n     */\n    public promises(): Promise<unknown>[] {\n        return [...this._pool.keys()];\n    }\n\n    /**\n     * @en Call `Promise.all()` for under the management. <br>\n     *     Wait for all `fullfilled`.\n     * @ja ç®¡çå¯¾è±¡ã«å¯¾ãã¦ `Promise.all()` <br>\n     *     ãã¹ã¦ã `fullfilled` ã«ãªãã¾ã§å¾æ©\n     */\n    public all(): Promise<unknown[]> {\n        return Promise.all(this.promises());\n    }\n\n    /**\n     * @en Call `Promise.race()` for under the management. <br>\n     *     Wait for any `settled`.\n     * @ja ç®¡çå¯¾è±¡ã«å¯¾ãã¦ `Promise.race()` <br>\n     *     ããããã `settled` ã«ãªãã¾ã§å¾æ©\n     */\n    public race(): Promise<unknown> {\n        return Promise.race(this.promises());\n    }\n\n    /**\n     * @en Call [[wait]]() for under the management. <br>\n     *     Wait for all `settled`. (simplified version)\n     * @ja ç®¡çå¯¾è±¡ã«å¯¾ãã¦ [[wait]]() <br>\n     *     ãã¹ã¦ã `settled` ã«ãªãã¾ã§å¾æ© (ç°¡æãã¼ã¸ã§ã³)\n     */\n    public wait(): Promise<unknown[]> {\n        return wait(this.promises());\n    }\n\n    /**\n     * @en Call `Promise.allSettled()` for under the management. <br>\n     *     Wait for all `settled`.\n     * @ja ç®¡çå¯¾è±¡ã«å¯¾ãã¦ `Promise.allSettled()` <br>\n     *     ãã¹ã¦ã `settled` ã«ãªãã¾ã§å¾æ©\n     */\n    public allSettled(): Promise<PromiseSettledResult<unknown>[]> {\n        return Promise.allSettled(this.promises());\n    }\n\n    /**\n     * @en Call `Promise.any()` for under the management. <br>\n     *     Wait for any `fullfilled`.\n     * @ja ç®¡çå¯¾è±¡ã«å¯¾ãã¦ `Promise.any()` <br>\n     *     ããããã `fullfilled` ã«ãªãã¾ã§å¾æ©\n     */\n    public any(): Promise<unknown> {\n        return Promise.any(this.promises());\n    }\n\n    /**\n     * @en Invoke `cancel` message for under the management promises.\n     * @ja ç®¡çå¯¾è±¡ã® `Promise` ã«å¯¾ãã¦ã­ã£ã³ã»ã«ãçºè¡\n     *\n     * @param reason\n     *  - `en` arguments for `cancelSource`\n     *  - `ja` `cancelSource` ã«æ¸¡ãããå¼æ°\n     * @returns\n     *  - `en` `Promise` instance which wait by until cancellation completion.\n     *  - `ja` ã­ã£ã³ã»ã«å®äºã¾ã§å¾æ©ãã [[Promise]] ã¤ã³ã¹ã¿ã³ã¹\n     */\n    public abort<T>(reason?: T): Promise<unknown[]> {\n        for (const canceler of this._pool.values()) {\n            if (canceler) {\n                canceler(\n                    (null != reason) ? reason : new Error('abort')\n                );\n            }\n        }\n        return wait(this.promises());\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-explicit-any,\n */\n\nimport {\n    post,\n    deepEqual,\n    deepCopy,\n    dropUndefined,\n} from '@cdp/core-utils';\nimport { EventPublisher } from '@cdp/events';\nimport {\n    StorageData,\n    IStorage,\n    IStorageOptions,\n    IStorageFormatOptions,\n    RegistrySchemaBase,\n    RegistryEvent,\n    RegistryReadOptions,\n    RegistryWriteOptions,\n    RegistrySaveOptions,\n} from './interfaces';\n\n/**\n * @en Registry management class for synchronous Read/Write accessible from any [[IStorage]] object.\n * @ja ä»»æã® [[IStorage]] ãªãã¸ã§ã¯ãããåæ Read/Write ã¢ã¯ã»ã¹å¯è½ãªã¬ã¸ã¹ããªç®¡çã¯ã©ã¹\n *\n * @example <br>\n *\n * ```ts\n * // 1. define registry schema\n * interface Schema extends RegistrySchemaBase {\n *    'common/mode': 'normal' | 'specified';\n *    'common/value': number;\n *    'trade/local': { unit: 'å' | '$'; rate: number; };\n *    'trade/check': boolean;\n *    'extra/user': string;\n * }\n *\n * // 2. prepare IStorage instance\n * // ex\n * import { webStorage } from '@cdp/web-storage';\n *\n * // 3. instantiate this class\n * const reg = new Registry<Schema>(webStorage, '@test');\n *\n * // 4. read example\n * const val = reg.read('common/mode'); // 'normal' | 'specified' | null\n *\n * // 5. write example\n * reg.write('common/mode', 'specified');\n * // reg.write('common/mode', 'hoge'); // compile error\n * ```\n */\nexport class Registry<T extends RegistrySchemaBase = any> extends EventPublisher<RegistryEvent<T>> {\n\n    /** @internal */\n    private readonly _storage: IStorage;\n    /** @internal */\n    private readonly _rootKey: string;\n    /** @internal */\n    private readonly _defaultOptions: IStorageFormatOptions;\n    /** @internal */\n    private _store: StorageData = {};\n\n    /**\n     * constructor\n     *\n     * @param storage\n     *  - `en` Root key for [[IStorage]].\n     *  - `ja` [[IStorage]] ã«ä½¿ç¨ããã«ã¼ãã­ã¼\n     * @param rootKey\n     *  - `en` Root key for [[IStorage]].\n     *  - `ja` [[IStorage]] ã«ä½¿ç¨ããã«ã¼ãã­ã¼\n     * @param formatSpace\n     *  - `en` for JSON format space.\n     *  - `ja` JSON ãã©ã¼ãããã¹ãã¼ã¹ãæå®\n     */\n    constructor(storage: IStorage<any>, rootKey: string, formatSpace?: number) {\n        super();\n        this._storage = storage;\n        this._rootKey = rootKey;\n        this._defaultOptions = { jsonSpace: formatSpace };\n    }\n\n    /**\n     * @en Access to root key.\n     * @ja ã«ã¼ãã­ã¼ãåå¾\n     */\n    get rootKey(): string {\n        return this._rootKey;\n    }\n\n    /**\n     * @en Access to [[IStorage]] object.\n     * @ja [[IStorage]] ãªãã¸ã§ã¯ããåå¾\n     */\n    get storage(): IStorage<any> {\n        return this._storage;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// public methods:\n\n    /**\n     * @en Read persistence data from [[IStorage]]. The data loaded already will be cleared.\n     * @ja [[IStorage]] ããæ°¸ç¶åãããã¼ã¿ãèª­ã¿è¾¼ã¿. ãã§ã«ã­ã£ãã·ã¥ããã¦ãããã¼ã¿ã¯ç ´æ£ããã\n     */\n    public async load(options?: IStorageOptions): Promise<void> {\n        options = options || {};\n        this._store = (await this._storage.getItem(this._rootKey, options)) || {};\n        if (!options.silent) {\n            void post(() => this.publish('change', '*'));\n        }\n    }\n\n    /**\n     * @en Persist data to [[IStorage]].\n     * @ja [[IStorage]] ã«ãã¼ã¿ãæ°¸ç¶å\n     */\n    public async save(options?: RegistrySaveOptions): Promise<void> {\n        const opts: RegistrySaveOptions = { ...this._defaultOptions, ...options };\n        if (!opts.silent) {\n            this.publish('will-save');\n        }\n        await this._storage.setItem(this._rootKey, this._store, opts);\n    }\n\n    /**\n     * @en Read registry value.\n     * @ja ã¬ã¸ã¹ããªå¤ã®èª­ã¿åã\n     *\n     * @param key\n     *  - `en` target registry key.\n     *  - `ja` å¯¾è±¡ã®ã¬ã¸ã¹ããªã­ã¼ãæå®\n     * @param options\n     *  - `en` read options.\n     *  - `ja` èª­ã¿åããªãã·ã§ã³ãæå®\n     */\n    public read<K extends keyof T>(key: K, options?: RegistryReadOptions): T[K] | null {\n        const { field } = options || {};\n        const structure = String(key).split('/');\n        const lastKey = structure.pop() as string;\n\n        let name: string | undefined;\n        let reg = this.targetRoot(field);\n\n        while (name = structure.shift()) { // eslint-disable-line no-cond-assign\n            if (!(name in reg)) {\n                return null;\n            }\n            reg = reg[name] as StorageData;\n        }\n\n        // return deep copy\n        return (null != reg[lastKey]) ? deepCopy(reg[lastKey]) as any : null;\n    }\n\n    /**\n     * @en Write registry value.\n     * @ja ã¬ã¸ã¹ããªå¤ã®æ¸ãè¾¼ã¿\n     *\n     * @param key\n     *  - `en` target registry key.\n     *  - `ja` å¯¾è±¡ã®ã¬ã¸ã¹ããªã­ã¼ãæå®\n     * @param value\n     *  - `en` update value. if `null` set to delete.\n     *  - `ja` æ´æ°ããå¤. `null` ã¯åé¤\n     * @param options\n     *  - `en` write options.\n     *  - `ja` æ¸ãè¾¼ã¿ãªãã·ã§ã³ãæå®\n     */\n    public write<K extends keyof T>(key: K, value: T[K] | null, options?: RegistryWriteOptions): void {\n        const { field, noSave, silent } = options || {};\n        const remove = (null == value);\n        const structure = String(key).split('/');\n        const lastKey = structure.pop() as string;\n\n        let name: string | undefined;\n        let reg = this.targetRoot(field);\n\n        while (name = structure.shift()) { // eslint-disable-line no-cond-assign\n            if (name in reg) {\n                reg = reg[name] as StorageData;\n            } else if (remove) {\n                return; // ãã§ã«è¦ªã­ã¼ããªãããä½ãããªã\n            } else {\n                reg = reg[name] = {};\n            }\n        }\n\n        const newVal = remove ? null : value;\n        const oldVal = dropUndefined(reg[lastKey]);\n        if (deepEqual(oldVal, newVal)) {\n            return; // æ´æ°ãªã\n        } else if (remove) {\n            delete reg[lastKey];\n        } else {\n            reg[lastKey] = deepCopy(newVal) as any;\n        }\n\n        if (!noSave) {\n            // no fire notification\n            void this._storage.setItem(this._rootKey, this._store, { ...this._defaultOptions, ...options });\n        }\n\n        if (!silent) {\n            void post(() => this.publish('change', key, newVal, oldVal as any));\n        }\n    }\n\n    /**\n     * @en Delete registry key.\n     * @ja ã¬ã¸ã¹ããªã­ã¼ã®åé¤\n     *\n     * @param key\n     *  - `en` target registry key.\n     *  - `ja` å¯¾è±¡ã®ã¬ã¸ã¹ããªã­ã¼ãæå®\n     * @param options\n     *  - `en` read options.\n     *  - `ja` æ¸ãè¾¼ã¿ãªãã·ã§ã³ãæå®\n     */\n    public delete<K extends keyof T>(key: K, options?: RegistryWriteOptions): void {\n        this.write(key, null, options);\n    }\n\n    /**\n     * @en Clear all registry.\n     * @ja ã¬ã¸ã¹ããªã®å¨åé¤\n     *\n     * @param options\n     *  - `en` read options.\n     *  - `ja` æ¸ãè¾¼ã¿ãªãã·ã§ã³ãæå®\n     */\n    public clear(options?: RegistryWriteOptions): void {\n        options = options || {};\n        this._store = {};\n        void this._storage.removeItem(this._rootKey, options);\n        if (!options.silent) {\n            this.publish('change', null, null, null);\n        }\n    }\n\n///////////////////////////////////////////////////////////////////////\n// private methods:\n\n    /** @internal get root object */\n    private targetRoot(field?: string): StorageData {\n        if (field) {\n            // ensure [field] object.\n            this._store[field] = this._store[field] || {};\n            return this._store[field] as StorageData;\n        } else {\n            return this._store;\n        }\n    }\n}\n","import { Subscription, EventBroker } from '@cdp/events';\nimport { _internal } from './internal';\n\n/**\n * @en Event observation state definition.\n * @ja ã¤ãã³ãè³¼èª­ç¶æå®ç¾©\n */\nexport const enum ObservableState {\n    /** observable ready */\n    ACTIVE   = 'active',\n    /** NOT observed, but property changes are recorded. */\n    SUSEPNDED = 'suspended',\n    /** NOT observed, and not recording property changes. */\n    DISABLED = 'disabled',\n}\n\n/**\n * @en Observable common interface.\n * @ja Observable å±éã¤ã³ã¿ã¼ãã§ã¤ã¹\n */\nexport interface IObservable {\n    /**\n     * @en Subscrive event(s).\n     * @ja ã¤ãã³ãè³¼èª­è¨­å®\n     */\n    on(...args: unknown[]): Subscription;\n\n    /**\n     * @en Unsubscribe event(s).\n     * @ja ã¤ãã³ãè³¼èª­è§£é¤\n     */\n    off(...args: unknown[]): void;\n\n    /**\n     * @en Suspend or disable the event observation state.\n     * @ja ã¤ãã³ãè³¼èª­ç¶æã®ãµã¹ãã³ã\n     *\n     * @param noRecord\n     *  - `en` `true`: not recording property changes and clear changes. / `false`: property changes are recorded and fired when [[resume]]() callded. (default)\n     *  - `ja` `true`: ãã­ããã£å¤æ´ãè¨é²ãã, ç¾å¨ã®è¨é²ãç ´æ£ / `false`: ãã­ããã£å¤æ´ã¯è¨é²ãã, [[resume]]() æã«çºç«ãã (æ¢å®)\n     */\n    suspend(noRecord?: boolean): this;\n\n    /**\n     * @en Resume the event observation state.\n     * @ja ã¤ãã³ãè³¼èª­ç¶æã®ãªã¸ã¥ã¼ã \n     */\n    resume(): this;\n\n    /**\n     * @en observation state\n     * @ja è³¼èª­å¯è½ç¶æ\n     */\n    getObservableState(): ObservableState;\n}\n\n/**\n * @en Interface able to access to [[EventBroker]] with [[IObservable]].\n * @ja [[IObservable]] ã®æã¤åé¨ [[EventBroker]] ã«ã¢ã¯ã»ã¹å¯è½ãªã¤ã³ã¿ã¼ãã§ã¤ã¹\n */\nexport interface IObservableEventBrokerAccess<T extends object = any> extends IObservable { // eslint-disable-line @typescript-eslint/no-explicit-any\n    /**\n     * @en Get [[EventBroker]] instance.\n     * @ja [[EventBroker]] ã¤ã³ã¹ã¿ã³ã¹ã®åå¾\n     */\n    getBroker(): EventBroker<T>;\n}\n\n/**\n * @en Check the value-type is [[IObservable]].\n * @ja [[IObservable]] åã§ãããå¤å®\n *\n * @param x\n *  - `en` evaluated value\n *  - `ja` è©ä¾¡ããå¤\n */\nexport function isObservable(x: unknown): x is IObservable {\n    return Boolean(x && (x as object)[_internal]);\n}\n"]}