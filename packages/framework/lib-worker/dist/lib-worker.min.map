{"version":3,"names":["btoa","safe","globalThis","atob","Blob","FileReader","URL","Base64","encode","src","unescape","encodeURIComponent","decode","encoded","decodeURIComponent","escape","exec","methodName","args","options","cancel","token","onprogress","verify","CancelToken","Promise","resolve","reject","reader","subscription","register","abort","onabort","onerror","error","onload","result","onloadend","unsubscribe","readAsArrayBuffer","blob","readAsDataURL","readAsText","encoding","undefined","queryDataURLContext","dataURL","context","base64","Error","mimeType","test","data","binaryStringToBinary","bytes","array","split","map","c","charCodeAt","Uint8Array","toBinaryString","text","fromBinaryString","blobToDataURL","bufferToDataURL","buffer","binaryToDataURL","binaryToBlob","binary","type","binaryToBase64","binaryToText","binaryToBinaryString","Array","prototype","call","i","String","fromCharCode","join","base64ToBlob","base64ToBinary","textToBlob","textToBinary","textToBase64","dataURLToBlob","dataURLToBuffer","dataURLToBinary","dataURLToBase64","_blobMap","WeakMap","_urlSet","Set","RESULT_CODE","CDP_DECLARE","DECLARE_ERROR_CODE","FormData","Headers","AbortController","URLSearchParams","XMLHttpRequest","fetch","ensureParamValue","prop","value","isFunction","toQueryStrings","params","key","Object","keys","push","toAjaxParams","assignValue","convertUrlParamType","isNumeric","Number","_execGetDefault","target","bind","_subscribableMethods","toAjaxDataStream","seed","length","loaded","stream","total","size","Math","trunc","NaN","_eventSource","EventSource","_proxyReaderHandler","get","promise","read","done","chunk","trigger","freeze","computable","isNaN","Proxy","getReader","includes","_timeout","settings","timeout","isNumber","_acceptHeaderMap","json","setupHeaders","headers","method","contentType","dataType","mode","body","username","password","delete","set","async","ajax","url","controller","opts","assign","signal","originalToken","requested","reason","source","setTimeout","makeResult","ERROR_AJAX_TIMEOUT","toUpperCase","response","ok","ERROR_AJAX_RESPONSE","statusText","ensureDataType","post","resource","xhr","open","forEach","setRequestHeader","send","status","JSON","parse","Worker","InlineWorker","_context","constructor","createWorkerContext","isString","TypeError","className","createObjectURL","toString","super","this","terminate","revokeObjectURL","BlobURL","create","blobs","b","cache","add","clear","has","revoke","base64ToBuffer","base64ToDataURL","base64ToText","binaryToBuffer","blobToBase64","blobToBinary","blobToBuffer","blobToText","bufferToBase64","bufferToBinary","bufferToBlob","bufferToText","dataURLToText","deserialize","cc","restoreNullish","toTypedData","fromTypedData","Boolean","fromHexString","hex","x","match","byte","parseInt","query","serialize","ArrayBuffer","textToBuffer","textToDataURL","thread","executor","worker","ev","preventDefault","onmessage","postMessage","toHexString","reduce","str","padStart"],"sources":["cdp:///@cdp/lib-worker/binary/ssr.ts","cdp:///@cdp/lib-worker/binary/base64.ts","cdp:///@cdp/lib-worker/binary/blob-reader.ts","cdp:///@cdp/lib-worker/binary/converter.ts","cdp:///@cdp/lib-worker/binary/blob-url.ts","cdp:///@cdp/lib-worker/ajax/result-code-defs.ts","cdp:///@cdp/lib-worker/ajax/ssr.ts","cdp:///@cdp/lib-worker/ajax/params.ts","cdp:///@cdp/lib-worker/ajax/stream.ts","cdp:///@cdp/lib-worker/ajax/settings.ts","cdp:///@cdp/lib-worker/ajax/core.ts","cdp:///@cdp/lib-worker/ajax/request.ts","cdp:///@cdp/lib-worker/inline-worker/inine-worker.ts","cdp:///@cdp/lib-worker/inline-worker/thread.ts"],"sourcesContent":["import { safe } from '@cdp/core-utils';\n\n/** @internal */ export const btoa       = safe(globalThis.btoa);\n/** @internal */ export const atob       = safe(globalThis.atob);\n/** @internal */ export const Blob       = safe(globalThis.Blob);\n/** @internal */ export const FileReader = safe(globalThis.FileReader);\n/** @internal */ export const URL        = safe(globalThis.URL);\n","import { atob, btoa } from './ssr';\n\n/**\n * @en `base64` utility for independent charactor code.\n * @ja 文字コードに依存しない `base64` ユーティリティ\n */\nexport class Base64 {\n    /**\n     * @en Encode a base-64 encoded string from a binary string.\n     * @ja 文字列を base64 形式でエンコード\n     */\n    public static encode(src: string): string {\n        return btoa(unescape(encodeURIComponent(src)));\n    }\n\n    /**\n     * @en Decodes a string of data which has been encoded using base-64 encoding.\n     * @ja base64 形式でエンコードされたデータの文字列をデコード\n     */\n    public static decode(encoded: string): string {\n        return decodeURIComponent(escape(atob(encoded)));\n    }\n}\n","import { UnknownFunction, verify } from '@cdp/core-utils';\nimport { CancelToken, Cancelable } from '@cdp/promise';\nimport { FileReader } from './ssr';\n\n/** @internal */\ninterface FileReaderArgsMap {\n    readAsArrayBuffer: [Blob];\n    readAsDataURL: [Blob];\n    readAsText: [Blob, string | undefined];\n}\n\n/** @internal */\ninterface FileReaderResultMap {\n    readAsArrayBuffer: ArrayBuffer;\n    readAsDataURL: string;\n    readAsText: string;\n}\n\n/**\n * @en `Blob` read options\n * @ja `Blob` 読み取りオプション\n */\nexport interface BlobReadOptions extends Cancelable {\n    /**\n     * @en Progress callback function.\n     * @ja 進捗コールバック関数\n     *\n     * @param progress\n     *  - `en` worker progress event\n     *  - `ja` worker 進捗イベント\n     */\n    onprogress?: (progress: ProgressEvent) => unknown;\n}\n\n/** @internal execute read blob */\nfunction exec<T extends keyof FileReaderResultMap>(\n    methodName: T,\n    args: FileReaderArgsMap[T],\n    options: BlobReadOptions,\n): Promise<FileReaderResultMap[T]> {\n    type TResult = FileReaderResultMap[T];\n    const { cancel: token, onprogress } = options;\n    token && verify('instanceOf', CancelToken, token);\n    onprogress && verify('typeOf', 'function', onprogress);\n    return new Promise<TResult>((resolve, reject) => {\n        const reader = new FileReader();\n        const subscription = token?.register(() => {\n            reader.abort();\n        });\n        reader.onabort = reader.onerror = () => {\n            reject(reader.error);\n        };\n        reader.onprogress = onprogress!;\n        reader.onload = () => {\n            resolve(reader.result as TResult);\n        };\n        reader.onloadend = () => {\n            subscription && subscription.unsubscribe();\n        };\n        (reader[methodName] as UnknownFunction)(...args);\n    }, token);\n}\n\n/**\n * @en Get the `ArrayBuffer` result from `Blob` or `File`.\n * @ja `Blob` または `File` から `ArrayBuffer` を取得\n *\n * @param blob\n *  - `en` specified reading target object.\n *  - `ja` 読み取り対象のオブジェクトを指定\n * @param options\n *  - `en` reading options.\n *  - `ja` 読み取りオプションを指定\n */\nexport function readAsArrayBuffer(blob: Blob, options?: BlobReadOptions): Promise<ArrayBuffer> {\n    return exec('readAsArrayBuffer', [blob], { ...options });\n}\n\n/**\n * @en Get the data-URL string from `Blob` or `File`.\n * @ja `Blob` または `File` から `data-url 文字列を取得\n *\n * @param blob\n *  - `en` specified reading target object.\n *  - `ja` 読み取り対象のオブジェクトを指定\n * @param options\n *  - `en` reading options.\n *  - `ja` 読み取りオプションを指定\n */\nexport function readAsDataURL(blob: Blob, options?: BlobReadOptions): Promise<string> {\n    return exec('readAsDataURL', [blob], { ...options });\n}\n\n/**\n * @en Get the text content string from `Blob` or `File`.\n * @ja `Blob` または `File` からテキスト文字列を取得\n *\n * @param blob\n *  - `en` specified reading target object.\n *  - `ja` 読み取り対象のオブジェクトを指定\n * @param encoding\n *  - `en` encoding string to use for the returned data. default: `utf-8`\n *  - `ja` エンコーディングを指定する文字列 既定: `utf-8`\n * @param options\n *  - `en` reading options.\n *  - `ja` 読み取りオプションを指定\n */\nexport function readAsText(blob: Blob, encoding?: string | null, options?: BlobReadOptions): Promise<string> {\n    return exec('readAsText', [blob, encoding ?? undefined], { ...options });\n}\n","import {\n    Keys,\n    Types,\n    TypeToKey,\n    toTypedData,\n    fromTypedData,\n    restoreNullish,\n} from '@cdp/core-utils';\nimport {\n    Cancelable,\n    checkCanceled as cc,\n} from '@cdp/promise';\nimport { Base64 } from './base64';\nimport {\n    BlobReadOptions,\n    readAsArrayBuffer,\n    readAsDataURL,\n    readAsText,\n} from './blob-reader';\nimport { Blob } from './ssr';\n\n/** @internal */\nconst enum MimeType {\n    BINARY = 'application/octet-stream',\n    TEXT = 'text/plain',\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal data-URL 属性 */\ninterface DataURLContext {\n    mimeType: string;\n    base64: boolean;\n    data: string;\n}\n\n/**\n * @internal\n * data URI 形式の正規表現\n * 参考: https://developer.mozilla.org/ja/docs/data_URIs\n */\nfunction queryDataURLContext(dataURL: string): DataURLContext {\n    const context = { base64: false } as DataURLContext;\n\n    /**\n     * [match] 1: mime-type\n     *         2: \";base64\" を含むオプション\n     *         3: data 本体\n     */\n    const result = /^data:(.+?\\/.+?)?(;.+?)?,(.*)$/.exec(dataURL);\n    if (null == result) {\n        throw new Error(`Invalid data-URL: ${dataURL}`);\n    }\n\n    context.mimeType = result[1];\n    context.base64 = /;base64/.test(result[2]); // eslint-disable-line @typescript-eslint/prefer-includes\n    context.data = result[3];\n\n    return context;\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal helper */\nfunction binaryStringToBinary(bytes: string): Uint8Array {\n    const array = bytes.split('').map(c => c.charCodeAt(0));\n    return new Uint8Array(array);\n}\n\n/** @internal helper */\nfunction binaryToBinaryString(binary: Uint8Array): string {\n    return Array.prototype.map.call(binary, (i: number) => String.fromCharCode(i)).join('');\n}\n\n/**\n * @en Convert string to binary-string. (not human readable string)\n * @ja バイナリ文字列に変換\n *\n * @param text\n */\nexport function toBinaryString(text: string): string {\n    return unescape(encodeURIComponent(text));\n}\n\n/**\n * @en Convert string from binary-string.\n * @ja バイナリ文字列から変換\n *\n * @param bytes\n */\nexport function fromBinaryString(bytes: string): string {\n    return decodeURIComponent(escape(bytes));\n}\n\n/**\n * @en Convert binary to hex-string.\n * @ja バイナリを HEX 文字列に変換\n *\n * @param hex\n */\nexport function fromHexString(hex: string): Uint8Array {\n    const x = hex.match(/.{1,2}/g);\n    return new Uint8Array(null != x ? x.map(byte => parseInt(byte, 16)) : []);\n}\n\n/**\n * @en Convert string from hex-string.\n * @ja HEX 文字列からバイナリに変換\n *\n * @param binary\n */\nexport function toHexString(binary: Uint8Array): string {\n    return binary.reduce((str, byte) => str + byte.toString(16).toUpperCase().padStart(2, '0'), '');\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert `Blob` to `ArrayBuffer`.\n * @ja `Blob` から `ArrayBuffer` へ変換\n *\n * @param blob\n *  - `en` `Blob` instance\n *  - `ja` `Blob` インスタンスを指定\n * @param options\n */\nexport function blobToBuffer(blob: Blob, options?: BlobReadOptions): Promise<ArrayBuffer> {\n    return readAsArrayBuffer(blob, options);\n}\n\n/**\n * @en Convert `Blob` to `Uint8Array`.\n * @ja `Blob` から `Uint8Array` へ変換\n *\n * @param blob\n *  - `en` `Blob` instance\n *  - `ja` `Blob` インスタンスを指定\n * @param options\n */\nexport async function blobToBinary(blob: Blob, options?: BlobReadOptions): Promise<Uint8Array> {\n    return new Uint8Array(await readAsArrayBuffer(blob, options));\n}\n\n/**\n * @en Convert `Blob` to data-URL string.\n * @ja `Blob` から data-URL 文字列へ変換\n *\n * @param blob\n *  - `en` `Blob` instance\n *  - `ja` `Blob` インスタンスを指定\n * @param options\n */\nexport function blobToDataURL(blob: Blob, options?: BlobReadOptions): Promise<string> {\n    return readAsDataURL(blob, options);\n}\n\n/**\n * @en Convert `Blob` to text string.\n * @ja `Blob` からテキストへ変換\n *\n * @param blob\n *  - `en` `Blob` instance\n *  - `ja` `Blob` インスタンスを指定\n * @param options\n */\nexport function blobToText(blob: Blob, options?: BlobReadOptions & { encoding?: string | null; }): Promise<string> {\n    const opts = options ?? {};\n    const { encoding } = opts;\n    return readAsText(blob, encoding, opts);\n}\n\n/**\n * @en Convert `Blob` to Base64 string.\n * @ja `Blob` から Base64 文字列へ変換\n *\n * @param blob\n *  - `en` `Blob` instance\n *  - `ja` `Blob` インスタンスを指定\n * @param options\n */\nexport async function blobToBase64(blob: Blob, options?: BlobReadOptions): Promise<string> {\n    return queryDataURLContext(await readAsDataURL(blob, options)).data;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert `ArrayBuffer` to `Blob`.\n * @ja `ArrayBuffer` から `Blob` に変換\n *\n * @param buffer\n *  - `en` `ArrayBuffer` instance\n *  - `ja` `ArrayBuffer` インスタンスを指定\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type 文字列\n */\nexport function bufferToBlob(buffer: ArrayBuffer, mimeType: string = MimeType.BINARY): Blob {\n    return new Blob([buffer], { type: mimeType });\n}\n\n/**\n * @en Convert `ArrayBuffer` to `Uint8Array`.\n * @ja `ArrayBuffer` から `Uint8Array` に変換\n *\n * @param buffer\n *  - `en` `ArrayBuffer` instance\n *  - `ja` `ArrayBuffer` インスタンスを指定\n */\nexport function bufferToBinary(buffer: ArrayBuffer): Uint8Array {\n    return new Uint8Array(buffer);\n}\n\n/**\n * @en Convert `ArrayBuffer` to data-URL string.\n * @ja `ArrayBuffer` から data-URL 文字列に変換\n *\n * @param buffer\n *  - `en` `ArrayBuffer` instance\n *  - `ja` `ArrayBuffer` インスタンスを指定\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type 文字列\n */\nexport function bufferToDataURL(buffer: ArrayBuffer, mimeType: string = MimeType.BINARY): string {\n    return binaryToDataURL(new Uint8Array(buffer), mimeType);\n}\n\n/**\n * @en Convert `ArrayBuffer` to Base64 string.\n * @ja `ArrayBuffer` から Base64 文字列に変換\n *\n * @param buffer\n *  - `en` `ArrayBuffer` instance\n *  - `ja` `ArrayBuffer` インスタンスを指定\n */\nexport function bufferToBase64(buffer: ArrayBuffer): string {\n    return binaryToBase64(new Uint8Array(buffer));\n}\n\n/**\n * @en Convert `ArrayBuffer` to text string.\n * @ja `ArrayBuffer` からテキストに変換\n *\n * @param buffer\n *  - `en` `ArrayBuffer` instance\n *  - `ja` `ArrayBuffer` インスタンスを指定\n */\nexport function bufferToText(buffer: ArrayBuffer): string {\n    return binaryToText(new Uint8Array(buffer));\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert `Uint8Array` to `Blob`.\n * @ja `Uint8Array` から `Blob` に変換\n *\n * @param binary\n *  - `en` `Uint8Array` instance\n *  - `ja` `Uint8Array` インスタンスを指定\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type 文字列\n */\nexport function binaryToBlob(binary: Uint8Array, mimeType: string = MimeType.BINARY): Blob {\n    return new Blob([binary], { type: mimeType });\n}\n\n/**\n * @en Convert `Uint8Array` to `ArrayBuffer`.\n * @ja `Uint8Array` から `ArrayBuffer` に変換\n *\n * @param binary\n *  - `en` `Uint8Array` instance\n *  - `ja` `Uint8Array` インスタンスを指定\n */\nexport function binaryToBuffer(binary: Uint8Array): ArrayBuffer {\n    return binary.buffer;\n}\n\n/**\n * @en Convert `Uint8Array` to data-URL string.\n * @ja `Uint8Array` から data-URL 文字列に変換\n *\n * @param binary\n *  - `en` `Uint8Array` instance\n *  - `ja` `Uint8Array` インスタンスを指定\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type 文字列\n */\nexport function binaryToDataURL(binary: Uint8Array, mimeType: string = MimeType.BINARY): string {\n    return `data:${mimeType};base64,${binaryToBase64(binary)}`;\n}\n\n/**\n * @en Convert `Uint8Array` to Base64 string.\n * @ja `Uint8Array` から Base64 文字列に変換\n *\n * @param binary\n *  - `en` `Uint8Array` instance\n *  - `ja` `Uint8Array` インスタンスを指定\n */\nexport function binaryToBase64(binary: Uint8Array): string {\n    return Base64.encode(binaryToText(binary));\n}\n\n/**\n * @en Convert `Uint8Array` to text string.\n * @ja `Uint8Array` から テキストに変換\n *\n * @param binary\n *  - `en` `Uint8Array` instance\n *  - `ja` `Uint8Array` インスタンスを指定\n */\nexport function binaryToText(binary: Uint8Array): string {\n    return fromBinaryString(binaryToBinaryString(binary));\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert Base64 string to `Blob`.\n * @ja Base64 文字列から `Blob` に変換\n *\n * @param base64\n *  - `en` Base64 string data\n *  - `ja` Base64 文字列\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type 文字列\n */\nexport function base64ToBlob(base64: string, mimeType: string = MimeType.BINARY): Blob {\n    return binaryToBlob(base64ToBinary(base64), mimeType);\n}\n\n/**\n * @en Convert Base64 string to `ArrayBuffer`.\n * @ja Base64 文字列から `ArrayBuffer` に変換\n *\n * @param base64\n *  - `en` Base64 string data\n *  - `ja` Base64 文字列\n */\nexport function base64ToBuffer(base64: string): ArrayBuffer {\n    return base64ToBinary(base64).buffer;\n}\n\n/**\n * @en Convert Base64 string to `Uint8Array`.\n * @ja Base64 文字列から `Uint8Array` に変換\n *\n * @param base64\n *  - `en` Base64 string data\n *  - `ja` Base64 文字列\n */\nexport function base64ToBinary(base64: string): Uint8Array {\n    return binaryStringToBinary(toBinaryString(Base64.decode(base64)));\n}\n\n/**\n * @en Convert Base64 string to data-URL string.\n * @ja Base64 文字列から data-URL 文字列に変換\n *\n * @param base64\n *  - `en` Base64 string data\n *  - `ja` Base64 文字列\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type 文字列\n */\nexport function base64ToDataURL(base64: string, mimeType: string = MimeType.BINARY): string {\n    return `data:${mimeType};base64,${base64}`;\n}\n\n/**\n * @en Convert Base64 string to text string.\n * @ja  Base64 文字列から テキストに変換\n *\n * @param base64\n *  - `en` Base64 string data\n *  - `ja` Base64 文字列\n */\nexport function base64ToText(base64: string): string {\n    return Base64.decode(base64);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert text string to `Blob`.\n * @ja テキストから `Blob` に変換\n *\n * @param text\n *  - `en` text string data\n *  - `ja` テキスト文字列\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type 文字列\n */\nexport function textToBlob(text: string, mimeType: string = MimeType.TEXT): Blob {\n    return new Blob([text], { type: mimeType });\n}\n\n/**\n * @en Convert text string to `ArrayBuffer`.\n * @ja テキストから `ArrayBuffer` に変換\n *\n * @param text\n *  - `en` text string data\n *  - `ja` テキスト文字列\n */\nexport function textToBuffer(text: string): ArrayBuffer {\n    return textToBinary(text).buffer;\n}\n\n/**\n * @en Convert text string to `Uint8Array`.\n * @ja テキストから `Uint8Array` に変換\n *\n * @param text\n *  - `en` text string data\n *  - `ja` テキスト文字列\n */\nexport function textToBinary(text: string): Uint8Array {\n    return binaryStringToBinary(toBinaryString(text));\n}\n\n/**\n * @en Convert text string to data-URL string.\n * @ja テキストから data-URL 文字列に変換\n *\n * @param text\n *  - `en` text string data\n *  - `ja` テキスト文字列\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type 文字列\n */\nexport function textToDataURL(text: string, mimeType: string = MimeType.TEXT): string {\n    const base64 = textToBase64(text);\n    return `data:${mimeType};base64,${base64}`;\n}\n\n/**\n * @en Convert text string to Base64 string.\n * @ja テキストから Base64 文字列に変換\n *\n * @param text\n *  - `en` text string data\n *  - `ja` テキスト文字列\n */\nexport function textToBase64(text: string): string {\n    return Base64.encode(text);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert data-URL string to `Blob`.\n * @ja data-URL 文字列から `Blob` に変換\n *\n * @param dataURL\n *  - `en` data-URL string data\n *  - `ja` data-URL 文字列\n */\nexport function dataURLToBlob(dataURL: string): Blob {\n    const context = queryDataURLContext(dataURL);\n    if (context.base64) {\n        return base64ToBlob(context.data, context.mimeType || MimeType.BINARY);\n    } else {\n        return textToBlob(decodeURIComponent(context.data), context.mimeType || MimeType.TEXT);\n    }\n}\n\n/**\n * @en Convert data-URL string to `ArrayBuffer`.\n * @ja data-URL 文字列から `ArrayBuffer` に変換\n *\n * @param dataURL\n *  - `en` data-URL string data\n *  - `ja` data-URL 文字列\n */\nexport function dataURLToBuffer(dataURL: string): ArrayBuffer {\n    return dataURLToBinary(dataURL).buffer;\n}\n\n/**\n * @en Convert data-URL string to `Uint8Array`.\n * @ja data-URL 文字列から `Uint8Array` に変換\n *\n * @param dataURL\n *  - `en` data-URL string data\n *  - `ja` data-URL 文字列\n */\nexport function dataURLToBinary(dataURL: string): Uint8Array {\n    return base64ToBinary(dataURLToBase64(dataURL));\n}\n\n/**\n * @en Convert data-URL string to text string.\n * @ja data-URL 文字列からテキストに変換\n *\n * @param dataURL\n *  - `en` data-URL string data\n *  - `ja` data-URL 文字列\n */\nexport function dataURLToText(dataURL: string): string {\n    return Base64.decode(dataURLToBase64(dataURL));\n}\n\n/**\n * @en Convert data-URL string to Base64 string.\n * @ja data-URL 文字列から Base64 文字列に変換\n *\n * @param dataURL\n *  - `en` data-URL string data\n *  - `ja` data-URL 文字列\n */\nexport function dataURLToBase64(dataURL: string): string {\n    const context = queryDataURLContext(dataURL);\n    if (context.base64) {\n        return context.data;\n    } else {\n        return Base64.encode(decodeURIComponent(context.data));\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Serializable data type list.\n * @ja シリアライズ可能なデータ型一覧\n */\nexport interface Serializable {\n    string: string;\n    number: number;\n    boolean: boolean;\n    object: object;\n    buffer: ArrayBuffer;\n    binary: Uint8Array;\n    blob: Blob;\n}\n\nexport type SerializableDataTypes = Types<Serializable>;\nexport type SerializableInputDataTypes = SerializableDataTypes | null | undefined;\nexport type SerializableKeys = Keys<Serializable>;\nexport type SerializableCastable = Omit<Serializable, 'buffer' | 'binary' | 'blob'>;\nexport type SerializableCastableTypes = Types<SerializableCastable>;\nexport type SerializableReturnType<T extends SerializableCastableTypes> = TypeToKey<SerializableCastable, T> extends never ? never : T | null | undefined;\n\n/**\n * @en Deserializable options interface.\n * @ja デシリアライズに使用するオプション\n */\nexport interface DeserializeOptions<T extends Serializable = Serializable, K extends Keys<T> = Keys<T>> extends Cancelable {\n    /** {@link SerializableKeys} */\n    dataType?: K;\n}\n\n/**\n * @en Serialize data.\n * @ja データシリアライズ\n *\n * @param data input\n * @param options blob convert options\n */\nexport async function serialize<T extends SerializableInputDataTypes>(data: T, options?: BlobReadOptions): Promise<string> {\n    const { cancel } = options ?? {};\n    await cc(cancel);\n    if (null == data) {\n        return String(data);\n    } else if (data instanceof ArrayBuffer) {\n        return bufferToDataURL(data);\n    } else if (data instanceof Uint8Array) {\n        return binaryToDataURL(data);\n    } else if (data instanceof Blob) {\n        return blobToDataURL(data, options);\n    } else {\n        return fromTypedData(data)!;\n    }\n}\n\n/**\n * @en Deserialize data.\n * @ja データの復元\n *\n * @param value input string or undefined.\n * @param options deserialize options\n */\nexport function deserialize<T extends SerializableCastableTypes = SerializableCastableTypes>(\n    value: string | undefined, options?: DeserializeOptions<Serializable, never>\n): Promise<SerializableReturnType<T>>;\n\n/**\n * @en Deserialize data.\n * @ja データの復元\n *\n * @param value input string or undefined.\n * @param options deserialize options\n */\nexport function deserialize<T extends SerializableKeys>(value: string | undefined, options: DeserializeOptions<Serializable, T>): Promise<Serializable[T] | null | undefined>;\n\nexport async function deserialize(value: string | undefined, options?: DeserializeOptions): Promise<SerializableDataTypes | null | undefined> {\n    const { dataType, cancel } = options ?? {};\n    await cc(cancel);\n\n    const data = restoreNullish(toTypedData(value));\n    switch (dataType) {\n        case 'string':\n            return fromTypedData(data);\n        case 'number':\n            return Number(data);\n        case 'boolean':\n            return Boolean(data);\n        case 'object':\n            return Object(data);\n        case 'buffer':\n            return dataURLToBuffer(fromTypedData(data)!);\n        case 'binary':\n            return dataURLToBinary(fromTypedData(data)!);\n        case 'blob':\n            return dataURLToBlob(fromTypedData(data)!);\n        default:\n            return data;\n    }\n}\n","import { URL } from './ssr';\n\n/** @internal */ const _blobMap = new WeakMap<Blob, string>();\n/** @internal */ const _urlSet  = new Set<string>();\n\n/**\n * @en `Blob URL` utility for automatic memory manegement.\n * @ja メモリ自動管理を行う `Blob URL` ユーティリティ\n */\nexport class BlobURL {\n    /**\n     * @en Create `Blob URL` from instances.\n     * @ja インスタンスを指定して `Blob URL` の構築\n     */\n    public static create(...blobs: Blob[]): void {\n        for (const b of blobs) {\n            const cache = _blobMap.get(b);\n            if (cache) {\n                continue;\n            }\n            const url = URL.createObjectURL(b);\n            _blobMap.set(b, url);\n            _urlSet.add(url);\n        }\n    }\n\n    /**\n     * @en Clear all `Blob URL` cache.\n     * @ja すべての `Blob URL` キャッシュを破棄\n     */\n    public static clear(): void {\n        for (const url of _urlSet) {\n            URL.revokeObjectURL(url);\n        }\n        _urlSet.clear();\n    }\n\n    /**\n     * @en Get `Blob URL` from instance.\n     * @ja インスタンスを指定して `Blob URL` の取得\n     */\n    public static get(blob: Blob): string {\n        const cache = _blobMap.get(blob);\n        if (cache) {\n            return cache;\n        }\n        const url = URL.createObjectURL(blob);\n        _blobMap.set(blob, url);\n        _urlSet.add(url);\n        return url;\n    }\n\n    /**\n     * @en Check `Blob URL` is available from instance.\n     * @ja インスタンスを指定して `Blob URL` が有効化判定\n     */\n    public static has(blob: Blob): boolean {\n        return _blobMap.has(blob);\n    }\n\n    /**\n     * @en Revoke `Blob URL` from instances.\n     * @ja インスタンスを指定して `Blob URL` を無効化\n     */\n    public static revoke(...blobs: Blob[]): void {\n        for (const b of blobs) {\n            const url = _blobMap.get(b);\n            if (url) {\n                URL.revokeObjectURL(url);\n                _blobMap.delete(b);\n                _urlSet.delete(url);\n            }\n        }\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-namespace,\n    @typescript-eslint/no-unused-vars,\n */\n\nnamespace CDP_DECLARE {\n\n    const enum LOCAL_CODE_BASE {\n        AJAX = CDP_KNOWN_MODULE.AJAX * LOCAL_CODE_RANGE_GUIDE.FUNCTION,\n    }\n\n    /**\n     * @en Extends error code definitions.\n     * @ja 拡張エラーコード定義\n     */\n    export enum RESULT_CODE {\n        AJAX_DECLARE        = RESULT_CODE_BASE.DECLARE,\n        ERROR_AJAX_RESPONSE = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.AJAX + 1, 'network error.'),\n        ERROR_AJAX_TIMEOUT  = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.AJAX + 2, 'request timeout.'),\n    }\n}\n","import { safe } from '@cdp/core-utils';\n\n/** @internal */ export const FormData        = safe(globalThis.FormData);\n/** @internal */ export const Headers         = safe(globalThis.Headers);\n/** @internal */ export const AbortController = safe(globalThis.AbortController);\n/** @internal */ export const URLSearchParams = safe(globalThis.URLSearchParams);\n/** @internal */ export const XMLHttpRequest  = safe(globalThis.XMLHttpRequest);\n/** @internal */ export const fetch           = safe(globalThis.fetch);\n","import {\n    PlainObject,\n    isFunction,\n    isNumeric,\n    assignValue,\n} from '@cdp/core-utils';\nimport { URLSearchParams } from './ssr';\n\n/** @internal ensure string value */\nconst ensureParamValue = (prop: unknown): string => {\n    const value = isFunction(prop) ? prop() : prop;\n    return undefined !== value ? String(value) : '';\n};\n\n/**\n * @en Convert `PlainObject` to query strings.\n * @ja `PlainObject` をクエリストリングに変換\n */\nexport const toQueryStrings = (data: PlainObject): string => {\n    const params: string[] = [];\n    for (const key of Object.keys(data)) {\n        const value = ensureParamValue(data[key]);\n        if (value) {\n            params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n        }\n    }\n    return params.join('&');\n};\n\n/**\n * @en Convert `PlainObject` to Ajax parameters object.\n * @ja `PlainObject` を Ajax パラメータオブジェクトに変換\n */\nexport const toAjaxParams = (data: PlainObject): Record<string, string> => {\n    const params: Record<string, string> = {};\n    for (const key of Object.keys(data)) {\n        const value = ensureParamValue(data[key]);\n        if (value) {\n            assignValue(params, key, value);\n        }\n    }\n    return params;\n};\n\n/**\n * @en Convert URL parameters to primitive type.\n * @ja URL パラメータを primitive に変換\n */\nexport const convertUrlParamType = (value: string): string | number | boolean | null => {\n    if (isNumeric(value)) {\n        return Number(value);\n    } else if ('true' === value) {\n        return true;\n    } else if ('false' === value) {\n        return false;\n    } else if ('null' === value) {\n        return null;\n    } else {\n        return decodeURIComponent(value);\n    }\n};\n\n/**\n * @en Parse url query GET parameters.\n * @ja URLクエリのGETパラメータを解析\n *\n * @example <br>\n *\n * ```ts\n * const url = '/page/?id=5&foo=bar&bool=true';\n * const query = parseUrlQuery(url);\n * // { id: 5, foo: 'bar', bool: true }\n * ```\n *\n * @returns { key: value } object.\n */\nexport const parseUrlQuery = <T = Record<string, string | number | boolean | null>>(url: string): T => {\n    const query: Record<string, unknown> = {};\n    const params = new URLSearchParams(url.includes('?') ? url.split('?')[1] : url);\n    for (const [key, value] of params) {\n        query[decodeURIComponent(key)] = convertUrlParamType(value);\n    }\n    return query as T;\n};\n","import {\n    UnknownFunction,\n    Accessible,\n    Keys,\n    isFunction,\n} from '@cdp/core-utils';\nimport { Subscribable, EventSource } from '@cdp/events';\nimport type { AjaxDataStreamEvent, AjaxDataStream } from './interfaces';\n\n/** @internal ProxyHandler helper */\nconst _execGetDefault = (target: any, prop: string | symbol): any => { // eslint-disable-line @typescript-eslint/no-explicit-any\n    if (prop in target) {\n        if (isFunction(target[prop])) {\n            return target[prop].bind(target);\n        } else {\n            return target[prop];\n        }\n    }\n};\n\n/** @internal */\nconst _subscribableMethods: Keys<Subscribable>[] = [\n    'hasListener',\n    'channels',\n    'on',\n    'off',\n    'once',\n];\n\nexport const toAjaxDataStream = (seed: Blob | ReadableStream<Uint8Array>, length?: number): AjaxDataStream => {\n    let loaded = 0;\n    const [stream, total] = (() => {\n        if (seed instanceof Blob) {\n            return [seed.stream(), seed.size];\n        } else {\n            return [seed, length != null ? Math.trunc(length) : NaN];\n        }\n    })();\n\n    const _eventSource = new EventSource<AjaxDataStreamEvent>() as Accessible<EventSource<AjaxDataStreamEvent>, UnknownFunction>;\n\n    const _proxyReaderHandler: ProxyHandler<ReadableStreamDefaultReader<Uint8Array>> = {\n        get: (target: ReadableStreamDefaultReader<Uint8Array>, prop: string) => {\n            if ('read' === prop) {\n                const promise = target.read();\n                void (async () => {\n                    const { done, value: chunk } = await promise;\n                    chunk && (loaded += chunk.length);\n                    _eventSource.trigger('progress', Object.freeze({\n                        computable: !Number.isNaN(total),\n                        loaded,\n                        total,\n                        done,\n                        chunk,\n                    }));\n                })();\n                return () => promise;\n            } else {\n                return _execGetDefault(target, prop);\n            }\n        },\n    };\n\n    return new Proxy(stream, {\n        get: (target: ReadableStream<Uint8Array>, prop: string) => {\n            if ('getReader' === prop) {\n                return () => new Proxy(target.getReader(), _proxyReaderHandler);\n            } else if ('length' === prop) {\n                return total;\n            } else if (_subscribableMethods.includes(prop as Keys<Subscribable>)) {\n                return (...args: unknown[]) => _eventSource[prop](...args);\n            } else {\n                return _execGetDefault(target, prop);\n            }\n        },\n    }) as AjaxDataStream;\n};\n","import { isNumber } from '@cdp/core-utils';\n\n/** @internal */ let _timeout: number | undefined;\n\nexport const settings = {\n    get timeout(): number | undefined {\n        return _timeout;\n    },\n    set timeout(value: number | undefined) {\n        _timeout = (isNumber(value) && 0 <= value) ? value : undefined;\n    },\n};\n","import { CancelToken } from '@cdp/promise';\nimport { RESULT_CODE, makeResult } from '@cdp/result';\nimport { Base64 } from '@cdp/binary';\nimport {\n    AjaxDataTypes,\n    AjaxOptions,\n    AjaxResult,\n} from './interfaces';\nimport {\n    FormData,\n    Headers,\n    AbortController,\n    URLSearchParams,\n    fetch,\n} from './ssr';\nimport { toQueryStrings, toAjaxParams } from './params';\nimport { toAjaxDataStream } from './stream';\nimport { settings } from './settings';\n\n/** @internal */\nexport type AjaxHeaderOptions = Pick<AjaxOptions<AjaxDataTypes>, 'headers' | 'method' | 'contentType' | 'dataType' | 'mode' | 'body' | 'username' | 'password'>;\n\n/** @internal */\nconst _acceptHeaderMap: Record<string, string> = {\n    text: 'text/plain, text/html, application/xml; q=0.8, text/xml; q=0.8, */*; q=0.01',\n    json: 'application/json, text/javascript, */*; q=0.01',\n};\n\n/**\n * @en Setup `headers` from options parameter.\n * @ja オプションから `headers` を設定\n *\n * @internal\n */\nexport function setupHeaders(options: AjaxHeaderOptions): Headers {\n    const headers = new Headers(options.headers);\n    const { method, contentType, dataType, mode, body, username, password } = options;\n\n    // Content-Type\n    if ('POST' === method || 'PUT' === method || 'PATCH' === method) {\n        /*\n         * fetch() の場合, FormData を自動解釈するため, 指定がある場合は削除\n         * https://stackoverflow.com/questions/35192841/fetch-post-with-multipart-form-data\n         * https://muffinman.io/uploading-files-using-fetch-multipart-form-data/\n         */\n        if (headers.get('Content-Type') && body instanceof FormData) {\n            headers.delete('Content-Type');\n        } else if (!headers.get('Content-Type')) {\n            if (null == contentType && 'json' === dataType!) {\n                headers.set('Content-Type', 'application/json; charset=UTF-8');\n            } else if (null != contentType) {\n                headers.set('Content-Type', contentType);\n            }\n        }\n    }\n\n    // Accept\n    if (!headers.get('Accept')) {\n        headers.set('Accept', _acceptHeaderMap[dataType!] || '*/*');\n    }\n\n    // X-Requested-With\n    if ('cors' !== mode && !headers.get('X-Requested-With')) {\n        headers.set('X-Requested-With', 'XMLHttpRequest');\n    }\n\n    // Basic Authorization\n    if (null != username && !headers.get('Authorization')) {\n        headers.set('Authorization', `Basic ${Base64.encode(`${username}:${password ?? ''}`)}`);\n    }\n\n    return headers;\n}\n\n/**\n * @en Perform an asynchronous HTTP (Ajax) request.\n * @ja HTTP (Ajax)リクエストの送信\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxリクエストを送信するURLを指定\n * @param options\n *  - `en` Ajax request settings.\n *  - `ja` Ajaxリクエスト設定\n */\nasync function ajax<T extends AjaxDataTypes | object = 'response'>(url: string, options?: AjaxOptions<T>): Promise<AjaxResult<T>> {\n    const controller = new AbortController();\n    const abort = (): void => controller.abort();\n\n    const opts = Object.assign({\n        method: 'GET',\n        dataType: 'response',\n        timeout: settings.timeout,\n    }, options, {\n        signal: controller.signal, // force override\n    });\n\n    const { cancel: originalToken, timeout } = opts;\n\n    // cancellation\n    if (originalToken) {\n        if (originalToken.requested) {\n            throw originalToken.reason;\n        }\n        originalToken.register(abort);\n    }\n\n    const source = CancelToken.source(originalToken!);\n    const { token } = source;\n    token.register(abort);\n\n    // timeout\n    if (timeout) {\n        setTimeout(() => source.cancel(makeResult(RESULT_CODE.ERROR_AJAX_TIMEOUT, 'request timeout')), timeout);\n    }\n\n    // normalize\n    opts.method = opts.method.toUpperCase();\n\n    // header\n    opts.headers = setupHeaders(opts);\n\n    // parse param\n    const { method, data, dataType } = opts;\n    if (null != data) {\n        if (('GET' === method || 'HEAD' === method) && !url.includes('?')) {\n            url += `?${toQueryStrings(data)}`;\n        } else if (null == opts.body) {\n            opts.body = new URLSearchParams(toAjaxParams(data));\n        }\n    }\n\n    // execute\n    const response = await Promise.resolve(fetch(url, opts), token);\n    if ('response' === dataType) {\n        return response as AjaxResult<T>;\n    } else if (!response.ok) {\n        throw makeResult(RESULT_CODE.ERROR_AJAX_RESPONSE, response.statusText, response);\n    } else if ('stream' === dataType) {\n        return toAjaxDataStream(\n            response.body!,\n            Number(response.headers.get('content-length')),\n        ) as AjaxResult<T>;\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        return Promise.resolve(response[dataType as Exclude<AjaxDataTypes, 'response' | 'stream'>](), token);\n    }\n}\n\najax.settings = settings;\n\nexport { ajax };\n","import { PlainObject } from '@cdp/core-utils';\nimport { RESULT_CODE, makeResult } from '@cdp/result';\nimport {\n    AjaxDataTypes,\n    AjaxOptions,\n    AjaxRequestOptions,\n    AjaxGetRequestShortcutOptions,\n    AjaxResult,\n} from './interfaces';\nimport { ajax, setupHeaders } from './core';\nimport { toQueryStrings } from './params';\nimport { XMLHttpRequest } from './ssr';\n\n/** @internal */\nfunction ensureDataType(dataType?: AjaxDataTypes): AjaxDataTypes {\n    return dataType ?? 'json';\n}\n\n/**\n * @en `GET` request shortcut.\n * @ja `GET` リクエストショートカット\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxリクエストを送信するURLを指定\n * @param data\n *  - `en` Data to be sent to the server.\n *  - `ja` サーバーに送信されるデータ.\n * @param dataType\n *  - `en` Data to be sent to the server.\n *  - `ja` サーバーから返される期待するデータの型を指定\n * @param options\n *  - `en` request settings.\n *  - `ja` リクエスト設定\n */\nexport function get<T extends AjaxDataTypes | object = 'json'>(\n    url: string,\n    data?: PlainObject,\n    dataType?: T extends AjaxDataTypes ? T : 'json',\n    options?: AjaxRequestOptions\n): Promise<AjaxResult<T>> {\n    return ajax(url, { ...options, method: 'GET', data, dataType: ensureDataType(dataType) } as AjaxOptions<T>);\n}\n\n/**\n * @en `GET` text request shortcut.\n * @ja `GET` テキストリクエストショートカット\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxリクエストを送信するURLを指定\n * @param options\n *  - `en` request settings.\n *  - `ja` リクエスト設定\n */\nexport function text(url: string, options?: AjaxGetRequestShortcutOptions): Promise<AjaxResult<'text'>> {\n    return get(url, undefined, 'text', options);\n}\n\n/**\n * @en `GET` JSON request shortcut.\n * @ja `GET` JSON リクエストショートカット\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxリクエストを送信するURLを指定\n * @param options\n *  - `en` request settings.\n *  - `ja` リクエスト設定\n */\nexport function json<T extends 'json' | object = 'json'>(url: string, options?: AjaxGetRequestShortcutOptions): Promise<AjaxResult<T>> {\n    return get<T>(url, undefined, ('json' as T extends AjaxDataTypes ? T : 'json'), options);\n}\n\n/**\n * @en `GET` Blob request shortcut.\n * @ja `GET` Blob リクエストショートカット\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxリクエストを送信するURLを指定\n * @param options\n *  - `en` request settings.\n *  - `ja` リクエスト設定\n */\nexport function blob(url: string, options?: AjaxGetRequestShortcutOptions): Promise<AjaxResult<'blob'>> {\n    return get(url, undefined, 'blob', options);\n}\n\n/**\n * @en `POST` request shortcut.\n * @ja `POST` リクエストショートカット\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxリクエストを送信するURLを指定\n * @param data\n *  - `en` Data to be sent to the server.\n *  - `ja` サーバーに送信されるデータ.\n * @param dataType\n *  - `en` The type of data that you're expecting back from the server.\n *  - `ja` Ajaxリクエストを送信するURLを指定\n * @param options\n *  - `en` request settings.\n *  - `ja` リクエスト設定\n */\nexport function post<T extends AjaxDataTypes | object = 'json'>(\n    url: string,\n    data: PlainObject,\n    dataType?: T extends AjaxDataTypes ? T : 'json',\n    options?: AjaxRequestOptions\n): Promise<AjaxResult<T>> {\n    return ajax(url, { ...options, method: 'POST', data, dataType: ensureDataType(dataType) } as AjaxOptions<T>);\n}\n\n/**\n * @en Synchronous `GET` request for resource access. <br>\n *     Many browsers have deprecated synchronous XHR support on the main thread entirely.\n * @ja リソース取得のための 同期 `GET` リクエスト. <br>\n *     多くのブラウザではメインスレッドにおける同期的な XHR の対応を全面的に非推奨としているので積極使用は避けること.\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxリクエストを送信するURLを指定\n * @param dataType\n *  - `en` The type of data that you're expecting back from the server.\n *  - `ja` Ajaxリクエストを送信するURLを指定\n * @param data\n *  - `en` Data to be sent to the server.\n *  - `ja` サーバーに送信されるデータ.\n */\nexport function resource<T extends 'text' | 'json' | object = 'json'>(\n    url: string,\n    dataType?: T extends 'text' | 'json' ? T : 'json',\n    data?: PlainObject,\n): AjaxResult<T> {\n    const xhr = new XMLHttpRequest();\n\n    if (null != data && !url.includes('?')) {\n        url += `?${toQueryStrings(data)}`;\n    }\n\n    // synchronous\n    xhr.open('GET', url, false);\n\n    const type = ensureDataType(dataType);\n    const headers = setupHeaders({ method: 'GET', dataType: type });\n    headers.forEach((value, key) => {\n        xhr.setRequestHeader(key, value);\n    });\n\n    xhr.send(null);\n    if (!(200 <= xhr.status && xhr.status < 300)) {\n        throw makeResult(RESULT_CODE.ERROR_AJAX_RESPONSE, xhr.statusText, xhr);\n    }\n\n    return 'json' === type ? JSON.parse(xhr.response) : xhr.response;\n}\n","import {\n    isFunction,\n    isString,\n    className,\n    safe,\n} from '@cdp/core-utils';\n\n/**\n * @en {@link InlineWorker} source type definition.\n * @ja {@link InlineWorker} に指定可能なソース型定義\n */\nexport type InlienWorkerSource = ((self: Worker) => unknown) | string;\n\n/** @internal */ const URL    = safe(globalThis.URL);\n/** @internal */ const Worker = safe(globalThis.Worker);\n/** @internal */ const Blob   = safe(globalThis.Blob);\n\n/** @internal */\nfunction createWorkerContext(src: InlienWorkerSource): string {\n    if (!(isFunction(src) || isString(src))) {\n        throw new TypeError(`${className(src)} is not a function or string.`);\n    }\n    return URL.createObjectURL(new Blob([isFunction(src) ? `(${src.toString()})(self);` : src], { type: 'application/javascript' }));\n}\n\n/**\n * @en Specified `Worker` class which doesn't require a script file.\n * @ja スクリプトファイルを必要としない `Worker` クラス\n */\nexport class InlineWorker extends Worker {\n    /** @internal */\n    private _context: string;\n\n    /**\n     * constructor\n     *\n     * @param src\n     *  - `en` source function or script body.\n     *  - `ja` 実行関数またはスクリプト実体\n     * @param options\n     *  - `en` worker options.\n     *  - `ja` Worker オプション\n     */\n    constructor(src: InlienWorkerSource, options?: WorkerOptions) {\n        const context = createWorkerContext(src);\n        super(context, options);\n        this._context = context;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// override: Worker\n\n    /**\n     * @en For BLOB release. When calling `close ()` in the Worker, call this method as well.\n     * @ja BLOB 解放用. Worker 内で `close()` を呼ぶ場合, 本メソッドもコールすること.\n     */\n    terminate(): void {\n        super.terminate();\n        URL.revokeObjectURL(this._context);\n    }\n}\n","import { UnknownFunction } from '@cdp/core-utils';\nimport { Cancelable, CancelToken } from '@cdp/promise';\nimport { InlineWorker } from './inine-worker';\n\n/**\n * @en Thread options\n * @en スレッドオプション\n */\nexport interface ThreadOptions<T extends UnknownFunction> extends Cancelable, WorkerOptions {\n    args?: Parameters<T>;\n}\n\n/**\n * @en Ensure execution in worker thread.\n * @ja ワーカースレッド内で実行を保証\n *\n * @example <br>\n *\n * ```ts\n * const exec = (arg1: number, arg2: string) => {\n *    // this scope is worker scope. you cannot use closure access.\n *    const param = {...};\n *    const method = (p) => {...};\n *    // you can access arguments from options.\n *    console.log(arg1); // '1'\n *    console.log(arg2); // 'test'\n *    :\n *    return method(param);\n * };\n *\n * const arg1 = 1;\n * const arg2 = 'test';\n * const result = await thread(exec, { args: [arg1, arg2] });\n * ```\n *\n * @param executor\n *  - `en` implement as function scope.\n *  - `ja` 関数スコープとして実装\n * @param options\n *  - `en` thread options\n *  - `ja` スレッドオプション\n */\nexport function thread<T, U>(executor: (...args: U[]) => T | Promise<T>, options?: ThreadOptions<typeof executor>): Promise<T> {\n    const { cancel: originalToken, args } = Object.assign({ args: [] }, options);\n\n    // already cancel\n    if (originalToken?.requested) {\n        throw originalToken.reason;\n    }\n\n    const exec = `(self => {\n        self.addEventListener('message', async ({ data }) => {\n            try {\n                const result = await (${executor.toString()})(...data);\n                self.postMessage(result);\n            } catch (e) {\n                setTimeout(function() { throw e; });\n            }\n        });\n    })(self);`;\n\n    const worker = new InlineWorker(exec, options);\n\n    const abort = (): void => worker.terminate();\n    originalToken?.register(abort);\n    const { token } = CancelToken.source(originalToken!);\n\n    const promise = new Promise((resolve, reject) => {\n        worker.onerror = ev => {\n            ev.preventDefault();\n            reject(ev);\n            worker.terminate();\n        };\n        worker.onmessage = ev => {\n            resolve(ev.data);\n            worker.terminate();\n        };\n    }, token);\n\n    worker.postMessage(args);\n\n    return promise as Promise<T>;\n}\n"],"mappings":"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"}