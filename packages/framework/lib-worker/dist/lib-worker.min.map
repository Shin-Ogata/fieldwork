{"version":3,"names":["btoa","safe","globalThis","atob","Blob","FileReader","URL","Base64","static","src","unescape","encodeURIComponent","encoded","decodeURIComponent","escape","exec","methodName","args","options","cancel","token","onprogress","verify","CancelToken","Promise","resolve","reject","reader","subscription","register","abort","onabort","onerror","error","onload","result","onloadend","unsubscribe","readAsArrayBuffer","blob","readAsDataURL","readAsText","encoding","undefined","queryDataURLContext","dataURL","context","base64","Error","mimeType","test","data","binaryStringToBinary","bytes","array","split","map","c","charCodeAt","Uint8Array","toBinaryString","text","fromBinaryString","blobToDataURL","bufferToDataURL","buffer","binaryToDataURL","binaryToBlob","binary","type","binaryToBase64","encode","binaryToText","binaryToBinaryString","Array","prototype","call","i","String","fromCharCode","join","base64ToBlob","base64ToBinary","decode","textToBlob","textToBinary","textToBase64","dataURLToBlob","dataURLToBuffer","dataURLToBinary","dataURLToBase64","_blobMap","WeakMap","_urlSet","Set","RESULT_CODE","CDP_DECLARE","DECLARE_ERROR_CODE","FormData","Headers","AbortController","URLSearchParams","XMLHttpRequest","fetch","ensureParamValue","prop","value","isFunction","toQueryStrings","params","key","Object","keys","push","toAjaxParams","convertUrlParamType","isNumeric","Number","_timeout","settings","timeout","isNumber","_acceptHeaderMap","json","setupHeaders","headers","method","contentType","dataType","mode","body","username","password","get","delete","set","async","ajax","url","controller","opts","assign","signal","originalToken","requested","reason","source","setTimeout","makeResult","ERROR_AJAX_TIMEOUT","toUpperCase","includes","response","ok","length","stream","ERROR_AJAX_RESPONSE","statusText","ensureDataType","post","resource","xhr","open","forEach","setRequestHeader","send","status","JSON","parse","Worker","InlineWorker","_context","constructor","createWorkerContext","isString","TypeError","className","createObjectURL","toString","super","this","terminate","revokeObjectURL","BlobURL","blobs","b","cache","add","clear","has","base64ToBuffer","base64ToDataURL","base64ToText","binaryToBuffer","blobToBase64","blobToBinary","blobToBuffer","blobToText","bufferToBase64","bufferToBinary","bufferToBlob","bufferToText","dataURLToText","deserialize","cc","restoreNil","toTypedData","fromTypedData","Boolean","fromHexString","hex","x","match","byte","parseInt","query","serialize","ArrayBuffer","textToBuffer","textToDataURL","thread","executor","worker","promise","ev","preventDefault","onmessage","postMessage","toHexString","reduce","str","padStart"],"sources":["cdp:///@cdp/lib-worker/binary/ssr.ts","cdp:///@cdp/lib-worker/binary/base64.ts","cdp:///@cdp/lib-worker/binary/blob-reader.ts","cdp:///@cdp/lib-worker/binary/converter.ts","cdp:///@cdp/lib-worker/binary/blob-url.ts","cdp:///@cdp/lib-worker/ajax/result-code-defs.ts","cdp:///@cdp/lib-worker/ajax/ssr.ts","cdp:///@cdp/lib-worker/ajax/params.ts","cdp:///@cdp/lib-worker/ajax/settings.ts","cdp:///@cdp/lib-worker/ajax/core.ts","cdp:///@cdp/lib-worker/ajax/request.ts","cdp:///@cdp/lib-worker/inline-worker/inine-worker.ts","cdp:///@cdp/lib-worker/inline-worker/thread.ts"],"sourcesContent":["import { safe } from '@cdp/core-utils';\n\n/** @internal */ export const btoa       = safe(globalThis.btoa);\n/** @internal */ export const atob       = safe(globalThis.atob);\n/** @internal */ export const Blob       = safe(globalThis.Blob);\n/** @internal */ export const FileReader = safe(globalThis.FileReader);\n/** @internal */ export const URL        = safe(globalThis.URL);\n","import { atob, btoa } from './ssr';\n\n/**\n * @en `base64` utility for independent charactor code.\n * @ja æå­ã³ã¼ãã«ä¾å­ããªã `base64` ã¦ã¼ãã£ãªãã£\n */\nexport class Base64 {\n    /**\n     * @en Encode a base-64 encoded string from a binary string.\n     * @ja æå­åã base64 å½¢å¼ã§ã¨ã³ã³ã¼ã\n     */\n    public static encode(src: string): string {\n        return btoa(unescape(encodeURIComponent(src)));\n    }\n\n    /**\n     * @en Decodes a string of data which has been encoded using base-64 encoding.\n     * @ja base64 å½¢å¼ã§ã¨ã³ã³ã¼ãããããã¼ã¿ã®æå­åããã³ã¼ã\n     */\n    public static decode(encoded: string): string {\n        return decodeURIComponent(escape(atob(encoded)));\n    }\n}\n","import { UnknownFunction, verify } from '@cdp/core-utils';\nimport { CancelToken, Cancelable } from '@cdp/promise';\nimport { FileReader } from './ssr';\n\n/** @internal */\ninterface FileReaderArgsMap {\n    readAsArrayBuffer: [Blob];\n    readAsDataURL: [Blob];\n    readAsText: [Blob, string | undefined];\n}\n\n/** @internal */\ninterface FileReaderResultMap {\n    readAsArrayBuffer: ArrayBuffer;\n    readAsDataURL: string;\n    readAsText: string;\n}\n\n/**\n * @en `Blob` read options\n * @ja `Blob` èª­ã¿åããªãã·ã§ã³\n */\nexport interface BlobReadOptions extends Cancelable {\n    /**\n     * @en Progress callback function.\n     * @ja é²æã³ã¼ã«ããã¯é¢æ°\n     *\n     * @param progress\n     *  - `en` worker progress event\n     *  - `ja` worker é²æã¤ãã³ã\n     */\n    onprogress?: (progress: ProgressEvent) => unknown;\n}\n\n/** @internal execute read blob */\nfunction exec<T extends keyof FileReaderResultMap>(\n    methodName: T,\n    args: FileReaderArgsMap[T],\n    options: BlobReadOptions,\n): Promise<FileReaderResultMap[T]> {\n    type TResult = FileReaderResultMap[T];\n    const { cancel: token, onprogress } = options;\n    token && verify('instanceOf', CancelToken, token);\n    onprogress && verify('typeOf', 'function', onprogress);\n    return new Promise<TResult>((resolve, reject) => {\n        const reader = new FileReader();\n        const subscription = token && token.register(() => {\n            reader.abort();\n        });\n        reader.onabort = reader.onerror = () => {\n            reject(reader.error);\n        };\n        reader.onprogress = onprogress!; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        reader.onload = () => {\n            resolve(reader.result as TResult);\n        };\n        reader.onloadend = () => {\n            subscription && subscription.unsubscribe();\n        };\n        (reader[methodName] as UnknownFunction)(...args);\n    }, token);\n}\n\n/**\n * @en Get the `ArrayBuffer` result from `Blob` or `File`.\n * @ja `Blob` ã¾ãã¯ `File` ãã `ArrayBuffer` ãåå¾\n *\n * @param blob\n *  - `en` specified reading target object.\n *  - `ja` èª­ã¿åãå¯¾è±¡ã®ãªãã¸ã§ã¯ããæå®\n * @param options\n *  - `en` reading options.\n *  - `ja` èª­ã¿åããªãã·ã§ã³ãæå®\n */\nexport function readAsArrayBuffer(blob: Blob, options?: BlobReadOptions): Promise<ArrayBuffer> {\n    return exec('readAsArrayBuffer', [blob], { ...options });\n}\n\n/**\n * @en Get the data-URL string from `Blob` or `File`.\n * @ja `Blob` ã¾ãã¯ `File` ãã `data-url æå­åãåå¾\n *\n * @param blob\n *  - `en` specified reading target object.\n *  - `ja` èª­ã¿åãå¯¾è±¡ã®ãªãã¸ã§ã¯ããæå®\n * @param options\n *  - `en` reading options.\n *  - `ja` èª­ã¿åããªãã·ã§ã³ãæå®\n */\nexport function readAsDataURL(blob: Blob, options?: BlobReadOptions): Promise<string> {\n    return exec('readAsDataURL', [blob], { ...options });\n}\n\n/**\n * @en Get the text content string from `Blob` or `File`.\n * @ja `Blob` ã¾ãã¯ `File` ãããã­ã¹ãæå­åãåå¾\n *\n * @param blob\n *  - `en` specified reading target object.\n *  - `ja` èª­ã¿åãå¯¾è±¡ã®ãªãã¸ã§ã¯ããæå®\n * @param encoding\n *  - `en` encoding string to use for the returned data. default: `utf-8`\n *  - `ja` ã¨ã³ã³ã¼ãã£ã³ã°ãæå®ããæå­å æ¢å®: `utf-8`\n * @param options\n *  - `en` reading options.\n *  - `ja` èª­ã¿åããªãã·ã§ã³ãæå®\n */\nexport function readAsText(blob: Blob, encoding?: string | null, options?: BlobReadOptions): Promise<string> {\n    return exec('readAsText', [blob, encoding || undefined], { ...options });\n}\n","import {\n    Keys,\n    Types,\n    TypeToKey,\n    toTypedData,\n    fromTypedData,\n    restoreNil,\n} from '@cdp/core-utils';\nimport {\n    Cancelable,\n    checkCanceled as cc,\n} from '@cdp/promise';\nimport { Base64 } from './base64';\nimport {\n    BlobReadOptions,\n    readAsArrayBuffer,\n    readAsDataURL,\n    readAsText,\n} from './blob-reader';\nimport { Blob } from './ssr';\n\n/** @internal */\nconst enum MimeType {\n    BINARY = 'application/octet-stream',\n    TEXT = 'text/plain',\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal data-URL å±æ§ */\ninterface DataURLContext {\n    mimeType: string;\n    base64: boolean;\n    data: string;\n}\n\n/**\n * @internal\n * data URI å½¢å¼ã®æ­£è¦è¡¨ç¾\n * åè: https://developer.mozilla.org/ja/docs/data_URIs\n */\nfunction queryDataURLContext(dataURL: string): DataURLContext {\n    const context = { base64: false } as DataURLContext;\n\n    /**\n     * [match] 1: mime-type\n     *         2: \";base64\" ãå«ããªãã·ã§ã³\n     *         3: data æ¬ä½\n     */\n    const result = /^data:(.+?\\/.+?)?(;.+?)?,(.*)$/.exec(dataURL);\n    if (null == result) {\n        throw new Error(`Invalid data-URL: ${dataURL}`);\n    }\n\n    context.mimeType = result[1];\n    context.base64 = /;base64/.test(result[2]); // eslint-disable-line @typescript-eslint/prefer-includes\n    context.data = result[3];\n\n    return context;\n}\n\n//__________________________________________________________________________________________________//\n\n/** @internal helper */\nfunction binaryStringToBinary(bytes: string): Uint8Array {\n    const array = bytes.split('').map(c => c.charCodeAt(0));\n    return new Uint8Array(array);\n}\n\n/** @internal helper */\nfunction binaryToBinaryString(binary: Uint8Array): string {\n    return Array.prototype.map.call(binary, (i: number) => String.fromCharCode(i)).join('');\n}\n\n/**\n * @en Convert string to binary-string. (not human readable string)\n * @ja ãã¤ããªæå­åã«å¤æ\n *\n * @param text\n */\nexport function toBinaryString(text: string): string {\n    return unescape(encodeURIComponent(text));\n}\n\n/**\n * @en Convert string from binary-string.\n * @ja ãã¤ããªæå­åããå¤æ\n *\n * @param bytes\n */\nexport function fromBinaryString(bytes: string): string {\n    return decodeURIComponent(escape(bytes));\n}\n\n/**\n * @en Convert binary to hex-string.\n * @ja ãã¤ããªã HEX æå­åã«å¤æ\n *\n * @param hex\n */\nexport function fromHexString(hex: string): Uint8Array {\n    const x = hex.match(/.{1,2}/g);\n    return new Uint8Array(null != x ? x.map(byte => parseInt(byte, 16)) : []);\n}\n\n/**\n * @en Convert string from hex-string.\n * @ja HEX æå­åãããã¤ããªã«å¤æ\n *\n * @param binary\n */\nexport function toHexString(binary: Uint8Array): string {\n    return binary.reduce((str, byte) => str + byte.toString(16).toUpperCase().padStart(2, '0'), '');\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert `Blob` to `ArrayBuffer`.\n * @ja `Blob` ãã `ArrayBuffer` ã¸å¤æ\n *\n * @param blob\n *  - `en` `Blob` instance\n *  - `ja` `Blob` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n * @param options\n */\nexport function blobToBuffer(blob: Blob, options?: BlobReadOptions): Promise<ArrayBuffer> {\n    return readAsArrayBuffer(blob, options);\n}\n\n/**\n * @en Convert `Blob` to `Uint8Array`.\n * @ja `Blob` ãã `Uint8Array` ã¸å¤æ\n *\n * @param blob\n *  - `en` `Blob` instance\n *  - `ja` `Blob` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n * @param options\n */\nexport async function blobToBinary(blob: Blob, options?: BlobReadOptions): Promise<Uint8Array> {\n    return new Uint8Array(await readAsArrayBuffer(blob, options));\n}\n\n/**\n * @en Convert `Blob` to data-URL string.\n * @ja `Blob` ãã data-URL æå­åã¸å¤æ\n *\n * @param blob\n *  - `en` `Blob` instance\n *  - `ja` `Blob` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n * @param options\n */\nexport function blobToDataURL(blob: Blob, options?: BlobReadOptions): Promise<string> {\n    return readAsDataURL(blob, options);\n}\n\n/**\n * @en Convert `Blob` to text string.\n * @ja `Blob` ãããã­ã¹ãã¸å¤æ\n *\n * @param blob\n *  - `en` `Blob` instance\n *  - `ja` `Blob` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n * @param options\n */\nexport function blobToText(blob: Blob, options?: BlobReadOptions & { encoding?: string | null; }): Promise<string> {\n    const opts = options || {};\n    const { encoding } = opts;\n    return readAsText(blob, encoding, opts);\n}\n\n/**\n * @en Convert `Blob` to Base64 string.\n * @ja `Blob` ãã Base64 æå­åã¸å¤æ\n *\n * @param blob\n *  - `en` `Blob` instance\n *  - `ja` `Blob` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n * @param options\n */\nexport async function blobToBase64(blob: Blob, options?: BlobReadOptions): Promise<string> {\n    return queryDataURLContext(await readAsDataURL(blob, options)).data;\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert `ArrayBuffer` to `Blob`.\n * @ja `ArrayBuffer` ãã `Blob` ã«å¤æ\n *\n * @param buffer\n *  - `en` `ArrayBuffer` instance\n *  - `ja` `ArrayBuffer` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type æå­å\n */\nexport function bufferToBlob(buffer: ArrayBuffer, mimeType: string = MimeType.BINARY): Blob {\n    return new Blob([buffer], { type: mimeType });\n}\n\n/**\n * @en Convert `ArrayBuffer` to `Uint8Array`.\n * @ja `ArrayBuffer` ãã `Uint8Array` ã«å¤æ\n *\n * @param buffer\n *  - `en` `ArrayBuffer` instance\n *  - `ja` `ArrayBuffer` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n */\nexport function bufferToBinary(buffer: ArrayBuffer): Uint8Array {\n    return new Uint8Array(buffer);\n}\n\n/**\n * @en Convert `ArrayBuffer` to data-URL string.\n * @ja `ArrayBuffer` ãã data-URL æå­åã«å¤æ\n *\n * @param buffer\n *  - `en` `ArrayBuffer` instance\n *  - `ja` `ArrayBuffer` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type æå­å\n */\nexport function bufferToDataURL(buffer: ArrayBuffer, mimeType: string = MimeType.BINARY): string {\n    return binaryToDataURL(new Uint8Array(buffer), mimeType);\n}\n\n/**\n * @en Convert `ArrayBuffer` to Base64 string.\n * @ja `ArrayBuffer` ãã Base64 æå­åã«å¤æ\n *\n * @param buffer\n *  - `en` `ArrayBuffer` instance\n *  - `ja` `ArrayBuffer` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n */\nexport function bufferToBase64(buffer: ArrayBuffer): string {\n    return binaryToBase64(new Uint8Array(buffer));\n}\n\n/**\n * @en Convert `ArrayBuffer` to text string.\n * @ja `ArrayBuffer` ãããã­ã¹ãã«å¤æ\n *\n * @param buffer\n *  - `en` `ArrayBuffer` instance\n *  - `ja` `ArrayBuffer` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n */\nexport function bufferToText(buffer: ArrayBuffer): string {\n    return binaryToText(new Uint8Array(buffer));\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert `Uint8Array` to `Blob`.\n * @ja `Uint8Array` ãã `Blob` ã«å¤æ\n *\n * @param binary\n *  - `en` `Uint8Array` instance\n *  - `ja` `Uint8Array` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type æå­å\n */\nexport function binaryToBlob(binary: Uint8Array, mimeType: string = MimeType.BINARY): Blob {\n    return new Blob([binary], { type: mimeType });\n}\n\n/**\n * @en Convert `Uint8Array` to `ArrayBuffer`.\n * @ja `Uint8Array` ãã `ArrayBuffer` ã«å¤æ\n *\n * @param binary\n *  - `en` `Uint8Array` instance\n *  - `ja` `Uint8Array` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n */\nexport function binaryToBuffer(binary: Uint8Array): ArrayBuffer {\n    return binary.buffer;\n}\n\n/**\n * @en Convert `Uint8Array` to data-URL string.\n * @ja `Uint8Array` ãã data-URL æå­åã«å¤æ\n *\n * @param binary\n *  - `en` `Uint8Array` instance\n *  - `ja` `Uint8Array` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type æå­å\n */\nexport function binaryToDataURL(binary: Uint8Array, mimeType: string = MimeType.BINARY): string {\n    return `data:${mimeType};base64,${binaryToBase64(binary)}`;\n}\n\n/**\n * @en Convert `Uint8Array` to Base64 string.\n * @ja `Uint8Array` ãã Base64 æå­åã«å¤æ\n *\n * @param binary\n *  - `en` `Uint8Array` instance\n *  - `ja` `Uint8Array` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n */\nexport function binaryToBase64(binary: Uint8Array): string {\n    return Base64.encode(binaryToText(binary));\n}\n\n/**\n * @en Convert `Uint8Array` to text string.\n * @ja `Uint8Array` ãã ãã­ã¹ãã«å¤æ\n *\n * @param binary\n *  - `en` `Uint8Array` instance\n *  - `ja` `Uint8Array` ã¤ã³ã¹ã¿ã³ã¹ãæå®\n */\nexport function binaryToText(binary: Uint8Array): string {\n    return fromBinaryString(binaryToBinaryString(binary));\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert Base64 string to `Blob`.\n * @ja Base64 æå­åãã `Blob` ã«å¤æ\n *\n * @param base64\n *  - `en` Base64 string data\n *  - `ja` Base64 æå­å\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type æå­å\n */\nexport function base64ToBlob(base64: string, mimeType: string = MimeType.BINARY): Blob {\n    return binaryToBlob(base64ToBinary(base64), mimeType);\n}\n\n/**\n * @en Convert Base64 string to `ArrayBuffer`.\n * @ja Base64 æå­åãã `ArrayBuffer` ã«å¤æ\n *\n * @param base64\n *  - `en` Base64 string data\n *  - `ja` Base64 æå­å\n */\nexport function base64ToBuffer(base64: string): ArrayBuffer {\n    return base64ToBinary(base64).buffer;\n}\n\n/**\n * @en Convert Base64 string to `Uint8Array`.\n * @ja Base64 æå­åãã `Uint8Array` ã«å¤æ\n *\n * @param base64\n *  - `en` Base64 string data\n *  - `ja` Base64 æå­å\n */\nexport function base64ToBinary(base64: string): Uint8Array {\n    return binaryStringToBinary(toBinaryString(Base64.decode(base64)));\n}\n\n/**\n * @en Convert Base64 string to data-URL string.\n * @ja Base64 æå­åãã data-URL æå­åã«å¤æ\n *\n * @param base64\n *  - `en` Base64 string data\n *  - `ja` Base64 æå­å\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type æå­å\n */\nexport function base64ToDataURL(base64: string, mimeType: string = MimeType.BINARY): string {\n    return `data:${mimeType};base64,${base64}`;\n}\n\n/**\n * @en Convert Base64 string to text string.\n * @ja  Base64 æå­åãã ãã­ã¹ãã«å¤æ\n *\n * @param base64\n *  - `en` Base64 string data\n *  - `ja` Base64 æå­å\n */\nexport function base64ToText(base64: string): string {\n    return Base64.decode(base64);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert text string to `Blob`.\n * @ja ãã­ã¹ããã `Blob` ã«å¤æ\n *\n * @param text\n *  - `en` text string data\n *  - `ja` ãã­ã¹ãæå­å\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type æå­å\n */\nexport function textToBlob(text: string, mimeType: string = MimeType.TEXT): Blob {\n    return new Blob([text], { type: mimeType });\n}\n\n/**\n * @en Convert text string to `ArrayBuffer`.\n * @ja ãã­ã¹ããã `ArrayBuffer` ã«å¤æ\n *\n * @param text\n *  - `en` text string data\n *  - `ja` ãã­ã¹ãæå­å\n */\nexport function textToBuffer(text: string): ArrayBuffer {\n    return textToBinary(text).buffer;\n}\n\n/**\n * @en Convert text string to `Uint8Array`.\n * @ja ãã­ã¹ããã `Uint8Array` ã«å¤æ\n *\n * @param text\n *  - `en` text string data\n *  - `ja` ãã­ã¹ãæå­å\n */\nexport function textToBinary(text: string): Uint8Array {\n    return binaryStringToBinary(toBinaryString(text));\n}\n\n/**\n * @en Convert text string to data-URL string.\n * @ja ãã­ã¹ããã data-URL æå­åã«å¤æ\n *\n * @param text\n *  - `en` text string data\n *  - `ja` ãã­ã¹ãæå­å\n * @param mimeType\n *  - `en` mime-type string\n *  - `ja` mime-type æå­å\n */\nexport function textToDataURL(text: string, mimeType: string = MimeType.TEXT): string {\n    const base64 = textToBase64(text);\n    return `data:${mimeType};base64,${base64}`;\n}\n\n/**\n * @en Convert text string to Base64 string.\n * @ja ãã­ã¹ããã Base64 æå­åã«å¤æ\n *\n * @param text\n *  - `en` text string data\n *  - `ja` ãã­ã¹ãæå­å\n */\nexport function textToBase64(text: string): string {\n    return Base64.encode(text);\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Convert data-URL string to `Blob`.\n * @ja data-URL æå­åãã `Blob` ã«å¤æ\n *\n * @param dataURL\n *  - `en` data-URL string data\n *  - `ja` data-URL æå­å\n */\nexport function dataURLToBlob(dataURL: string): Blob {\n    const context = queryDataURLContext(dataURL);\n    if (context.base64) {\n        return base64ToBlob(context.data, context.mimeType || MimeType.BINARY);\n    } else {\n        return textToBlob(decodeURIComponent(context.data), context.mimeType || MimeType.TEXT);\n    }\n}\n\n/**\n * @en Convert data-URL string to `ArrayBuffer`.\n * @ja data-URL æå­åãã `ArrayBuffer` ã«å¤æ\n *\n * @param dataURL\n *  - `en` data-URL string data\n *  - `ja` data-URL æå­å\n */\nexport function dataURLToBuffer(dataURL: string): ArrayBuffer {\n    return dataURLToBinary(dataURL).buffer;\n}\n\n/**\n * @en Convert data-URL string to `Uint8Array`.\n * @ja data-URL æå­åãã `Uint8Array` ã«å¤æ\n *\n * @param dataURL\n *  - `en` data-URL string data\n *  - `ja` data-URL æå­å\n */\nexport function dataURLToBinary(dataURL: string): Uint8Array {\n    return base64ToBinary(dataURLToBase64(dataURL));\n}\n\n/**\n * @en Convert data-URL string to text string.\n * @ja data-URL æå­åãããã­ã¹ãã«å¤æ\n *\n * @param dataURL\n *  - `en` data-URL string data\n *  - `ja` data-URL æå­å\n */\nexport function dataURLToText(dataURL: string): string {\n    return Base64.decode(dataURLToBase64(dataURL));\n}\n\n/**\n * @en Convert data-URL string to Base64 string.\n * @ja data-URL æå­åãã Base64 æå­åã«å¤æ\n *\n * @param dataURL\n *  - `en` data-URL string data\n *  - `ja` data-URL æå­å\n */\nexport function dataURLToBase64(dataURL: string): string {\n    const context = queryDataURLContext(dataURL);\n    if (context.base64) {\n        return context.data;\n    } else {\n        return Base64.encode(decodeURIComponent(context.data));\n    }\n}\n\n//__________________________________________________________________________________________________//\n\n/**\n * @en Serializable data type list.\n * @ja ã·ãªã¢ã©ã¤ãºå¯è½ãªãã¼ã¿åä¸è¦§\n */\nexport interface Serializable {\n    string: string;\n    number: number;\n    boolean: boolean;\n    object: object;\n    buffer: ArrayBuffer;\n    binary: Uint8Array;\n    blob: Blob;\n}\n\nexport type SerializableDataTypes = Types<Serializable>;\nexport type SerializableInputDataTypes = SerializableDataTypes | null | undefined;\nexport type SerializableKeys = Keys<Serializable>;\nexport type SerializableCastable = Omit<Serializable, 'buffer' | 'binary' | 'blob'>;\nexport type SerializableCastableTypes = Types<SerializableCastable>;\nexport type SerializableReturnType<T extends SerializableCastableTypes> = TypeToKey<SerializableCastable, T> extends never ? never : T | null | undefined;\n\n/**\n * @en Deserializable options interface.\n * @ja ãã·ãªã¢ã©ã¤ãºã«ä½¿ç¨ãããªãã·ã§ã³\n */\nexport interface DeserializeOptions<T extends Serializable = Serializable, K extends Keys<T> = Keys<T>> extends Cancelable {\n    /** [[SerializableKeys]] */\n    dataType?: K;\n}\n\n/**\n * @en Serialize data.\n * @ja ãã¼ã¿ã·ãªã¢ã©ã¤ãº\n *\n * @param data input\n * @param options blob convert options\n */\nexport async function serialize<T extends SerializableInputDataTypes>(data: T, options?: BlobReadOptions): Promise<string> {\n    const { cancel } = options || {};\n    await cc(cancel);\n    if (null == data) {\n        return String(data);\n    } else if (data instanceof ArrayBuffer) {\n        return bufferToDataURL(data);\n    } else if (data instanceof Uint8Array) {\n        return binaryToDataURL(data);\n    } else if (data instanceof Blob) {\n        return blobToDataURL(data, options);\n    } else {\n        return fromTypedData(data) as string;\n    }\n}\n\n/**\n * @en Deserialize data.\n * @ja ãã¼ã¿ã®å¾©å\n *\n * @param value input string or undefined.\n * @param options deserialize options\n */\nexport function deserialize<T extends SerializableCastableTypes = SerializableCastableTypes>(\n    value: string | undefined, options?: DeserializeOptions<Serializable, never>\n): Promise<SerializableReturnType<T>>;\n\n/**\n * @en Deserialize data.\n * @ja ãã¼ã¿ã®å¾©å\n *\n * @param value input string or undefined.\n * @param options deserialize options\n */\nexport function deserialize<T extends SerializableKeys>(value: string | undefined, options: DeserializeOptions<Serializable, T>): Promise<Serializable[T] | null | undefined>;\n\nexport async function deserialize(value: string | undefined, options?: DeserializeOptions): Promise<SerializableDataTypes | null | undefined> {\n    const { dataType, cancel } = options || {};\n    await cc(cancel);\n\n    const data = restoreNil(toTypedData(value));\n    switch (dataType) {\n        case 'string':\n            return fromTypedData(data);\n        case 'number':\n            return Number(data);\n        case 'boolean':\n            return Boolean(data);\n        case 'object':\n            return Object(data);\n        case 'buffer':\n            return dataURLToBuffer(fromTypedData(data) as string);\n        case 'binary':\n            return dataURLToBinary(fromTypedData(data) as string);\n        case 'blob':\n            return dataURLToBlob(fromTypedData(data) as string);\n        default:\n            return data;\n    }\n}\n","import { URL } from './ssr';\n\n/** @internal */ const _blobMap = new WeakMap<Blob, string>();\n/** @internal */ const _urlSet  = new Set<string>();\n\n/**\n * @en `Blob URL` utility for automatic memory manegement.\n * @ja ã¡ã¢ãªèªåç®¡çãè¡ã `Blob URL` ã¦ã¼ãã£ãªãã£\n */\nexport class BlobURL {\n    /**\n     * @en Create `Blob URL` from instances.\n     * @ja ã¤ã³ã¹ã¿ã³ã¹ãæå®ãã¦ `Blob URL` ã®æ§ç¯\n     */\n    public static create(...blobs: Blob[]): void {\n        for (const b of blobs) {\n            const cache = _blobMap.get(b);\n            if (cache) {\n                continue;\n            }\n            const url = URL.createObjectURL(b);\n            _blobMap.set(b, url);\n            _urlSet.add(url);\n        }\n    }\n\n    /**\n     * @en Clear all `Blob URL` cache.\n     * @ja ãã¹ã¦ã® `Blob URL` ã­ã£ãã·ã¥ãç ´æ£\n     */\n    public static clear(): void {\n        for (const url of _urlSet) {\n            URL.revokeObjectURL(url);\n        }\n        _urlSet.clear();\n    }\n\n    /**\n     * @en Get `Blob URL` from instance.\n     * @ja ã¤ã³ã¹ã¿ã³ã¹ãæå®ãã¦ `Blob URL` ã®åå¾\n     */\n    public static get(blob: Blob): string {\n        const cache = _blobMap.get(blob);\n        if (cache) {\n            return cache;\n        }\n        const url = URL.createObjectURL(blob);\n        _blobMap.set(blob, url);\n        _urlSet.add(url);\n        return url;\n    }\n\n    /**\n     * @en Check `Blob URL` is available from instance.\n     * @ja ã¤ã³ã¹ã¿ã³ã¹ãæå®ãã¦ `Blob URL` ãæå¹åå¤å®\n     */\n    public static has(blob: Blob): boolean {\n        return _blobMap.has(blob);\n    }\n\n    /**\n     * @en Revoke `Blob URL` from instances.\n     * @ja ã¤ã³ã¹ã¿ã³ã¹ãæå®ãã¦ `Blob URL` ãç¡å¹å\n     */\n    public static revoke(...blobs: Blob[]): void {\n        for (const b of blobs) {\n            const url = _blobMap.get(b);\n            if (url) {\n                URL.revokeObjectURL(url);\n                _blobMap.delete(b);\n                _urlSet.delete(url);\n            }\n        }\n    }\n}\n","/* eslint-disable\n    @typescript-eslint/no-namespace,\n    @typescript-eslint/no-unused-vars,\n    @typescript-eslint/restrict-plus-operands,\n */\n\nnamespace CDP_DECLARE {\n\n    const enum LOCAL_CODE_BASE {\n        AJAX = CDP_KNOWN_MODULE.AJAX * LOCAL_CODE_RANGE_GUIDE.FUNCTION,\n    }\n\n    /**\n     * @en Extends error code definitions.\n     * @ja æ¡å¼µéã¨ã©ã¼ã³ã¼ãå®ç¾©\n     */\n    export enum RESULT_CODE {\n        AJAX_DECLARE        = RESULT_CODE_BASE.DECLARE,\n        ERROR_AJAX_RESPONSE = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.AJAX + 1, 'network error.'),\n        ERROR_AJAX_TIMEOUT  = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.AJAX + 2, 'request timeout.'),\n    }\n}\n","import { safe } from '@cdp/core-utils';\n\n/** @internal */ export const FormData        = safe(globalThis.FormData);\n/** @internal */ export const Headers         = safe(globalThis.Headers);\n/** @internal */ export const AbortController = safe(globalThis.AbortController);\n/** @internal */ export const URLSearchParams = safe(globalThis.URLSearchParams);\n/** @internal */ export const XMLHttpRequest  = safe(globalThis.XMLHttpRequest);\n/** @internal */ export const fetch           = safe(globalThis.fetch);\n","import {\n    PlainObject,\n    isFunction,\n    isNumeric,\n} from '@cdp/core-utils';\nimport { URLSearchParams } from './ssr';\n\n/** @internal ensure string value */\nconst ensureParamValue = (prop: unknown): string => {\n    const value = isFunction(prop) ? prop() : prop;\n    return undefined !== value ? String(value) : '';\n};\n\n/**\n * @en Convert `PlainObject` to query strings.\n * @ja `PlainObject` ãã¯ã¨ãªã¹ããªã³ã°ã«å¤æ\n */\nexport const toQueryStrings = (data: PlainObject): string => {\n    const params: string[] = [];\n    for (const key of Object.keys(data)) {\n        const value = ensureParamValue(data[key]);\n        if (value) {\n            params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n        }\n    }\n    return params.join('&');\n};\n\n/**\n * @en Convert `PlainObject` to Ajax parameters object.\n * @ja `PlainObject` ã Ajax ãã©ã¡ã¼ã¿ãªãã¸ã§ã¯ãã«å¤æ\n */\nexport const toAjaxParams = (data: PlainObject): Record<string, string> => {\n    const params: Record<string, string> = {};\n    for (const key of Object.keys(data)) {\n        const value = ensureParamValue(data[key]);\n        if (value) {\n            params[key] = value;\n        }\n    }\n    return params;\n};\n\n/**\n * @en Convert URL parameters to primitive type.\n * @ja URL ãã©ã¡ã¼ã¿ã primitive ã«å¤æ\n */\nexport const convertUrlParamType = (value: string): string | number | boolean | null => {\n    if (isNumeric(value)) {\n        return Number(value);\n    } else if ('true' === value) {\n        return true;\n    } else if ('false' === value) {\n        return false;\n    } else if ('null' === value) {\n        return null;\n    } else {\n        return decodeURIComponent(value);\n    }\n};\n\n/**\n * @en Parse url query GET parameters.\n * @ja URLã¯ã¨ãªã®GETãã©ã¡ã¼ã¿ãè§£æ\n *\n * @example <br>\n *\n * ```ts\n * const url = '/page/?id=5&foo=bar&bool=true';\n * const query = parseUrl();\n * // { id: 5, foo: 'bar', bool: true }\n * ```\n *\n * @returns { key: value } object.\n */\nexport const parseUrlQuery = <T = Record<string, string | number | boolean | null>>(url: string): T => {\n    const query = {};\n    const params = new URLSearchParams(url.includes('?') ? url.split('?')[1] : url);\n    for (const [key, value] of params) {\n        query[decodeURIComponent(key)] = convertUrlParamType(value);\n    }\n    return query as T;\n};\n","import { isNumber } from '@cdp/core-utils';\n\n/** @internal */ let _timeout: number | undefined;\n\nexport const settings = {\n    get timeout(): number | undefined {\n        return _timeout;\n    },\n    set timeout(value: number | undefined) {\n        _timeout = (isNumber(value) && 0 <= value) ? value : undefined;\n    },\n};\n","import { CancelToken } from '@cdp/promise';\nimport { RESULT_CODE, makeResult } from '@cdp/result';\nimport { Base64 } from '@cdp/binary';\nimport {\n    AjaxDataTypes,\n    AjaxOptions,\n    AjaxResult,\n} from './interfaces';\nimport {\n    FormData,\n    Headers,\n    AbortController,\n    URLSearchParams,\n    fetch,\n} from './ssr';\nimport { toQueryStrings, toAjaxParams } from './params';\nimport { settings } from './settings';\n\n/** @internal */\nexport type AjaxHeaderOptions = Pick<AjaxOptions<AjaxDataTypes>, 'headers' | 'method' | 'contentType' | 'dataType' | 'mode' | 'body' | 'username' | 'password'>;\n\n/**\n * @internal\n * ts4.7 patch\n * https://github.com/microsoft/TypeScript/issues/47505\n */\ndeclare global {\n    interface AbortController {\n        /** Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted. */\n        abort(reason?: unknown): void;\n    }\n}\n\n/** @internal */\nconst _acceptHeaderMap = {\n    text: 'text/plain, text/html, application/xml; q=0.8, text/xml; q=0.8, */*; q=0.01',\n    json: 'application/json, text/javascript, */*; q=0.01',\n};\n\n/**\n * @en Setup `headers` from options parameter.\n * @ja ãªãã·ã§ã³ãã `headers` ãè¨­å®\n *\n * @internal\n */\nexport function setupHeaders(options: AjaxHeaderOptions): Headers {\n    const headers = new Headers(options.headers);\n    const { method, contentType, dataType, mode, body, username, password } = options;\n\n    // Content-Type\n    if ('POST' === method || 'PUT' === method || 'PATCH' === method) {\n        /*\n         * fetch() ã®å ´å, FormData ãèªåè§£éãããã, æå®ãããå ´åã¯åé¤\n         * https://stackoverflow.com/questions/35192841/fetch-post-with-multipart-form-data\n         * https://muffinman.io/uploading-files-using-fetch-multipart-form-data/\n         */\n        if (headers.get('Content-Type') && body instanceof FormData) {\n            headers.delete('Content-Type');\n        } else if (!headers.get('Content-Type')) {\n            if (null == contentType && 'json' === dataType as AjaxDataTypes) {\n                headers.set('Content-Type', 'application/json; charset=UTF-8');\n            } else if (null != contentType) {\n                headers.set('Content-Type', contentType);\n            }\n        }\n    }\n\n    // Accept\n    if (!headers.get('Accept')) {\n        headers.set('Accept', _acceptHeaderMap[dataType as AjaxDataTypes] || '*/*');\n    }\n\n    // X-Requested-With\n    if ('cors' !== mode && !headers.get('X-Requested-With')) {\n        headers.set('X-Requested-With', 'XMLHttpRequest');\n    }\n\n    // Basic Authorization\n    if (null != username && !headers.get('Authorization')) {\n        headers.set('Authorization', `Basic ${Base64.encode(`${username}:${password || ''}`)}`);\n    }\n\n    return headers;\n}\n\n/**\n * @en Perform an asynchronous HTTP (Ajax) request.\n * @ja HTTP (Ajax)ãªã¯ã¨ã¹ãã®éä¿¡\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxãªã¯ã¨ã¹ããéä¿¡ããURLãæå®\n * @param options\n *  - `en` Ajax request settings.\n *  - `ja` Ajaxãªã¯ã¨ã¹ãè¨­å®\n */\nasync function ajax<T extends AjaxDataTypes | object = 'response'>(url: string, options?: AjaxOptions<T>): Promise<AjaxResult<T>> {\n    const controller = new AbortController();\n    const abort = (): void => controller.abort();\n\n    const opts = Object.assign({\n        method: 'GET',\n        dataType: 'response',\n        timeout: settings.timeout,\n    }, options, {\n        signal: controller.signal, // force override\n    });\n\n    const { cancel: originalToken, timeout } = opts;\n\n    // cancellation\n    if (originalToken) {\n        if (originalToken.requested) {\n            throw originalToken.reason;\n        }\n        originalToken.register(abort);\n    }\n\n    const source = CancelToken.source(originalToken as CancelToken);\n    const { token } = source;\n    token.register(abort);\n\n    // timeout\n    if (timeout) {\n        setTimeout(() => source.cancel(makeResult(RESULT_CODE.ERROR_AJAX_TIMEOUT, 'request timeout')), timeout);\n    }\n\n    // normalize\n    opts.method = opts.method.toUpperCase();\n\n    // header\n    opts.headers = setupHeaders(opts);\n\n    // parse param\n    const { method, data, dataType } = opts;\n    if (null != data) {\n        if (('GET' === method || 'HEAD' === method) && !url.includes('?')) {\n            url += `?${toQueryStrings(data)}`;\n        } else if (null == opts.body) {\n            opts.body = new URLSearchParams(toAjaxParams(data));\n        }\n    }\n\n    // execute\n    const response = await Promise.resolve(fetch(url, opts), token);\n    if ('response' === dataType) {\n        return response as AjaxResult<T>;\n    } else if (!response.ok) {\n        throw makeResult(RESULT_CODE.ERROR_AJAX_RESPONSE, response.statusText, response);\n    } else if ('stream' === dataType) {\n        const length = Number(response.headers.get('content-length'));\n        const stream = response.body as ReadableStream<Uint8Array>;\n        stream['length'] = length;\n        return stream as AjaxResult<T>;\n    } else {\n        return Promise.resolve(response[dataType as Exclude<AjaxDataTypes, 'response' | 'stream'>](), token);\n    }\n}\n\najax.settings = settings;\n\nexport { ajax };\n","import { PlainObject } from '@cdp/core-utils';\nimport { RESULT_CODE, makeResult } from '@cdp/result';\nimport {\n    AjaxDataTypes,\n    AjaxOptions,\n    AjaxRequestOptions,\n    AjaxGetRequestShortcutOptions,\n    AjaxResult,\n} from './interfaces';\nimport { ajax, setupHeaders } from './core';\nimport { toQueryStrings } from './params';\nimport { XMLHttpRequest } from './ssr';\n\n/** @internal */\nfunction ensureDataType(dataType?: AjaxDataTypes): AjaxDataTypes {\n    return dataType || 'json';\n}\n\n/**\n * @en `GET` request shortcut.\n * @ja `GET` ãªã¯ã¨ã¹ãã·ã§ã¼ãã«ãã\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxãªã¯ã¨ã¹ããéä¿¡ããURLãæå®\n * @param data\n *  - `en` Data to be sent to the server.\n *  - `ja` ãµã¼ãã¼ã«éä¿¡ããããã¼ã¿.\n * @param dataType\n *  - `en` Data to be sent to the server.\n *  - `ja` ãµã¼ãã¼ããè¿ãããæå¾ãããã¼ã¿ã®åãæå®\n * @param options\n *  - `en` request settings.\n *  - `ja` ãªã¯ã¨ã¹ãè¨­å®\n */\nexport function get<T extends AjaxDataTypes | object = 'json'>(\n    url: string,\n    data?: PlainObject,\n    dataType?: T extends AjaxDataTypes ? T : 'json',\n    options?: AjaxRequestOptions\n): Promise<AjaxResult<T>> {\n    return ajax(url, { ...options, method: 'GET', data, dataType: ensureDataType(dataType) } as AjaxOptions<T>);\n}\n\n/**\n * @en `GET` text request shortcut.\n * @ja `GET` ãã­ã¹ããªã¯ã¨ã¹ãã·ã§ã¼ãã«ãã\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxãªã¯ã¨ã¹ããéä¿¡ããURLãæå®\n * @param options\n *  - `en` request settings.\n *  - `ja` ãªã¯ã¨ã¹ãè¨­å®\n */\nexport function text(url: string, options?: AjaxGetRequestShortcutOptions): Promise<AjaxResult<'text'>> {\n    return get(url, undefined, 'text', options);\n}\n\n/**\n * @en `GET` JSON request shortcut.\n * @ja `GET` JSON ãªã¯ã¨ã¹ãã·ã§ã¼ãã«ãã\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxãªã¯ã¨ã¹ããéä¿¡ããURLãæå®\n * @param options\n *  - `en` request settings.\n *  - `ja` ãªã¯ã¨ã¹ãè¨­å®\n */\nexport function json<T extends 'json' | object = 'json'>(url: string, options?: AjaxGetRequestShortcutOptions): Promise<AjaxResult<T>> {\n    return get<T>(url, undefined, ('json' as T extends AjaxDataTypes ? T : 'json'), options);\n}\n\n/**\n * @en `GET` Blob request shortcut.\n * @ja `GET` Blob ãªã¯ã¨ã¹ãã·ã§ã¼ãã«ãã\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxãªã¯ã¨ã¹ããéä¿¡ããURLãæå®\n * @param options\n *  - `en` request settings.\n *  - `ja` ãªã¯ã¨ã¹ãè¨­å®\n */\nexport function blob(url: string, options?: AjaxGetRequestShortcutOptions): Promise<AjaxResult<'blob'>> {\n    return get(url, undefined, 'blob', options);\n}\n\n/**\n * @en `POST` request shortcut.\n * @ja `POST` ãªã¯ã¨ã¹ãã·ã§ã¼ãã«ãã\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxãªã¯ã¨ã¹ããéä¿¡ããURLãæå®\n * @param data\n *  - `en` Data to be sent to the server.\n *  - `ja` ãµã¼ãã¼ã«éä¿¡ããããã¼ã¿.\n * @param dataType\n *  - `en` The type of data that you're expecting back from the server.\n *  - `ja` Ajaxãªã¯ã¨ã¹ããéä¿¡ããURLãæå®\n * @param options\n *  - `en` request settings.\n *  - `ja` ãªã¯ã¨ã¹ãè¨­å®\n */\nexport function post<T extends AjaxDataTypes | object = 'json'>(\n    url: string,\n    data: PlainObject,\n    dataType?: T extends AjaxDataTypes ? T : 'json',\n    options?: AjaxRequestOptions\n): Promise<AjaxResult<T>> {\n    return ajax(url, { ...options, method: 'POST', data, dataType: ensureDataType(dataType) } as AjaxOptions<T>);\n}\n\n/**\n * @en Synchronous `GET` request for resource access. <br>\n *     Many browsers have deprecated synchronous XHR support on the main thread entirely.\n * @ja ãªã½ã¼ã¹åå¾ã®ããã® åæ `GET` ãªã¯ã¨ã¹ã. <br>\n *     å¤ãã®ãã©ã¦ã¶ã§ã¯ã¡ã¤ã³ã¹ã¬ããã«ãããåæçãª XHR ã®å¯¾å¿ãå¨é¢çã«éæ¨å¥¨ã¨ãã¦ããã®ã§ç©æ¥µä½¿ç¨ã¯é¿ãããã¨.\n *\n * @param url\n *  - `en` A string containing the URL to which the request is sent.\n *  - `ja` Ajaxãªã¯ã¨ã¹ããéä¿¡ããURLãæå®\n * @param dataType\n *  - `en` The type of data that you're expecting back from the server.\n *  - `ja` Ajaxãªã¯ã¨ã¹ããéä¿¡ããURLãæå®\n * @param data\n *  - `en` Data to be sent to the server.\n *  - `ja` ãµã¼ãã¼ã«éä¿¡ããããã¼ã¿.\n */\nexport function resource<T extends 'text' | 'json' | object = 'json'>(\n    url: string,\n    dataType?: T extends 'text' | 'json' ? T : 'json',\n    data?: PlainObject,\n): AjaxResult<T> {\n    const xhr = new XMLHttpRequest();\n\n    if (null != data && !url.includes('?')) {\n        url += `?${toQueryStrings(data)}`;\n    }\n\n    // synchronous\n    xhr.open('GET', url, false);\n\n    const type = ensureDataType(dataType);\n    const headers = setupHeaders({ method: 'GET', dataType: type });\n    headers.forEach((value, key) => {\n        xhr.setRequestHeader(key, value);\n    });\n\n    xhr.send(null);\n    if (!(200 <= xhr.status && xhr.status < 300)) {\n        throw makeResult(RESULT_CODE.ERROR_AJAX_RESPONSE, xhr.statusText, xhr);\n    }\n\n    return 'json' === type ? JSON.parse(xhr.response) : xhr.response;\n}\n","import {\n    isFunction,\n    isString,\n    className,\n    safe,\n} from '@cdp/core-utils';\n\n/**\n * @en [[InlineWorker]] source type definition.\n * @ja [[InlineWorker]] ã«æå®å¯è½ãªã½ã¼ã¹åå®ç¾©\n */\nexport type InlienWorkerSource = ((self: Worker) => unknown) | string;\n\n/** @internal */ const URL    = safe(globalThis.URL);\n/** @internal */ const Worker = safe(globalThis.Worker);\n/** @internal */ const Blob   = safe(globalThis.Blob);\n\n/** @internal */\nfunction createWorkerContext(src: InlienWorkerSource): string {\n    if (!(isFunction(src) || isString(src))) {\n        throw new TypeError(`${className(src)} is not a function or string.`);\n    }\n    return URL.createObjectURL(new Blob([isFunction(src) ? `(${src.toString()})(self);` : src], { type: 'application/javascript' }));\n}\n\n/**\n * @en Specified `Worker` class which doesn't require a script file.\n * @ja ã¹ã¯ãªãããã¡ã¤ã«ãå¿è¦ã¨ããªã `Worker` ã¯ã©ã¹\n */\nexport class InlineWorker extends Worker {\n    /** @internal */\n    private _context: string;\n\n    /**\n     * constructor\n     *\n     * @param src\n     *  - `en` source function or script body.\n     *  - `ja` å®è¡é¢æ°ã¾ãã¯ã¹ã¯ãªããå®ä½\n     * @param options\n     *  - `en` worker options.\n     *  - `ja` Worker ãªãã·ã§ã³\n     */\n    constructor(src: InlienWorkerSource, options?: WorkerOptions) {\n        const context = createWorkerContext(src);\n        super(context, options);\n        this._context = context;\n    }\n\n///////////////////////////////////////////////////////////////////////\n// override: Worker\n\n    /**\n     * @en For BLOB release. When calling `close ()` in the Worker, call this method as well.\n     * @ja BLOB è§£æ¾ç¨. Worker åã§ `close()` ãå¼ã¶å ´å, æ¬ã¡ã½ãããã³ã¼ã«ãããã¨.\n     */\n    terminate(): void {\n        super.terminate();\n        URL.revokeObjectURL(this._context);\n    }\n}\n","import { UnknownFunction } from '@cdp/core-utils';\nimport { Cancelable, CancelToken } from '@cdp/promise';\nimport { InlineWorker } from './inine-worker';\n\n/**\n * @en Thread options\n * @en ã¹ã¬ãããªãã·ã§ã³\n */\nexport interface ThreadOptions<T extends UnknownFunction> extends Cancelable, WorkerOptions {\n    args?: Parameters<T>;\n}\n\n/**\n * @en Ensure execution in worker thread.\n * @ja ã¯ã¼ã«ã¼ã¹ã¬ããåã§å®è¡ãä¿è¨¼\n *\n * @example <br>\n *\n * ```ts\n * const exec = (arg1: number, arg2: string) => {\n *    // this scope is worker scope. you cannot use closure access.\n *    const param = {...};\n *    const method = (p) => {...};\n *    // you can access arguments from options.\n *    console.log(arg1); // '1'\n *    console.log(arg2); // 'test'\n *    :\n *    return method(param);\n * };\n *\n * const arg1 = 1;\n * const arg2 = 'test';\n * const result = await thread(exec, { args: [arg1, arg2] });\n * ```\n *\n * @param executor\n *  - `en` implement as function scope.\n *  - `ja` é¢æ°ã¹ã³ã¼ãã¨ãã¦å®è£\n * @param options\n *  - `en` thread options\n *  - `ja` ã¹ã¬ãããªãã·ã§ã³\n */\nexport function thread<T, U>(executor: (...args: U[]) => T | Promise<T>, options?: ThreadOptions<typeof executor>): Promise<T> {\n    const { cancel: originalToken, args } = Object.assign({ args: [] }, options);\n\n    // already cancel\n    if (originalToken?.requested) {\n        throw originalToken.reason;\n    }\n\n    const exec = `(self => {\n        self.addEventListener('message', async ({ data }) => {\n            try {\n                const result = await (${executor.toString()})(...data);\n                self.postMessage(result);\n            } catch (e) {\n                setTimeout(function() { throw e; });\n            }\n        });\n    })(self);`;\n\n    const worker = new InlineWorker(exec, options);\n\n    const abort = (): void => worker.terminate();\n    originalToken?.register(abort);\n    const { token } = CancelToken.source(originalToken as CancelToken);\n\n    const promise = new Promise((resolve, reject) => {\n        worker.onerror = ev => {\n            ev.preventDefault();\n            reject(ev);\n            worker.terminate();\n        };\n        worker.onmessage = ev => {\n            resolve(ev.data);\n            worker.terminate();\n        };\n    }, token);\n\n    worker.postMessage(args);\n\n    return promise as Promise<T>;\n}\n"],"mappings":"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"}