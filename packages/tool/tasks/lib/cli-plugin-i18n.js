/* eslint-disable
    @stylistic:js/indent,
 */
'use strict';

const {
    resolve,
    dirname,
    basename,
} = require('node:path');
const { mkdir, writeFile } = require('node:fs/promises');
const colors = require('../colors');

const COMMAND = 'i18n';

function defineCommands(commander, cmd, isDefault) {
    commander
        .command(`${COMMAND} <mode>`)
        .description('i18n utility')
        .option('-i, --input <path>',  'input file')
        .option('-o, --output <path>', 'output file')
        .action((mode, options) => {
            cmd.action = COMMAND;
            const { cwd, silent } = commander.opts();
            const { input, output } = options;
            cmd[COMMAND] = isDefault ? defaultOptions() : {
                cwd: cwd || process.cwd(),
                silent,
                mode,
                input,
                output,

            };
        })
        .on('--help', () => {
            console.log(
`
Examples:
  $ cdp-task i18n genkey --input=<input json> --output=<output d.ts>  for generating i18n key d.ts file`
            );
        });

    return '  $ cdp-task i18n <mode> [options] manage i18n utility tasks';
}

function defaultOptions() {
    return {
        cwd: process.cwd(),
        silent: false,
    };
}

function banner(dst) {
    const file = basename(dst);

    return (
`
/*!
 * ${file}
 *
 * !! DO NOT MODIFY !!
 *  This file is generated by the 'cdp-task i18n genkey'.
 *
 * Created Date: ${new Date().toISOString()}
 */
`.trim()
    );
}

async function generateKey({ cwd, input, output }) {
    if (!input || !output) {
        throw new Error('"input" & "output" must be specified');
    }

    const src = resolve(cwd, input);
    const dst = resolve(cwd, output);

    const parse = (messages, path = '') => {
        const result = {};
        for (const key in messages) {
            const val = messages[key];
            const newPath = 0 === path.length ? key : `${path}.${key}`;
            if ('object' === typeof val) {
                result[key] = parse(val, newPath);
            } else {
                result[key] = newPath;
            }
        }
        return result;
    };

    const define = parse(require(src));
    const i18nKey = `${banner(dst)}\n\nexport const i18nKey = ${JSON.stringify(define, null, 4).replace(/"/gm, `'`)};\n`;

    await mkdir(dirname(dst), { recursive: true });
    await writeFile(dst, i18nKey);

    console.log(colors.gray(`  generated: ${output}`));
}

async function exec(options) {
    options = options || defaultOptions();
    switch (options.mode) {
        case 'genkey':
            await generateKey(options);
            break;
        default:
            throw new Error(`unknown mode. [mode: ${options.mode}]`);
    }
}

module.exports = {
    exec,
    defineCommands,
    command: COMMAND,
};
