{"version":3,"sources":["cdp:///@cdp/extension-template-transformer/lit-transformer/src/lit-transformer.js","cdp:///@cdp/extension-template-transformer/lit-transformer/src/helper/dataHelper.js","cdp:///@cdp/extension-template-transformer/lit-transformer/src/transformers/variableTransformer.js","cdp:///@cdp/extension-template-transformer/lit-transformer/src/transformers/unsafeVariable.js","cdp:///@cdp/extension-template-transformer/lit-transformer/src/helper/isMustacheFalsy.js","cdp:///@cdp/extension-template-transformer/lit-transformer/src/helper/sectionHelper.js","cdp:///@cdp/extension-template-transformer/lit-transformer/src/transformers/section.js","cdp:///@cdp/extension-template-transformer/lit-transformer/src/transformers/invertedSection.js","cdp:///@cdp/extension-template-transformer/lit-transformer/src/transformers/comment.js","cdp:///@cdp/extension-template-transformer/lit-transformer/src/transformers/customDelimiter.js","cdp:///@cdp/extension-template-transformer/index.ts","cdp:///@cdp/extension-template-transformer/lit-transformer/src/lit-transformer-configuredOutOfTheBox.js"],"names":["createCustom","config","strTemplate","transform","tmpl2Parse","staticParts","insertionPoints","remainingTmplStr","startIndexOfIP","indexOf","delimiter","start","end","Error","push","substring","iPTransformResult","transformIP","length","insertionPoint","lastStaticPart","pop","ctx","html","map","iP","transformer","Object","values","transformers","find","t","test","transformFunction","transformVariable","ctx2Value","key","result","k","split","hasOwnProperty","ctx2MustacheString","mustacheStringyfy","value","variable","indexOfEndDelimiter","dataKey","unsafeVariable","unsafeHTML","isMustacheFalsy","undefined","NaN","some","falsy","parseSection","tmplStr","indexOfStartTagEnd","endTag","indexOfEndTagStart","innerTmpl","section","parsedSection","transformedInnerTmpl","sectionData","innerCtx","invertedSection","comment","customDelimiter","originalEndDeliLength","indexOfEndTag","newStartDeli","newEndDeli","createTransformFactory","arg1","arg2","createTransform","unsafeVariableTransformer","sectionTransformer","invertedSectionTransformer","customDelimiterTransformer","assign"],"mappings":"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","sourcesContent":["/** \r\n * @param {object} config = {\r\n *  html: lit-html.html,\r\n *  delimiter: { start: '{{', end: '}}' },\r\n *  transformers: { // note that transformVariable is not here. It gets applied when no transformer.test has passed\r\n *    name: {\r\n *      test: (str, config) => bool,\r\n *      transform: (str, config) => ({\r\n *        remainingTmplStr: str,\r\n *        insertionPoint: ctx => lit-html.TemplateResult | undefined, // if undefined remainingTmplStr will be merged with last static part \r\n *      }),\r\n *    },\r\n *  },\r\n *  transformVariable, \r\n * }\r\n * @returns {function} strTemplate => ctx => lit-html.TemplateResult\r\n */\r\nexport default config => strTemplate => transform(strTemplate, config)\r\n\r\nexport function transform(tmpl2Parse, config) {\r\n  const staticParts = []\r\n  const insertionPoints = []\r\n\r\n  let remainingTmplStr = tmpl2Parse\r\n  let startIndexOfIP = remainingTmplStr.indexOf(config.delimiter.start)\r\n  while (startIndexOfIP >= 0) {\r\n    if (remainingTmplStr.indexOf(config.delimiter.end, startIndexOfIP) < 0)\r\n      throw new Error(`missing end delimiter at: '${remainingTmplStr}'`)\r\n\r\n    staticParts.push(remainingTmplStr.substring(0, startIndexOfIP))\r\n\r\n    const iPTransformResult = transformIP(\r\n      remainingTmplStr.substring(startIndexOfIP + config.delimiter.start.length),\r\n      config\r\n    )\r\n\r\n    if (iPTransformResult.insertionPoint) {\r\n      remainingTmplStr = iPTransformResult.remainingTmplStr\r\n      insertionPoints.push(iPTransformResult.insertionPoint)\r\n      startIndexOfIP = remainingTmplStr.indexOf(config.delimiter.start)\r\n    } else { // e.g. comment or customDelimeter\r\n      const lastStaticPart = staticParts.pop()\r\n      remainingTmplStr = lastStaticPart + iPTransformResult.remainingTmplStr\r\n      startIndexOfIP = remainingTmplStr.indexOf(config.delimiter.start, lastStaticPart.length)\r\n    }\r\n  }\r\n\r\n  staticParts.push(remainingTmplStr)\r\n\r\n  return ctx =>\r\n    config.html(staticParts, ...insertionPoints.map(iP => iP(ctx)))\r\n}\r\n\r\nfunction transformIP(remainingTmplStr, config) {\r\n  const transformer = Object.values(config.transformers).find(t => t.test(remainingTmplStr, config))\r\n  const transformFunction = transformer\r\n    ? transformer.transform\r\n    : config.transformVariable\r\n  return transformFunction(remainingTmplStr, config)\r\n}","export function ctx2Value(ctx, key) {\r\n  if (key === '.')\r\n    return ctx\r\n\r\n  let result = ctx\r\n  for (let k of key.split('.')) {\r\n    if (!result.hasOwnProperty(k))\r\n      return ''\r\n\r\n    result = result[k]\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport function ctx2MustacheString(ctx, key) {\r\n  return mustacheStringyfy(ctx2Value(ctx, key))\r\n}\r\n\r\nfunction mustacheStringyfy(value) {\r\n  if (value === undefined || value === null)\r\n    return ''\r\n\r\n  return '' + value\r\n}","import { ctx2MustacheString } from '../helper/dataHelper.js'\r\n\r\nexport default (remainingTmplStr, { delimiter }) => {\r\n  const indexOfEndDelimiter = remainingTmplStr.indexOf(delimiter.end)\r\n  const dataKey = remainingTmplStr.substring(0, indexOfEndDelimiter)\r\n  return {\r\n    remainingTmplStr: remainingTmplStr.substring(indexOfEndDelimiter + delimiter.end.length),\r\n    insertionPoint: ctx => ctx2MustacheString(ctx, dataKey)\r\n  }\r\n}","import { ctx2MustacheString } from '../helper/dataHelper.js'\r\n\r\n/** Note, this is unsafe to use, because the rendered output could be any JavaScript! */\r\nexport default unsafeHTML => ({\r\n  test: remainingTmplStr => remainingTmplStr[0] === '{',\r\n  transform: (remainingTmplStr, { delimiter }) => {\r\n    const indexOfEndDelimiter = remainingTmplStr.indexOf('}' + delimiter.end)\r\n    if (indexOfEndDelimiter < 0)\r\n      throw new Error(`missing end delimiter at: '${delimiter.start}${remainingTmplStr}'`)\r\n  \r\n    const dataKey = remainingTmplStr.substring(1, indexOfEndDelimiter)\r\n    return {\r\n      remainingTmplStr: remainingTmplStr.substring(indexOfEndDelimiter + 1 + delimiter.end.length),\r\n      insertionPoint: ctx => unsafeHTML(ctx2MustacheString(ctx, dataKey)),\r\n    }\r\n  }\r\n})","export function isMustacheFalsy(value) {\r\n  return [null, undefined, false, 0, NaN, '']\r\n    .some(falsy => falsy === value)\r\n    || (value.length && value.length === 0)\r\n}","export function parseSection(tmplStr, delimiter) {\r\n  const indexOfStartTagEnd = tmplStr.indexOf(delimiter.end)\r\n  const dataKey = tmplStr.substring(1, indexOfStartTagEnd)\r\n  const endTag = `${delimiter.start}/${dataKey}${delimiter.end}`\r\n  const indexOfEndTagStart = tmplStr.indexOf(endTag)\r\n  if (indexOfEndTagStart < 0)\r\n    throw new Error(`missing end delimiter at: '${delimiter.start}${tmplStr}'`)\r\n  \r\n  return {\r\n    dataKey,\r\n    innerTmpl: tmplStr.substring(indexOfStartTagEnd + delimiter.start.length, indexOfEndTagStart),\r\n    remainingTmplStr: tmplStr.substring(indexOfEndTagStart + endTag.length),\r\n  }\r\n}","import { transform } from '../lit-transformer.js'\r\nimport { ctx2Value } from '../helper/dataHelper.js'\r\nimport { isMustacheFalsy } from '../helper/isMustacheFalsy.js'\r\nimport { parseSection } from '../helper/sectionHelper.js'\r\n\r\n/** Note, unlike within mustache functions as data values are not supported out of the box */\r\nexport default () => ({\r\n  test: remainingTmplStr => remainingTmplStr[0] === '#',\r\n  transform: (remainingTmplStr, config) => {\r\n    const parsedSection = parseSection(remainingTmplStr, config.delimiter)\r\n    const transformedInnerTmpl = transform(parsedSection.innerTmpl, config)\r\n    \r\n    return {\r\n      remainingTmplStr: parsedSection.remainingTmplStr,\r\n      insertionPoint: ctx => {\r\n        const sectionData = ctx2Value(ctx, parsedSection.dataKey)\r\n        \r\n        if (isMustacheFalsy(sectionData))\r\n          return '';\r\n\r\n        return sectionData.map\r\n          ? sectionData.map(innerCtx => transformedInnerTmpl(innerCtx))\r\n          : transformedInnerTmpl(ctx)\r\n      }\r\n    }\r\n  }\r\n})","import { ctx2Value } from '../helper/dataHelper.js'\r\nimport { isMustacheFalsy } from '../helper/isMustacheFalsy.js'\r\nimport { parseSection } from '../helper/sectionHelper.js'\r\n\r\nexport default () => ({\r\n  test: remainingTmplStr => remainingTmplStr[0] === '^',\r\n  transform: (remainingTmplStr, { delimiter }) => {\r\n    const parsedSection = parseSection(remainingTmplStr, delimiter)\r\n\r\n    return {\r\n      remainingTmplStr: parsedSection.remainingTmplStr,\r\n      insertionPoint: ctx =>\r\n        isMustacheFalsy(ctx2Value(ctx, parsedSection.dataKey))\r\n          ? parsedSection.innerTmpl\r\n          : '',\r\n    }\r\n  }\r\n})","export default () => ({\r\n  test: remainingTmplStr => remainingTmplStr[0] === '!',\r\n  transform: (remainingTmplStr, { delimiter }) => ({\r\n    remainingTmplStr: remainingTmplStr.substring(remainingTmplStr.indexOf(delimiter.end) + delimiter.end.length),\r\n    insertionPoint: undefined,\r\n  })\r\n})","export default () => ({\r\n  test: remainingTmplStr => remainingTmplStr[0] === '=',\r\n  transform: (remainingTmplStr, config) => {\r\n    const originalEndDeliLength = config.delimiter.end.length\r\n    const indexOfEndTag = remainingTmplStr.indexOf('=' + config.delimiter.end)\r\n    if (indexOfEndTag < 0 )\r\n      throw new Error(`missing end delimiter at: '${remainingTmplStr}'`)\r\n\r\n    const [ newStartDeli, newEndDeli ] = remainingTmplStr.substring(1, indexOfEndTag).split(' ')\r\n\r\n    config.delimiter.start = newStartDeli\r\n    config.delimiter.end = newEndDeli\r\n    \r\n    return {\r\n      remainingTmplStr: remainingTmplStr.substring(indexOfEndTag + 1 + originalEndDeliLength),\r\n      insertionPoint: undefined,  \r\n    }\r\n  }\r\n})","import type {\n    TemplateTag,\n    TransformDirective,\n    TemplateTransformer,\n    TransformTester,\n    TransformExecutor,\n    TransformeContext,\n    TransformConfig,\n} from 'lit-transformer/src/interfaces';\n\nimport createDefault from 'lit-transformer';\nimport createCustom from 'lit-transformer/src/lit-transformer';\n\nimport variable from 'lit-transformer/src/transformers/variableTransformer';\nimport unsafeVariable from 'lit-transformer/src/transformers/unsafeVariable';\nimport section from 'lit-transformer/src/transformers/section';\nimport invertedSection from 'lit-transformer/src/transformers/invertedSection';\nimport comment from 'lit-transformer/src/transformers/comment';\nimport customDelimiter from 'lit-transformer/src/transformers/customDelimiter';\n\nfunction createTransformFactory(html: TemplateTag, unsafeHTML: TransformDirective): TemplateTransformer;\nfunction createTransformFactory(config: TransformConfig): TemplateTransformer;\nfunction createTransformFactory(arg1: unknown, arg2?: unknown): TemplateTransformer {\n    if ('function' === typeof arg1) {\n        return createDefault(arg1 as TemplateTag, arg2 as TransformDirective);\n    } else {\n        return createCustom(Object.assign({\n            delimiter: { start: '{{', end: '}}' },\n            transformers: {},\n        }, arg1) as TransformConfig);\n    }\n}\n\nconst transformer: {\n    variable: TransformExecutor;\n    unsafeVariable: (unsafeHTML: TransformDirective) => TransformeContext;\n    section: () => TransformeContext;\n    invertedSection: () => TransformeContext;\n    comment: () => TransformeContext;\n    customDelimiter: () => TransformeContext;\n} = {\n    variable,\n    unsafeVariable,\n    section,\n    invertedSection,\n    comment,\n    customDelimiter,\n};\n\nexport {\n    TemplateTag,\n    TransformDirective,\n    TemplateTransformer,\n    TransformTester,\n    TransformExecutor,\n    TransformeContext,\n    TransformConfig,\n    createTransformFactory,\n    transformer,\n};\n","import createTransform from './lit-transformer.js'\r\nimport transformVariable from './transformers/variableTransformer.js'\r\nimport unsafeVariableTransformer from './transformers/unsafeVariable.js'\r\nimport sectionTransformer from './transformers/section.js'\r\nimport invertedSectionTransformer from './transformers/invertedSection.js'\r\nimport commentTransformer from './transformers/comment.js'\r\nimport customDelimiterTransformer from './transformers/customDelimiter.js'\r\n\r\nexport default (html, unsafeHTML) =>\r\n  createTransform({\r\n    html,\r\n    delimiter: { start: '{{', end: '}}' },\r\n    transformVariable,\r\n    transformers: {\r\n      unsafeVariable: unsafeVariableTransformer(unsafeHTML),\r\n      section: sectionTransformer(),\r\n      invertedSection: invertedSectionTransformer(),\r\n      comment: commentTransformer(),\r\n      customDelimiterTransformer: customDelimiterTransformer(),\r\n    },\r\n  })"]}