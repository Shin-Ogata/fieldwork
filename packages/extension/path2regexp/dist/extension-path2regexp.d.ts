/*!
 * @cdp/extension-path2regexp 0.9.18
 *   Generated by 'cdp-task bundle dts' task.
 *   - built with TypeScript 5.6.2
 *   - includes:
 *     - path-to-regexp
 */

declare namespace path2regexp {
/**
 * Encode a string into another string.
 */
export type Encode = (value: string) => string;
/**
 * Decode a string into another string.
 */
export type Decode = (value: string) => string;
export interface ParseOptions {
    /**
     * The default delimiter for segments. (default: `'/'`)
     */
    delimiter?: string;
    /**
     * A function for encoding input strings.
     */
    encodePath?: Encode;
}
export interface PathToRegexpOptions extends ParseOptions {
    /**
     * Regexp will be case sensitive. (default: `false`)
     */
    sensitive?: boolean;
    /**
     * Allow the delimiter to be arbitrarily repeated. (default: `true`)
     */
    loose?: boolean;
    /**
     * Verify patterns are valid and safe to use. (default: `false`)
     */
    strict?: boolean;
    /**
     * Match from the beginning of the string. (default: `true`)
     */
    start?: boolean;
    /**
     * Match to the end of the string. (default: `true`)
     */
    end?: boolean;
    /**
     * Allow optional trailing delimiter to match. (default: `true`)
     */
    trailing?: boolean;
}
export interface MatchOptions extends PathToRegexpOptions {
    /**
     * Function for decoding strings for params, or `false` to disable entirely. (default: `decodeURIComponent`)
     */
    decode?: Decode | false;
}
export interface CompileOptions extends ParseOptions {
    /**
     * Regexp will be case sensitive. (default: `false`)
     */
    sensitive?: boolean;
    /**
     * Allow the delimiter to be arbitrarily repeated. (default: `true`)
     */
    loose?: boolean;
    /**
     * Verify patterns are valid and safe to use. (default: `false`)
     */
    strict?: boolean;
    /**
     * Verifies the function is producing a valid path. (default: `true`)
     */
    validate?: boolean;
    /**
     * Function for encoding input strings for output into the path, or `false` to disable entirely. (default: `encodeURIComponent`)
     */
    encode?: Encode | false;
}
export interface TokenData {
    readonly tokens: Token[];
    readonly delimiter: string;
}
export function parse(str: string, options?: ParseOptions): TokenData;
export function compile<P extends ParamData = ParamData>(path: Path, options?: CompileOptions): PathFunction<P>;
export type ParamData = Partial<Record<string, string | string[]>>;
export type PathFunction<P extends ParamData> = (data?: P) => string;
/**
 * A match result contains data about the path match.
 */
export interface MatchResult<P extends ParamData> {
    path: string;
    index: number;
    params: P;
}
/**
 * A match is either `false` (no match) or a match result.
 */
export type Match<P extends ParamData> = false | MatchResult<P>;
/**
 * The match function takes a string and returns whether it matched the path.
 */
export type MatchFunction<P extends ParamData> = (path: string) => Match<P>;
export function match<P extends ParamData>(path: Path, options?: MatchOptions): MatchFunction<P>;
/**
 * A key is a capture group in the regex.
 */
export interface Key {
    name: string;
    prefix?: string;
    suffix?: string;
    pattern?: string;
    modifier?: string;
    separator?: string;
}
/**
 * A token is a string (nothing special) or key metadata (capture group).
 */
export type Token = string | Key;
/**
 * Repeated and simple input types.
 */
export type Path = string | TokenData;
export function pathToRegexp(path: Path, options?: PathToRegexpOptions): RegExp & {
    keys: Key[];
};
}
export { path2regexp };
