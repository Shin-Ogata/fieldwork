{"version":3,"sources":["cdp:///@cdp/extension-template/lit-html/src/lit-html.ts","cdp:///@cdp/extension-template/lit-html/src/directive.ts","cdp:///@cdp/extension-template/lit-html/src/directive-helpers.ts","cdp:///@cdp/extension-template/lit-html/src/async-directive.ts","cdp:///@cdp/extension-template/lit-html/src/directives/private-async-helpers.ts","cdp:///@cdp/extension-template/lit-html/src/directives/async-replace.ts","cdp:///@cdp/extension-template/lit-html/src/directives/async-append.ts","cdp:///@cdp/extension-template/lit-html/src/directives/cache.ts","cdp:///@cdp/extension-template/lit-html/src/directives/class-map.ts","cdp:///@cdp/extension-template/lit-html/src/directives/guard.ts","cdp:///@cdp/extension-template/lit-html/src/directives/live.ts","cdp:///@cdp/extension-template/lit-html/src/directives/ref.ts","cdp:///@cdp/extension-template/lit-html/src/directives/repeat.ts","cdp:///@cdp/extension-template/lit-html/src/directives/style-map.ts","cdp:///@cdp/extension-template/lit-html/src/directives/template-content.ts","cdp:///@cdp/extension-template/lit-html/src/directives/unsafe-html.ts","cdp:///@cdp/extension-template/lit-html/src/directives/unsafe-svg.ts","cdp:///@cdp/extension-template/lit-html/src/directives/until.ts","cdp:///@cdp/extension-template/index.ts","cdp:///@cdp/extension-template/lit-html/src/directives/if-defined.ts"],"names":["trustedTypes","globalThis","policy","createPolicy","createHTML","s","undefined","boundAttributeSuffix","marker","String","Math","random","slice","markerMatch","nodeMarker","d","document","createMarker","v","createComment","isPrimitive","value","isArray","Array","isIterable","_a","Symbol","iterator","textEndRegex","commentEndRegex","comment2EndRegex","tagEndRegex","RegExp","singleQuoteAttrEndRegex","doubleQuoteAttrEndRegex","rawTextElement","tag","type","strings","values","_$litType$","html","svg","noChange","for","nothing","templateCache","WeakMap","render","container","options","partOwnerNode","renderBefore","part","endNode","_b","ChildPart","insertBefore","_$setValue","walker","createTreeWalker","getTemplateHtml","l","length","attrNames","rawTextEndRegex","regex","i","attrName","match","attrNameEndIndex","lastIndex","exec","test","end","startsWith","push","htmlResult","Template","constructor","node","this","parts","nodeIndex","attrNameIndex","partCount","el","createElement","currentNode","content","svgElement","firstChild","remove","append","childNodes","nextNode","nodeType","hasAttributes","attrsToRemove","name","getAttributeNames","endsWith","realName","getAttribute","toLowerCase","statics","split","m","index","ctor","PropertyPart","BooleanAttributePart","EventPart","AttributePart","removeAttribute","tagName","textContent","emptyScript","data","indexOf","static","_options","innerHTML","resolveDirective","parent","attributeIndex","currentDirective","__directives","__directive","nextDirectiveConstructor","call","_$initialize","_c","_d","_$resolve","TemplateInstance","template","_parts","_$disconnectableChildren","_$template","_$parent","parentNode","_$isConnected","_clone","fragment","creationScope","importNode","partIndex","templatePart","nextSibling","ElementPart","_update","startNode","_$committedValue","_$startNode","_$endNode","__isConnected","isConnected","directiveParent","_$clear","_commitText","_commitTemplateResult","_commitNode","_commitIterable","_insert","ref","createTextNode","result","_$getTemplate","h","instance","get","set","itemParts","itemPart","item","start","from","_$notifyConnectionChanged","n","setConnected","element","fill","valueIndex","noCommit","change","_commitValue","setAttribute","emptyStringForBooleanAttribute","super","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","removeEventListener","addEventListener","handleEvent","event","host","_$LH","_boundAttributeSuffix","_marker","_markerMatch","_HTML_RESULT","_getTemplateHtml","_TemplateInstance","_isIterable","_resolveDirective","_ChildPart","_AttributePart","_BooleanAttributePart","_EventPart","_PropertyPart","_ElementPart","polyfillSupport","window","litHtmlPolyfillSupport","litHtmlVersions","PartType","ATTRIBUTE","CHILD","PROPERTY","BOOLEAN_ATTRIBUTE","EVENT","ELEMENT","directive","c","_$litDirective$","Directive","_partInfo","__part","__attributeIndex","props","update","_part","isTemplateResult","isSingleExpression","insertPart","containerPart","refPart","refNode","oldParent","parentChanged","newConnectionState","_$reparentDisconnectables","setChildPartValue","RESET_VALUE","setCommittedValue","getCommittedValue","removePart","clearPart","notifyChildrenConnectedChanged","children","obj","removeDisconnectableFromParent","delete","size","addDisconnectableToParent","Set","has","add","installDisconnectAPI","reparentDisconnectables","newParent","notifyChildPartConnectedChanged","isClearingValue","fromPartIndex","AsyncDirective","_$notifyDirectiveConnectionChanged","isClearingDirective","reconnected","disconnected","setValue","newValues","PseudoWeakRef","_ref","disconnect","reconnect","deref","Pauser","_promise","_resolve","pause","Promise","resolve","resume","AsyncReplaceDirective","__weakThis","__pauser","_mapper","mapper","__value","weakThis","pauser","async","iterable","callback","forAwaitOf","_this","commitValue","_index","asyncReplace","asyncAppend","AsyncAppendDirective","partInfo","Error","params","__childPart","newPart","cache","CacheDirective","_templateCache","_value","partValue","childPart","pop","cachedContainerPart","createDocumentFragment","cachedPart","classMap","ClassMapDirective","classInfo","Object","keys","filter","key","join","_previousClasses","_staticClasses","classList","forEach","initialValue","guard","GuardDirective","_previousValue","f","every","r","live","LiveDirective","hasAttribute","Ref","lastElementForCallback","RefDirective","refChanged","_updateRefValue","_lastElementForRef","_element","_context","generateMap","list","map","Map","repeat","RepeatDirective","_getValuesAndKeys","items","keyFnOrTemplate","keyFn","oldParts","newKeys","_itemKeys","oldKeys","newParts","newKeyToIndexMap","oldKeyToIndexMap","oldHead","oldTail","newHead","newTail","oldIndex","oldPart","styleMap","StyleMapDirective","styleInfo","reduce","style","prop","replace","_previousStyleProperties","includes","removeProperty","setProperty","templateContent","TemplateContentDirective","_previousTemplate","UnsafeHTMLDirective","directiveName","_templateResult","raw","resultType","unsafeHTML","UnsafeSVGDirective","unsafeSVG","isPromise","x","then","_infinity","until","UntilDirective","__lastRenderedIndex","__values","args","find","previousValues","previousLength","directives","ifDefined","src","ta"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\n/**\n * `true` if we're building for google3 with temporary back-compat helpers.\n * This export is not present in prod builds.\n * @internal\n */\nexport const INTERNAL = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  globalThis.litIssuedWarnings ??= new Set();\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!globalThis.litIssuedWarnings!.has(warning)) {\n      console.warn(warning);\n      globalThis.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\nconst trustedTypes = (globalThis as unknown as Partial<Window>).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute'\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute'\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${String(Math.random()).slice(9)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d = document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = (v = '') => d.createComment(v);\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g'\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions.\n */\nexport type TemplateResult<T extends ResultType = ResultType> = {\n  // This property needs to remain unminified.\n  ['_$litType$']: T;\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  // This property needs to remain unminified.\n  ['_$litType$']: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  h: TrustedHTML;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n  <T extends ResultType>(type: T) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult<T> => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n      console.warn(\n        'Some template strings are undefined.\\n' +\n          'This is probably caused by illegal octal escape sequences.'\n      );\n    }\n    return {\n      // This property needs to remain unminified.\n      ['_$litType$']: type,\n      strings,\n      values,\n    };\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - the must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n  /**\n   * The initial connected state for the top-level part being rendered. If no\n   * `isConnected` option is set, `AsyncDirective`s will be connected by\n   * default. Set to `false` if the initial render occurs in a disconnected tree\n   * and `AsyncDirective`s should see `isConnected === false` for their initial\n   * render. The `part.setConnected()` method must be used subsequent to initial\n   * render to change the connected state of the part.\n   */\n  isConnected?: boolean;\n}\n\n/**\n * Internally we can export this interface and change the type of\n * render()'s options.\n */\ninterface InternalRenderOptions extends RenderOptions {\n  /**\n   * An internal-only migration flag\n   * @internal\n   */\n  clearContainerForLit2MigrationOnly?: boolean;\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n * @param value\n * @param container\n * @param options\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions\n): RootPart => {\n  const partOwnerNode = options?.renderBefore ?? container;\n  // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)['_$litPart$'];\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // Internal modification: don't clear container to match lit-html 2.0\n    if (\n      INTERNAL &&\n      (options as InternalRenderOptions)?.clearContainerForLit2MigrationOnly ===\n        true\n    ) {\n      let n = container.firstChild;\n      // Clear only up to the `endNode` aka `renderBefore` node.\n      while (n && n !== endNode) {\n        const next = n.nextSibling;\n        n.remove();\n        n = next;\n      }\n    }\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)['_$litPart$'] = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options ?? {}\n    );\n  }\n  part._$setValue(value);\n  return part as RootPart;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */,\n  null,\n  false\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  _$isConnected: boolean;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment comment markers denoting the\n * `ChildPart`s and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [TrustedHTML, Array<string | undefined>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string | undefined> = [];\n  let html = type === SVG_RESULT ? '<svg>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error(\n              'Bindings in tag names are not supported. Please use static templates instead. ' +\n                'See https://lit.dev/docs/templates/expressions/#static-expressions'\n            );\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n              ? doubleQuoteAttrEndRegex\n              : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B'\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n        ? (attrNames.push(attrName!),\n          s.slice(0, attrNameEndIndex) +\n            boundAttributeSuffix +\n            s.slice(attrNameEndIndex)) +\n          marker +\n          end\n        : s +\n          marker +\n          (attrNameEndIndex === -2 ? (attrNames.push(undefined), i) : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : '');\n\n  // Returned as an array for terseness\n  return [\n    policy !== undefined\n      ? policy.createHTML(htmlResult)\n      : (htmlResult as unknown as TrustedHTML),\n    attrNames,\n  ];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n  /** @internal */\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    // This property needs to remain unminified.\n    {strings, ['_$litType$']: type}: TemplateResult,\n    options?: RenderOptions\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Reparent SVG nodes into template root\n    if (type === SVG_RESULT) {\n      const content = this.el.content;\n      const svgElement = content.firstChild!;\n      svgElement.remove();\n      content.append(...svgElement.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = (node as Element).localName;\n          // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n          if (\n            /^(?:textarea|template)$/i!.test(tag) &&\n            (node as Element).innerHTML.includes(marker)\n          ) {\n            const m =\n              `Expressions are not supported inside \\`${tag}\\` ` +\n              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n              `information.`;\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        }\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          // We defer removing bound attributes because on IE we might not be\n          // iterating attributes in their template order, and would sometimes\n          // remove an attribute that we still need to create a part for.\n          const attrsToRemove = [];\n          for (const name of (node as Element).getAttributeNames()) {\n            // `name` is the name of the attribute we're iterating over, but not\n            // _neccessarily_ the name of the attribute we will create a part\n            // for. They can be different in browsers that don't iterate on\n            // attributes in source order. In that case the attrNames array\n            // contains the attribute name we'll process next. We only need the\n            // attribute name here to know if we should process a bound attribute\n            // on this element.\n            if (\n              name.endsWith(boundAttributeSuffix) ||\n              name.startsWith(marker)\n            ) {\n              const realName = attrNames[attrNameIndex++];\n              attrsToRemove.push(name);\n              if (realName !== undefined) {\n                // Lowercase for case-sensitive SVG attributes like viewBox\n                const value = (node as Element).getAttribute(\n                  realName.toLowerCase() + boundAttributeSuffix\n                )!;\n                const statics = value.split(marker);\n                const m = /([.?@])?(.*)/.exec(realName)!;\n                parts.push({\n                  type: ATTRIBUTE_PART,\n                  index: nodeIndex,\n                  name: m[2],\n                  strings: statics,\n                  ctor:\n                    m[1] === '.'\n                      ? PropertyPart\n                      : m[1] === '?'\n                      ? BooleanAttributePart\n                      : m[1] === '@'\n                      ? EventPart\n                      : AttributePart,\n                });\n              } else {\n                parts.push({\n                  type: ELEMENT_PART,\n                  index: nodeIndex,\n                });\n              }\n            }\n          }\n          for (const name of attrsToRemove) {\n            (node as Element).removeAttribute(name);\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? (trustedTypes.emptyScript as unknown as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized when cloning in IE (could simplify when\n            // IE is no longer supported)\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @nocollapse */\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = html as unknown as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // Rather than hold connection state on instances, Disconnectables recursively\n  // fetch the connection state from the RootPart they are connected in via\n  // getters up the Disconnectable tree via _$parent references. This pushes the\n  // cost of tracking the isConnected state to `AsyncDirectives`, and avoids\n  // needing to pass all Disconnectables (parts, template instances, and\n  // directives) their connection state each time it changes, which would be\n  // costly for trees that have no AsyncDirectives.\n  _$isConnected: boolean;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : // This property needs to remain unminified.\n      (value as DirectiveResult)['_$litDirective$'];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[attributeIndex] =\n        currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex\n    );\n  }\n  return value;\n}\n\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance implements Disconnectable {\n  /** @internal */\n  _$template: Template;\n  /** @internal */\n  _parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: ChildPart;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // Called by ChildPart parentNode getter\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  /** @internal */\n  readonly ctor: typeof AttributePart;\n  /** @internal */\n  readonly strings: ReadonlyArray<string>;\n};\ntype NodeTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | NodeTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart implements Disconnectable {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown = nothing;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /**\n   * Connection state for RootParts only (i.e. ChildPart without _$parent\n   * returned from top-level `render`). This field is unsed otherwise. The\n   * intention would clearer if we made `RootPart` a subclass of `ChildPart`\n   * with this field (and a different _$isConnected getter), but the subclass\n   * caused a perf regression, possibly due to making call sites polymorphic.\n   * @internal\n   */\n  __isConnected: boolean;\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$notifyConnectionChanged?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    let parentNode: Node = wrap(this._$startNode).parentNode!;\n    const parent = this._$parent;\n    if (\n      parent !== undefined &&\n      parentNode.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = (parent as ChildPart | TemplateInstance).parentNode;\n    }\n    return parentNode;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(\n        `This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`\n      );\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n      // This property needs to remain unminified.\n    } else if ((value as TemplateResult)['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T, ref = this._$endNode) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(node, ref);\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message =\n                `Lit does not support binding inside style nodes. ` +\n                `This is a security risk, as style injection attacks can ` +\n                `exfiltrate data and spoof UIs. ` +\n                `Consider instead using css\\`...\\` literals ` +\n                `to compose styles, and make do dynamic styling with ` +\n                `css custom properties, ::parts, <slot>s, ` +\n                `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message =\n                `Lit does not support binding inside script nodes. ` +\n                `This is a security risk, as it could allow arbitrary ` +\n                `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (\n      this._$committedValue !== nothing &&\n      isPrimitive(this._$committedValue)\n    ) {\n      const node = wrap(this._$startNode).nextSibling as Text;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = document.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its contentx.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult\n  ): void {\n    // This property needs to remain unminified.\n    const {values, ['_$litType$']: type} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof type === 'number'\n        ? this._$getTemplate(result as TemplateResult)\n        : (type.el === undefined &&\n            (type.el = Template.createElement(type.h, this.options)),\n          type);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      instance._update(values);\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: TemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options\n          ))\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number\n  ) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start && start !== this._$endNode) {\n      const n = wrap(start!).nextSibling;\n      (wrap(start!) as Element).remove();\n      start = n;\n    }\n  }\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this metod\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n  setConnected(isConnected: boolean) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE) {\n      throw new Error(\n        'part.setConnected() may only be called on a ' +\n          'RootPart returned from render().'\n      );\n    }\n  }\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\nexport interface RootPart extends ChildPart {\n  /**\n   * Sets the connection state for `AsyncDirective`s contained within this root\n   * ChildPart.\n   *\n   * lit-html does not automatically monitor the connectedness of DOM rendered;\n   * as such, it is the responsibility of the caller to `render` to ensure that\n   * `part.setConnected(false)` is called before the part object is potentially\n   * discarded, to ensure that `AsyncDirective`s have a chance to dispose of\n   * any resources being held. If a `RootPart` that was prevously\n   * disconnected is subsequently re-connected (and its `AsyncDirective`s should\n   * re-connect), `setConnected(true)` should be called.\n   *\n   * @param isConnected Whether directives within this tree should be connected\n   * or not\n   */\n  setConnected(isConnected: boolean): void;\n}\n\nexport type {AttributePart};\nclass AttributePart implements Disconnectable {\n  readonly type = ATTRIBUTE_PART as\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute'\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  override readonly type = PROPERTY_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property'\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  override readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (value && value !== nothing) {\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        emptyStringForBooleanAttribute\n      );\n    } else {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    }\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  override readonly type = EVENT_PART;\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    super(element, name, strings, parent, options);\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(\n        `A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n          'invalid content. Event listeners in templates must have exactly ' +\n          'one expression and no surrounding text.'\n      );\n    }\n  }\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  override _$setValue(\n    newListener: unknown,\n    directiveParent: DirectiveParent = this\n  ) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions\n      );\n    }\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart implements Disconnectable {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent!: Disconnectable;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value: unknown): void {\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in hydrate\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  // Used in tests and private-ssr-support\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? window.litHtmlPolyfillSupportDevMode\n  : window.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(globalThis.litHtmlVersions ??= []).push('2.0.2');\nif (DEV_MODE && globalThis.litHtmlVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. ` +\n      `Loading multiple versions is not recommended.`\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Disconnectable, Part} from './lit-html';\n\nexport {\n  AttributePart,\n  BooleanAttributePart,\n  ChildPart,\n  ElementPart,\n  EventPart,\n  Part,\n  PropertyPart,\n} from './lit-html';\n\nexport interface DirectiveClass {\n  new (part: PartInfo): Directive;\n}\n\n/**\n * This utility type extracts the signature of a directive class's render()\n * method so we can use it for the type of the generated directive function.\n */\nexport type DirectiveParameters<C extends Directive> = Parameters<C['render']>;\n\n/**\n * A generated directive function doesn't evaluate the directive, but just\n * returns a DirectiveResult object that captures the arguments.\n */\nexport interface DirectiveResult<C extends DirectiveClass = DirectiveClass> {\n  /**\n   * This property needs to remain unminified.\n   * @internal */\n  ['_$litDirective$']: C;\n  /** @internal */\n  values: DirectiveParameters<InstanceType<C>>;\n}\n\nexport const PartType = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6,\n} as const;\n\nexport type PartType = typeof PartType[keyof typeof PartType];\n\nexport interface ChildPartInfo {\n  readonly type: typeof PartType.CHILD;\n}\n\nexport interface AttributePartInfo {\n  readonly type:\n    | typeof PartType.ATTRIBUTE\n    | typeof PartType.PROPERTY\n    | typeof PartType.BOOLEAN_ATTRIBUTE\n    | typeof PartType.EVENT;\n  readonly strings?: ReadonlyArray<string>;\n  readonly name: string;\n  readonly tagName: string;\n}\n\nexport interface ElementPartInfo {\n  readonly type: typeof PartType.ELEMENT;\n}\n\n/**\n * Information about the part a directive is bound to.\n *\n * This is useful for checking that a directive is attached to a valid part,\n * such as with directive that can only be used on attribute bindings.\n */\nexport type PartInfo = ChildPartInfo | AttributePartInfo | ElementPartInfo;\n\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive =\n  <C extends DirectiveClass>(c: C) =>\n  (...values: DirectiveParameters<InstanceType<C>>): DirectiveResult<C> => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n  });\n\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport abstract class Directive implements Disconnectable {\n  //@internal\n  __part!: Part;\n  //@internal\n  __attributeIndex: number | undefined;\n  //@internal\n  __directive?: Directive;\n\n  //@internal\n  _$parent!: Disconnectable;\n\n  // These will only exist on the AsyncDirective subclass\n  //@internal\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // This property needs to remain unminified.\n  //@internal\n  ['_$notifyDirectiveConnectionChanged']?(isConnected: boolean): void;\n\n  constructor(_partInfo: PartInfo) {}\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  /** @internal */\n  _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    this.__part = part;\n    this._$parent = parent;\n    this.__attributeIndex = attributeIndex;\n  }\n  /** @internal */\n  _$resolve(part: Part, props: Array<unknown>): unknown {\n    return this.update(part, props);\n  }\n\n  abstract render(...props: Array<unknown>): unknown;\n\n  update(_part: Part, props: Array<unknown>): unknown {\n    return this.render(...props);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {_$LH, Part, DirectiveParent, TemplateResult} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  typeof TemplateResultType[keyof typeof TemplateResultType];\n\n/**\n * Tests if a value is a TemplateResult.\n */\nexport const isTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinal value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being commited.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnectd: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport {directive} from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Note, this module is not included in package exports so that it's private to\n// our first-party directives. If it ends up being useful, we can open it up and\n// export it.\n\n/**\n * Helper to iterate an AsyncIterable in its own closure.\n * @param iterable The iterable to iterate\n * @param callback The callback to call for each value. If the callback returns\n * `false`, the loop will be broken.\n */\nexport const forAwaitOf = async <T>(\n  iterable: AsyncIterable<T>,\n  callback: (value: T) => Promise<boolean>\n) => {\n  for await (const v of iterable) {\n    if ((await callback(v)) === false) {\n      return;\n    }\n  }\n};\n\n/**\n * Holds a reference to an instance that can be disconnected and reconnected,\n * so that a closure over the ref (e.g. in a then function to a promise) does\n * not strongly hold a ref to the instance. Approximates a WeakRef but must\n * be manually connected & disconnected to the backing instance.\n */\nexport class PseudoWeakRef<T> {\n  private _ref?: T;\n  constructor(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Disassociates the ref with the backing instance.\n   */\n  disconnect() {\n    this._ref = undefined;\n  }\n  /**\n   * Reassociates the ref with the backing instance.\n   */\n  reconnect(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Retrieves the backing instance (will be undefined when disconnected)\n   */\n  deref() {\n    return this._ref;\n  }\n}\n\n/**\n * A helper to pause and resume waiting on a condition in an async function\n */\nexport class Pauser {\n  private _promise?: Promise<void> = undefined;\n  private _resolve?: () => void = undefined;\n  /**\n   * When paused, returns a promise to be awaited; when unpaused, returns\n   * undefined. Note that in the microtask between the pauser being resumed\n   * an an await of this promise resolving, the pauser could be paused again,\n   * hence callers should check the promise in a loop when awaiting.\n   * @returns A promise to be awaited when paused or undefined\n   */\n  get() {\n    return this._promise;\n  }\n  /**\n   * Creates a promise to be awaited\n   */\n  pause() {\n    this._promise ??= new Promise((resolve) => (this._resolve = resolve));\n  }\n  /**\n   * Resolves the promise which may be awaited\n   */\n  resume() {\n    this._resolve?.();\n    this._promise = this._resolve = undefined;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart, noChange} from '../lit-html.js';\nimport {directive, DirectiveParameters} from '../directive.js';\nimport {AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef, forAwaitOf} from './private-async-helpers.js';\n\ntype Mapper<T> = (v: T, index?: number) => unknown;\n\nexport class AsyncReplaceDirective extends AsyncDirective {\n  private __value?: AsyncIterable<unknown>;\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  // @ts-expect-error value not used, but we want a nice parameter for docs\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render<T>(value: AsyncIterable<T>, _mapper?: Mapper<T>) {\n    return noChange;\n  }\n\n  override update(\n    _part: ChildPart,\n    [value, mapper]: DirectiveParameters<this>\n  ) {\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n    // If we've already set up this particular iterable, we don't need\n    // to do anything.\n    if (value === this.__value) {\n      return;\n    }\n    this.__value = value;\n    let i = 0;\n    const {__weakThis: weakThis, __pauser: pauser} = this;\n    // Note, the callback avoids closing over `this` so that the directive\n    // can be gc'ed before the promise resolves; instead `this` is retrieved\n    // from `weakThis`, which can break the hard reference in the closure when\n    // the directive disconnects\n    forAwaitOf(value, async (v: unknown) => {\n      // The while loop here handles the case that the connection state\n      // thrashes, causing the pauser to resume and then get re-paused\n      while (pauser.get()) {\n        await pauser.get();\n      }\n      // If the callback gets here and there is no `this`, it means that the\n      // directive has been disconnected and garbage collected and we don't\n      // need to do anything else\n      const _this = weakThis.deref();\n      if (_this !== undefined) {\n        // Check to make sure that value is the still the current value of\n        // the part, and if not bail because a new value owns this part\n        if (_this.__value !== value) {\n          return false;\n        }\n\n        // As a convenience, because functional-programming-style\n        // transforms of iterables and async iterables requires a library,\n        // we accept a mapper function. This is especially convenient for\n        // rendering a template for each item.\n        if (mapper !== undefined) {\n          v = mapper(v, i);\n        }\n\n        _this.commitValue(v, i);\n        i++;\n      }\n      return true;\n    });\n    return noChange;\n  }\n\n  // Override point for AsyncAppend to append rather than replace\n  protected commitValue(value: unknown, _index: number) {\n    this.setValue(value);\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * A directive that renders the items of an async iterable[1], replacing\n * previous values with new values, so that only one value is ever rendered\n * at a time. This directive may be used in any expression type.\n *\n * Async iterables are objects with a `[Symbol.asyncIterator]` method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is rendered to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncReplace = directive(AsyncReplaceDirective);\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart} from '../lit-html.js';\nimport {\n  directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\nimport {AsyncReplaceDirective} from './async-replace.js';\nimport {\n  clearPart,\n  insertPart,\n  setChildPartValue,\n} from '../directive-helpers.js';\n\nclass AsyncAppendDirective extends AsyncReplaceDirective {\n  private __childPart!: ChildPart;\n\n  // Override AsyncReplace to narrow the allowed part type to ChildPart only\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('asyncAppend can only be used in child expressions');\n    }\n  }\n\n  // Override AsyncReplace to save the part since we need to append into it\n  override update(part: ChildPart, params: DirectiveParameters<this>) {\n    this.__childPart = part;\n    return super.update(part, params);\n  }\n\n  // Override AsyncReplace to append rather than replace\n  protected override commitValue(value: unknown, index: number) {\n    // When we get the first value, clear the part. This lets the\n    // previous value display until we can replace it.\n    if (index === 0) {\n      clearPart(this.__childPart);\n    }\n    // Create and insert a new part and set its value to the next value\n    const newPart = insertPart(this.__childPart);\n    setChildPartValue(newPart, value);\n  }\n}\n\n/**\n * A directive that renders the items of an async iterable[1], appending new\n * values after previous values, similar to the built-in support for iterables.\n * This directive is usable only in child expressions.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is appended to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncAppend = directive(AsyncAppendDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {AsyncAppendDirective};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  TemplateResult,\n  ChildPart,\n  RootPart,\n  render,\n  nothing,\n} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n} from '../directive.js';\nimport {\n  clearPart,\n  getCommittedValue,\n  insertPart,\n  isTemplateResult,\n  setCommittedValue,\n} from '../directive-helpers.js';\n\nclass CacheDirective extends Directive {\n  private _templateCache = new WeakMap<TemplateStringsArray, RootPart>();\n  private _value?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n  }\n\n  render(v: unknown) {\n    // Return an array of the value to induce lit-html to create a ChildPart\n    // for the value that we can move into the cache.\n    return [v];\n  }\n\n  override update(containerPart: ChildPart, [v]: DirectiveParameters<this>) {\n    // If the previous value is a TemplateResult and the new value is not,\n    // or is a different Template as the previous value, move the child part\n    // into the cache.\n    if (\n      isTemplateResult(this._value) &&\n      (!isTemplateResult(v) || this._value.strings !== v.strings)\n    ) {\n      // This is always an array because we return [v] in render()\n      const partValue = getCommittedValue(containerPart) as Array<ChildPart>;\n      const childPart = partValue.pop()!;\n      let cachedContainerPart = this._templateCache.get(this._value.strings);\n      if (cachedContainerPart === undefined) {\n        const fragment = document.createDocumentFragment();\n        cachedContainerPart = render(nothing, fragment);\n        cachedContainerPart.setConnected(false);\n        this._templateCache.set(this._value.strings, cachedContainerPart);\n      }\n      // Move into cache\n      setCommittedValue(cachedContainerPart, [childPart]);\n      insertPart(cachedContainerPart, undefined, childPart);\n    }\n    // If the new value is a TemplateResult and the previous value is not,\n    // or is a different Template as the previous value, restore the child\n    // part from the cache.\n    if (isTemplateResult(v)) {\n      if (!isTemplateResult(this._value) || this._value.strings !== v.strings) {\n        const cachedContainerPart = this._templateCache.get(v.strings);\n        if (cachedContainerPart !== undefined) {\n          // Move the cached part back into the container part value\n          const partValue = getCommittedValue(\n            cachedContainerPart\n          ) as Array<ChildPart>;\n          const cachedPart = partValue.pop()!;\n          // Move cached part back into DOM\n          clearPart(containerPart);\n          insertPart(containerPart, undefined, cachedPart);\n          setCommittedValue(containerPart, [cachedPart]);\n        }\n      }\n      this._value = v;\n    } else {\n      this._value = undefined;\n    }\n    return this.render(v);\n  }\n}\n\n/**\n * Enables fast switching between multiple templates by caching the DOM nodes\n * and TemplateInstances produced by the templates.\n *\n * Example:\n *\n * ```js\n * let checked = false;\n *\n * html`\n *   ${cache(checked ? html`input is checked` : html`input is not checked`)}\n * `\n * ```\n */\nexport const cache = directive(CacheDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {CacheDirective};\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of class names to truthy values.\n */\nexport interface ClassInfo {\n  readonly [name: string]: string | boolean | number;\n}\n\nclass ClassMapDirective extends Directive {\n  /**\n   * Stores the ClassInfo object applied to a given AttributePart.\n   * Used to unset existing values when a new ClassInfo object is applied.\n   */\n  private _previousClasses?: Set<string>;\n  private _staticClasses?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        '`classMap()` can only be used in the `class` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(classInfo: ClassInfo) {\n    // Add spaces to ensure separation from static classes\n    return (\n      ' ' +\n      Object.keys(classInfo)\n        .filter((key) => classInfo[key])\n        .join(' ') +\n      ' '\n    );\n  }\n\n  override update(part: AttributePart, [classInfo]: DirectiveParameters<this>) {\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      if (part.strings !== undefined) {\n        this._staticClasses = new Set(\n          part.strings\n            .join(' ')\n            .split(/\\s/)\n            .filter((s) => s !== '')\n        );\n      }\n      for (const name in classInfo) {\n        if (classInfo[name] && !this._staticClasses?.has(name)) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n\n    const classList = part.element.classList;\n\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that we don't require down-level\n    // iteration.\n    this._previousClasses.forEach((name) => {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses!.delete(name);\n      }\n    });\n\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (\n        value !== this._previousClasses.has(name) &&\n        !this._staticClasses?.has(name)\n      ) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsey, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {ClassMapDirective};\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {noChange, Part} from '../lit-html.js';\nimport {directive, Directive, DirectiveParameters} from '../directive.js';\n\n// A sentinal that indicates guard() hasn't rendered anything yet\nconst initialValue = {};\n\nclass GuardDirective extends Directive {\n  private _previousValue: unknown = initialValue;\n\n  render(_value: unknown, f: () => unknown) {\n    return f();\n  }\n\n  override update(_part: Part, [value, f]: DirectiveParameters<this>) {\n    if (Array.isArray(value)) {\n      // Dirty-check arrays by item\n      if (\n        Array.isArray(this._previousValue) &&\n        this._previousValue.length === value.length &&\n        value.every((v, i) => v === (this._previousValue as Array<unknown>)[i])\n      ) {\n        return noChange;\n      }\n    } else if (this._previousValue === value) {\n      // Dirty-check non-arrays by identity\n      return noChange;\n    }\n\n    // Copy the value if it's an array so that if it's mutated we don't forget\n    // what the previous values were.\n    this._previousValue = Array.isArray(value) ? Array.from(value) : value;\n    const r = this.render(value, f);\n    return r;\n  }\n}\n\n/**\n * Prevents re-render of a template function until a single value or an array of\n * values changes.\n *\n * Values are checked against previous values with strict equality (`===`), and\n * so the check won't detect nested property changes inside objects or arrays.\n * Arrays values have each item checked against the previous value at the same\n * index with strict equality. Nested arrays are also checked only by strict\n * equality.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([user.id, company.id], () => html`...`)}\n *   </div>\n * `\n * ```\n *\n * In this case, the template only rerenders if either `user.id` or `company.id`\n * changes.\n *\n * guard() is useful with immutable data patterns, by preventing expensive work\n * until data updates.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n *   </div>\n * `\n * ```\n *\n * In this case, items are mapped over only when the array reference changes.\n *\n * @param value the value to check before re-rendering\n * @param f the template function\n */\nexport const guard = directive(GuardDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {GuardDirective};\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange, nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\nimport {isSingleExpression, setCommittedValue} from '../directive-helpers.js';\n\nclass LiveDirective extends Directive {\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      !(\n        partInfo.type === PartType.PROPERTY ||\n        partInfo.type === PartType.ATTRIBUTE ||\n        partInfo.type === PartType.BOOLEAN_ATTRIBUTE\n      )\n    ) {\n      throw new Error(\n        'The `live` directive is not allowed on child or event bindings'\n      );\n    }\n    if (!isSingleExpression(partInfo)) {\n      throw new Error('`live` bindings can only contain a single expression');\n    }\n  }\n\n  render(value: unknown) {\n    return value;\n  }\n\n  override update(part: AttributePart, [value]: DirectiveParameters<this>) {\n    if (value === noChange || value === nothing) {\n      return value;\n    }\n    const element = part.element;\n    const name = part.name;\n\n    if (part.type === PartType.PROPERTY) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (value === (element as any)[name]) {\n        return noChange;\n      }\n    } else if (part.type === PartType.BOOLEAN_ATTRIBUTE) {\n      if (!!value === element.hasAttribute(name)) {\n        return noChange;\n      }\n    } else if (part.type === PartType.ATTRIBUTE) {\n      if (element.getAttribute(name) === String(value)) {\n        return noChange;\n      }\n    }\n    // Resets the part's value, causing its dirty-check to fail so that it\n    // always sets the value.\n    setCommittedValue(part);\n    return value;\n  }\n}\n\n/**\n * Checks binding values against live DOM values, instead of previously bound\n * values, when determining whether to update the value.\n *\n * This is useful for cases where the DOM value may change from outside of\n * lit-html, such as with a binding to an `<input>` element's `value` property,\n * a content editable elements text, or to a custom element that changes it's\n * own properties or attributes.\n *\n * In these cases if the DOM value changes, but the value set through lit-html\n * bindings hasn't, lit-html won't know to update the DOM value and will leave\n * it alone. If this is not what you want--if you want to overwrite the DOM\n * value with the bound value no matter what--use the `live()` directive:\n *\n * ```js\n * html`<input .value=${live(x)}>`\n * ```\n *\n * `live()` performs a strict equality check agains the live DOM value, and if\n * the new value is equal to the live value, does nothing. This means that\n * `live()` should not be used when the binding will cause a type conversion. If\n * you use `live()` with an attribute binding, make sure that only strings are\n * passed in, or the binding will update every render.\n */\nexport const live = directive(LiveDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {LiveDirective};\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot\nconst lastElementForCallback: WeakMap<Function, Element | undefined> =\n  new WeakMap();\n\nexport type RefOrCallback = Ref | ((el: Element | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context: unknown;\n\n  render(_ref: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set)\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForCallback.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\nimport {\n  insertPart,\n  getCommittedValue,\n  removePart,\n  setCommittedValue,\n  setChildPartValue,\n} from '../directive-helpers.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map<unknown, number>();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\nclass RepeatDirective extends Directive {\n  private _itemKeys?: unknown[];\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('repeat() can only be used in text expressions');\n    }\n  }\n\n  private _getValuesAndKeys<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    let keyFn: KeyFn<T> | undefined;\n    if (template === undefined) {\n      template = keyFnOrTemplate;\n    } else if (keyFnOrTemplate !== undefined) {\n      keyFn = keyFnOrTemplate as KeyFn<T>;\n    }\n    const keys = [];\n    const values = [];\n    let index = 0;\n    for (const item of items) {\n      keys[index] = keyFn ? keyFn(item, index) : index;\n      values[index] = template!(item, index);\n      index++;\n    }\n    return {\n      values,\n      keys,\n    };\n  }\n\n  render<T>(items: Iterable<T>, template: ItemTemplate<T>): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    return this._getValuesAndKeys(items, keyFnOrTemplate, template).values;\n  }\n\n  override update<T>(\n    containerPart: ChildPart,\n    [items, keyFnOrTemplate, template]: [\n      Iterable<T>,\n      KeyFn<T> | ItemTemplate<T>,\n      ItemTemplate<T>\n    ]\n  ) {\n    // Old part & key lists are retrieved from the last update (which may\n    // be primed by hydration)\n    const oldParts = getCommittedValue(\n      containerPart\n    ) as Array<ChildPart | null>;\n    const {values: newValues, keys: newKeys} = this._getValuesAndKeys(\n      items,\n      keyFnOrTemplate,\n      template\n    );\n\n    // We check that oldParts, the committed value, is an Array as an\n    // indicator that the previous value came from a repeat() call. If\n    // oldParts is not an Array then this is the first render and we return\n    // an array for lit-html's array handling to render, and remember the\n    // keys.\n    if (!Array.isArray(oldParts)) {\n      this._itemKeys = newKeys;\n      return newValues;\n    }\n\n    // In SSR hydration it's possible for oldParts to be an arrray but for us\n    // to not have item keys because the update() hasn't run yet. We set the\n    // keys to an empty array. This will cause all oldKey/newKey comparisons\n    // to fail and execution to fall to the last nested brach below which\n    // reuses the oldPart.\n    const oldKeys = (this._itemKeys ??= []);\n\n    // New part list will be built up as we go (either reused from\n    // old parts or created for new keys in this update). This is\n    // saved in the above cache at the end of the update.\n    const newParts: ChildPart[] = [];\n\n    // Maps from key to index for current and previous update; these\n    // are generated lazily only when needed as a performance\n    // optimization, since they are only required for multiple\n    // non-contiguous changes in the list, which are less common.\n    let newKeyToIndexMap!: Map<unknown, number>;\n    let oldKeyToIndexMap!: Map<unknown, number>;\n\n    // Head and tail pointers to old parts and new values\n    let oldHead = 0;\n    let oldTail = oldParts.length - 1;\n    let newHead = 0;\n    let newTail = newValues.length - 1;\n\n    // Overview of O(n) reconciliation algorithm (general approach\n    // based on ideas found in ivi, vue, snabbdom, etc.):\n    //\n    // * We start with the list of old parts and new values (and\n    //   arrays of their respective keys), head/tail pointers into\n    //   each, and we build up the new list of parts by updating\n    //   (and when needed, moving) old parts or creating new ones.\n    //   The initial scenario might look like this (for brevity of\n    //   the diagrams, the numbers in the array reflect keys\n    //   associated with the old parts or new values, although keys\n    //   and parts/values are actually stored in parallel arrays\n    //   indexed using the same head/tail pointers):\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n    //                                      item order\n    //      newHead ^                 ^ newTail\n    //\n    // * Iterate old & new lists from both sides, updating,\n    //   swapping, or removing parts at the head/tail locations\n    //   until neither head nor tail can move.\n    //\n    // * Example below: keys at head pointers match, so update old\n    //   part 0 in-place (no need to move it) and record part 0 in\n    //   the `newParts` list. The last thing we do is advance the\n    //   `oldHead` and `newHead` pointers (will be reflected in the\n    //   next diagram).\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //      newHead ^                 ^ newTail\n    //\n    // * Example below: head pointers don't match, but tail\n    //   pointers do, so update part 6 in place (no need to move\n    //   it), and record part 6 in the `newParts` list. Last,\n    //   advance the `oldTail` and `oldHead` pointers.\n    //\n    //         oldHead v              v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n    //                                      & newTail\n    //         newHead ^              ^ newTail\n    //\n    // * If neither head nor tail match; next check if one of the\n    //   old head/tail items was removed. We first need to generate\n    //   the reverse map of new keys to index (`newKeyToIndexMap`),\n    //   which is done once lazily as a performance optimization,\n    //   since we only hit this case if multiple non-contiguous\n    //   changes were made. Note that for contiguous removal\n    //   anywhere in the list, the head and tails would advance\n    //   from either end and pass each other before we get to this\n    //   case and removals would be handled in the final while loop\n    //   without needing to generate the map.\n    //\n    // * Example below: The key at `oldTail` was removed (no longer\n    //   in the `newKeyToIndexMap`), so remove that part from the\n    //   DOM and advance just the `oldTail` pointer.\n    //\n    //         oldHead v           v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n    //         newHead ^           ^ newTail\n    //\n    // * Once head and tail cannot move, any mismatches are due to\n    //   either new or moved items; if a new key is in the previous\n    //   \"old key to old index\" map, move the old part to the new\n    //   location, otherwise create and insert a new part. Note\n    //   that when moving an old part we null its position in the\n    //   oldParts array if it lies between the head and tail so we\n    //   know to skip it when the pointers get there.\n    //\n    // * Example below: neither head nor tail match, and neither\n    //   were removed; so find the `newHead` key in the\n    //   `oldKeyToIndexMap`, and move that old part's DOM into the\n    //   next head position (before `oldParts[oldHead]`). Last,\n    //   null the part in the `oldPart` array since it was\n    //   somewhere in the remaining oldParts still to be scanned\n    //   (between the head and tail pointers) so that we know to\n    //   skip that old part on future iterations.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n    //                                      newHead\n    //         newHead ^           ^ newTail\n    //\n    // * Note that for moves/insertions like the one above, a part\n    //   inserted at the head pointer is inserted before the\n    //   current `oldParts[oldHead]`, and a part inserted at the\n    //   tail pointer is inserted before `newParts[newTail+1]`. The\n    //   seeming asymmetry lies in the fact that new parts are\n    //   moved into place outside in, so to the right of the head\n    //   pointer are old parts, and to the right of the tail\n    //   pointer are new parts.\n    //\n    // * We always restart back from the top of the algorithm,\n    //   allowing matching and simple updates in place to\n    //   continue...\n    //\n    // * Example below: the head pointers once again match, so\n    //   simply update part 1 and record it in the `newParts`\n    //   array.  Last, advance both head pointers.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //            newHead ^        ^ newTail\n    //\n    // * As mentioned above, items that were moved as a result of\n    //   being stuck (the final else clause in the code below) are\n    //   marked with null, so we always advance old pointers over\n    //   these so we're comparing the next actual old value on\n    //   either end.\n    //\n    // * Example below: `oldHead` is null (already placed in\n    //   newParts), so advance `oldHead`.\n    //\n    //            oldHead v     v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n    //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //               newHead ^     ^ newTail\n    //\n    // * Note it's not critical to mark old parts as null when they\n    //   are moved from head to tail or tail to head, since they\n    //   will be outside the pointer range and never visited again.\n    //\n    // * Example below: Here the old tail key matches the new head\n    //   key, so the part at the `oldTail` position and move its\n    //   DOM to the new head position (before `oldParts[oldHead]`).\n    //   Last, advance `oldTail` and `newHead` pointers.\n    //\n    //               oldHead v  v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n    //                                     advance oldTail & newHead\n    //               newHead ^     ^ newTail\n    //\n    // * Example below: Old and new head keys match, so update the\n    //   old head part in place, and advance the `oldHead` and\n    //   `newHead` pointers.\n    //\n    //               oldHead v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n    //                                      newHead\n    //                  newHead ^  ^ newTail\n    //\n    // * Once the new or old pointers move past each other then all\n    //   we have left is additions (if old list exhausted) or\n    //   removals (if new list exhausted). Those are handled in the\n    //   final while loops at the end.\n    //\n    // * Example below: `oldHead` exceeded `oldTail`, so we're done\n    //   with the main loop.  Create the remaining part and insert\n    //   it at the new head position, and the update is complete.\n    //\n    //                   (oldHead > oldTail)\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //                     newHead ^ newTail\n    //\n    // * Note that the order of the if/else clauses is not\n    //   important to the algorithm, as long as the null checks\n    //   come first (to ensure we're always working on valid old\n    //   parts) and that the final else clause comes last (since\n    //   that's where the expensive moves occur). The order of\n    //   remaining clauses is is just a simple guess at which cases\n    //   will be most common.\n    //\n    // * Note, we could calculate the longest\n    //   increasing subsequence (LIS) of old items in new position,\n    //   and only move those not in the LIS set. However that costs\n    //   O(nlogn) time and adds a bit more code, and only helps\n    //   make rare types of mutations require fewer moves. The\n    //   above handles removes, adds, reversal, swaps, and single\n    //   moves of contiguous items in linear time, in the minimum\n    //   number of moves. As the number of multiple moves where LIS\n    //   might help approaches a random shuffle, the LIS\n    //   optimization becomes less helpful, so it seems not worth\n    //   the code at this point. Could reconsider if a compelling\n    //   case arises.\n\n    while (oldHead <= oldTail && newHead <= newTail) {\n      if (oldParts[oldHead] === null) {\n        // `null` means old part at head has already been used\n        // below; skip\n        oldHead++;\n      } else if (oldParts[oldTail] === null) {\n        // `null` means old part at tail has already been used\n        // below; skip\n        oldTail--;\n      } else if (oldKeys[oldHead] === newKeys[newHead]) {\n        // Old head matches new head; update in place\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newHead]\n        );\n        oldHead++;\n        newHead++;\n      } else if (oldKeys[oldTail] === newKeys[newTail]) {\n        // Old tail matches new tail; update in place\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newTail]\n        );\n        oldTail--;\n        newTail--;\n      } else if (oldKeys[oldHead] === newKeys[newTail]) {\n        // Old head matches new tail; update and move to new tail\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newTail]\n        );\n        insertPart(containerPart, newParts[newTail + 1], oldParts[oldHead]!);\n        oldHead++;\n        newTail--;\n      } else if (oldKeys[oldTail] === newKeys[newHead]) {\n        // Old tail matches new head; update and move to new head\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newHead]\n        );\n        insertPart(containerPart, oldParts[oldHead]!, oldParts[oldTail]!);\n        oldTail--;\n        newHead++;\n      } else {\n        if (newKeyToIndexMap === undefined) {\n          // Lazily generate key-to-index maps, used for removals &\n          // moves below\n          newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n          oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n        }\n        if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n          // Old head is no longer in new list; remove\n          removePart(oldParts[oldHead]!);\n          oldHead++;\n        } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n          // Old tail is no longer in new list; remove\n          removePart(oldParts[oldTail]!);\n          oldTail--;\n        } else {\n          // Any mismatches at this point are due to additions or\n          // moves; see if we have an old part we can reuse and move\n          // into place\n          const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n          const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n          if (oldPart === null) {\n            // No old part for this value; create a new one and\n            // insert it\n            const newPart = insertPart(containerPart, oldParts[oldHead]!);\n            setChildPartValue(newPart, newValues[newHead]);\n            newParts[newHead] = newPart;\n          } else {\n            // Reuse old part\n            newParts[newHead] = setChildPartValue(oldPart, newValues[newHead]);\n            insertPart(containerPart, oldParts[oldHead]!, oldPart);\n            // This marks the old part as having been used, so that\n            // it will be skipped in the first two checks above\n            oldParts[oldIndex as number] = null;\n          }\n          newHead++;\n        }\n      }\n    }\n    // Add parts for any remaining new values\n    while (newHead <= newTail) {\n      // For all remaining additions, we insert before last new\n      // tail, since old pointers are no longer valid\n      const newPart = insertPart(containerPart, newParts[newTail + 1]);\n      setChildPartValue(newPart, newValues[newHead]);\n      newParts[newHead++] = newPart;\n    }\n    // Remove any remaining unused old parts\n    while (oldHead <= oldTail) {\n      const oldPart = oldParts[oldHead++];\n      if (oldPart !== null) {\n        removePart(oldPart);\n      }\n    }\n\n    // Save order of new parts for next round\n    this._itemKeys = newKeys;\n    // Directly set part value, bypassing it's dirty-checking\n    setCommittedValue(containerPart, newParts);\n    return noChange;\n  }\n}\n\nexport interface RepeatDirectiveFn {\n  <T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ): unknown;\n  <T>(items: Iterable<T>, template: ItemTemplate<T>): unknown;\n  <T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): unknown;\n}\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * The `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n *\n * ```js\n * html`\n *   <ol>\n *     ${repeat(this.items, (item) => item.id, (item, index) => {\n *       return html`<li>${index}: ${item.name}</li>`;\n *     })}\n *   </ol>\n * `\n * ```\n *\n * **Important**: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive(RepeatDirective) as RepeatDirectiveFn;\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RepeatDirective};\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of CSS properties and values.\n *\n * The key should be either a valid CSS property name string, like\n * `'background-color'`, or a valid JavaScript camel case property name\n * for CSSStyleDeclaration like `backgroundColor`.\n */\nexport interface StyleInfo {\n  readonly [name: string]: string | undefined | null;\n}\n\nclass StyleMapDirective extends Directive {\n  _previousStyleProperties?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'style' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        'The `styleMap` directive must be used in the `style` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(styleInfo: StyleInfo) {\n    return Object.keys(styleInfo).reduce((style, prop) => {\n      const value = styleInfo[prop];\n      if (value == null) {\n        return style;\n      }\n      // Convert property names from camel-case to dash-case, i.e.:\n      //  `backgroundColor` -> `background-color`\n      // Vendor-prefixed names need an extra `-` appended to front:\n      //  `webkitAppearance` -> `-webkit-appearance`\n      // Exception is any property name containing a dash, including\n      // custom properties; we assume these are already dash-cased i.e.:\n      //  `--my-button-color` --> `--my-button-color`\n      prop = prop\n        .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')\n        .toLowerCase();\n      return style + `${prop}:${value};`;\n    }, '');\n  }\n\n  override update(part: AttributePart, [styleInfo]: DirectiveParameters<this>) {\n    const {style} = part.element as HTMLElement;\n\n    if (this._previousStyleProperties === undefined) {\n      this._previousStyleProperties = new Set();\n      for (const name in styleInfo) {\n        this._previousStyleProperties.add(name);\n      }\n      return this.render(styleInfo);\n    }\n\n    // Remove old properties that no longer exist in styleInfo\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    this._previousStyleProperties!.forEach((name) => {\n      // If the name isn't in styleInfo or it's null/undefined\n      if (styleInfo[name] == null) {\n        this._previousStyleProperties!.delete(name);\n        if (name.includes('-')) {\n          style.removeProperty(name);\n        } else {\n          // Note reset using empty string (vs null) as IE11 does not always\n          // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = '';\n        }\n      }\n    });\n\n    // Add or update properties\n    for (const name in styleInfo) {\n      const value = styleInfo[name];\n      if (value != null) {\n        this._previousStyleProperties.add(name);\n        if (name.includes('-')) {\n          style.setProperty(name, value);\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = value;\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS properties. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n */\nexport const styleMap = directive(StyleMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {StyleMapDirective};\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nclass TemplateContentDirective extends Directive {\n  private _previousTemplate?: HTMLTemplateElement;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('templateContent can only be used in child bindings');\n    }\n  }\n\n  render(template: HTMLTemplateElement) {\n    if (this._previousTemplate === template) {\n      return noChange;\n    }\n    this._previousTemplate = template;\n    return document.importNode(template.content, true);\n  }\n}\n\n/**\n * Renders the content of a template element as HTML.\n *\n * Note, the template should be developer controlled and not user controlled.\n * Rendering a user-controlled template with this directive\n * could lead to cross-site-scripting vulnerabilities.\n */\nexport const templateContent = directive(TemplateContentDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {TemplateContentDirective};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTMLDirective extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  private _value: unknown = nothing;\n  private _templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() can only be used in child bindings`\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange | undefined | null) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return (this._value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() called with a non-string value`\n      );\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value] as unknown as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: (this.constructor as typeof UnsafeHTMLDirective)\n        .resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {directive} from '../directive.js';\nimport {UnsafeHTMLDirective} from './unsafe-html.js';\n\nconst SVG_RESULT = 2;\n\nclass UnsafeSVGDirective extends UnsafeHTMLDirective {\n  static override directiveName = 'unsafeSVG';\n  static override resultType = SVG_RESULT;\n}\n\n/**\n * Renders the result as SVG, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeSVG = directive(UnsafeSVGDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {UnsafeSVGDirective};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {directive} from '../directive.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef} from './private-async-helpers.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private __lastRenderedIndex: number = _infinity;\n  private __values: unknown[] = [];\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  render(...args: Array<unknown>) {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  override update(_part: Part, args: Array<unknown>) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async (result: unknown) => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n\n    return noChange;\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n","export {\n    TemplateResult,\n    HTMLTemplateResult,\n    SVGTemplateResult,\n    RenderOptions,\n    html,\n    svg,\n    render,\n    noChange,\n    nothing,\n} from 'lit-html';\n\nimport {\n    _$LH,\n    AttributePart,\n    PropertyPart,\n    BooleanAttributePart,\n    EventPart,\n    ElementPart,\n} from 'lit-html';\nexport const _Σ = {\n    AttributePart: _$LH._AttributePart as unknown as AttributePart,\n    PropertyPart: _$LH._PropertyPart as unknown as PropertyPart,\n    BooleanAttributePart: _$LH._BooleanAttributePart as unknown as BooleanAttributePart,\n    EventPart: _$LH._EventPart as unknown as EventPart,\n    ElementPart: _$LH._ElementPart as unknown as ElementPart,\n};\n\nexport {\n    Directive,\n    DirectiveParameters,\n    Part,\n    PartInfo,\n    PartType,\n    directive,\n} from 'lit-html/directive';\nexport { AsyncDirective } from 'lit-html/async-directive';\n\nimport { asyncAppend } from 'lit-html/directives/async-append';\nimport { asyncReplace } from 'lit-html/directives/async-replace';\nimport { cache } from 'lit-html/directives/cache';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { guard } from 'lit-html/directives/guard';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport { live } from 'lit-html/directives/live';\nimport { ref } from 'lit-html/directives/ref';\nexport { Ref, createRef } from 'lit-html/directives/ref';\nimport { repeat } from 'lit-html/directives/repeat';\nimport { styleMap } from 'lit-html/directives/style-map';\nimport { templateContent } from 'lit-html/directives/template-content';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html';\nimport { unsafeSVG } from 'lit-html/directives/unsafe-svg';\nimport { until } from 'lit-html/directives/until';\n\nexport interface TemplateDirectives {\n    asyncAppend: typeof asyncAppend;\n    asyncReplace: typeof asyncReplace;\n    cache: typeof cache;\n    classMap: typeof classMap;\n    guard: typeof guard;\n    ifDefined: typeof ifDefined;\n    live: typeof live;\n    ref: typeof ref;\n    repeat: typeof repeat;\n    styleMap: typeof styleMap;\n    templateContent: typeof templateContent;\n    unsafeHTML: typeof unsafeHTML;\n    unsafeSVG: typeof unsafeSVG;\n    until: typeof until;\n}\n\nexport const directives: TemplateDirectives = {\n    asyncAppend,\n    asyncReplace,\n    cache,\n    classMap,\n    guard,\n    ifDefined,\n    live,\n    ref,\n    repeat,\n    styleMap,\n    templateContent,\n    unsafeHTML,\n    unsafeSVG,\n    until,\n};\n\n/**\n * @en Convert from `string` to `TemplateStringsArray`. <br>\n *     This method is helper brigdge for the [[html]] or the [[svg]] are able to received plain string.\n * @ja `string` を `TemplateStringsArray`に変換. <br>\n *     [[html]] や [[svg]] が文字列を受け付けるためのブリッジメソッド\n *\n * @example <br>\n *\n * ```ts\n * import { toTemplateStringsArray as bridge } from '@cdp/extension-template';\n *\n * const raw = '<p>Hello Raw String</p>';\n * render(html(bridge(raw)), document.body);\n * ```\n *\n * @param src\n *  - `en` plain string. ex) [[JST]] returned value.\n *  - `ja` プレーン文字列. ex) [[JST]] の戻り値などを想定\n */\nexport const toTemplateStringsArray = (src: string): TemplateStringsArray => {\n    const ta = [src] as { raw?: string[]; };\n    ta.raw = [src];\n    return ta as unknown as TemplateStringsArray;\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\n\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = <T>(value: T) => value ?? nothing;\n"]}